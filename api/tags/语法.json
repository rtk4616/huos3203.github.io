{"name":"语法","postlist":[{"title":"从UIKit到AppKit","slug":"macOS/从UIKit到AppKit","date":"2017-03-03T17:55:16.000Z","updated":"2017-03-03T17:55:16.000Z","comments":true,"path":"api/articles/macOS/从UIKit到AppKit.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/ViewEffectsInspector.jpg?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><h3 id=\"NSWindowController\"><a href=\"#NSWindowController\" class=\"headerlink\" title=\"NSWindowController\"></a>NSWindowController</h3><p>在<code>Mac</code>上应用都支持多窗口（<code>NSWindowController</code>），<code>AppKit</code> 中都有 <code>NSWindowController</code>担当着类似在<code>iOS</code>中的<code>view controller</code>处理的任务。</p>\n<blockquote>\n<p><code>window</code>在<code>iOS</code>占据整个屏幕，几乎不怎么不用。</p>\n<h3 id=\"NSViewController\"><a href=\"#NSViewController\" class=\"headerlink\" title=\"NSViewController\"></a>NSViewController</h3><p><code>AppKit</code> 中的 <code>NSViewController</code>默认不支持交互，缺少生命周期相关方法和<code>UIKit</code>中熟悉的特性。<br>但在OS X 10.10 Yosemite之后，<code>NSViewController</code>改进很多，默认支持交互中的响应链。</p>\n</blockquote>\n<h3 id=\"NSWindow-和-UIWindow\"><a href=\"#NSWindow-和-UIWindow\" class=\"headerlink\" title=\"NSWindow 和 UIWindow\"></a>NSWindow 和 UIWindow</h3><p>在<code>UIKit</code>中<code>UIWindow</code>是一个 <code>view</code> 的子类.<br>在<code>AppKit</code>中<code>NSWindow</code>用 <code>contentView</code> 属性持有一个指向其顶层 <code>view</code> 的引用。</p>\n<h2 id=\"响应者链（responder-chain）\"><a href=\"#响应者链（responder-chain）\" class=\"headerlink\" title=\"响应者链（responder chain）\"></a>响应者链（responder chain）</h2><p>如果你在为 OS X 10.9 或者更低版本的系统开发，请注意在默认情况下<code>view controller</code> 并不是响应者链的一环。相反，事件会沿着视图树向上传递然后直接到达 <code>window</code> 和 <code>window</code> <code>controller</code>。在这种情况下，如果你想在 <code>view controller</code> 处理事件，你需要手动把它添加到响应者链中。</p>\n<h3 id=\"Target-Action消息传递方式\"><a href=\"#Target-Action消息传递方式\" class=\"headerlink\" title=\"Target-Action消息传递方式\"></a>Target-Action消息传递方式</h3><p><code>Target-Action</code> 是回应 <code>UI 事件</code>时典型的消息传递方式。<code>iOS</code> 上的 <code>UIControl</code> 和 <code>Mac</code> 上的 <code>NSControl/NSCell</code> 都支持这个机制。<br><code>Target-Action</code> 在消息的发送者和接收者之间建立了一个松散的关系。消息的接收者不知道发送者，甚至消息的发送者也不知道消息的接收者会是什么。如果 <code>target</code> 是 <code>nil</code>，<code>action</code> 会在响应链 (responder chain) 中被传递下去，直到找到一个响应它的对象。</p>\n<h4 id=\"传递机制的局限\"><a href=\"#传递机制的局限\" class=\"headerlink\" title=\"传递机制的局限\"></a>传递机制的局限</h4><p>基于 <code>target-action</code> 传递机制的一个局限是，发送的消息不能携带自定义的信息：</p>\n<ol>\n<li>在<code>iOS</code> 中，可以选择性的把发送者和触发 <code>action</code> 的事件作为参数。</li>\n<li>在 <code>Mac</code> 平台上 <code>action</code> 方法的第一个参数永远是发送者，否则将不视为无效方法。<br>在<code>AppKit</code>唯一有效的<code>action</code> 方法声明方式：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)performAction:(<span class=\"keyword\">id</span>)sender;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"控件关联Action事件的区别\"><a href=\"#控件关联Action事件的区别\" class=\"headerlink\" title=\"控件关联Action事件的区别\"></a>控件关联Action事件的区别</h4><p><code>iOS</code> 上的 <code>UIControl</code> 和 <code>Mac</code> 上的 <code>NSControl/NSCell</code> 都支持这个机制。</p>\n<ol>\n<li>在 <code>iOS</code> 中，每个控件可以通过<code>addTarget:action:forControlEvents:</code>和多个 <code>target-action</code> 关联。</li>\n<li>在<code>AppKit</code>中通常一个<code>控件</code>仅对应一个 <code>target-action</code>对。</li>\n</ol>\n<h2 id=\"View视图系统\"><a href=\"#View视图系统\" class=\"headerlink\" title=\"View视图系统\"></a>View视图系统</h2><p>因为历史遗留问题，<code>Mac</code> 的视图系统和 <code>iOS</code>的视图系统有很大区别。</p>\n<ol>\n<li>绘图处理器差异<br><code>iOS</code>由 <code>Core Animation layer</code> 驱动，使用<code>GPU</code>处理。<br><code>AppKit</code>视图系统相关的任务主要靠 <code>CPU</code> 处理，因为在<code>AppKit</code>设计之初，<code>GPU</code>还没有诞生。<br>Mac开发参考资料：<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaViewsGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40002978\" target=\"_blank\" rel=\"noopener\">Introduction to View Programming Guide for Cocoa</a><br><a href=\"https://developer.apple.com/videos/wwdc/2012/#217\" target=\"_blank\" rel=\"noopener\">WWDC session：Layer-Backed Views: AppKit + Core Animation</a><br><a href=\"https://developer.apple.com/videos/wwdc/2013/#215\" target=\"_blank\" rel=\"noopener\">Optimizing Drawing and Scrolling</a></li>\n</ol>\n<h3 id=\"Layer-Backed-View-iOS反哺AppKit层支持视图\"><a href=\"#Layer-Backed-View-iOS反哺AppKit层支持视图\" class=\"headerlink\" title=\"Layer-Backed View: iOS反哺AppKit层支持视图\"></a>Layer-Backed View: iOS反哺AppKit层支持视图</h3><ol>\n<li><code>iOS</code>反哺<code>AppKit</code><br>默认情况下，<code>AppKit</code> 的 <code>view</code> 不是由 <code>Core Animation layer</code> 驱动的；<code>AppKit</code> 整合 <code>layer-backing</code> 是 <code>iOS</code> 反哺的结果。</li>\n</ol>\n<h4 id=\"layer-backing启用／禁用-wantsLayer\"><a href=\"#layer-backing启用／禁用-wantsLayer\" class=\"headerlink\" title=\"layer backing启用／禁用:wantsLayer\"></a>layer backing启用／禁用:wantsLayer</h4><p><code>AppKit</code> 区分 <code>layer-backed view</code> 和 <code>layer-hosting view</code>，可以在每个视图树的根节点启用或者禁用 <code>layer backing</code>。<br>启用 <code>layer backing</code></p>\n<ol>\n<li>方法一：把窗口的 <code>contentView</code> 的 <code>wantsLayer</code> 属性设置为 <code>YES</code></li>\n<li>方法二：在 <code>Interface Builder</code> 的 <code>View Effects Inspector</code> 面板完成<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/ViewEffectsInspector.jpg?imageMogr2/2/w/800\">\n这会导致 <code>window</code> 的视图树中所有的 <code>view</code> 都启用 <code>layer backing</code>，这样就没必要反复设置每个 <code>view</code> 的 <code>wantsLayer</code> 属性了。</li>\n</ol>\n<h4 id=\"修改layer属性\"><a href=\"#修改layer属性\" class=\"headerlink\" title=\"修改layer属性\"></a>修改layer属性</h4><p>在<code>AppKit</code>上开启<code>layer backing</code>之后，<code>layer</code>的拥有者是<code>AppKit</code>，这就意味着不能直接编辑 <code>layer</code>的属性。<br>在 <code>iOS</code> 上可以直接编辑：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.layer.backgroundColor = [<span class=\"built_in\">UIColor</span> redColor].CGColor;</span><br></pre></td></tr></table></figure><br>在 <code>AppKit</code>编辑<code>layer</code>属性需要以下步骤：</p>\n<ol>\n<li>重写 <code>NSView</code> 的 <code>wantsUpdateLayer</code> 方法并返回 <code>YES</code>,这能让你可以改变 <code>layer</code> 的属性。<br>这样以来，在<code>view</code> 更新周期中，将不会再调用 <code>view</code> 的 <code>drawRect:</code> 方法。取而代之，调用<code>updateLayer</code>方法来更新<code>Layer</code>。<br>举个例子，用这方法去实现一个非常简单的有纯色背景的 <code>view</code>（没错，<code>NSView</code> 没有<code>backgroundColor</code> 属性）：<br>这个例子的前提是这个 <code>view</code> 的<code>父 view</code> 已经为其视图树启用了 <code>layer backing</code>。<br>另一种可行的实现则只需要重写 <code>drawRect:</code> 方法并在其中绘制背景颜色。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ColoredView</span>: <span class=\"title\">NSView</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSColor</span> *backgroundColor;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ColoredView</span></span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)wantsUpdateLayer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)updateLayer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.layer.backgroundColor = <span class=\"keyword\">self</span>.backgroundColor.CGColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setBackgroundColor:(<span class=\"built_in\">NSColor</span> *)backgroundColor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _backgroundColor = backgroundColor;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setNeedsDisplay:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"合并-Layer\"><a href=\"#合并-Layer\" class=\"headerlink\" title=\"合并 Layer\"></a>合并 Layer</h4><p>当APP启动过多的<code>layer-backed view</code> 会带来巨大的内存消耗（每一个 <code>layer</code> 有其自己的 <code>backing store</code>，还有可能和其他 <code>view</code>的 <code>backing store</code> 重叠）而且会带来潜在的合成这些 <code>layer</code> 的消耗。</p>\n<h5 id=\"canDrawSubviewsIntoLayer合并Layer\"><a href=\"#canDrawSubviewsIntoLayer合并Layer\" class=\"headerlink\" title=\"canDrawSubviewsIntoLayer合并Layer\"></a>canDrawSubviewsIntoLayer合并Layer</h5><p>从 OS X 10.9 开始，如果不单独对一个 <code>view</code> 中的子 <code>view</code> 做动画，可以通过设置 <code>canDrawSubviewsIntoLayer</code> 属性来让 <code>AppKit</code> 合并一个<code>视图树</code>中所有 <code>layer</code> 的内容到一个共有的 <code>layer</code>。</p>\n<h5 id=\"隐式layer-backed合并Layer\"><a href=\"#隐式layer-backed合并Layer\" class=\"headerlink\" title=\"隐式layer-backed合并Layer\"></a>隐式layer-backed合并Layer</h5><p>所有隐式 <code>layer-backed</code> 的<code>子 view</code>（比如，没有显式地对这些<code>子 view</code> 设置 <code>wantsLayer = YES</code>）现在将会被绘制到同一个 <code>layer</code> 中。不过<code>wantsLayer</code> 设置为 <code>YES</code> 的<code>子 view</code> 仍然持有它们自己的 <code>backing layer</code>， 而且不管 <code>wantsUpdateLayer</code> 返回什么，它们的 <code>drawRect:</code> 方法仍然会被调用。</p>\n<h4 id=\"Layer-重绘策略\"><a href=\"#Layer-重绘策略\" class=\"headerlink\" title=\"Layer 重绘策略\"></a>Layer 重绘策略</h4><h5 id=\"layer-backed-view-默认的自动重绘策略\"><a href=\"#layer-backed-view-默认的自动重绘策略\" class=\"headerlink\" title=\"layer-backed view 默认的自动重绘策略\"></a>layer-backed view 默认的自动重绘策略</h5><p><code>layer-backed view</code> 会默认设置重绘策略为 <code>NSViewLayerContentsRedrawDuringViewResize</code>。在行为上，这个非 <code>layer-backed view</code> 是类似的，不过如果动画的每一帧都引入一个绘制步骤的话可能会对动画的性能造成不利影响。</p>\n<h5 id=\"设置layer-backed-view手动重绘策略\"><a href=\"#设置layer-backed-view手动重绘策略\" class=\"headerlink\" title=\"设置layer-backed view手动重绘策略\"></a>设置layer-backed view手动重绘策略</h5><ol>\n<li>设置手动重绘策略：把 <code>layerContentsRedrawPolicy</code> 属性设置为 <code>NSViewLayerContentsRedrawOnSetNeedsDisplay</code> </li>\n<li>实现手动重绘操作：调用 <code>-setNeedsDisplay:</code>方法来触发重绘操作<br>这样便由你来决定 <code>layer</code> 的内容何时需要重绘。帧的改变将不再自动触发重绘。</li>\n</ol>\n<h5 id=\"设置view的属性来重绘Layer\"><a href=\"#设置view的属性来重绘Layer\" class=\"headerlink\" title=\"设置view的属性来重绘Layer\"></a>设置view的属性来重绘Layer</h5><ol>\n<li>view中<code>layerContentsPlacement</code>属性：等价<code>layer</code>中的 <code>contentGravity</code> 属性。<br>这个属性允许你指定在调整大小的时候当前的 <code>layer</code> 内容该怎么映射到 <code>layer</code> 上。</li>\n</ol>\n<h3 id=\"Layer-Hosting-View-使用-Core-Animation-layer\"><a href=\"#Layer-Hosting-View-使用-Core-Animation-layer\" class=\"headerlink\" title=\"Layer-Hosting View:使用 Core Animation layer\"></a>Layer-Hosting View:使用 Core Animation layer</h3><p><code>layer-hosting view</code> 是视图树中的叶子节点，使用这种模式可以对<code>layer</code> 及其<code>子 layer</code> 做任何操作，代价是你再也不能给该 <code>view</code> 添加任何<code>子 view</code>。</p>\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><ol>\n<li>为 <code>view</code> 的 <code>layer</code> 属性分配一个 <code>layer 对象</code>，</li>\n<li>设置<code>wantsLayer</code> 为 <code>YES</code><br>这些步骤的顺序是非常关键：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithFrame:(<span class=\"type\">NSRect</span>)frame</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithFrame:frame];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.layer = [[<span class=\"type\">CALayer</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.wantsLayer = <span class=\"type\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n在你设置了自定义的 <code>layer</code> 之后，再设置 <code>wantsLayer</code> 是非常重要的。</li>\n</ol>\n<h3 id=\"其他与-View-相关的陷阱\"><a href=\"#其他与-View-相关的陷阱\" class=\"headerlink\" title=\"其他与 View 相关的陷阱\"></a>其他与 View 相关的陷阱</h3><h4 id=\"坐标系统原点设置左下／左上角\"><a href=\"#坐标系统原点设置左下／左上角\" class=\"headerlink\" title=\"坐标系统原点设置左下／左上角\"></a>坐标系统原点设置左下／左上角</h4><p>通过重写<code>isFlipped</code> 并返回 <code>YES</code> 来恢复到你熟悉的左上角。</p>\n<h4 id=\"View背景颜色属性drawsBackground\"><a href=\"#View背景颜色属性drawsBackground\" class=\"headerlink\" title=\"View背景颜色属性drawsBackground\"></a>View背景颜色属性drawsBackground</h4><p>由于 <code>AppKit</code> 中的 <code>view</code> 没有背景颜色属性可以让你直接设置为 <code>[NSColor clearColor]</code> 来让其变得透明，许多 <code>NSView</code> 的子类比如 <code>NSTextView</code> 和 <code>NSScrollView</code> 开放了一个 <code>drawsBackground</code> 属性，如果你想让这一类 <code>view</code> 透明，你必须设置该属性为 <code>NO</code>。</p>\n<h4 id=\"设置光标追踪区域\"><a href=\"#设置光标追踪区域\" class=\"headerlink\" title=\"设置光标追踪区域\"></a>设置光标追踪区域</h4><p>为了能接收光标进出一个 view 或者在 view 里面移动的事件，你需要创建一个追踪区域。你可以在 <code>NSView</code> 中指定的 <code>updateTrackingAreas</code> 方法中来做这件事情。一个通用的写法看起来是这样子的：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)updateTrackingAreas</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> removeTrackingArea:<span class=\"keyword\">self</span>.trackingArea];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.trackingArea = [[<span class=\"type\">NSTrackingArea</span> alloc] initWithRect:<span class=\"type\">CGRectZero</span> </span><br><span class=\"line\">                                                     options:<span class=\"type\">NSTrackingMouseEnteredAndExited</span>|<span class=\"type\">NSTrackingInVisibleRect</span>|<span class=\"type\">NSTrackingActiveInActiveApp</span></span><br><span class=\"line\">                                                       owner:<span class=\"keyword\">self</span> </span><br><span class=\"line\">                                                    userInfo:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> addTrackingArea:<span class=\"keyword\">self</span>.trackingArea];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"NSCell困惑\"><a href=\"#NSCell困惑\" class=\"headerlink\" title=\"NSCell困惑\"></a>NSCell困惑</h4><p><code>AppKit</code> 的控件之前是由 <code>NSCell</code> 的子类驱动的，可以被所有同类型的控件重用。<br><code>AppKit</code> 最初区分 <code>view</code> 和 <code>cell</code> 是为了节省资源 - <code>view</code> 可以把所有的绘制工作代理给更轻量级的可以被所有同类型的 <code>view</code> 重用的 <code>cell</code> 对象。<br>不要混淆这些 <code>cell</code> 和 <code>UIKit</code> 里 <code>table view</code> 的 <code>cell</code> 及 <code>collection view</code> 的 <code>cell</code>。</p>\n<h5 id=\"自定义一个按钮控件\"><a href=\"#自定义一个按钮控件\" class=\"headerlink\" title=\"自定义一个按钮控件\"></a>自定义一个按钮控件</h5><p>Apple 正在一步步地抛弃这样的实现方法了，但是你还是会时不时碰到这样的问题。<br>举个例子，如果你想创建一个自定义的按钮，</p>\n<ol>\n<li>首先要继承 <code>NSButton</code> 和 <code>NSButtonCell</code></li>\n<li>然后在这个 <code>cell 子类</code>里面进行你自定义的绘制，</li>\n<li>然后通过重写 <code>+[NSControl cellClass]</code>方法告诉自定义按钮使用你的 <code>cell 子类</code></li>\n</ol>\n<h4 id=\"获取-Core-Graphics-上下文\"><a href=\"#获取-Core-Graphics-上下文\" class=\"headerlink\" title=\"获取 Core Graphics 上下文\"></a>获取 Core Graphics 上下文</h4><p>最后，如果你想知道在你自己的 <code>drawRect:</code> 方法里怎么获取当前的 <code>Core Graphics</code> 上下文，答案是 <code>NSGraphicsContext</code> 的 <code>graphicsPort</code> 属性。详细内容请查看 <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/\" target=\"_blank\" rel=\"noopener\">Cocoa Drawing Guide</a>。</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>如果你的 <code>view</code> 不是由 <code>layer</code> 驱动的，那你的动画自然是完全由 <code>CPU</code> 处理，这意味着动画的每一步都必须相应地绘制到 <code>window-backing store</code> 上。</p>\n<h3 id=\"对-layer-backed-view做动画\"><a href=\"#对-layer-backed-view做动画\" class=\"headerlink\" title=\"对 layer-backed view做动画\"></a>对 layer-backed view做动画</h3><p>正如上面说的，在 <code>AppKit</code> 中,这些 <code>layer</code> 由 <code>AppKit</code> 管理，你不应该修改 <code>layer-backed view</code> 中的 <code>layer</code>。 </p>\n<h4 id=\"几何属性\"><a href=\"#几何属性\" class=\"headerlink\" title=\"几何属性\"></a>几何属性</h4><p>与<code>iOS</code> 相反，<code>view</code> 的几何属性并不仅仅是对应的 <code>layer</code> 的几何属性的映射，但 <code>AppKit</code> 却会把 <code>view</code> 内部的几何属性同步到 <code>layer</code>。</p>\n<h4 id=\"的animator-proxy动画\"><a href=\"#的animator-proxy动画\" class=\"headerlink\" title=\"的animator proxy动画\"></a>的animator proxy动画</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.animator.alphaValue = <span class=\"number\">.5</span>;</span><br></pre></td></tr></table></figure>\n<p>在幕后，这句代码会启用 <code>layer</code> 的隐式动画，设置其透明度，然后再次禁用 <code>layer</code> 的隐式动画。</p>\n<h4 id=\"NSAnimationContext动画\"><a href=\"#NSAnimationContext动画\" class=\"headerlink\" title=\"NSAnimationContext动画\"></a>NSAnimationContext动画</h4><ol>\n<li>结束回调<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSAnimationContext</span> runAnimationGroup:^(<span class=\"built_in\">NSAnimationContext</span> *context)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//持续时间</span></span><br><span class=\"line\">    context.duration = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//缓动类型</span></span><br><span class=\"line\">    context.timingFunction = [<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</span><br><span class=\"line\">    view.animator.alphaValue = <span class=\"number\">.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; completionHandler:^&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;]; </span><br></pre></td></tr></table></figure></li>\n<li>无结束回调<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSAnimationContext</span> currentContext].duration = <span class=\"number\">1</span>;</span><br><span class=\"line\">view.animator.alphaValue = <span class=\"number\">.5</span>; </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"启用隐式动画\"><a href=\"#启用隐式动画\" class=\"headerlink\" title=\"启用隐式动画\"></a>启用隐式动画</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSAnimationContext</span> currentContext].allowsImplicitAnimations = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">view.alphaValue = <span class=\"number\">.5</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CAAnimations控制动画\"><a href=\"#CAAnimations控制动画\" class=\"headerlink\" title=\"CAAnimations控制动画\"></a>CAAnimations控制动画</h4><p>使用 <code>CAAnimation</code> 实例更全面地控制动画。和 <code>iOS</code> 相反，你不能直接把它们加到 <code>layer</code> 上（因为 <code>layer</code> 不应该由你来修改），不过你可以使用 <code>NSAnimatablePropertyContainer</code> 协议中定义的 <code>API</code>，<code>NSView</code> 和 <code>NSWindow</code> 已经实现了该协议。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CAKeyframeAnimation</span> *animation = [<span class=\"built_in\">CAKeyframeAnimation</span> animation];</span><br><span class=\"line\">animation.values = @[@<span class=\"number\">1</span>, @<span class=\"number\">.9</span>, @<span class=\"number\">.8</span>, @<span class=\"number\">.7</span>, @<span class=\"number\">.6</span>];</span><br><span class=\"line\">view.animations = @&#123;<span class=\"string\">@\"alphaValue\"</span>: animation&#125;;</span><br><span class=\"line\">view.animator.alphaValue = <span class=\"number\">.5</span>;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h5><p>对于帧动画来说，把 <code>view</code> 的 <code>layerContentsRedrawPolicy</code> 设置为 <code>NSViewLayerContentsRedrawOnSetNeedsDisplay</code> 是非常重要的，不然的话 <code>view</code> 的内容在每一帧都会被重绘。</p>\n<p>很遗憾，<code>NSView</code> 没有开放 <code>Core Animation layer</code> 所有可以进行动画的属性，<code>transform</code> 是其中最重要的例子。看看 Jonathan Willings 的这篇文章，它描述了你可以如何解决这些限制。不过注意，文章中的解决方案是不受官方支持的。</p>\n<p>上面提到的所有东西都适用于 <code>layer-backed view</code>。对于 l<code>ayer-hosting view</code> 来说，你可以直接对 <code>view</code> 的 <code>layer</code> 或者<code>子 layer</code> 使用 <code>CAAnimations</code>，因为你拥有它们的控制权。</p>\n<h3 id=\"文字系统\"><a href=\"#文字系统\" class=\"headerlink\" title=\"文字系统\"></a>文字系统</h3><p>有了 <code>TextKit</code>，<code>iOS 7</code> 终于有了和 <code>Mac</code> 上早就有了的 <code>Cocoa Text System</code> 等效的东西。但 Apple 并不仅仅是把文字系统从 Mac 上转移到 <code>iOS</code>；相反，Apple 对其做了些显著的改变。<br>举个例子，<code>AppKit</code> 开放 <code>NSTypesetter</code> 和 <code>NSGlyphGenerator</code>，你可以通过继承这两者来自定义它们的一些特性。<code>iOS</code> 并不开放这些类，但是你可以通过 <code>NSLayoutManagerDelegate</code> 协议达到定制的目的。<br>总体来说，两个平台的文字系统还是非常相似的，所有你在 <code>iOS</code> 上能做的在 <code>Mac</code> 上都可以做（甚至更多），但对于一些东西，你必须从不同的地方寻找合适的方法实现。</p>\n<h3 id=\"沙盒\"><a href=\"#沙盒\" class=\"headerlink\" title=\"沙盒\"></a>沙盒</h3><p>符合沙盒机制的 <code>Mac 应用</code>才能通过 <code>Mac App Store</code> 销售。然而，我们已经习惯了沙盒机制还没出现之前的 <code>Mac</code> 开发环境，所以有时候会忽视一些你想要实现的功能会和沙盒的限制出现冲突。<br>管理Mac应用对沙盒支持：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/sandbox.jpg?imageMogr2/2/w/800\"></p>\n<h2 id=\"独有特性\"><a href=\"#独有特性\" class=\"headerlink\" title=\"独有特性\"></a>独有特性</h2><p>有很多事情你只能在 Mac 上做，这主要是因为它不同的交互模型和它更为宽松的安全策略。在本期话题中，我们有一些文章深入探讨了其中的一些内容：<a href=\"http://objccn.io/issue-14-4/\" target=\"_blank\" rel=\"noopener\">进程间通讯</a>，<a href=\"http://objccn.io/issue-14-1/\" target=\"_blank\" rel=\"noopener\">使 Mac 应用脚本化</a>,<a href=\"http://objccn.io/issue-14-2/\" target=\"_blank\" rel=\"noopener\">在沙盒中脚本化其他应用</a> , <a href=\"http://objccn.io/issue-14-3/\" target=\"_blank\" rel=\"noopener\">为你的应用构建插件</a>。<br>当然，这只是 Mac 独有特性中很小的一部分，但这给了你一个很好的视角看待 iOS 8 从头开始打造其可扩展性和 app 间通讯。最后，还有很多东西等待你去探索：Drag and Drop，Printing，Bindings，OpenCL 等等，这里仅仅是举几个例子。</p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"视图","path":"api/categories/视图.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"UI","path":"api/tags/UI.json"},{"name":"混编","path":"api/tags/混编.json"}]},{"title":"RxSwift基本概念","slug":"开源库/RxSwift基本概念","date":"2017-03-03T13:01:41.000Z","updated":"2017-09-24T09:18:26.000Z","comments":true,"path":"api/articles/开源库/RxSwift基本概念.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"FRP函数式反应型编程\"><a href=\"#FRP函数式反应型编程\" class=\"headerlink\" title=\"FRP函数式反应型编程\"></a>FRP函数式反应型编程</h2><p>Functional Reactive Programming ， 缩写为 FRP</p>\n<h2 id=\"函数编程\"><a href=\"#函数编程\" class=\"headerlink\" title=\"函数编程\"></a>函数编程</h2><h3 id=\"函数是第一等公民\"><a href=\"#函数是第一等公民\" class=\"headerlink\" title=\"函数是第一等公民\"></a>函数是第一等公民</h3><p>所谓 第一等公民 (first class) ，指的是函数与其他数据类型一样，处于平等地位。既可以赋值给其他变量，也可以作为参数传入另一个函数，或者作为别的函数的返回值。<br>将数组通过指定的函数映射成另一个数组，例如将<code>increment函数</code>作为参数传入数组的<code>map函数</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> increment = &#123; <span class=\"keyword\">return</span> $<span class=\"number\">0</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"built_in\">map</span>(increment)  <span class=\"comment\">// [2,3,4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数式的函数\"><a href=\"#函数式的函数\" class=\"headerlink\" title=\"函数式的函数\"></a>函数式的函数</h3><h4 id=\"map-映射函数\"><a href=\"#map-映射函数\" class=\"headerlink\" title=\"map 映射函数\"></a>map 映射函数</h4><p><code>map</code> 可以把一个数组按照一定的规则转换成另一个数组，定义如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(transform: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span>[]</span><br><span class=\"line\"><span class=\"comment\">//效果</span></span><br><span class=\"line\">[ x1, x2, ... , xn].<span class=\"built_in\">map</span>(f) -&gt; [f(x1), f(x2), ... , f(xn)]</span><br></pre></td></tr></table></figure><br><code>map</code>接受一个把 <code>T</code> 类型的转换成 <code>U</code> 类型的<code>transform</code>函数，最终返回的是 <code>U 类型的集合</code>。</p>\n<h4 id=\"filter-筛选函数\"><a href=\"#filter-筛选函数\" class=\"headerlink\" title=\"filter 筛选函数\"></a>filter 筛选函数</h4><p><code>filter</code>通过在闭包中对每个元素进行逻辑运算，来排除为<code>false</code>的元素<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">filter</span><span class=\"params\">(includeElement: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">Bool</span>) -&gt; [<span class=\"type\">T</span>]</span><br><span class=\"line\"><span class=\"comment\">//实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">32</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredArray  = oldArray.<span class=\"built_in\">filter</span>(&#123; <span class=\"keyword\">return</span> $<span class=\"number\">0</span> &gt; <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">println</span>(filteredArray) <span class=\"comment\">// [45, 32]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"reduce-迭代函数\"><a href=\"#reduce-迭代函数\" class=\"headerlink\" title=\"reduce 迭代函数\"></a>reduce 迭代函数</h4><p><code>reduce</code>函数把<code>U</code>类型集合中的所有元素，以<code>initial</code>为初始值，按照<code>combine</code>规则，逐个迭代并返回一个U类型的对象。<br>定义如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reduce</span>&lt;U&gt;<span class=\"params\">(initial: U, combine: <span class=\"params\">(U, T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span></span><br></pre></td></tr></table></figure><br>reduce 有两个参数，<code>initial</code>是初始值，<code>combine</code>定义规则闭包，闭包有两个输入的参数，一个是原始值，一个是新进来的值，闭包返回的新值作为下一轮循环中的<code>initial</code>值。<br>写几个小例子试一下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">32</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>,&#123;$<span class=\"number\">0</span> + $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 0+10+20+45+32 = 107</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">1</span>,&#123;$<span class=\"number\">0</span> + $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1+10+20+45+32 = 108</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">5</span>,&#123;$<span class=\"number\">0</span> * $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 5*10*20*45*32 = 1440000</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>,+) <span class=\"comment\">// 0+10+20+45+32 = 107</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(sum)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数式和指令式的比较\"><a href=\"#函数式和指令式的比较\" class=\"headerlink\" title=\"函数式和指令式的比较\"></a>函数式和指令式的比较</h3><h2 id=\"响应式编程-Reactive\"><a href=\"#响应式编程-Reactive\" class=\"headerlink\" title=\"响应式编程 - Reactive\"></a>响应式编程 - Reactive</h2><p>在日常开发中，我们经常需要监听某个属性，并且针对该属性的变化做一些处理。比如以下几个场景：</p>\n<ol>\n<li>用户在输入邮箱的时候，监测输入的内容并在界面上提示是否符合邮箱规范。</li>\n<li>用户在修改用户名之后，所有显示用户名的界面都要改为新的用户名。<br>外部输入信号的变化、事件的发生，这些都是典型的外部环境变化。根据外部环境的变化进行响应处理，直观上来讲像是一种自然地反应。我们可以将这种自动对变化作出响应的能力称为反应能力 (Reactive) 。</li>\n</ol>\n<p>那么什么是反应型编程呢？</p>\n<pre><code>Reactive programming is programming with asynchronous data streams.\n反应型编程是异步数据流的编程。\n</code></pre><p>对于移动端来说，异步数据流的概念并不陌生，变量、点击事件、属性、缓存，这些就可以成为数据流。<br>我们可以通过一些简单的 ASCII 字符来演示如何将事件转换成数据流：<br>    –a—b-c—d—X—|–&gt;<br>    a, b, c, d 是具体的值，代表了某个事件<br>    X 表示发生了一个错误<br>    | 是这个流已经结束了的标记<br>    ———-&gt; 是时间轴<br>比如我们要统计用户点击鼠标的次数，那么可以这样：<br>clickStream:    —c—-c–c—-c——c–&gt;<br>                vvvvv map(c becomes 1) vvvv<br>                —1—-1–1—-1——1–&gt;<br>                vvvvvvvvv scan(+) vvvvvvvvv<br>counterStream:  —1—-2–3—-4——5–&gt;<br>反应型编程就是基于这些数据流的编程。而函数式编程则相当于提供了一个工具箱，可以方便的对数据流进行合并、创建和过滤等操作。</p>\n<h2 id=\"swift-函数式编程\"><a href=\"#swift-函数式编程\" class=\"headerlink\" title=\"swift 函数式编程\"></a>swift 函数式编程</h2><p>Swift 是苹果公司在 2014 年推出的编程语言，用于编写 iOS 和 OS X 应用程序。它吸收了很多其它语言的语法特性，例如闭包、元组、泛型、结构体等等，这使得它的语法简洁而灵活。<br>Swift 本身并不是一门函数式语言，不过有一些函数式的方法和特性</p>\n<ol>\n<li>map reduce 等函数式函数</li>\n<li>函数是一等公民</li>\n<li>模式匹配<br>我们并不能因为 Swift 中的一些函数式特性就把它归为函数式语言，但是我们可以利用这些特性进行函数式 Style 的编程。</li>\n</ol>\n<h1 id=\"RxSwift-响应式编程\"><a href=\"#RxSwift-响应式编程\" class=\"headerlink\" title=\"RxSwift 响应式编程\"></a>RxSwift 响应式编程</h1><p><a href=\"https://github.com/ReactiveX/RxSwift/tree/master/Rx.playground\" target=\"_blank\" rel=\"noopener\">Rx.playground</a></p>\n<h2 id=\"Observable观察者模式\"><a href=\"#Observable观察者模式\" class=\"headerlink\" title=\"Observable观察者模式\"></a>Observable观察者模式</h2><p>Rx 的基础：<code>Observable</code> ， <code>Observable&lt;Element&gt;</code> 是观察者模式中可观察的对象，相当于一个事件序列 (GeneratorType)。<br>支持订阅的事件序列，在下文简称为<code>订阅源</code>或<code>可观察者</code>。<br>订阅源的事件队列中包括三种事件类型：</p>\n<ol>\n<li><code>.Next(value)</code>: 表示新的事件数据。</li>\n<li><code>.Completed</code>: 表示事件序列的完结。</li>\n<li><code>.Error</code>: 同样表示完结，但是代表异常导致的完结。</li>\n</ol>\n<h3 id=\"新建订阅源几种快捷方法\"><a href=\"#新建订阅源几种快捷方法\" class=\"headerlink\" title=\"新建订阅源几种快捷方法\"></a>新建订阅源几种快捷方法</h3><ol>\n<li><code>empty</code>是一个空的序列，它只发送 <code>.Completed</code> 消息。<figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br><span class=\"line\">example(<span class=\"string\">\"empty\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> emptySequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = empty()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = emptySequence.subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">                                                <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- empty example ---</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></li>\n<li><code>never</code> 是没有任何元素、也不会发送任何事件的空序列。<figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">- returns: An observable sequence whose observers will never get called.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">never</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br></pre></td></tr></table></figure></li>\n<li><code>just</code> 是只包含一个元素的序列，它会先发送 <code>.Next(value)</code> ，然后发送 <code>.Completed</code><figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">Returns an observable sequence that contains a single element.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">just</span><span class=\"params\">(<span class=\"number\">_</span> element: E)</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">Just</span>(element: element)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>sequenceOf</code> 可以把一系列元素转换成订阅源<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequenceOfElements<span class=\"comment\">/* : Observable&lt;Int&gt; */</span> = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>asObservable方法</code> 将遵守<code>ObservableType</code>协议的对象转为可观察者序列<figure class=\"highlight swift\"><figcaption><span>ObservableType.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ObservableType</span> : <span class=\"title\">ObservableConvertibleType</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Default implementation of converting `ObservableType` to `Observable`.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asObservable</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceFromArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asObservable()</span><br></pre></td></tr></table></figure></li>\n<li><code>failWith</code>创建一个没有元素的序列，只会发送失败 (<code>.Error</code>) 事件。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> erroredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = failWith(error)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = erroredSequence.subscribe &#123; event <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(event)&#125;</span><br><span class=\"line\">--- failWith example ---</span><br><span class=\"line\"><span class=\"type\">Error</span>(<span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Test</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Test error -1.)\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"create自定义订阅源\"><a href=\"#create自定义订阅源\" class=\"headerlink\" title=\"create自定义订阅源\"></a>create自定义订阅源</h3><p><code>create</code> 可以通过闭包创建序列，通过 <code>.on(e: Event)</code> 添加可观察者事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"create\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myJust = &#123; (singleElement: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">                observer.on(.<span class=\"type\">Next</span>(singleElement))</span><br><span class=\"line\">                observer.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = myJust(<span class=\"number\">5</span>).subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- create example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"deferred订阅源的懒加载\"><a href=\"#deferred订阅源的懒加载\" class=\"headerlink\" title=\"deferred订阅源的懒加载\"></a>deferred订阅源的懒加载</h3><p><code>deferred</code>表示当有有新增订阅者第一次订阅了该订阅源时，订阅源才会被创建，且每个订阅者订阅的对象都是内容相同而完全独立的序列。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = deferred &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> just(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// got value</span></span><br><span class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></span><br><span class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">Optional</span>(<span class=\"string\">\"Hello!\"</span>))</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"几种特殊类型的订阅源\"><a href=\"#几种特殊类型的订阅源\" class=\"headerlink\" title=\"几种特殊类型的订阅源\"></a>几种特殊类型的订阅源</h2><p><code>Subject</code> 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 <code>Observable 对象</code>，同时又可以对它的订阅者们发送事件。</p>\n<h3 id=\"PublishSubject-向所有订阅者发送事件队列\"><a href=\"#PublishSubject-向所有订阅者发送事件队列\" class=\"headerlink\" title=\"PublishSubject 向所有订阅者发送事件队列\"></a>PublishSubject 向所有订阅者发送事件队列</h3><p>当<code>PublishSubject</code>类型订阅源事件队列中<code>.on()</code>新增事件时，会触发所有订阅者，一起响应该事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"PublishSubject\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">PublishSubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于PublishSubject的几种补发式订阅源\"><a href=\"#基于PublishSubject的几种补发式订阅源\" class=\"headerlink\" title=\"基于PublishSubject的几种补发式订阅源\"></a>基于PublishSubject的几种补发式订阅源</h3><p>以下几种类型的订阅源，相较第一种仅多了补发历史事件，姑且称为<code>补发式订阅源</code>。</p>\n<h4 id=\"ReplaySubject先向最新订阅者补发所有已发生的事件\"><a href=\"#ReplaySubject先向最新订阅者补发所有已发生的事件\" class=\"headerlink\" title=\"ReplaySubject先向最新订阅者补发所有已发生的事件\"></a>ReplaySubject先向最新订阅者补发所有已发生的事件</h4><p>当<code>ReplaySubject</code>类型的订阅源，新增订阅者时，该类型的订阅源会把之前已发送过的所有事件队列重新补发给这个最新订阅者。这样就迫使订阅者会对从历史的事件队列逐一响应。<br><code>bufferSize</code> 是缓冲区的大小，决定了补发队列的最大值。如果 <code>bufferSize</code> 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"ReplaySubject\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">ReplaySubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b) <span class=\"comment\">// 补了一个 b</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"BehaviorSubject-先向最新订阅者补发最近一次历史事件\"><a href=\"#BehaviorSubject-先向最新订阅者补发最近一次历史事件\" class=\"headerlink\" title=\"BehaviorSubject 先向最新订阅者补发最近一次历史事件\"></a>BehaviorSubject 先向最新订阅者补发最近一次历史事件</h4><p><code>BehaviorSubject</code>类型的订阅源会向最新订阅者发送最近一次的历史事件队列，如果没有则发送一个默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"BehaviorSubject\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"z\"</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">BehaviorSubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h4><p><code>Variable</code> 是基于 <code>BehaviorSubject</code> 的一层封装，它的优势是：不会被显式终结。<br>即：不会收到 <code>.Completed</code> 和 <code>.Error</code> 这类的终结事件，它会主动在析构的时候发送 <code>.Complete</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Variable\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(<span class=\"string\">\"z\"</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: variable)</span><br><span class=\"line\">    variable.value = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    variable.value = <span class=\"string\">\"b\"</span></span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: variable)</span><br><span class=\"line\">    variable.value = <span class=\"string\">\"c\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">Variable</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"支持订阅的嵌套函数\"><a href=\"#支持订阅的嵌套函数\" class=\"headerlink\" title=\"支持订阅的嵌套函数\"></a>支持订阅的嵌套函数</h2><h3 id=\"map-规则-遍历映射\"><a href=\"#map-规则-遍历映射\" class=\"headerlink\" title=\"map{规则} 遍历映射\"></a>map{规则} 遍历映射</h3><p>通过闭包中定义的规则将队列中的数据映射到新的队列中，支持订阅遍历事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(transform: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span>[]</span><br><span class=\"line\"><span class=\"comment\">//效果</span></span><br><span class=\"line\">[ x1, x2, ... , xn].<span class=\"built_in\">map</span>(f) -&gt; [f(x1), f(x2), ... , f(xn)]</span><br></pre></td></tr></table></figure><br><code>map</code>接受一个把 <code>T</code> 类型的转换成 <code>U</code> 类型的<code>transform</code>函数，最终返回的是 <code>U 类型的集合</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"map\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originalSequence = sequenceOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    originalSequence.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;.subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">map</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flatMap-嵌套式遍历映射\"><a href=\"#flatMap-嵌套式遍历映射\" class=\"headerlink\" title=\"flatMap 嵌套式遍历映射\"></a>flatMap 嵌套式遍历映射</h3><p>嵌套式遍历描述：在遍历当前队列的过程中，每次执行闭包时都会遍历另一个嵌套队列中的所有事件。<br>可以想象嵌套for 循环来理解。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"flatMap\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceInt = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceString = sequenceOf(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"--\"</span>)</span><br><span class=\"line\">    sequenceInt.flatMap&#123; int <span class=\"keyword\">in</span> sequenceString &#125;.subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- flatMap example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"scan-initial-U-combine-U-T-gt-U-迭代映射\"><a href=\"#scan-initial-U-combine-U-T-gt-U-迭代映射\" class=\"headerlink\" title=\"scan(initial:U,combine:(U, T) -&gt; U)迭代映射\"></a>scan(initial:U,combine:(U, T) -&gt; U)迭代映射</h3><p>scan 有点像 reduce ，把<code>U</code>类型集合中的所有元素，以<code>initial</code>为初始值，按照<code>combine</code>规则，逐个迭代并返回一个U类型的对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"scan\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceToSum = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    sequenceToSum.scan(<span class=\"number\">0</span>) &#123; acum, elem <span class=\"keyword\">in</span> acum + elem &#125;</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- scan example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">15</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Filtering-支持订阅的过滤器\"><a href=\"#Filtering-支持订阅的过滤器\" class=\"headerlink\" title=\"Filtering 支持订阅的过滤器\"></a>Filtering 支持订阅的过滤器</h2><h3 id=\"filter-布尔语句-条件过滤法\"><a href=\"#filter-布尔语句-条件过滤法\" class=\"headerlink\" title=\"filter{布尔语句} 条件过滤法\"></a>filter{布尔语句} 条件过滤法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"filter\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">filter</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"distinctUntilChanged-去重过滤法（相邻且不重复）\"><a href=\"#distinctUntilChanged-去重过滤法（相邻且不重复）\" class=\"headerlink\" title=\"distinctUntilChanged() 去重过滤法（相邻且不重复）\"></a>distinctUntilChanged() 去重过滤法（相邻且不重复）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"distinctUntilChanged\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .distinctUntilChanged().subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- distinctUntilChanged example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"take-int-掐尖过滤法\"><a href=\"#take-int-掐尖过滤法\" class=\"headerlink\" title=\"take(int) 掐尖过滤法\"></a>take(int) 掐尖过滤法</h3><p><code>take</code>只获取队列中前 n 个事件，在满足数量之后会自动 <code>.Completed</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"take\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">.take(<span class=\"number\">3</span>).subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- take example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Combining-订阅源聚合器\"><a href=\"#Combining-订阅源聚合器\" class=\"headerlink\" title=\"Combining 订阅源聚合器\"></a>Combining 订阅源聚合器</h2><p>订阅源聚合器将多个可观察者（订阅源）合并成一个可观察者（聚合订阅源），这样更便于订阅者同时监听多个订阅源。</p>\n<h3 id=\"startWith-向可观察者队列中添加排头兵（新增的可观察者）\"><a href=\"#startWith-向可观察者队列中添加排头兵（新增的可观察者）\" class=\"headerlink\" title=\"startWith 向可观察者队列中添加排头兵（新增的可观察者）\"></a>startWith 向可观察者队列中添加排头兵（新增的可观察者）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).startWith(<span class=\"number\">3</span>).subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">--- startWith example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"combineLatest-合并聚合订阅源最后一次事件数据，生成一个聚合事件\"><a href=\"#combineLatest-合并聚合订阅源最后一次事件数据，生成一个聚合事件\" class=\"headerlink\" title=\"combineLatest 合并聚合订阅源最后一次事件数据，生成一个聚合事件\"></a>combineLatest 合并聚合订阅源最后一次事件数据，生成一个聚合事件</h3><p>便于订阅者监听聚合订阅源中每个订阅源的最后一次事件数据<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"combineLatest 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    combineLatest(intOb1, intOb2) &#123;<span class=\"string\">\"\\($0) \\($1)\"</span>&#125;.subscribe &#123;  <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- combineLatest <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"zip-intOb1-intOb2-拉链式合并\"><a href=\"#zip-intOb1-intOb2-拉链式合并\" class=\"headerlink\" title=\"zip(intOb1, intOb2) 拉链式合并\"></a>zip(intOb1, intOb2) 拉链式合并</h3><p>仅在凑齐聚合源中所有订阅源的事件时，才会聚合一次，触发订阅者的响应。可以将多达8个订阅源<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"zip 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"built_in\">zip</span>(intOb1, intOb2) &#123; <span class=\"string\">\"\\($0) \\($1)\"</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"C\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">zip</span> <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"merge-按可观察者的新的事件次序合并队列\"><a href=\"#merge-按可观察者的新的事件次序合并队列\" class=\"headerlink\" title=\"merge() 按可观察者的新的事件次序合并队列\"></a>merge() 按可观察者的新的事件次序合并队列</h3><p>订阅者会按次序来响应聚合订阅源的每一件事件<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"merge 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    sequenceOf(subject1, subject2).merge().subscribeNext &#123; int <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(int)&#125;</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- merge <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"switchLatest订阅源切换器：用于嵌套式订阅源\"><a href=\"#switchLatest订阅源切换器：用于嵌套式订阅源\" class=\"headerlink\" title=\"switchLatest订阅源切换器：用于嵌套式订阅源\"></a>switchLatest订阅源切换器：用于嵌套式订阅源</h3><p>通过切换（var3.value）嵌套的订阅源，来切换订阅者当前监听的订阅源，以响应当前订阅源中的可观察者的事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"switchLatest\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">Variable</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">Variable</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">Variable</span>(var1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = var3.switchLatest().subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    var1.value = <span class=\"number\">1</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">2</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">3</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">4</span></span><br><span class=\"line\">    var3.value = var2</span><br><span class=\"line\">    var2.value = <span class=\"number\">201</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">5</span></span><br><span class=\"line\">    var3.value = var1</span><br><span class=\"line\">    var2.value = <span class=\"number\">202</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- switchLatest example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h2><ol>\n<li>订阅器：<code>subscribe</code> 用来订阅可观察者的事件队列（即订阅源），并指定响应的相关操作</li>\n<li>Next订阅器：<code>subscribeNext</code> 只订阅 <code>.Next</code> 事件</li>\n<li>Completed订阅器：<code>subscribeCompleted</code> 只订阅<code>.Completed</code> 完成事件</li>\n<li>Error订阅器：<code>subscribeError</code> 订阅 <code>.Error</code> 失败事件</li>\n<li>订阅器观察者：<code>doOn</code> 在订阅器执行之前，获得执行代码的机会。可对比理解：<code>swift中的属性观察者</code></li>\n</ol>\n<h2 id=\"控制take掐尖过滤器\"><a href=\"#控制take掐尖过滤器\" class=\"headerlink\" title=\"控制take掐尖过滤器\"></a>控制take掐尖过滤器</h2><p>过滤器通过指定的事件和状态语句来判断是否停止take</p>\n<h3 id=\"takeUntil-得到指定事件之后触发-Completed-事件\"><a href=\"#takeUntil-得到指定事件之后触发-Completed-事件\" class=\"headerlink\" title=\"takeUntil 得到指定事件之后触发 .Completed 事件\"></a>takeUntil 得到指定事件之后触发 .Completed 事件</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"takeUntil\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originalSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whenThisSendsNextWorldStops = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    originalSequence.takeUntil(whenThisSendsNextWorldStops)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    whenThisSendsNextWorldStops.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- takeUntil example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"takeWhile-判断语句\"><a href=\"#takeWhile-判断语句\" class=\"headerlink\" title=\"takeWhile 判断语句\"></a>takeWhile 判断语句</h3><p>takeWhile 则是可以通过状态语句判断是否继续 take 。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"takeWhile\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    sequence.takeWhile &#123; int <span class=\"keyword\">in</span> int &lt; <span class=\"number\">2</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- takeWhile example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"开源库","path":"api/categories/开源库.json"},{"name":"RxSwift","path":"api/categories/RxSwift.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"SDK","path":"api/tags/SDK.json"}]},{"title":"互动性的教学工具XCPlayground","slug":"swift/互动性的教学工具XCPlayground","date":"2017-03-01T17:27:16.000Z","updated":"2017-03-01T17:27:16.000Z","comments":true,"path":"api/articles/swift/互动性的教学工具XCPlayground.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/xcplayground-sources.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Playground 展示语法和实时执行真实数据的特性，为编写方法和库接口提供了很好的机会，通过实时编译我们能了解语法、写出例子以及获得方法如何使用的说明，所有这些就如一个活的文档展示在眼前。</p>\n<ol>\n<li>演习框架API，了解框架结构<br><a href=\"https://github.com/objcio/PersonalSwiftPlaygrounds\" target=\"_blank\" rel=\"noopener\">SceneKitMac.playground</a><br>是一个功能完备带动画的 3D 场景。你需要打开 Assistant Editor (在菜单上依次点击 View | Assistant Editor | Show Assistant Editor)，3D 效果和动画将会被自动渲染。这不需要编译循环，而且任何的改动，比如改变颜色、几何形状、亮度等，都能实时反映出来。使用它能在一个交互例子中很好的记录和介绍如何使用SceneKit框架。</li>\n<li>测试驱动开发<br>我们可以验证一个方法的执行是否正确，甚至在加载到 playground 的时候就能判断方法是否被正确解析。不难想象我们也可以在 playground 里添加断言，以及创建真正的单元测试。或者更进一步，创建出符合条件的测试，从而在你打字时就实现测试驱动开发。</li>\n</ol>\n<h2 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h2><p>打开 Project Navigator (⌘1) 并展开 Playground 文件，你就能看到”Sources”路径。<br>放到此目录下的源文件会被编译成模块(module)并自动导入到 Playground 中，并且这个编译只会进行一次(或者我们对该目录下的文件进行修改的时候)，而非每次你敲入一个字母的时候就编译一次。 这将会大大提高代码执行的效率。</p>\n<blockquote>\n<p>注意：由于此目录下的文件都是被编译成模块导入的，只有被设置成 public 的类型，属性或方法才能在 Playground 中使用。</p>\n</blockquote>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcplayground-sources.png?imageMogr2/2/w/800\">\n<h2 id=\"导入Frameworks\"><a href=\"#导入Frameworks\" class=\"headerlink\" title=\"导入Frameworks\"></a>导入Frameworks</h2><p>如果想要导入外部 framework，创建一个 Xcode Workspace 包含了 framework 项目和你的 Playground。在 Build 之后，就可以通过常规的import命令导入对应的包。</p>\n<h3 id=\"手动配置cocoa-touch-Framework来桥接playground\"><a href=\"#手动配置cocoa-touch-Framework来桥接playground\" class=\"headerlink\" title=\"手动配置cocoa touch Framework来桥接playground\"></a>手动配置cocoa touch Framework来桥接playground</h3><p>在Playgroud中使用个人项目中的类相关方法，需要借助于Custom Frameworks桥接<br>注：.swift的文件中的方法必须是public修饰。<br>参考文档：<code>Playground help -&gt; Importing Custom Frameworks into a Playground</code></p>\n<ol>\n<li>导入个人项目文件，需要借助<code>cocoa touch Framework</code>桥接<code>playground</code></li>\n<li>需要<code>workspace</code>来管理<code>Framework</code>项目和<code>playground</code>文件，典型例子：pod项目都是用workspace来管理多个项目。</li>\n<li>把个人项目的<code>swift文件</code>关联到<code>Cocoa touch Framework</code>项目的<code>target</code>中：<br> 详细设置：选中target -&gt; build phases -&gt; compiles sources -&gt;点击 + 加号，选中原项目中的swift</li>\n<li>在<code>build</code>选项中选中Framework的scheme进行编译 ,要保证framework的target配置：<code>build setting -&gt; build active architecture Only -&gt;debug</code>选项设置为<code>YES</code></li>\n<li>打开playground文件 import Framework名称，此时即可使用Framework中的提供的public API方法了。<br>Workspace相关设置，build生成的目录：xcode偏好设置要和项目中的workspace中设置要保持一致.</li>\n<li>xcode的偏好设置中 -&gt;Locations -&gt; Locations -&gt;点击打开 Advanced…在弹出框中设置Unique选项.</li>\n<li>在workspace中选中菜单 File -&gt; workspace settings… -&gt; 在弹出框中设置为Unique选项.</li>\n</ol>\n<h3 id=\"导入cocopads管理的依赖库\"><a href=\"#导入cocopads管理的依赖库\" class=\"headerlink\" title=\"导入cocopads管理的依赖库\"></a>导入cocopads管理的依赖库</h3><p>xcode7.3.1和cocoapods1.0版本导致playground无法import相关动态库<br>解决办法：<a href=\"http://stackoverflow.com/questions/38216238/xcode-playground-with-cocoapods#\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/38216238/xcode-playground-with-cocoapods#</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在写入磁盘之前，修改一些工程的配置:</span></span><br><span class=\"line\">post_install <span class=\"keyword\">do</span> |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each <span class=\"keyword\">do</span> |target|</span><br><span class=\"line\">        <span class=\"keyword\">if</span> target.name != <span class=\"string\">'CocoaAsyncSocket'</span></span><br><span class=\"line\">            <span class=\"comment\">#playground相关配置，会导致'GCDAsyncSocket.h' file not found</span></span><br><span class=\"line\">            target.build_configurations.each <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\">                config.build_settings[<span class=\"string\">'CONFIGURATION_BUILD_DIR'</span>] = <span class=\"string\">'$PODS_CONFIGURATION_BUILD_DIR'</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">#Use Legacy Swift Language Version” (SWIFT_VERSION):</span></span><br><span class=\"line\">                <span class=\"comment\">#   https://github.com/CocoaPods/CocoaPods/issues/5864#issuecomment-247109685</span></span><br><span class=\"line\">                puts <span class=\"string\">\"SWIFT_VERSIION:\"</span></span><br><span class=\"line\">                config.build_settings[<span class=\"string\">'SWIFT_VERSION'</span>] = <span class=\"string\">\"3.0.1\"</span></span><br><span class=\"line\">                puts config.build_settings[<span class=\"string\">'SWIFT_VERSION'</span>]</span><br><span class=\"line\">            end</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">#输出操作</span></span><br><span class=\"line\">            puts <span class=\"string\">\"以下不能在playground中使用的库名：\"</span></span><br><span class=\"line\">            puts target.name</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Playground沙盒Resources\"><a href=\"#Playground沙盒Resources\" class=\"headerlink\" title=\"Playground沙盒Resources\"></a>Playground沙盒Resources</h2><p>Playgrounds 有两个与相关的Resources关联起来：一个是每一个独立的 playground 本地的，另一个则是 playground 之间共享的。在你的实验过程中，Playgrounds 能够支持 XML，JSON 数据，XIB，和图像文件。这也增加了其使用可用性。</p>\n<h2 id=\"本地-bundle访问本地资源\"><a href=\"#本地-bundle访问本地资源\" class=\"headerlink\" title=\"本地 bundle访问本地资源\"></a>本地 bundle访问本地资源</h2><p>Resources 文件夹, 与 Sources 文件夹一样在 Playground 的包路径中, 通过 Project Navigator 就可见了——只需要简单的拖拽图像和数据文件，就可以在 Playground 中使用了。对应的内容在 main bundle 中也是可见的。比如，我们可以像这样非常快捷的加载一个包含天气数据的 JSON 文件：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonPath = <span class=\"type\">NSBundle</span>.mainBundle().bundlePath.stringByAppendingPathComponent(<span class=\"string\">\"weather.json\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span></span><br><span class=\"line\">jsonData = <span class=\"type\">NSData</span>(contentsOfFile: jsonPath),</span><br><span class=\"line\">json = <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(jsonData, options: <span class=\"literal\">nil</span>, error: <span class=\"literal\">nil</span>) <span class=\"keyword\">as</span>? [<span class=\"type\">String</span>: <span class=\"type\">AnyObject</span>] </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"共享-访问Documents共享目录\"><a href=\"#共享-访问Documents共享目录\" class=\"headerlink\" title=\"共享 访问Documents共享目录\"></a>共享 访问Documents共享目录</h2><p>“共享 Playground 数据”的内容在你的”Documents”文件夹路径下，也同样对于你创建的任何 Playground 都可见。我们通过XCPSharedDataDirectoryPath常量来访问该共享文件夹。</p>\n<p>如果你自习想尝试，需要在 “~/Documents/Shared Playground Data” 下简历一个文件夹。 这里我们尝试载入一个名字叫做 “image.png” 的图片文件:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sharedImagePath = <span class=\"type\">XCPSharedDataDirectoryPath</span>.stringByAppendingPathComponent(<span class=\"string\">\"image.png\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> image = <span class=\"type\">UIImage</span>(contentsOfFile: sharedImagePath) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"PlaygroundSupport\"><a href=\"#PlaygroundSupport\" class=\"headerlink\" title=\"PlaygroundSupport\"></a>PlaygroundSupport</h2><h3 id=\"liveView视图代理\"><a href=\"#liveView视图代理\" class=\"headerlink\" title=\"liveView视图代理\"></a>liveView视图代理</h3><p>实现在playground中实现UI显示及交互操作<br>liveView定义：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> liveView: <span class=\"type\">XCPlaygroundLiveViewable</span>?</span><br></pre></td></tr></table></figure><br>遵循了<code>XCPlaygroundLiveViewable</code>协议即可在playground中可视化显示：</p>\n<ol>\n<li>在iOS 和 tvOS中<code>UIView</code> and <code>UIViewController</code>遵循该协议</li>\n<li>在OS X中<code>NSView</code> and <code>NSViewController</code>遵循该协议</li>\n<li>用户自定类型，须遵守XCPlaygroundLiveViewable协议<br>总之，只要遵守改协议并实现代理方法，都可以在playground中可视化显示。<br>用法：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">PlaygroundPage</span>.current.liveView = <span class=\"type\">UIView</span>()／<span class=\"type\">NSViewController</span>()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"捕获值（XCPCaptureValue在XCPlayground中过时）\"><a href=\"#捕获值（XCPCaptureValue在XCPlayground中过时）\" class=\"headerlink\" title=\"捕获值（XCPCaptureValue在XCPlayground中过时）\"></a>捕获值（XCPCaptureValue在XCPlayground中过时）</h3><p><a href=\"http://swifter.tips/playground-capture/\" target=\"_blank\" rel=\"noopener\">冒泡排序可视化预览</a><br><figure class=\"highlight swift\"><figcaption><span>XCPlayground Module</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// This function has been deprecated.</span></span><br><span class=\"line\"><span class=\"meta\">@available</span>(*, deprecated)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">XCPCaptureValue</span>&lt;T&gt;<span class=\"params\">(identifier: String, value: T)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>简介：可以多次调用该方法来做图，相同的 identifier 的数据将会出现在同一张图上，而 value 将根据输入的次序进行排列,将一组数据轻而易举地绘制到时间轴上，从而让我们能看到每一步的结果。这不仅对我们直观且及时地了解算法内部的变化很有帮助，也会是教学或者演示时候的神兵利器。</p>\n<ol>\n<li>使用：导入框架<code>import XCPlayground</code></li>\n<li>扩展：XCPCaptureValue 的数据输入是任意类型的，所以不论是传什么进去都是可以表示的。它们将以 QuickLook 预览的方式被表现出来，一些像 UIImage，UIColor 或者 UIBezierPath 这样的类型已经实现了 QuickLook。当然对于那些没有实现快速预览的 NSObject 子类，也可以通过重写</li>\n</ol>\n<p>一个 Playground 通常立即显示简单表达式的结果。数组，字符串，数字等等，会在结果面板把计算后的结果显示出来。那么，随着时间改变的值是如何处理的呢？</p>\n<p>通过使用 XCPCaptureValue() 函数，我们可以随着一系列的迭代建立一个变动值的图。回到我们上面提到的天气例子，让我们来看看按小时计的温度数据，使用 XCPCaptureValue 来在辅助编辑界面以时间线的方式显示 温度的值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> XCPlayground</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> forecast <span class=\"keyword\">in</span> forecasts </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> tempString = forecast[<span class=\"string\">\"temp\"</span>]?[<span class=\"string\">\"english\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">String</span>, temperature = tempString.toInt()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">XCPCaptureValue</span>(<span class=\"string\">\"Temperature\"</span>, temperature)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种可选的方式是, 选择 Editor → Show Result For Current Line 就会捕获当前线的数值并且直接以图表的形势显示在 Playground 流中：</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcplayground-capture.png?imageMogr2/2/w/800\">\n<h3 id=\"异步执行（Asynchronous-Execution）\"><a href=\"#异步执行（Asynchronous-Execution）\" class=\"headerlink\" title=\"异步执行（Asynchronous Execution）\"></a>异步执行（Asynchronous Execution）</h3><p>不同于大部分 Swift 代码，是作为框架或者应用的一部分，Playgrounds 被当做是 高级代码。Playground 中的高级代码是按照指令接着指令的顺序从上到下执行的。<br>这种无容器风格的代码执行提供了立即反馈，但是存在着一个问题：在执行到了 Playground 底部后，会立即停止。网络请求，计时器，以及长时间运行的后台队列都会在提供反馈成功或者失败之前被立即终止。<br><code>PlaygroundSupport</code> 模块包含一个能够延长该过程的函数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> needsIndefiniteExecution: <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>开启异步：默认值为<code>false</code>,当使用liveView代理时，会自动设置为<code>true</code>。当为<code>true</code>时，在高级代码执行完成后，会告诉Xcode继续运行Playground页面。为<code>false</code>时，当代码执行完直接终止。</li>\n<li>手动终止：还可以使用<code>PlaygroundPage.finishExecution()</code>手动终止正在运行的Playground。</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">PlaygroundPage</span>.current.needsIndefiniteExecution = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://httpbin.org/image/png\"</span>)!</span><br><span class=\"line\"><span class=\"keyword\">let</span> task = <span class=\"type\">NSURLSession</span>.sharedSession().dataTaskWithURL(url) &#123;</span><br><span class=\"line\">    data, <span class=\"number\">_</span>, <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> image = <span class=\"type\">UIImage</span>(data: data)</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//手动终止</span></span><br><span class=\"line\">        <span class=\"type\">PlaygroundPage</span>.current.currentPage.finishExecution()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<h2 id=\"支持Markdown格式的文档\"><a href=\"#支持Markdown格式的文档\" class=\"headerlink\" title=\"支持Markdown格式的文档\"></a>支持Markdown格式的文档</h2><p><a href=\"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>除了实验用途，Playgrounds 在展示 Swift 语言的工具和框架中也一样强大。特别文档部分可以作为丰富格式的方式展示出来，以提供对于代码的清晰解释从而展示某个技术或者正确使用某个 Library 的方式。</p>\n<p>不同于<a href=\"http://nshipster.cn/swift-documentation/\" target=\"_blank\" rel=\"noopener\">Swift代码中的注释文档语法</a>, <code>Swift Playgrounds</code> 使用 <code>Markdown</code> 来显示多格式的文档。<br>例如：<br><code>//:</code>：可以指定单行文本说明<br><code>/*: Markdown格式内容... */</code>：可以用<code>Markdown</code>格式来显示丰富的文档内容</p>\n<p><code>xcode</code>切换备注以<code>Markdown</code>格式显示：</p>\n<ol>\n<li>选择<code>Editor → Show Rendered Markup</code> 菜单</li>\n<li>在 <code>File Inspector (⌘⌥1)</code> 选中 <code>Render Documentation</code> 复选框。<blockquote>\n<p>在xcode8中打开之前版本时，菜单上的<code>Show Rendered Markup</code>会显示为<code>Upgrade playgound...</code>升级菜单项，这样就需要先点击升级菜单项之后，才能激活上述（1）（2）设置项。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: This line will have **bold** and *italic* text.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*:</span></span><br><span class=\"line\"><span class=\"comment\">## Headers of All Sizes</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### Lists of Links</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">- [NSHipster](http://nshipster.com)</span></span><br><span class=\"line\"><span class=\"comment\">- [ASCIIwwdc](http://asciiwwdc.com)</span></span><br><span class=\"line\"><span class=\"comment\">- [SwiftDoc](http://swiftdoc.org)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">### Images, Too</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">![Remote Image](http://nshipster.s3.amazonaws.com/alert.gif)</span></span><br><span class=\"line\"><span class=\"comment\">![Local Image](bomb.gif) </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*Images in the Resources directory can be referenced locally*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcplayground-documentation.png?imageMogr2/2/w/800\">\n<p>Playgrounds 提供了一个我们关于分享和学习 OS X 和 iOS 相关工具的方式的重大改变。Playground 可以展示每一个特性，并且为将来的用户探索和发现你创建的库提供了空间。丢掉你的静态README.md， 换成可互动的README.playground吧，再玩起来！</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"playground","path":"api/categories/playground.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"测试","path":"api/tags/测试.json"}]},{"title":"JavaScript自动化组件OC桥接","slug":"macOS/JavaScript自动化组件OC桥接","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/JavaScript自动化组件OC桥接.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8\" target=\"_blank\" rel=\"noopener\">文档</a><br><code>JavaScript自动化</code>有一个内置的<code>Objective-C Bridge</code>，使您能够访问文件系统，创建Cocoa应用程序。<br><code>Objective-C Bridge</code>的主要接入点是全局属性<code>objc</code>和<code>$</code>。</p>\n<h2 id=\"Frameworks\"><a href=\"#Frameworks\" class=\"headerlink\" title=\"Frameworks\"></a>Frameworks</h2><p><code>Foundation framework</code>中的语法默认支持<code>JavaScript自动化</code>。也可以通过使用<code>ObjC.import()</code>方法导入其他Frameworks 和 libraries。<br>例如，使用<code>Cocoa框架</code>中的<code>NSBeep()</code>函数，需要导入<code>Cocoa框架</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjC.import(<span class=\"string\">'Cocoa'</span>)</span><br><span class=\"line\">$.NSBeep()</span><br></pre></td></tr></table></figure><br>除了系统框架之外，一些系统库的功能也被暴露出来。这个功能可以通过<code>头文件</code>的名称来暴漏出来（不带.h）<br>例如：<br>arpa/inet, asl, copyfile, dispatch, dyld, errno, getopt, glob, grp, ifaddrs, launch, membership, netdb, netinet/in, notify, objc, paths, pwd, readline, removefile, signal, spawn, sqlite3, stdio, stdlib, string, sys/fcntl, sys/file, sys/ioctl, sys/mount, sys/param, sys/resource, sys/socket, sys/stat, sys/sysctl, sys/time, sys/times, sys/types, sys/wait, sys/xattr, syslog, time, unistd, uuid/uuid, vImage, vecLib, vmnet, xpc, 和 zlib.<br>导入框架时，系统将参考桥接支持文件。除了内置的框架和库，您可以导入任何具有桥接支持的框架，只需要将完整路径传递给框架，如下示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjC.import(<span class=\"string\">'/Library/Frameworks/Awesome.framework'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>原始的<code>JavaScript数据类型</code>映射到<code>C数据类型</code>。例如，一个<code>JavaScript字符串</code>映射为<code>char *</code>，而<code>JavaScript整数</code>映射到<code>int</code>。使用<code>objc API</code>返回一个<code>char *</code>时，会得到一个<code>JS 字符串</code></p>\n<p>原始的<code>JavaScript数据类型</code>将被自动转换为<code>ObjC对象类型</code>，并能作为一个预期的对象类型的参数传递给ObjC方法。<br>例如，一个<code>JS字符串</code>将被转换为一个<code>NSString对象</code>如果是什么方法签名说应该是输入。</p>\n<blockquote>\n<p>注意，然而，ObjC方法返回的ObjC对象类型是不会自动转换为原始的JavaScript的数据类型。</p>\n</blockquote>\n<h2 id=\"实例化的类和调用方法\"><a href=\"#实例化的类和调用方法\" class=\"headerlink\" title=\"实例化的类和调用方法\"></a>实例化的类和调用方法</h2><p>所有类都定义为<code>$对象</code>的属性。ObjC对象的方法有两种方式调用，根据是否需要参数的方法。<br>如果ObjC方法不带参数，然后调用<code>JavaScript属性名</code>访问<code>属性值</code>。这个例子中实例化一个空的字符串。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = $.NSMutableString.alloc.init</span><br></pre></td></tr></table></figure><br>如果ObjC方法不带参数，根据<code>JSExport</code>规范来命名，通过JavaScript的方法调用（function-typed property）；<br>对于多参数的方法，Objective-C的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br>这个例子说明<code>JavaScript字符串</code>转为<code>NSString</code>然后写入到一个文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = $.NSString.alloc.initWithUTF8String(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">str.writeToFileAtomically(<span class=\"string\">'/tmp/foo'</span>, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure></p>\n<p>如果你调用一个方法，如<code>-intValue</code>，返回<code>C数据类型</code>而不是一个对象，然后你会回到原始的<code>JavaScript数据类型</code>。<br>此示例返回原始的JavaScript的整数，99。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.NSNumber.numberWithInt(<span class=\"number\">99</span>).intValue</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问-ObjC-Properties\"><a href=\"#访问-ObjC-Properties\" class=\"headerlink\" title=\"访问 ObjC Properties\"></a>访问 ObjC Properties</h3><p><code>ObjC属性</code>也可以通过<code>JavaScript属性</code>来访问，很像调用无参数方法。<br>当一个<code>桥接对象属性</code>的被访问时，ObjC属性列表是第一参考，如果列表中存在该名称对应的属性，那么就调用相应属性的<code>getter</code>或<code>setter</code>选择器。如果该名称的ObjC属性不在类中属性的列表中，那么该属性名称就作为<code>方法选择器</code>来调用。<br>使用自定义<code>getter</code>名定义一个属性，你可以使用<code>属性</code>名 或 <code>getter</code>名，并得到相同的结果。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task = $.NSTask.alloc.init</span><br><span class=\"line\">task.running == task.isRunning</span><br></pre></td></tr></table></figure><br>另外，不同的参数方法，<code>桥接对象属性</code>映射到<code>ObjC属性</code>也可以设置为（read/write属性）。下面的两行定义了一个ObjC属性：<code>launchPath</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.launchPath = <span class=\"string\">'/bin/sleep'</span></span><br><span class=\"line\">task.setLaunchPath(<span class=\"string\">'/bin/sleep'</span>)</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"测试","path":"api/tags/测试.json"},{"name":"混编","path":"api/tags/混编.json"}]},{"title":"shell命令+AppleScript脚本+Swift代码相互调用","slug":"macOS/shell命令+AppleScript脚本+Swift代码相互调用","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-15T17:19:30.000Z","comments":true,"path":"api/articles/macOS/shell命令+AppleScript脚本+Swift代码相互调用.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是<code>AppleScript</code>作为互通的桥梁。</p>\n<h2 id=\"NSTask调用AppleScript\"><a href=\"#NSTask调用AppleScript\" class=\"headerlink\" title=\"NSTask调用AppleScript\"></a><code>NSTask</code>调用<code>AppleScript</code></h2><h3 id=\"调用脚本文件main-scpt\"><a href=\"#调用脚本文件main-scpt\" class=\"headerlink\" title=\"调用脚本文件main.scpt\"></a>调用脚本文件<code>main.scpt</code></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//let bundle = NSBundle.init(forClass: self.dynamicType)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> scriptPath = bundle.pathForResource(<span class=\"string\">\"main\"</span>, ofType: <span class=\"string\">\"scpt\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> paths = [scriptPath]</span><br><span class=\"line\">    <span class=\"type\">NSTask</span>.launchedTaskWithLaunchPath(<span class=\"string\">\"/usr/bin/osascript\"</span>, arguments: paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用APPleScript脚本片段\"><a href=\"#调用APPleScript脚本片段\" class=\"headerlink\" title=\"调用APPleScript脚本片段\"></a>调用<code>APPleScript脚本片段</code></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoPath = bundle.pathForResource(<span class=\"string\">\"BigBuck\"</span>, ofType: <span class=\"string\">\"m4v\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//https://developer.apple.com/library/mac/technotes/tn2084/_index.html</span></span><br><span class=\"line\"><span class=\"comment\">//open -na /Applications/mpv.app命令行必须是 -na 才能调用当前指定的播放器，否则会调用系统默认播发器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAppleScript = <span class=\"string\">\"on run\\ndo shell script \\\"open -na /Applications/mpv.app \\(videoPath!)\\\"\\ntell application \\\"mpv\\\" to activate\\n end run\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myAppleScript)</span><br><span class=\"line\"><span class=\"keyword\">var</span> error: <span class=\"type\">NSDictionary</span>?</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> scriptObject = <span class=\"type\">NSAppleScript</span>(source: myAppleScript) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> output: <span class=\"type\">NSAppleEventDescriptor</span> = scriptObject.executeAndReturnError(</span><br><span class=\"line\">    &amp;error) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(output.stringValue)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error != <span class=\"literal\">nil</span>) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \\(error)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AppleScript调用shell\"><a href=\"#AppleScript调用shell\" class=\"headerlink\" title=\"AppleScript调用shell\"></a><code>AppleScript</code>调用<code>shell</code></h2><p>AppleScript语句中为on run {变量名称，逗号隔开} 以endrun结束。中间为AppleScript语句。</p>\n<h3 id=\"do-shell-script\"><a href=\"#do-shell-script\" class=\"headerlink\" title=\"do shell script\"></a>do shell script</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on run [变量1,变量2...]  #开始 多个变量名称，用逗号隔开</span><br><span class=\"line\">    do shell script \"open -n /Applications/mpv.app\" #AppleScript语句  </span><br><span class=\"line\">end run #结束</span><br></pre></td></tr></table></figure>\n<h2 id=\"终端osascript调用AppleScript\"><a href=\"#终端osascript调用AppleScript\" class=\"headerlink\" title=\"终端osascript调用AppleScript\"></a>终端<code>osascript</code>调用<code>AppleScript</code></h2><p><a href=\"http://www.hackmac.org/tutorials/run-applescript-from-the-command-line/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e 'applescript command' #单引号</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开Finder窗口\"><a href=\"#打开Finder窗口\" class=\"headerlink\" title=\"打开Finder窗口\"></a>打开Finder窗口</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e 'tell app \"Finder\" to make new Finder window'</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开某个程序同时弹出”Hello-World”提示框\"><a href=\"#打开某个程序同时弹出”Hello-World”提示框\" class=\"headerlink\" title=\"打开某个程序同时弹出”Hello World”提示框\"></a>打开某个程序同时弹出”Hello World”提示框</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e <span class=\"string\">'tell app \"applicationname\" to display dialog \"Hello World\"'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置音量，音量大小范围（0-7）\"><a href=\"#设置音量，音量大小范围（0-7）\" class=\"headerlink\" title=\"设置音量，音量大小范围（0-7）\"></a>设置音量，音量大小范围（0-7）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e <span class=\"string\">\"set volume number\"</span></span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"脚本","path":"api/tags/脚本.json"},{"name":"AppleScript","path":"api/tags/AppleScript.json"},{"name":"shell","path":"api/tags/shell.json"}]},{"title":"macOS支持JavaScript自动化组件基础","slug":"macOS/macOS支持JavaScript自动化组件基础","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/macOS支持JavaScript自动化组件基础.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>苹果 <code>OS X Yosemite系统</code>把 <code>JavaScript</code>作为<code>AppleScript</code>的另一选择。<code>Automation</code> 是 <code>OS X 10.10版本</code>中的新特性，苹果在官网发布<a href=\"https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508\" target=\"_blank\" rel=\"noopener\">JavaScript for Automation Release Notes</a>有篇文章介绍了用<code>JavaScript</code>写自动化<code>Automation</code>脚本。<br><code>JavaScript</code>凭借其简单的语法，良好的性能，超轻量的框架，极小耦合的模块系统等等优势已经吸引了很多大厂的关注。<br>再加上<code>JavaScript</code>先天开放且无版权专利纠纷的问题，拥有非常广泛的开发者（开源）群体，苹果将其引入<code>OS X平台</code>代替私有的<code>AppleScript</code>，可能也有着一部分开放性平台的考虑，从而吸引广泛的第三方开发者。<br>资源<br><a href=\"https://github.com/tylergaw/js-osx-app-examples\" target=\"_blank\" rel=\"noopener\">JavaScript OS X App Examples</a><br><a href=\"https://github.com/dtinth/JXA-Cookbook\" target=\"_blank\" rel=\"noopener\">JavaScript for Automation Cookbook</a></p>\n<h2 id=\"OSA框架-Open-Scripting-Architecture\"><a href=\"#OSA框架-Open-Scripting-Architecture\" class=\"headerlink\" title=\"OSA框架:Open Scripting Architecture\"></a>OSA框架:<code>Open Scripting Architecture</code></h2><p><code>OSA</code>组件用于实现MacAPP自动化操作。这些框架组件使用场景包括：<code>Script Editor</code>编辑器，全系统的<code>Script菜单</code>，<code>Run JavaScript Automator</code>命令的操作，<code>applets</code>小程序，命令行<code>osascript</code>工具，<code>NSUserScriptTask API</code>中，还可以运用在其他的<code>OSA</code>组件中例如：<code>AppleScript</code>。这也就包括了<code>Mail</code>规则、<code>Folder</code>操作、<code>Address Book</code>插件、日历闹钟和消息触发器。</p>\n<h2 id=\"脚本字典\"><a href=\"#脚本字典\" class=\"headerlink\" title=\"脚本字典\"></a>脚本字典</h2><p>脚本字典详细介绍APP的对象模型。在脚本字典映射到有效的JavaScript标识符遵循一套规范的术语。在<code>Script Editor</code>脚本字典浏览器已经更新到显示术语<code>AppleScript</code>，<code>JavaScript</code>和O<code>bjective-C</code>（Scripting Bridge framework）格式。</p>\n<h3 id=\"打开脚本字典\"><a href=\"#打开脚本字典\" class=\"headerlink\" title=\"打开脚本字典\"></a>打开脚本字典</h3><p>启动<code>Script Editor</code> (/Applications/Utilities/) –&gt;<code>File &gt; Open Dictionary or Window &gt; Library</code>。</p>\n<h2 id=\"object-specifier\"><a href=\"#object-specifier\" class=\"headerlink\" title=\"object specifier\"></a>object specifier</h2><p>在<code>JavaScript自动化主机</code>环境中的大部分对象指的是外部实例，如：其他APP，window或在这些APP的相关数据。当访问一个APP对象或APP中的某个元素的<code>JavaScript属性</code>时，会返回一个新的<code>object specifier</code>，也就是这个对象的<code>specifier 属性</code>。</p>\n<blockquote>\n<p>object specifier不是外部实例属性的实际值，是这个对象的引用指针。如果要获取这个属性的实际值，使用get／set方法。</p>\n</blockquote>\n<h2 id=\"访问APP\"><a href=\"#访问APP\" class=\"headerlink\" title=\"访问APP\"></a>访问APP</h2><p>六种方式:<br><figure class=\"highlight js\"><figcaption><span>By name</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'Mail'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><figcaption><span>By bundle ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'com.apple.mail'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>By path</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'/Applications/Mail.app'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>By process ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"number\">763</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>On a remote machine</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'eppc://127.0.0.1/Mail'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>currentApplication</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application.currentApplication()</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法示例\"><a href=\"#语法示例\" class=\"headerlink\" title=\"语法示例\"></a>语法示例</h2><figure class=\"highlight js\"><figcaption><span>Access properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.name</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Access elements</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.outgoingMessages[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Call commands</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.open(...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Create new objects</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.OutgoingMessage(...)</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性的get-set方法\"><a href=\"#属性的get-set方法\" class=\"headerlink\" title=\"属性的get/set方法\"></a>属性的get/set方法</h3><p>点运算符访问脚本对象，是JavaScript语法特性之一。<br>如上所述，返回的对象是一个<code>object specifier</code>是一个对象的引用，而不是属性实际值。<br>当访问属性时，会作为一个get函数，返回实际值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject = Mail.inbox.messages[<span class=\"number\">0</span>].subject()</span><br></pre></td></tr></table></figure><br>当赋值属性时，会作为一个set函数，把参数赋值该属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.outgoingMessages[<span class=\"number\">0</span>].subject = <span class=\"string\">'Hello world'</span></span><br></pre></td></tr></table></figure><br>获取数组中的每个元素属性（在这种情况下，得到邮件收件箱中的每份邮件的标题）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subjects = Mail.inbox.messages.subject()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"元素数组\"><a href=\"#元素数组\" class=\"headerlink\" title=\"元素数组\"></a>元素数组</h3><p>通过在数组中调用特定元素检索方法，或使用方括号并指定要检索的元素的名称或索引来访问数组中的元素。返回值是对象相关，与自己的属性和元素，引用数组元素。他们可以访问<br><figure class=\"highlight js\"><figcaption><span>索引</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.at(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><br><figure class=\"highlight js\"><figcaption><span>name</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.byName(<span class=\"string\">'New Message'</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows[<span class=\"string\">'New Message'</span>]</span><br></pre></td></tr></table></figure><br><figure class=\"highlight js\"><figcaption><span>ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.byId(<span class=\"number\">412</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: 使用ID来访问不是方括号[]而是().</p>\n</blockquote>\n<h3 id=\"调用命令\"><a href=\"#调用命令\" class=\"headerlink\" title=\"调用命令\"></a>调用命令</h3><p>命令被称为函数。</p>\n<ol>\n<li>直接参数的函数，该参数作为命令的第一个参数传递。</li>\n<li>如果函数需要带参数名的参数，那么这个参数可以接受一个键值对对象。</li>\n<li>如果函数需要一个直接参数，就需要传递一个带参数名的参数作为第二个参数。</li>\n<li>如果函数不存在直接参数，那么带参数名的参数作为第一个参数传递，并且唯一参数。</li>\n<li>直接参数是可选的，可以不用传递任何值，当第一个参数存在参数名时，则传递NULL作为第一个参数。<figure class=\"highlight js\"><figcaption><span>无参数命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message.open()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption><span>无参数名的命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.open(message)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>带参数名的命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = message.reply(&#123;</span><br><span class=\"line\">replayAll: <span class=\"literal\">true</span>,</span><br><span class=\"line\">openingWindow: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Command with direct parameter and named parameters</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Safari.doJavaScript(<span class=\"string\">'alert(\"Hello world\")'</span>, &#123;</span><br><span class=\"line\"><span class=\"keyword\">in</span>: Safari.windows[<span class=\"number\">0</span>].tabs[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Creating-Objects\"><a href=\"#Creating-Objects\" class=\"headerlink\" title=\"Creating Objects\"></a>Creating Objects</h2><p>通过调用<code>类构造函数</code>初始化<code>属性</code>和<code>数据</code>来创建新对象。<br>在创建对象时,需要执行的其中步骤：</p>\n<ol>\n<li><code>make()</code>方法：调用对象上的<code>make()</code>方法来实例化对象。</li>\n<li><code>push()</code>方法：调用对象数组上的<code>push</code>方法来实例化对象。<br>在调用这些方法中的一个之前，对象实际上并不存在于应用程序中。</li>\n</ol>\n<h3 id=\"Create-a-new-object\"><a href=\"#Create-a-new-object\" class=\"headerlink\" title=\"Create a new object.\"></a>Create a new object.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage().make()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-object-with-properties\"><a href=\"#Create-a-new-object-with-properties\" class=\"headerlink\" title=\"Create a new object with properties.\"></a>Create a new object with properties.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage(&#123;</span><br><span class=\"line\">subject: <span class=\"string\">'Hello world'</span>,</span><br><span class=\"line\">visible: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Mail.outgoingMessages.push(message)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-object-with-data\"><a href=\"#Create-a-new-object-with-data\" class=\"headerlink\" title=\"Create a new object with data.\"></a>Create a new object with data.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para = TextEdit.Paragraph(&#123;&#125;, <span class=\"string\">'Some text'</span>)</span><br><span class=\"line\">TextEdit.documents[<span class=\"number\">0</span>].paragraphs.push(para)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用对象\"><a href=\"#使用对象\" class=\"headerlink\" title=\"使用对象\"></a>使用对象</h3><p>一旦你在应用程序中创建一个新的对象（通过调用<code>make</code>或<code>push</code>），可以像任何现有的应用程序对象一样进行交互。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage().make()</span><br><span class=\"line\">message.subject = <span class=\"string\">'Hello world'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Scripting-Additions\"><a href=\"#Scripting-Additions\" class=\"headerlink\" title=\"Scripting Additions\"></a>Scripting Additions</h3><p>使用脚本添加（脚本插件）来增强应用程序的功能。操作系统有一套标准的脚本添加提供speak text,展示用户交互对话，等。<br>使用这些，必须明确设置<code>includeStandardAdditions</code>的<code>flag</code>为 <code>true</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Application.currentApplication()</span><br><span class=\"line\">app.includeStandardAdditions = <span class=\"literal\">true</span></span><br><span class=\"line\">app.say(<span class=\"string\">'Hello world'</span>)</span><br><span class=\"line\">app.displayDialog(<span class=\"string\">'Please enter your email address'</span>, &#123;</span><br><span class=\"line\">withTitle: <span class=\"string\">'Email'</span>,</span><br><span class=\"line\">defaultAnswer: <span class=\"string\">'your_email@site.com'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Applets\"><a href=\"#Applets\" class=\"headerlink\" title=\"Applets\"></a>Applets</h2><p>在<code>Script Editor</code>编写脚本并保存为一个应用程序，且可以被双击独立运行的程序称为<code>Applet</code>。<br>程序支持以下事件处理：<br>当Applet运行时，<code>run</code>处理事件被调用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用于拖放操作的<code>openDocuments</code>处理事件程序包配置小程序，当文档被拖放到该小程序上时，这个处理操作将被执行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openDocuments</span>(<span class=\"params\">docs</span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><br>传递的参数是一个文件路径字符串数组。<br><a href=\"https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8\" target=\"_blank\" rel=\"noopener\">更多样例</a></p>\n<h2 id=\"UI-Automation\"><a href=\"#UI-Automation\" class=\"headerlink\" title=\"UI Automation\"></a>UI Automation</h2><p>通过编写系统事件应用程序，可以自动化应用程序的用户界面。在脚本编辑器<code>Script Editor</code>中浏览<code>System Events</code>的脚本字典，特别是进程套件<code>Processes Suite</code>，以查看支持此类型自动化的应用程序接口元素的列表。<br>下面的示例使用UI脚本创建Notes中的新注释。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notes = Application(<span class=\"string\">'Notes'</span>)</span><br><span class=\"line\">Notes.activate()</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">1</span>)</span><br><span class=\"line\">SystemEvents = Application(<span class=\"string\">'System Events'</span>)</span><br><span class=\"line\">Notes = SystemEvents.processes[<span class=\"string\">'Notes'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Notes.windows[<span class=\"number\">0</span>].splitterGroups[<span class=\"number\">0</span>].groups[<span class=\"number\">1</span>].groups[<span class=\"number\">0</span>].buttons[<span class=\"number\">0</span>].click()</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"使用JavaScript把JSON数据转为对象","slug":"swift/使用JavaScript把JSON数据定义对象","date":"2017-02-12T14:41:35.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/使用JavaScript把JSON数据定义对象.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"将JSON数据序列化为代码实例\"><a href=\"#将JSON数据序列化为代码实例\" class=\"headerlink\" title=\"将JSON数据序列化为代码实例\"></a>将JSON数据序列化为代码实例</h2><ol>\n<li>定义一个继承自 <code>JSExport</code> 子协议 <code>PersonJSExports</code></li>\n<li>定义一个遵守<code>PersonJSExports</code>协议的<code>Person</code>数据模</li>\n<li>使用 <code>JavaScript</code> 把<code>JSON</code>转为<code>类</code>并实例化<code>对象</code><br>都有一个完整的 <code>JVM</code> 在那儿了，谁还需要 <code>NSJSONSerialization</code>？</li>\n</ol>\n<h2 id=\"JSExport语言互通协议\"><a href=\"#JSExport语言互通协议\" class=\"headerlink\" title=\"JSExport语言互通协议\"></a>JSExport语言互通协议</h2><p><code>JavaScript</code>可以脱离<code>prototype继承</code>完全用<code>JSON</code>来定义对象，但是<code>Objective-C</code>编程不能脱离<code>类</code>和<code>继承</code>。所以<code>JavaScriptCore</code>就提供了<code>JSExport</code>作为两种语言的互通协议。<br><code>JSExport</code>中没有预定义任何方法，但是所有继承<code>JSExport</code>的协议中定义的方法即协议方法，都可以在<code>JSContext</code>中被调用。</p>\n<h2 id=\"JSExportAs-宏-指定方法在JS中调用的名称\"><a href=\"#JSExportAs-宏-指定方法在JS中调用的名称\" class=\"headerlink\" title=\"JSExportAs 宏: 指定方法在JS中调用的名称\"></a>JSExportAs 宏: 指定方法在JS中调用的名称</h2><p>对于多参数的方法，<code>JavaScriptCore</code>的转换方式将<code>Objective-C</code>的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">MultiArgs</span> &lt;<span class=\"title\">JSExport</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)doFoo:(<span class=\"keyword\">id</span>)foo withBar:(<span class=\"keyword\">id</span>)bar;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><br>如果希望方法在JavaScript中有一个比较短的名字，就需要用的JSExport.h中提供的宏：<br><figure class=\"highlight objc\"><figcaption><span>JSExport.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(PropertyName, Selector)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><figcaption><span>JSExportAs的官方宏定义 xcdoc://?url=developer.apple.com/library/etc/redirect/xcode/ios/1151/documentation/JavaScriptCore/Reference/JSExport_Ref/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define JSExportAs(PropertyName, Selector) \\</span></span><br><span class=\"line\"><span class=\"keyword\">@optional</span> Selector __JS_EXPORT_AS__<span class=\"meta\">##PropertyName:(id)argument; @required Selector</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>如 <code>setX:Y:Z</code>方法，我们可以给他重命名，让 JS 中通过 <code>set3D(x,y,z)</code> 来调用<br><figure class=\"highlight objc\"><figcaption><span>使用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(set3D,</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setX:(<span class=\"keyword\">id</span>)x Y:(<span class=\"keyword\">id</span>)y Z:(<span class=\"keyword\">id</span>)z</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">set3D(x,y,z)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义PersonJSExports协议和create协议方法（类方法）\"><a href=\"#定义PersonJSExports协议和create协议方法（类方法）\" class=\"headerlink\" title=\"定义PersonJSExports协议和create协议方法（类方法）\"></a>定义PersonJSExports协议和create协议方法（类方法）</h3><p><code>Person 类</code>实现了<code>PersonJSExports 协议</code>，该协议规定哪些属性可以在 <code>JavaScript</code>中可用。<br>在<code>JavaScript</code>语境中，不能像：<code>var person = new Person()</code>来初始化实例，可以在定义<code>PersonJSExports</code>协议方法时，添加一个协议方法来弥补这一点。见下例<code>create...</code>类方法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom protocol must be declared with `@objc`</span></span><br><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">PersonJSExports</span> : <span class=\"title\">JSExport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 在JavaScript中调用这个类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">### 定义<span class=\"title\">Person</span>模型</span></span><br><span class=\"line\"><span class=\"class\">定义一个遵守`<span class=\"title\">PersonJSExports</span>`协议的`<span class=\"title\">Person</span>`数据模</span></span><br><span class=\"line\"><span class=\"class\">// <span class=\"title\">Custom</span> <span class=\"title\">class</span> <span class=\"title\">must</span> <span class=\"title\">inherit</span> <span class=\"title\">from</span> `<span class=\"title\">NSObject</span>`</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">objc</span> <span class=\"title\">class</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>, <span class=\"title\">PersonJSExports</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// JS协议属性必须声明为`dynamic`</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(firstName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>)   </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.firstName = firstName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.lastName = lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span> </span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>(firstName: firstName, lastName: lastName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(firstName) \\(lastName)\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSContext-配置\"><a href=\"#JSContext-配置\" class=\"headerlink\" title=\"JSContext 配置\"></a>JSContext 配置</h3><p>之前，我们可以用我们已经创建的 Person 类，我们需要将其导出到 <code>JavaScript</code> 环境。我们也将借此导入<a href=\"http://mustache.github.io\" target=\"_blank\" rel=\"noopener\">Mustache JS library</a>，我们将应用模板到我们的 Person 对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export Person class，JS中以该`Person标示符`作为类名使用</span></span><br><span class=\"line\">context.setObject(<span class=\"type\">Person</span>.<span class=\"keyword\">self</span>, forKeyedSubscript: <span class=\"string\">\"Person\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load Mustache.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> mustacheJSString = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    context.evaluateScript(mustacheJSString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JavaScript-数据和进程\"><a href=\"#JavaScript-数据和进程\" class=\"headerlink\" title=\"JavaScript 数据和进程\"></a>JavaScript 数据和进程</h3><p>下面就来看看我们简单的 JSON 例子，这段代码将创建新的 Person 实例。<br>数据：<br><figure class=\"highlight json\"><figcaption><span>Persons.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Grace\"</span>,     <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hopper\"</span>,   <span class=\"attr\">\"year\"</span>: <span class=\"number\">1906</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Ada\"</span>,       <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Lovelace\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1815</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Margaret\"</span>,  <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hamilton\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1936</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>创建新的 Person 实例：<br><figure class=\"highlight js\"><figcaption><span>loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadPeopleFromJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonString</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(jsonString);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; data.length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在swift中的js协议方法：`createWithFirstName:lastName:`</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = Person.createWithFirstNameLastName(data[i].first, data[i].last);</span><br><span class=\"line\">        person.birthYear = data[i].year;</span><br><span class=\"line\">        <span class=\"comment\">//`push:`添加到数组中</span></span><br><span class=\"line\">        people.push(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> people;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><code>JSContext</code>加载装换<code>loadPeople.js</code>脚本<br>加载js脚本之后，<code>loadPeopleFromJSON</code>即可作为下标被<code>context</code>调用该方法:<br><figure class=\"highlight swift\"><figcaption><span>加载loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load loadPeople.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> loadPeople = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载js脚本之后，`loadPeopleFromJSON`即可作为下标被context调用该方法</span></span><br><span class=\"line\">    context.evaluateScript(loadPeople)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：JavaScriptCore 转换的 Objective-C / Swift 方法名是 JavaScript 兼容的。由于 JavaScript 没有参数 名称，任何外部参数名称都会被转换为驼峰形式并且附加到函数名后。在这个例子中，Objective-C 的方法 createWithFirstName:lastName: 变成了在JavaScript中的 createWithFirstNameLastName()。</p>\n</blockquote>\n<h3 id=\"使用Mustache-模板-渲染\"><a href=\"#使用Mustache-模板-渲染\" class=\"headerlink\" title=\"使用Mustache 模板 渲染\"></a>使用Mustache 模板 渲染</h3><p>Mustache 是一个很强大的 template 引擎，可以通过解析 json 来绑定并渲染占位符。如果你做过一些前端开发的话，会知道这是一种很常用的 HTML 绑定 Model 的做法，GRMustache.swift 是这个框架的 Swift 实现。<br><a href=\"http://blog.csdn.net/kevin_luan/article/details/46485561\" target=\"_blank\" rel=\"noopener\">mustache模板引擎</a><br><a href=\"https://github.com/BjornRuud/Swiftache\" target=\"_blank\" rel=\"noopener\">Mustache 的 Swift 语言实现版本</a><br>mustache的特点就是很语法很简单，主要语法如下:</p>\n<pre><code>1. {{ name }} 打印变量，默认是escape过的，如果不要escape,用3个分隔符 {{{ name }}}，或者用 {{ &name }}，这个和分隔符无关\n2. {{#person}}…{{/person}} 区块，4种方式\n    person 是真假值，决定是否输出\n    person 是list of array，会循环展开 for x in person:section.render(&apos;xxx)\n    person 是匿名函数/object, 区块包裹的html 会作为参数传递进去\n    person 是dict，直接打印 dict[key]\n3. {{^person}}…{{/person}，反向区块\n    4. {{！name }} 注释\n5. {{> box }} 载入子模块\n</code></pre><p>加载 <code>JSON 数据</code>，调用 <code>JSContext</code> 将数据解析成 <code>Person 对象</code>的数组，并用 <code>Mustache 模板</code>呈现每个<code>Person</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件`Persons.json`中加载json数据</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> peopleJSON = <span class=\"type\">NSString</span>(contentsOfFile:..., encoding: <span class=\"type\">NSUTF8StringEncoding</span>, error: <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取js中定义的`loadPeopleFromJSON`的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> load = context.objectForKeyedSubscript(<span class=\"string\">\"loadPeopleFromJSON\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 通过调用load方法将`JSON 数据`解析成`Person 对象`的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> people = load.callWithArguments([peopleJSON]).toArray() <span class=\"keyword\">as</span>? [<span class=\"type\">Person</span>] </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get rendering function and create template</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> mustacheRender = context.objectForKeyedSubscript(<span class=\"string\">\"Mustache\"</span>).objectForKeyedSubscript(<span class=\"string\">\"render\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> template = <span class=\"string\">\", born \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop through people and render Person object as string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> people </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println</span>(mustacheRender.callWithArguments([template, person]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Grace Hopper, born 1906</span></span><br><span class=\"line\"><span class=\"comment\">// Ada Lovelace, born 1815</span></span><br><span class=\"line\"><span class=\"comment\">// Margaret Hamilton, born 1936</span></span><br></pre></td></tr></table></figure><br>JavaScript 代码段可能是附带应用一起发布的基本的用户定义的插件。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"},{"name":"json","path":"api/tags/json.json"}]},{"title":"Java​Script​Core实现swift混编","slug":"swift/Java​Script​Core实现swift混编","date":"2017-02-12T13:34:06.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/Java​Script​Core实现swift混编.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>OS X Mavericks 和 iOS 7 引入了 <code>JavaScriptCore</code> 库，它把 <code>WebKit 的 JavaScript</code> 引擎用 <code>Objective-C</code> 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，<code>JavaScript</code> 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。</p>\n<ol>\n<li>如何从 <code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</li>\n<li>那么反向呢？怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？</li>\n</ol>\n<h2 id=\"swift通过JSContext调用JavaScript\"><a href=\"#swift通过JSContext调用JavaScript\" class=\"headerlink\" title=\"swift通过JSContext调用JavaScript\"></a>swift通过JSContext调用JavaScript</h2><p>如何从<code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</p>\n<h3 id=\"全局实例JSContext：运行JavaScript代码的环境\"><a href=\"#全局实例JSContext：运行JavaScript代码的环境\" class=\"headerlink\" title=\"全局实例JSContext：运行JavaScript代码的环境\"></a>全局实例JSContext：运行JavaScript代码的环境</h3><p>全局实例<code>JSContext</code>作用就像在浏览器内运行的一个<code>JavaScript</code>脚本，<code>JSContext</code> 类似于 <code>window</code>。<br>通过<code>JSContext</code>实例运行<code>JavaScript</code>代码<code>创建变量</code>，<code>做计算</code>，<code>定义方法</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"type\">JSContext</span>()    <span class=\"comment\">//创建全局环境</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var num = 5 + 5\"</span>) <span class=\"comment\">//计算</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var names = ['Grace', 'Ada', 'Margaret']\"</span>) <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var triple = function(value) &#123; return value * 3 &#125;\"</span>) <span class=\"comment\">//定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleNum: <span class=\"type\">JSValue</span> = context.evaluateScript(<span class=\"string\">\"triple(num)\"</span>)  </span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动态类型JSValue-包裹JSContext环境下每一个可能的JS值\"><a href=\"#动态类型JSValue-包裹JSContext环境下每一个可能的JS值\" class=\"headerlink\" title=\"动态类型JSValue:包裹JSContext环境下每一个可能的JS值\"></a>动态类型JSValue:包裹JSContext环境下每一个可能的JS值</h3><p><code>JavaScript</code> 是动态语言，所以动态类型<code>JSValue</code>包裹JSContext环境中任何可能的JS值，字符串和数字；数组、对象和方法；甚至错误和特殊的 JavaScript 值诸如 <code>null</code> 和 <code>undefined</code>。<br>获取<code>tripleNum</code>值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tripled: \\(tripleNum.toInt32())\"</span>)</span><br></pre></td></tr></table></figure><br><code>JSValue</code> 包括一系列方法用于访问其可能的值以保证有正确的 <code>Foundation 基本类型</code><br>包括：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800\"></p>\n<h3 id=\"下标取值：访问JSContext环境下的任何值\"><a href=\"#下标取值：访问JSContext环境下的任何值\" class=\"headerlink\" title=\"下标取值：访问JSContext环境下的任何值\"></a>下标取值：访问JSContext环境下的任何值</h3><p><code>JSContext</code> 和 <code>JSValue</code> 实例可以使用下标的方式访问之前创建的 <code>context</code> 的任何值。</p>\n<ul>\n<li><code>JSContext</code>：需要一个字符串下标</li>\n<li><code>JSValue</code>：允许使用<code>字符串</code>或<code>整数</code>标来得到里面的对象和数组</li>\n</ul>\n<h4 id=\"JSContext下标取值\"><a href=\"#JSContext下标取值\" class=\"headerlink\" title=\"JSContext下标取值\"></a>JSContext下标取值</h4><ol>\n<li><code>swift</code>语法<figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = context.objectForKeyedSubscript(<span class=\"string\">\"names\"</span>)  <span class=\"comment\">//JSContext字符串下标原始方法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"JSValue整数下标原始方法\"><a href=\"#JSValue整数下标原始方法\" class=\"headerlink\" title=\"JSValue整数下标原始方法\"></a>JSValue整数下标原始方法</h4><figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialName = names.objectAtIndexedSubscript(<span class=\"number\">0</span>)   <span class=\"comment\">//JSValue整数下标原始方法</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The first name: \\(initialName.toString())\"</span>)  <span class=\"comment\">//JSValue method</span></span><br><span class=\"line\"><span class=\"comment\">// The first name: Grace</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里，Objective-C 代码可以利用下标表示法，如下例：context[@”names”]，names[0]，[initialName toString]，Swift 目前只公开<a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">原始方法</a>:<code>objectAtKeyedSubscript()</code> 和 <code>objectAtIndexedSubscript()</code>来让下标成为可能。</p>\n</blockquote>\n<h3 id=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"><a href=\"#callWithArguments调用JS方法：只需传入Foundation基本类型参数\" class=\"headerlink\" title=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"></a>callWithArguments调用JS方法：只需传入Foundation基本类型参数</h3><p>上述<code>JavaScript</code>代码中，<code>JSValue</code>包装了一个<code>triple函数</code>，在<code>Objective-C / Swift</code> 代码中可以使用 <code>Foundation基本类型</code>作为参数来直接调用该函数。再次，<code>JavaScriptCore</code> 很轻松的处理了这个桥接：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleFunction = context.objectForKeyedSubscript(<span class=\"string\">\"triple\"</span>) <span class=\"comment\">//下标取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = tripleFunction.callWithArguments([<span class=\"number\">5</span>]) <span class=\"comment\">//传入基本类型参数直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Five tripled: \\(result.toInt32())\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exceptionHandler错误处理\"><a href=\"#exceptionHandler错误处理\" class=\"headerlink\" title=\"exceptionHandler错误处理\"></a><code>exceptionHandler</code>错误处理</h3><p><code>exceptionHandler</code> 是一个接收<code>JSContext 引用</code>和<code>异常本身</code>的回调处理的闭包。<br>通过设置上下文的 <code>exceptionHandler</code> 属性，可以观察和记录<code>语法</code>，<code>类型</code>以及<code>运行时错误</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = &#123; context, exception <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"JS Error: \\(exception)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>)</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"JS Error: %@\"</span>, exception);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[context evaluateScript:<span class=\"string\">@\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>];</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript-通过JSContext调用-swift／OC\"><a href=\"#JavaScript-通过JSContext调用-swift／OC\" class=\"headerlink\" title=\"JavaScript 通过JSContext调用 swift／OC\"></a>JavaScript 通过JSContext调用 swift／OC</h2><p>怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？<br>让 <code>JSContext</code> 访问我们的本地客户端代码的方式主要有两种：</p>\n<ol>\n<li><code>block块</code>键值对：把OC中的<code>block块</code>赋值给<code>JSContext</code>的一个标示键，该标识键的<code>JSValue</code>可以通过<code>callWithArguments</code>调用.</li>\n<li><code>JSExport 协议</code>。</li>\n</ol>\n<h3 id=\"block块-键值对-该block键的JSValue通过callWithArguments调用\"><a href=\"#block块-键值对-该block键的JSValue通过callWithArguments调用\" class=\"headerlink\" title=\"block块 键值对:该block键的JSValue通过callWithArguments调用\"></a>block块 键值对:该block键的<code>JSValue</code>通过<code>callWithArguments</code>调用</h3><p>当一个 <code>Objective-C block</code> 被赋给 <code>JSContext</code> 里的一个标识符，<code>JavaScriptCore</code> 会自动的把 <code>block</code> 封装在 <code>JavaScript 函数</code>里，并以该标示符作为函数名来调用该block的实现。这使得在 <code>JavaScript</code> 中可以简单的使用 <code>Foundation</code> 和 <code>Cocoa</code>类，所有的桥接都为你做好了。<br><a href=\"http://nshipster.cn/cfstringtransform/\" target=\"_blank\" rel=\"noopener\">CFStringTransform</a>处理语言的强大威力</p>\n<p>在 <code>JSContext</code> 中使用 <code>Swift 闭包</code>需要注意两点:</p>\n<ol>\n<li>与 <code>@objc_block</code> 属性一起声明</li>\n<li>使用Swift中的<code>unsafeBitCast()</code>函数，把对象转换为<code>AnyObject</code></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> simplifyString: <span class=\"meta\">@objc</span>_block <span class=\"type\">String</span> -&gt; <span class=\"type\">String</span> = &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mutableString = <span class=\"type\">NSMutableString</span>(string: input) <span class=\"keyword\">as</span> <span class=\"type\">CFMutableStringRef</span></span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformToLatin, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformStripCombiningMarks, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mutableString</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.setObject(<span class=\"built_in\">unsafeBitCast</span>(simplifyString, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>), forKeyedSubscript: <span class=\"string\">\"simplifyString\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(context.evaluateScript(<span class=\"string\">\"simplifyString('안녕하새요!')\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// annyeonghasaeyo!</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给标示符赋值一个oc-block，该标示符会被自动装换为JavaScript函数</span></span><br><span class=\"line\">context[<span class=\"string\">@\"simplifyString\"</span>] = ^(<span class=\"built_in\">NSString</span> *input) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableString = [input mutableCopy];</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformToLatin, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformStripCombiningMarks, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> mutableString;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [context evaluateScript:<span class=\"string\">@\"simplifyString('안녕하새요!')\"</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>由于 <code>block</code> 可以保有变量引用，而且 <code>JSContext</code> 也强引用它所有的变量，为了避免强引用循环需要特别小心。<br>避免保有<code>JSContext</code> 或<code>一个 block</code> 里的任何 <code>JSValue</code>。相反，使用 <code>[JSContext currentContext]</code> 得到当前上下文，并把你需要的任何值用参数传递。</p>\n<h3 id=\"JSExport-协议\"><a href=\"#JSExport-协议\" class=\"headerlink\" title=\"JSExport 协议\"></a>JSExport 协议</h3><p>在继承<code>JSExport 协议</code>的子协议里声明的属性，实例方法还是类方法，都会自动暴漏给<code>JavaScript</code>代码来调用。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"}]},{"title":"用Git将代码恢复到一个历史的版本","slug":"git/用Git将代码恢复到一个历史的版本","date":"2017-02-10T18:19:48.000Z","updated":"2017-02-10T18:29:19.000Z","comments":true,"path":"api/articles/git/用Git将代码恢复到一个历史的版本.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>经历：将代码全提交到默认的head分支中，切换分支后，无法找到分支的严重后果：<br>目的：在当前分支上，将代码恢复到一个历史的提交版本上。</p>\n<h2 id=\"暴力的方式\"><a href=\"#暴力的方式\" class=\"headerlink\" title=\"暴力的方式\"></a>暴力的方式</h2><p>如果仓库是自己在用（不影响别人），那么可以使用<code>git reset --hard &lt;target_commit_id&gt;</code> 来恢复到指定的提交，再用 git push -f 来强制更新远程的分支指针。为了保证万一需要找回历史提交，我们可以先打一个 tag 来备份。</p>\n<ol>\n<li>第一步：查看本地的索引的提交日志：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog \t\t</span></span><br><span class=\"line\">a1d09fd HEAD@&#123;0&#125;: checkout: moving from all to master</span><br><span class=\"line\">a1d09fd HEAD@&#123;1&#125;: checkout: moving from master to all</span><br><span class=\"line\">a1d09fd HEAD@&#123;2&#125;: checkout: moving from HEAD to master</span><br><span class=\"line\">a1d09fd HEAD@&#123;3&#125;: checkout: moving from all to HEAD</span><br></pre></td></tr></table></figure></li>\n<li>第二步：根据上面的sh2值，回滚：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset  —hard  a1d09fd</span><br></pre></td></tr></table></figure>\n这样就可以找回代码.</li>\n</ol>\n<h2 id=\"温柔的方式\"><a href=\"#温柔的方式\" class=\"headerlink\" title=\"温柔的方式\"></a>温柔的方式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">回滚</span></span><br><span class=\"line\">git reset  —hard  a1d09fd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">将当前代码切换回最新的提交</span></span><br><span class=\"line\">git reset --soft origin/source</span><br></pre></td></tr></table></figure>\n<p>此时工作区变成了历史的提交内容，这个时候用 <code>git add</code> 和 <code>git commit</code> 即可.</p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"},{"name":"恢复","path":"api/categories/恢复.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"git","path":"api/tags/git.json"}]},{"title":"Hexo标签插件","slug":"hexo/Hexo标签插件","date":"2017-01-23T15:17:33.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/hexo/Hexo标签插件.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/gistflag.jpg?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<h2 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h2><hr>\n<p>在文章中插入引言，可包含作者、来源和标题。</p>\n<h3 id=\"别号：-quote\"><a href=\"#别号：-quote\" class=\"headerlink\" title=\"别号： quote\"></a>别号： quote</h3><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h4><hr>\n<h5 id=\"无参普通blockquote\"><a href=\"#无参普通blockquote\" class=\"headerlink\" title=\"无参普通blockquote\"></a>无参普通blockquote</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote %&#125;</span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h5 id=\"引用书上的句子\"><a href=\"#引用书上的句子\" class=\"headerlink\" title=\"引用书上的句子\"></a>引用书上的句子</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class=\"line\">Do not just seek happiness <span class=\"keyword\">for</span> yourself. Seek happiness <span class=\"keyword\">for</span> all. Through kindness. Through mercy.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>boyer huo </strong><cite>Wide Awake</cite></footer></blockquote>\n<h5 id=\"引用-Twitter\"><a href=\"#引用-Twitter\" class=\"headerlink\" title=\"引用 Twitter\"></a>引用 Twitter</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote @DevDocs https:<span class=\"comment\">//twitter.com/devdocs/status/356095192085962752 %&#125;</span></span><br><span class=\"line\">NEW: DevDocs now comes <span class=\"keyword\">with</span> syntax highlighting. http:<span class=\"comment\">//devdocs.io</span></span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href=\"http://devdocs.io\" target=\"_blank\" rel=\"noopener\">http://devdocs.io</a></p>\n<footer><strong>@DevDocs</strong><cite><a href=\"https://twitter.com/devdocs/status/356095192085962752\" target=\"_blank\" rel=\"noopener\">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>\n<h5 id=\"引用网络上的文章\"><a href=\"#引用网络上的文章\" class=\"headerlink\" title=\"引用网络上的文章\"></a>引用网络上的文章</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote Seth Godin http:<span class=\"comment\">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></span><br><span class=\"line\">Every interaction is both precious and an opportunity to delight.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>\n<footer><strong>Seth Godin</strong><cite><a href=\"http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html\" target=\"_blank\" rel=\"noopener\">Welcome to Island Marketing</a></cite></footer></blockquote>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><hr>\n<p>在文章中插入代码。</p>\n<h3 id=\"别名-code\"><a href=\"#别名-code\" class=\"headerlink\" title=\"别名:code\"></a>别名:code</h3><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例\"></a>样例</h4><hr>\n<h5 id=\"普通的代码块\"><a href=\"#普通的代码块\" class=\"headerlink\" title=\"普通的代码块\"></a>普通的代码块</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock %&#125;</span><br><span class=\"line\">alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"指定语言\"><a href=\"#指定语言\" class=\"headerlink\" title=\"指定语言\"></a>指定语言</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock lang:objc %&#125;</span><br><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure>\n<h5 id=\"附加说明\"><a href=\"#附加说明\" class=\"headerlink\" title=\"附加说明\"></a>附加说明</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock <span class=\"built_in\">Array</span>.map %&#125;</span><br><span class=\"line\">array.map(callback[, thisArg])</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>Array.map</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.map</span><br><span class=\"line\">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure>\n<h5 id=\"附加说明和网址\"><a href=\"#附加说明和网址\" class=\"headerlink\" title=\"附加说明和网址\"></a>附加说明和网址</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock _.compact http:<span class=\"comment\">//underscorejs.org/#compact Underscore.js %&#125;</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>_.compact</span><a href=\"http://underscorejs.org/#compact\" target=\"_blank\" rel=\"noopener\">Underscore.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compactUnderscore.js</span><br><span class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h2 id=\"反引号代码块-MD语法\"><a href=\"#反引号代码块-MD语法\" class=\"headerlink\" title=\"反引号代码块 (MD语法)\"></a>反引号代码块 (MD语法)</h2><hr>\n<h3 id=\"样例-2\"><a href=\"#样例-2\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"行内代码块\"><a href=\"#行内代码块\" class=\"headerlink\" title=\"行内代码块\"></a>行内代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行内 <span class=\"code\">`code 块 `</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩进代码块\"><a href=\"#缩进代码块\" class=\"headerlink\" title=\"缩进代码块\"></a>缩进代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Some comments</span><br><span class=\"line\">line 1 of code</span><br><span class=\"line\">line 2 of code</span><br><span class=\"line\">line 3 of code</span><br></pre></td></tr></table></figure>\n<h4 id=\"多行代码块\"><a href=\"#多行代码块\" class=\"headerlink\" title=\"多行代码块\"></a>多行代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">``` [language] [title] [url] [link text] </span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    代码块</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"> `` `</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><hr>\n<h3 id=\"样例-3\"><a href=\"#样例-3\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"默认左对齐\"><a href=\"#默认左对齐\" class=\"headerlink\" title=\"默认左对齐\"></a>默认左对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|-------|-------|----------|</span><br><span class=\"line\">|文本内容 |文本内容| 文本内容  |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"向右对齐\"><a href=\"#向右对齐\" class=\"headerlink\" title=\"向右对齐\"></a>向右对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|-------:|-------:|-------:|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">三种布局</th>\n<th style=\"text-align:right\">路径:(储存到路径文件夹)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">post</td>\n<td style=\"text-align:right\">source/_posts</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">page</td>\n<td style=\"text-align:right\">source</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">draft</td>\n<td style=\"text-align:right\">source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"向左对齐\"><a href=\"#向左对齐\" class=\"headerlink\" title=\"向左对齐\"></a>向左对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|:------|:------|:------|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">日期变量</th>\n<th style=\"text-align:left\">描述:（可以通过日期来管理文章）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:title</td>\n<td style=\"text-align:left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:year</td>\n<td style=\"text-align:left\">建立的年份，比如， 2015</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:month</td>\n<td style=\"text-align:left\">建立的月份（有前导零），比如， 04</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:i_month</td>\n<td style=\"text-align:left\">建立的月份（无前导零），比如， 4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:day</td>\n<td style=\"text-align:left\">建立的日期（有前导零），比如， 07</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:i_day</td>\n<td style=\"text-align:left\">建立的日期（无前导零），比如， 7</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"居中对齐\"><a href=\"#居中对齐\" class=\"headerlink\" title=\"居中对齐\"></a>居中对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|:------:|:------:|:------:|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">变量</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局当:false不加任何布局样式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Pull-Quote\"><a href=\"#Pull-Quote\" class=\"headerlink\" title=\"Pull Quote\"></a>Pull Quote</h2><hr>\n<p>在文章中插入 Pull quote。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% pullquote [class] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"jsFiddle\"><a href=\"#jsFiddle\" class=\"headerlink\" title=\"jsFiddle\"></a>jsFiddle</h2><hr>\n<p><a href=\"https://jsfiddle.net\" target=\"_blank\" rel=\"noopener\">官网</a><br>在文章中嵌入 <code>jsFiddle</code> 在线的shell编辑器,可以供我们在线测试html、js、和css代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h2><hr>\n<p>在文章中嵌入 Gist<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>filename</code>: 可选，当不指定文件名时，嵌入显示<code>gist_id</code>下所有文件。</p>\n<p>一个gist可能存在多个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gist.github.com/dergachev/4627207#file-gif-screencast-osx-md</span><br></pre></td></tr></table></figure></p>\n<p><code>4627207</code>：表示gist_id ，<code>#file-</code>后边内容：表示Gist中某个文件名</p>\n<p>如下:指定文章中嵌入<code>ecba275d5e4404678354</code>中的<code>NSAttributeString相关方法.m</code>内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist ecba275d5e4404678354 NSAttributeString相关方法.m %&#125;</span><br></pre></td></tr></table></figure></p>\n<img title=\"gist需要翻墙\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/gistflag.jpg?imageMogr2/2/w/800\">\n<h2 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h2><hr>\n<p>在文章中插入 iframe。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><hr>\n<h3 id=\"样例-4\"><a href=\"#样例-4\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"Hexo语法\"><a href=\"#Hexo语法\" class=\"headerlink\" title=\"Hexo语法\"></a>Hexo语法</h4><hr>\n<p>在文章中插入指定大小的图片。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MD语法\"><a href=\"#MD语法\" class=\"headerlink\" title=\"MD语法\"></a>MD语法</h4><hr>\n<h5 id=\"原图-toolTip\"><a href=\"#原图-toolTip\" class=\"headerlink\" title=\"原图+toolTip\"></a>原图+toolTip</h5><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo](http://boyers.coding.me/img/logo.png &quot;这是我的logo图片&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://boyers.coding.me/img/logo.png\" alt=\"boyer logo\" title=\"这是我的logo图片\"></p>\n<h5 id=\"注脚语法\"><a href=\"#注脚语法\" class=\"headerlink\" title=\"注脚语法\"></a>注脚语法</h5><hr>\n<p>可以在稍後的文件中再定义图片地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo][logo]</span><br><span class=\"line\">[logo]: http://boyers.coding.me/img/logo.png  &quot;这是我的logo图片&quot;</span><br></pre></td></tr></table></figure></p>\n<p>![boyer logo][logo]<br>[logo]: <a href=\"http://boyers.coding.me/img/logo.png\" target=\"_blank\" rel=\"noopener\">http://boyers.coding.me/img/logo.png</a>  “这是我的logo图片”</p>\n<h5 id=\"指定图片大小\"><a href=\"#指定图片大小\" class=\"headerlink\" title=\"指定图片大小\"></a>指定图片大小</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo](http://boyers.coding.me/img/logo.png [200] [200] &quot;这是我的logo图片&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://boyers.coding.me/img/logo.png [200] [200]\" alt=\"boyer logo\" title=\"这是我的logo图片\"></p>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><hr>\n<h3 id=\"样例-5\"><a href=\"#样例-5\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"Hexo语法-1\"><a href=\"#Hexo语法-1\" class=\"headerlink\" title=\"Hexo语法\"></a>Hexo语法</h4><hr>\n<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MD语法-1\"><a href=\"#MD语法-1\" class=\"headerlink\" title=\"MD语法\"></a>MD语法</h4><hr>\n<h5 id=\"智能识别超链接\"><a href=\"#智能识别超链接\" class=\"headerlink\" title=\"智能识别超链接\"></a>智能识别超链接</h5><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://boyers.coding.me</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" target=\"_blank\" rel=\"noopener\">http://boyers.coding.me</a></p>\n<h5 id=\"文本式\"><a href=\"#文本式\" class=\"headerlink\" title=\"文本式\"></a>文本式</h5><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">boyer Blog</span>](<span class=\"link\">http://boyers.coding.me</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" target=\"_blank\" rel=\"noopener\">boyer Blog</a></p>\n<h5 id=\"toolTip式\"><a href=\"#toolTip式\" class=\"headerlink\" title=\"toolTip式\"></a>toolTip式</h5><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">boyer Blog</span>](<span class=\"link\">http://boyers.coding.me \"这是我的博客首页\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" title=\"这是我的博客首页\" target=\"_blank\" rel=\"noopener\">boyer Blog</a></p>\n<h2 id=\"Include-Code\"><a href=\"#Include-Code\" class=\"headerlink\" title=\"Include Code\"></a>Include Code</h2><hr>\n<p>插入 source 文件夹内的代码文件(.m/json/xml等)。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include_code [title] [lang:language] path/to/file %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h2><hr>\n<p>在文章中插入 Youtube 视频。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Vimeo\"><a href=\"#Vimeo\" class=\"headerlink\" title=\"Vimeo\"></a>Vimeo</h2><hr>\n<p>在文章中插入 Vimeo 视频。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用文章\"><a href=\"#引用文章\" class=\"headerlink\" title=\"引用文章\"></a>引用文章</h2><hr>\n<p>根据服务器根目录分为两种方式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path slug %&#125;</span><br><span class=\"line\">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以<code>Docker使用</code>博客为例</p>\n<ol>\n<li><p>相对路径</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path Docker使用 %&#125;</span><br></pre></td></tr></table></figure>\n<p> 相对于服务器根目录的位置：</p>\n /2016/12/22/Docker使用/</li>\n<li><p>绝对路径</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_link Docker使用 Docker使用 %&#125;</span><br></pre></td></tr></table></figure>\n<p> 本博中其他文章的超链接：</p>\n <a href=\"/2016/12/22/Docker使用/\" title=\"Docker使用\">Docker使用</a>\n</li>\n</ol>\n<h2 id=\"引用资源\"><a href=\"#引用资源\" class=\"headerlink\" title=\"引用资源\"></a>引用资源</h2><hr>\n<p>引用文章的资源。<br>Assets指的是那些不在source目录下的资源，比如图片、CSS文件或者Javascript文件。Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改 post_asset_folder 字段的设置，将其值改为 true 。<br>当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。<br>使用方法就是上面介绍过的标签插件。<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Raw\"><a href=\"#Raw\" class=\"headerlink\" title=\"Raw\"></a>Raw</h2><hr>\n<p>一些内容不想被主题渲染，可以使用该插件呈现原始状态。<br>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"迁移SVN库到git库保留branchs和tags","slug":"git/迁移SVN库到git库保留branchs和tags","date":"2017-01-18T12:21:46.000Z","updated":"2017-02-17T16:28:51.000Z","comments":true,"path":"api/articles/git/迁移SVN库到git库保留branchs和tags.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the de facto standard. Having helped many clients migrate from SVN to Git, here are my notes for a pain-free transition that will preserve the tags and branches in your SVN repository.</p>\n<h2 id=\"首先导入一个本地存储库\"><a href=\"#首先导入一个本地存储库\" class=\"headerlink\" title=\"首先导入一个本地存储库\"></a>首先导入一个本地存储库</h2><h3 id=\"在本地创建一个存储库的目录\"><a href=\"#在本地创建一个存储库的目录\" class=\"headerlink\" title=\"在本地创建一个存储库的目录\"></a>在本地创建一个存储库的目录</h3><figure class=\"highlight bash\"><figcaption><span>新建目录</span><a href=\"http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/#import-staging\" target=\"_blank\" rel=\"noopener\">Create a local staging directory</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir staging</span><br><span class=\"line\"><span class=\"built_in\">cd</span> staging</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：staging 可以用任何你喜欢的字符串命名，也可以放在本地的任何目录中。</p>\n</blockquote>\n<h3 id=\"初始化git-svn\"><a href=\"#初始化git-svn\" class=\"headerlink\" title=\"初始化git svn\"></a>初始化git svn</h3><h4 id=\"使用SVN标准库结构初始化\"><a href=\"#使用SVN标准库结构初始化\" class=\"headerlink\" title=\"使用SVN标准库结构初始化\"></a>使用SVN标准库结构初始化</h4><figure class=\"highlight bash\"><figcaption><span>标准初始化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVNRepo_ROOT_URL --stdlayout --prefix=svn/</span><br></pre></td></tr></table></figure>\n<p><code>SVNRepo_ROOT_URL</code>: 这里svn_url是完全限定的URL下的标准目录，其目录下包括三个目录：<code>trunk</code>，<code>branches</code>， <code>tags</code>。<br><code>--prefix</code>: 强烈建议使用<code>svn/</code>作为分支和标签的前缀：设置为 <code>--prefix=svn/</code>. 这样有助于防止Git用户混淆原声的Git分支和标签。</p>\n<h4 id=\"使用SVN自定义库结构初始化\"><a href=\"#使用SVN自定义库结构初始化\" class=\"headerlink\" title=\"使用SVN自定义库结构初始化\"></a>使用SVN自定义库结构初始化</h4><p>使用非标准的svn layout 来新建svn库，即可以根据自己喜好来自定义分支，标签目录：<br><figure class=\"highlight bash\"><figcaption><span>非标准化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVN_URL -T Trunk -b Branches -t Tags --prefix=svn/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><ol>\n<li><code>review</code>命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review the config</span><br></pre></td></tr></table></figure>\n会有以下信息输出：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn-remote.svn.url=svn://svn.example.com</span><br><span class=\"line\">svn-remote.svn.fetch=some/path/trunk:refs/remotes/svn/trunk</span><br><span class=\"line\">svn-remote.svn.tags=some/path/tags/*:refs/remotes/svn/tags/*</span><br></pre></td></tr></table></figure>\n高级用户可以在执行之前，修改相关配置。</li>\n<li><code>git config</code>命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local --list </span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=true</span><br><span class=\"line\">core.bare=false</span><br><span class=\"line\">core.logallrefupdates=true</span><br><span class=\"line\">core.ignorecase=true</span><br><span class=\"line\">core.precomposeunicode=true</span><br><span class=\"line\">svn-remote.svn.url=https://huoshuguang@192.168.85.6/svn/PBBReader_Mac</span><br><span class=\"line\">svn-remote.svn.fetch=trunk:refs/remotes/origin/trunk</span><br><span class=\"line\">svn-remote.svn.branches=branches/*:refs/remotes/origin/*</span><br><span class=\"line\">svn-remote.svn.tags=tags/*:refs/remotes/origin/tags/*</span><br><span class=\"line\">remote.PBBReader.url=https://git.oschina.net/huosan/PBBReader.git</span><br><span class=\"line\">remote.PBBReader.fetch=+refs/heads/*:refs/remotes/PBBReader/*</span><br><span class=\"line\">branch.master.remote=PBBReader</span><br><span class=\"line\">branch.master.merge=refs/heads/master</span><br><span class=\"line\">remote.server.url=https://server.local/git/PBBReader.git</span><br><span class=\"line\">remote.server.fetch=+refs/heads/*:refs/remotes/server/*</span><br><span class=\"line\">branch.v34.remote=PBBReader</span><br><span class=\"line\">branch.v34.merge=refs/heads/v28</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"从远程SVN服务器拉取代码到新建的本地存储库\"><a href=\"#从远程SVN服务器拉取代码到新建的本地存储库\" class=\"headerlink\" title=\"从远程SVN服务器拉取代码到新建的本地存储库\"></a>从远程SVN服务器拉取代码到新建的本地存储库</h3><figure class=\"highlight bash\"><figcaption><span>拉取</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看本地库状态\"><a href=\"#查看本地库状态\" class=\"headerlink\" title=\"查看本地库状态\"></a>查看本地库状态</h2><h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><figure class=\"highlight bash\"><figcaption><span>status</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight bash\"><figcaption><span>内容</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看分支信息\"><a href=\"#查看分支信息\" class=\"headerlink\" title=\"查看分支信息\"></a>查看分支信息</h3><figure class=\"highlight bash\"><figcaption><span>branch</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* master</span><br><span class=\"line\">remotes/svn/tags/0.1.0</span><br><span class=\"line\">remotes/svn/trunk</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：SVN标记和分支（在这种情况下，没有任何分支机构）仅作为远程引用存在。</p>\n</blockquote>\n<h2 id=\"SVN分支和标签转为本地git仓库中的标签和分支\"><a href=\"#SVN分支和标签转为本地git仓库中的标签和分支\" class=\"headerlink\" title=\"SVN分支和标签转为本地git仓库中的标签和分支\"></a>SVN分支和标签转为本地git仓库中的标签和分支</h2><h3 id=\"SVN分支迁移\"><a href=\"#SVN分支迁移\" class=\"headerlink\" title=\"SVN分支迁移\"></a>SVN分支迁移</h3><p>把远程svn分支转换为本地git仓库中的分支：<br><figure class=\"highlight bash\"><figcaption><span>分支转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"branches/\"</span> | sed <span class=\"string\">'s/ branches\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$branch</span> refs/remotes/<span class=\"variable\">$branch</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"SVN标签迁移\"><a href=\"#SVN标签迁移\" class=\"headerlink\" title=\"SVN标签迁移\"></a>SVN标签迁移</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的标签 :<figure class=\"highlight bash\"><figcaption><span>tags转换tags</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git tag -a -m<span class=\"string\">\"Converting SVN tags\"</span> <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"SVN标签转为本地git分支\"><a href=\"#SVN标签转为本地git分支\" class=\"headerlink\" title=\"SVN标签转为本地git分支\"></a>SVN标签转为本地git分支</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的分支:<figure class=\"highlight bash\"><figcaption><span>标签转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"在本地测试git命令push和clone操作\"><a href=\"#在本地测试git命令push和clone操作\" class=\"headerlink\" title=\"在本地测试git命令push和clone操作\"></a>在本地测试git命令push和clone操作</h2><p>在推送到正式远程库之前，可以通过向本地git库中推送和clone操作。</p>\n<h3 id=\"创建一个临时的git库，用于测试push和clone测试\"><a href=\"#创建一个临时的git库，用于测试push和clone测试\" class=\"headerlink\" title=\"创建一个临时的git库，用于测试push和clone测试\"></a>创建一个临时的git库，用于测试push和clone测试</h3><p>在git中的说法，<code>bare</code>库是一个不存在工作空间备份的库。<br><figure class=\"highlight bash\"><figcaption><span>bare创建</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure><br>这样，在<code>~/test</code>就生成了一个<code>bare</code>git库。</p>\n<h3 id=\"push-测试\"><a href=\"#push-测试\" class=\"headerlink\" title=\"push 测试\"></a>push 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add <span class=\"built_in\">test</span> `~/<span class=\"built_in\">test</span>`</span><br><span class=\"line\">git push --all <span class=\"built_in\">test</span></span><br><span class=\"line\">git push --tags <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>把<code>~/test</code>的放在反引号中，反引号在命令行中会<code>~</code>自动补全为一个绝对路径。如果你给一个绝对路径或URL，可以省略反引号。<br>尽管它的名字，<code>--all</code>选项不推送<code>tags</code>，所以需要对标签单独push操作。</p>\n<h3 id=\"clone-测试\"><a href=\"#clone-测试\" class=\"headerlink\" title=\"clone 测试\"></a>clone 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir aclone</span><br><span class=\"line\"><span class=\"built_in\">cd</span> aclone</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> ~/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>There should now be a clone with a working copy in ~/aclone/test.<br>在<code>~/aclone/test</code>目录中将会clone出一个工作空间备份，检查确保一切OK，这样就可以向正式服务器上推送。</p>\n<h3 id=\"Push到正式git库中\"><a href=\"#Push到正式git库中\" class=\"headerlink\" title=\"Push到正式git库中\"></a>Push到正式git库中</h3><p>如果你是正式库服务器（github，coding）的管理员，为本地git库设置一个空的git库。<br>以<code>Unfuddle</code>为例,路径如下：<br><code>git@example.unfuddle.com:example/blah.git</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add unfuddle REAL_HOST_URL</span><br><span class=\"line\">git push --all unfuddle</span><br><span class=\"line\">git push --tags unfuddle</span><br></pre></td></tr></table></figure><br>在上面的例子中，制定了远程名：<code>unfuddle</code>而不是默认的<code>origin</code>。当然，你可以使用任何你喜欢的名字。</p>\n<h2 id=\"清理操作\"><a href=\"#清理操作\" class=\"headerlink\" title=\"清理操作\"></a>清理操作</h2><h3 id=\"删除临时git库\"><a href=\"#删除临时git库\" class=\"headerlink\" title=\"删除临时git库\"></a>删除临时git库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote rm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p><code>staging</code>库忽略<code>test</code>远程仓库.</p>\n<h3 id=\"清除clone生成的库\"><a href=\"#清除clone生成的库\" class=\"headerlink\" title=\"清除clone生成的库\"></a>清除clone生成的库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf aclone</span><br><span class=\"line\">rm -rf <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Either-keep-or-delete-the-staging-repo\"><a href=\"#Either-keep-or-delete-the-staging-repo\" class=\"headerlink\" title=\"Either keep or delete the staging repo\"></a>Either keep or delete the staging repo</h3><ol>\n<li>如果需要Git和SVN之间频繁交互，建议保留<code>staging</code>库这会节省你非常耗时的初始化：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure></li>\n<li>如果你确信svn是报废的，你可以删除：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf staging</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"题外小贴士\"><a href=\"#题外小贴士\" class=\"headerlink\" title=\"题外小贴士\"></a>题外小贴士</h1><p>在局域网内访问server搭建服务器提供的git服务：<br><figure class=\"highlight bash\"><figcaption><span>小贴士</span><a href=\"https://confluence.atlassian.com/fishkb/unable-to-clone-git-repository-due-to-self-signed-certificate-376838977.html\" target=\"_blank\" rel=\"noopener\">SSL证书问题</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://.../git/mupdf.git</span><br><span class=\"line\">错误：fatal: unable to access <span class=\"string\">'https://..../git/mupdf.git/'</span>: SSL certificate problem: Invalid certificate chain</span><br></pre></td></tr></table></figure><br>解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"},{"name":"svn","path":"api/categories/svn.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"git","path":"api/tags/git.json"},{"name":"svn","path":"api/tags/svn.json"},{"name":"git-svn","path":"api/tags/git-svn.json"}]},{"title":"Docker安装使用","slug":"Docker使用","date":"2016-12-21T21:25:29.000Z","updated":"2017-02-07T13:47:53.000Z","comments":true,"path":"api/articles/Docker使用.json","excerpt":null,"keywords":null,"cover":"http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"安装Docker-for-Mac\"><a href=\"#安装Docker-for-Mac\" class=\"headerlink\" title=\"安装Docker for Mac\"></a>安装<a href=\"https://www.docker.com/products/docker#/mac\" target=\"_blank\" rel=\"noopener\">Docker for Mac</a></h2><p>在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'下载dmg...'</span></span><br><span class=\"line\">curl -o Docker.dmg <span class=\"symbol\">https:</span>/<span class=\"regexp\">/dn-dao-github-mirror.qbox.me/docker</span><span class=\"regexp\">/install/mac</span><span class=\"regexp\">/Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">#安装Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \\</span></span><br><span class=\"line\"><span class=\"regexp\">| awk '&#123;$1=$2=\"\"; print $0&#125;'` | xargs -0 echo) \\</span></span><br><span class=\"line\"><span class=\"regexp\">&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /</span>Applications/ \\</span><br><span class=\"line\">&amp;&amp; open /Applications/Docker.app</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置-Docker-加速器镜像源\"><a href=\"#配置-Docker-加速器镜像源\" class=\"headerlink\" title=\"配置 Docker 加速器镜像源\"></a>配置 Docker 加速器镜像源</h3><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://142*****.m.daocloud.io</span><br></pre></td></tr></table></figure></p>\n<p>点击 Apply &amp; Restart 按钮使设置生效。</p>\n<h3 id=\"安装主机监控程序加速器\"><a href=\"#安装主机监控程序加速器\" class=\"headerlink\" title=\"安装主机监控程序加速器\"></a>安装主机监控程序加速器</h3><hr>\n<ol>\n<li>登录到 <code>DaoCloud 控制台</code>，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。</li>\n<li>安装<a href=\"https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg\" target=\"_blank\" rel=\"noopener\">DockerToolbox</a>，是一个完整的开发组件，通过安装和配置<code>DaoCloud加速器 v2</code>，提升下载 <code>Docker Hub 镜像</code>的速度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载pkg</span><br><span class=\"line\">curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg</span><br><span class=\"line\">//安装pkg</span><br><span class=\"line\">sudo installer -pkg DockerToolbox.pkg -target /</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>安装Toolbox好了，下一步：<br><img src=\"http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png\" alt=\"\"></li>\n<li><code>$ docker-machine start default</code>启动 Docker.<br>当执行后提示：<code>Host does not exist: &quot;default&quot;</code><figure class=\"highlight plain\"><figcaption><span>docker-machine create</span><a href=\"http://stackoverflow.com/a/38602630\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox default</span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>Docker 主机</code> DaoCloud 加速器的组件包：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL <span class=\"symbol\">https:</span>/<span class=\"regexp\">/get.daocloud.io/daomonit</span><span class=\"regexp\">/install.sh | sh -s d0312f829e9807ee0bf157******</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动组件包,会在「安装主机监控程序」的 DaoCloud 控制台页面下方显示一台已经接入的主机。</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/daoshell.png?imageMogr2/2/w/800\"></li>\n<li>执行<code>Dao Pull</code>命令,高速下载<code>Docker Hub</code>镜像文件<br>这台 Docker 主机已经被接入 DaoCloud 平台，用户可以在 DaoCloud 控制台的「我的集群」页面发现这台主机，可以执行管理和部署应用的操作。</li>\n</ol>\n<h3 id=\"从Docker-Hub-仓库中获取一个镜像\"><a href=\"#从Docker-Hub-仓库中获取一个镜像\" class=\"headerlink\" title=\"从Docker Hub 仓库中获取一个镜像\"></a>从Docker Hub 仓库中获取一个镜像</h3><hr>\n<p>Docker 使用类似 git 的方式管理镜像。通过基本的镜像可以定制创建出来不同种应用的 Docker 镜像。Docker Hub 是 Docker 官方提供的镜像中心。在这里可以很方便地找到各类应用、环境的镜像。由于 Docker 使用联合文件系统，所以镜像就像是夹心饼干一样一层层构成，相同底层的镜像可以共享。所以 Docker 还是相当节约磁盘空间的。要使用一 个镜像，需要先从远程的镜像注册中心拉取，这点非常类似 git。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker-命令创建管理容器\"><a href=\"#Docker-命令创建管理容器\" class=\"headerlink\" title=\"Docker 命令创建管理容器\"></a>Docker 命令创建管理容器</h2><hr>\n<h3 id=\"获取镜像的两种方式\"><a href=\"#获取镜像的两种方式\" class=\"headerlink\" title=\"获取镜像的两种方式\"></a>获取镜像的两种方式</h3><hr>\n<h4 id=\"1-docker-pull命令\"><a href=\"#1-docker-pull命令\" class=\"headerlink\" title=\"1. docker pull命令\"></a>1. <code>docker pull</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search perfectlysoft/ubuntu</span><br><span class=\"line\">docker pull perfectlysoft/ubuntu</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-docker-import命令\"><a href=\"#2-docker-import命令\" class=\"headerlink\" title=\"2. docker import命令\"></a>2. <code>docker import</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过镜像创建容器\"><a href=\"#通过镜像创建容器\" class=\"headerlink\" title=\"通过镜像创建容器\"></a>通过镜像创建容器</h3><hr>\n<p>创建一个容器有两种方式：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create 镜像名</span><br><span class=\"line\">docker run   镜像名   /<span class=\"regexp\">/立即启动容器 等价于：create + start 命令组合</span></span><br></pre></td></tr></table></figure></p>\n<p>进入容器终端控制台如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ec72dc76502e:/# ls</span><br><span class=\"line\">app  boot  etc   lib    media  opt   root  sbin  sys  usr</span><br><span class=\"line\">bin  dev   home  lib64  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"docker-run-images命令\"><a href=\"#docker-run-images命令\" class=\"headerlink\" title=\"docker run images命令\"></a><code>docker run images</code>命令</h4><ol>\n<li><p>样例1<br>执行<code>run images</code>，并将 Ubuntu 的 Shell 作为入口，进入Docker容器环境操作</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样例2<br>执行<code>docker start -i 容器</code>命令进入容器环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i 容器ID/容器名</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"从KitematicGUI进入容器环境\"><a href=\"#从KitematicGUI进入容器环境\" class=\"headerlink\" title=\"从KitematicGUI进入容器环境\"></a>从<code>Kitematic</code>GUI进入容器环境</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -c <span class=\"string\">\"clear &amp;&amp; docker exec -it perfectswift sh\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数<br>-i 表示这是一个交互容器，会把当前标准输入重定向到容器的标准输入中，而不是终止程序运行<br>-t 指为这个容器分配一个终端</p>\n</blockquote>\n<p>这时候我们成功创建了一个 Ubuntu 的容器，并将当前终端连接为这个 Ubuntu 的 bash shell。这时候就可以愉快地使用 Ubuntu 的相关命令了。</p>\n<h3 id=\"ps-查看容器状态\"><a href=\"#ps-查看容器状态\" class=\"headerlink\" title=\"ps 查看容器状态\"></a>ps 查看容器状态</h3><hr>\n<p>在容器运行期间，我们可以通过 <code>docker ps</code> 命令看到所有当前正在运行的容器。<br>添加-a参数可以看到所有创建的容器：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"容器ID标识\"><a href=\"#容器ID标识\" class=\"headerlink\" title=\"容器ID标识\"></a>容器ID标识</h3><hr>\n<p>每个容器都有一个唯一的 ID 标识，通过 ID 可以对这个容器进行管理和操作。在创建容器时，我们可以通过 –name 参数指定一个容器名称，如果没有指定系统将会分配一个，就像这里的「trusting_morse」。</p>\n<h3 id=\"启动-退出-移除容器\"><a href=\"#启动-退出-移除容器\" class=\"headerlink\" title=\"启动/退出/移除容器\"></a>启动/退出/移除容器</h3><hr>\n<p>启动：<code>start</code><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i trusting_morse</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：每次执行 docker run 命令都会创建新的容器，建议一次创建后，使用 docker start/stop 来启动和停用容器。</p>\n</blockquote>\n<p>退出：<br>按 <code>Ctrl+D</code> 退出</p>\n<p>移除：<code>rm</code>ID/name<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm [CONTAINER ID/NAMES]</span><br></pre></td></tr></table></figure></p>\n<p>重命名：<code>rename</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rename 容器ID newName</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建管理镜像\"><a href=\"#创建管理镜像\" class=\"headerlink\" title=\"创建管理镜像\"></a>创建管理镜像</h2><hr>\n<p>Docker 强大的威力在于可以把自己开发的应用随同各种依赖环境一起打包、分发、运行。要创建一个新的 Docker 镜像，通常基于一个已有的 Docker 镜像来创建。<br>Docker 提供了两种方式来创建镜像：</p>\n<ol>\n<li>把容器创建为一个新的镜像</li>\n<li>使用 Dockerfile 创建镜像。</li>\n</ol>\n<h3 id=\"将容器创建为镜像\"><a href=\"#将容器创建为镜像\" class=\"headerlink\" title=\"将容器创建为镜像\"></a>将容器创建为镜像</h3><hr>\n<ol>\n<li><p>为了创建一个新的镜像，我们先创建一个新的容器作为基底：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定制这个容器，例如我们可以配置 PHP 环境、将我们的项目代码部署在里面等：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php</span><br><span class=\"line\"><span class=\"comment\"># some other opreations ...</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当执行完操作之后，我们按 Ctrl+D 退出容器.</p>\n<ol>\n<li><p>获取定制后的容器ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">[root@localhost ~]# docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE                        COMMAND                    CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">cb2b06c83a50        ubuntu:latest                &quot;sh -c /bin/bash&quot;          7 minutes ago       Exited (0) 7 seconds ago                       trusting_morse</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>docker commit</code> 把这个容器变为一个镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit cb2b06c83a50 ubuntu:myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这时候 docker 容器会被创建为一个新的 Ubuntu 镜像，版本名称为 myubuntu。以后我们可以随时使用这个镜像来创建容器了，新的容器将自动包含上面对容器的操作。    </p>\n<ol>\n<li><p>打包/发布镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o myubuntu.tar.gz <span class=\"symbol\">ubuntu:</span>myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入打包镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><hr>\n<h4 id=\"通过Dockerfile创建镜像\"><a href=\"#通过Dockerfile创建镜像\" class=\"headerlink\" title=\"通过Dockerfile创建镜像\"></a>通过<code>Dockerfile</code>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build yourDir/Dockerfile</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>确保Dockerfile文件在一个目录中，否则会提示错误</p>\n</blockquote>\n<p>Docker Hub 提供了类似 GitHub 的镜像存管服务。一个镜像发布到 Docker Hub 不仅可以供更多人使用，而且便于镜像的版本管理。在一个企业内部可以通过自建 Docker Registry 的方式来统一管理和发布镜像。将 Docker Registry 集成到版本管理和上线发布的工作流之中，还有许多工作要做，在我整理出最佳实践后会第一时间分享。<br>使用命令行的方式创建 Docker 镜像通常难以自动化操作。在更多的时候，我们使用 Dockerfile 来创建 Docker 镜像。Dockerfile 是一个纯文本文件，它记载了从一个镜像创建另一个新镜像的步骤。撰写好 Dockerfile 文件之后，我们就可以轻而易举的使用 docker build 命令来创建镜像了。<br>Dockerfile 非常简单，仅有以下命令在 Dockerfile 中常被使用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">命令</th>\n<th style=\"text-align:right\">参数</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">#</td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">注释说明</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">FROM</td>\n<td style=\"text-align:right\"><image>[:<tag>]</tag></image></td>\n<td style=\"text-align:right\">从一个已有镜像创建，例如ubuntu:latest</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">MAINTAINER</td>\n<td style=\"text-align:right\">Author <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#115;&#111;&#109;&#101;&#x2d;&#x6f;&#x6e;&#x65;&#64;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;\">&#115;&#111;&#109;&#101;&#x2d;&#x6f;&#x6e;&#x65;&#64;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></td>\n<td style=\"text-align:right\">镜像作者名字，如Max Liu <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#115;&#111;&#x6d;&#x65;&#45;&#111;&#110;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#109;\">&#115;&#111;&#x6d;&#x65;&#45;&#111;&#110;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#109;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">RUN</td>\n<td style=\"text-align:right\"><cmd>或者[‘cmd1’, ‘cmd2’…]</cmd></td>\n<td style=\"text-align:right\">在镜像创建用的临时容器里执行单行命令</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ADD</td>\n<td style=\"text-align:right\"><src> <dest></dest></src></td>\n<td style=\"text-align:right\">将本地的<src>添加到镜像容器中的<dest>位置</dest></src></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">VOLUME</td>\n<td style=\"text-align:right\"><path></path>或者[‘/var’, ‘home’]</td>\n<td style=\"text-align:right\">将指定的路径挂载为数据卷</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">EXPOSE</td>\n<td style=\"text-align:right\"><port> [<port>…]</port></port></td>\n<td style=\"text-align:right\">将指定的端口暴露给主机</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENV</td>\n<td style=\"text-align:right\"><key> <value> 或者 <key> = <value></value></key></value></key></td>\n<td style=\"text-align:right\">指定环境变量值</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">CMD</td>\n<td style=\"text-align:right\">[“executable”,”param1”,”param2”]</td>\n<td style=\"text-align:right\">容器启动时默认执行的命令。注意一个Dockerfile中只有最后一个CMD生效。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENTRYPOINT</td>\n<td style=\"text-align:right\">[“executable”, “param1”, “param2”]</td>\n<td style=\"text-align:right\">容器的进入点</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h4><hr>\n<p>下面是一个 Dockerfile 的例子：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a comment</span></span><br><span class=\"line\">FROM <span class=\"symbol\">ubuntu:</span><span class=\"number\">14.04</span></span><br><span class=\"line\">MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</span><br><span class=\"line\">RUN gem install sinatra</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"CMD命令\"><a href=\"#CMD命令\" class=\"headerlink\" title=\"CMD命令\"></a><code>CMD</code>命令</h5><hr>\n<p><code>CMD</code>: 命令可用指定 Docker 容器启动时默认的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it ubuntu:latest sh -c &apos;/bin/bash&apos;</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>sh -c &#39;/bin/bash&#39;</code> 就是手工指定的<code>CMD</code>,否则容器将会使用默认 <code>CMD</code> 指定的命令启动。</p>\n<h5 id=\"ENTRYPOINT命令\"><a href=\"#ENTRYPOINT命令\" class=\"headerlink\" title=\"ENTRYPOINT命令\"></a><code>ENTRYPOINT</code>命令</h5><hr>\n<p>用来指定可执行文件、Shell 脚本，同时会并把启动参数或 CMD 指定的默认值，当作附加参数传递给 执行文件、Shell 脚本。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [<span class=\"string\">'/usr/bin/mysql'</span>]</span><br><span class=\"line\">CMD [<span class=\"string\">'-h 192.168.100.128'</span>, <span class=\"string\">'-p'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>执行mysql启动程序，连接<code>192.168.100.128</code> 主机,也可以通过指定参数，来连接别的主机。</p>\n<p>因此，我们在使用 Dockerfile 创建文件的时候，可以创建一个 entrypoint.sh 脚本，作为系统入口。在这个文件里面，我们可以进行一些基础性的自举操作，比如检查环境变量，根据需要初始化数据库等等。下面两个文件是我在日常工作的项目中添加的 Dockerfile 和 entrypoint.sh，仅供参考：<br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/Dockerfile</a><br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh</a><br>在准备好 Dockerfile 之后，我们就可以创建镜像了：</p>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t starlight36/simpleoa .</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"}]},{"title":"hackmd使用","slug":"hexo/hackmd使用","date":"2016-12-21T10:49:32.000Z","updated":"2017-09-23T17:28:44.000Z","comments":true,"path":"api/articles/hexo/hackmd使用.json","excerpt":null,"keywords":null,"cover":"https://octodex.github.com/images/minion.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"編輯\"><a href=\"#編輯\" class=\"headerlink\" title=\"編輯\"></a>編輯</h1><h2 id=\"快速鍵\"><a href=\"#快速鍵\" class=\"headerlink\" title=\"快速鍵\"></a>快速鍵</h2><p>跟又快又方便的Sublime text很像</p>\n<blockquote>\n<p>更多訊息請至 <a href=\"https://codemirror.net/demo/sublime.html\" target=\"_blank\" rel=\"noopener\">這裡</a></p>\n</blockquote>\n<h2 id=\"自動完成\"><a href=\"#自動完成\" class=\"headerlink\" title=\"自動完成\"></a>自動完成</h2><p>提供完整的 Markdown 自動完成與提示</p>\n<ul>\n<li>表情符號：輸入 <code>:</code> 顯示提示</li>\n<li>程式碼區塊：輸入 <code>3个</code> ` 加上一個字元 顯示提示 </li>\n<li>標頭：輸入 <code>#</code> 顯示提示</li>\n<li>參考：輸入 <code>[]</code> 顯示提示</li>\n<li>外部：輸入 <code>{}</code> 顯示提示</li>\n<li>圖片：輸入 <code>!</code> 顯示提示</li>\n</ul>\n<h2 id=\"標題\"><a href=\"#標題\" class=\"headerlink\" title=\"標題\"></a>標題</h2><p>會使用 <strong>第一個第一級標頭</strong> 作為筆記標題</p>\n<h2 id=\"標籤\"><a href=\"#標籤\" class=\"headerlink\" title=\"標籤\"></a>標籤</h2><p>如同以下方式來使用標籤，它們會顯示在您的 <strong>歷史紀錄</strong></p>\n<h6 id=\"tags-功能-酷-更新\"><a href=\"#tags-功能-酷-更新\" class=\"headerlink\" title=\"tags: 功能 酷 更新\"></a>tags: <code>功能</code> <code>酷</code> <code>更新</code></h6><h2 id=\"YAML-metadata\"><a href=\"#YAML-metadata\" class=\"headerlink\" title=\"YAML metadata\"></a><a href=\"./yaml-metadata\">YAML metadata</a></h2><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結</p>\n<ul>\n<li>robots: 設定網路機器人 meta</li>\n<li>lang: 設定瀏覽器顯示語言</li>\n<li>dir: 設定文字方向</li>\n<li>breaks: 設定是否使用分行</li>\n<li>mathjax: 設定是否使用 mathjax</li>\n</ul>\n<h2 id=\"表情符號\"><a href=\"#表情符號\" class=\"headerlink\" title=\"表情符號\"></a>表情符號</h2><p>您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:</p>\n<blockquote>\n<p>完整的表情符號列表 <a href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"noopener\">在這裡</a></p>\n</blockquote>\n<h2 id=\"待辦清單\"><a href=\"#待辦清單\" class=\"headerlink\" title=\"待辦清單\"></a>待辦清單</h2><ul>\n<li>[ ] 待辦<ul>\n<li>[x] 買些沙拉</li>\n<li>[x] 刷牙</li>\n<li>[ ] 喝水<a id=\"more\"></a>\n<h2 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h2>我們支援非常多程式語言，使用自動完成來看看有些什麼<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$initHighlight</span>(<span class=\"params\">block, cls</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls.search(<span class=\"regexp\">/\\bno\\-highlight\\b/</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> process(block, <span class=\"literal\">true</span>, <span class=\"number\">0x0F</span>) + </span><br><span class=\"line\">             <span class=\"string\">' class=\"\"'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* handle exception */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> / <span class=\"number\">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkCondition(classes[i]) === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/\\d+[\\s/]/g</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果想要 <strong>行號</strong>，在表明程式語言之後輸入 <code>=</code><br>您也可以指定開始行號，如下所示，行號從101開始</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$initHighlight</span>(<span class=\"params\">block, cls</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls.search(<span class=\"regexp\">/\\bno\\-highlight\\b/</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> process(block, <span class=\"literal\">true</span>, <span class=\"number\">0x0F</span>) + </span><br><span class=\"line\">             <span class=\"string\">' class=\"\"'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* handle exception */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> / <span class=\"number\">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkCondition(classes[i]) === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/\\d+[\\s/]/g</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用區塊標籤\"><a href=\"#引用區塊標籤\" class=\"headerlink\" title=\"引用區塊標籤\"></a>引用區塊標籤</h2><blockquote>\n<p>您可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7]</p>\n<blockquote>\n<p>也支援巢狀引用區塊喔！<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red]</p>\n</blockquote>\n</blockquote>\n<h2 id=\"外部\"><a href=\"#外部\" class=\"headerlink\" title=\"外部\"></a>外部</h2><h3 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h3><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/1G4isv_Fylg\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Vimeo\"><a href=\"#Vimeo\" class=\"headerlink\" title=\"Vimeo\"></a>Vimeo</h3><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/124148255\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h3><script src=\"//gist.github.com/schacon/4277.js\"></script>\n<h3 id=\"SlideShare\"><a href=\"#SlideShare\" class=\"headerlink\" title=\"SlideShare\"></a>SlideShare</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%slideshare briansolis/<span class=\"number\">26</span>-disruptive-technology-trends<span class=\"number\">-2016</span><span class=\"number\">-2018</span><span class=\"number\">-56796196</span> %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Speakerdeck\"><a href=\"#Speakerdeck\" class=\"headerlink\" title=\"Speakerdeck\"></a>Speakerdeck</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h3><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%pdf https:<span class=\"comment\">//papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf %&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"MathJax\"><a href=\"#MathJax\" class=\"headerlink\" title=\"MathJax\"></a>MathJax</h2><p>您可以使用 <strong>MathJax</strong> 語法 來產生 <em>LaTeX</em> 數學表達式，如同 <a href=\"http://math.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">math.stackexchange.com</a>：</p>\n<p>The <em>Gamma function</em> satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral</p>\n<p>$$<br>x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.<br>$$</p>\n<p>$$<br>\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.<br>$$</p>\n<blockquote>\n<p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">請至這裡</a></p>\n</blockquote>\n<h2 id=\"UML-圖表\"><a href=\"#UML-圖表\" class=\"headerlink\" title=\"UML 圖表\"></a>UML 圖表</h2><h3 id=\"循序圖\"><a href=\"#循序圖\" class=\"headerlink\" title=\"循序圖\"></a>循序圖</h3><p>您可以像是以下使用循序圖：</p>\n<div id=\"sequence-0\"></div>\n\n<h3 id=\"流程圖\"><a href=\"#流程圖\" class=\"headerlink\" title=\"流程圖\"></a>流程圖</h3><p>您可以像是以下使用流程圖：</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<h3 id=\"Graphviz\"><a href=\"#Graphviz\" class=\"headerlink\" title=\"Graphviz\"></a>Graphviz</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125;</span><br><span class=\"line\">                Deputy1-&gt;&#123;Teacher1 Teacher2&#125;</span><br><span class=\"line\">                BusinessManager-&gt;ITManager</span><br><span class=\"line\">                &#123;rank=same;ITManager Teacher1 Teacher2&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mermaid\"><a href=\"#Mermaid\" class=\"headerlink\" title=\"Mermaid\"></a>Mermaid</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">    title A Gantt Diagram</span><br><span class=\"line\"></span><br><span class=\"line\">    section Section</span><br><span class=\"line\">    A task           :a1, 2014-01-01, 30d</span><br><span class=\"line\">    Another task     :after a1  , 20d</span><br><span class=\"line\">    section Another</span><br><span class=\"line\">    Task in sec      :2014-01-12  , 12d</span><br><span class=\"line\">    anther task      : 24d</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多關於 <strong>循序圖</strong> 語法 <a href=\"http://bramp.github.io/js-sequence-diagrams/\" target=\"_blank\" rel=\"noopener\">在這裡</a>.<br>更多關於 <strong>流程圖</strong> 語法 <a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"noopener\">在這裡</a>.<br>更多關於 <strong>Graphviz</strong> 語法 <a href=\"http://www.tonyballantyne.com/graphs.html\" target=\"_blank\" rel=\"noopener\">在這裡</a><br>更多關於 <strong>Mermaid</strong> 語法 <a href=\"http://knsv.github.io/mermaid\" target=\"_blank\" rel=\"noopener\">在這裡</a></p>\n</blockquote>\n<h2 id=\"警告區塊\"><a href=\"#警告區塊\" class=\"headerlink\" title=\"警告區塊\"></a>警告區塊</h2><p>:::success<br>耶 :tada:<br>:::</p>\n<p>:::info<br>這是訊息 :mega:<br>:::</p>\n<p>:::warning<br>注意 :zap:<br>:::</p>\n<p>:::danger<br>喔不 :fire:<br>:::</p>\n<h2 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h2><h3 id=\"標頭\"><a href=\"#標頭\" class=\"headerlink\" title=\"標頭\"></a>標頭</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># h1 標頭</span><br><span class=\"line\">## h2 標頭</span><br><span class=\"line\">### h3 標頭</span><br><span class=\"line\">#### h4 標頭</span><br><span class=\"line\">##### h5 標頭</span><br><span class=\"line\">###### h6 標頭</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平分隔線\"><a href=\"#水平分隔線\" class=\"headerlink\" title=\"水平分隔線\"></a>水平分隔線</h3><hr>\n<hr>\n<hr>\n<h3 id=\"字形替換\"><a href=\"#字形替換\" class=\"headerlink\" title=\"字形替換\"></a>字形替換</h3><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>\n<p>測試.. 測試… 測試….. 測試?….. 測試!….</p>\n<p>!!!!!! ???? ,,</p>\n<p>Remarkable – awesome</p>\n<p>“Smartypants, 雙引號”</p>\n<p>‘Smartypants, 單引號’</p>\n<h3 id=\"強調\"><a href=\"#強調\" class=\"headerlink\" title=\"強調\"></a>強調</h3><p><strong>這是粗體文字</strong></p>\n<p><strong>這是粗體文字</strong></p>\n<p><em>這是斜體文字</em></p>\n<p><em>這是斜體文字</em></p>\n<p><del>這是刪除文字</del></p>\n<p>上標： 19^th^</p>\n<p>下標： H~2~O</p>\n<p>++這是底線文字++</p>\n<p>==這是標記文字==</p>\n<h3 id=\"引用區塊\"><a href=\"#引用區塊\" class=\"headerlink\" title=\"引用區塊\"></a>引用區塊</h3><blockquote>\n<p>引用區塊也可以是巢狀的喔…</p>\n<blockquote>\n<p>…可以多層次的使用…</p>\n<blockquote>\n<p>…或是用空白隔開 </p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"清單\"><a href=\"#清單\" class=\"headerlink\" title=\"清單\"></a>清單</h3><h4 id=\"項目\"><a href=\"#項目\" class=\"headerlink\" title=\"項目\"></a>項目</h4><ul>\n<li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li>\n<li>空兩個空白就可以產生子清單<ul>\n<li>當清單標記使用的字元不同，會強制建立新的清單<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非常簡單！</li>\n</ul>\n<h4 id=\"編號\"><a href=\"#編號\" class=\"headerlink\" title=\"編號\"></a>編號</h4><ol>\n<li>Lorem ipsum dolor sit amet</li>\n<li>Consectetur adipiscing elit</li>\n<li>Integer molestie lorem at massa</li>\n</ol>\n<ol>\n<li>您可以逐次增加項目數字…</li>\n<li>…或是全部都使用 <code>1.</code></li>\n<li>feafw</li>\n<li>332</li>\n<li>242</li>\n<li>2552</li>\n<li>e2</li>\n</ol>\n<p>從其他範圍開始編號清單</p>\n<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p>行內 <code>程式碼</code></p>\n<p>縮排程式碼</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre><p>程式碼區塊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sample text here...</span><br></pre></td></tr></table></figure>\n<p>語法標色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar++;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th>選項</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>向右對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">選項</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>向左對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">選項</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">engine</td>\n<td style=\"text-align:left\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ext</td>\n<td style=\"text-align:left\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>置中對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">選項</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">data</td>\n<td style=\"text-align:center\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">engine</td>\n<td style=\"text-align:center\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ext</td>\n<td style=\"text-align:center\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"連結\"><a href=\"#連結\" class=\"headerlink\" title=\"連結\"></a>連結</h3><p><a href=\"http://dev.nodeca.com\" target=\"_blank\" rel=\"noopener\">連結文字</a><br><a href=\"http://nodeca.github.io/pica/demo/\" title=\"標題文字！\" target=\"_blank\" rel=\"noopener\">加上標題的連結文字</a><br>自動轉換連結 <a href=\"https://github.com/nodeca/pica\" target=\"_blank\" rel=\"noopener\">https://github.com/nodeca/pica</a></p>\n<h3 id=\"圖片\"><a href=\"#圖片\" class=\"headerlink\" title=\"圖片\"></a>圖片</h3><p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\"><br><img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"><br>如同連結一般，圖片也可以用註腳語法<br><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"><br>使用參考，可以在稍後的文件中再定義圖片網址</p>\n<p><img src=\"https://octodex.github.com/images/minion.png =200x200\" alt=\"Minion\"><br>使用指定的大小顯示圖片</p>\n<h3 id=\"註腳\"><a href=\"#註腳\" class=\"headerlink\" title=\"註腳\"></a>註腳</h3><p>註腳 1 連結[^first].<br>註腳 2 連結[^second].<br>行內註腳^[行內註腳的文字] 定義<br>重複的註腳參考[^second].</p>\n<p>[^first]: 註腳 <strong>也可以標記</strong><br>    還可以有很多段落<br>[^second]: 註腳 文字</p>\n<h3 id=\"定義清單\"><a href=\"#定義清單\" class=\"headerlink\" title=\"定義清單\"></a>定義清單</h3><p>名詞 1</p>\n<p>:   定義 1 快速連續項目</p>\n<p>名詞 2 加上 <em>行內標記</em></p>\n<p>:   定義 2</p>\n<pre><code>    { 這些程式碼屬於 定義 2 的一部分 }\n\n定義 2 的第三段落\n</code></pre><p><em>緊密樣式：</em></p>\n<p>名詞 1<br>  ~ 定義 1</p>\n<p>名詞 2<br>  ~ 定義 2a<br>  ~ 定義 2b</p>\n<h3 id=\"縮寫\"><a href=\"#縮寫\" class=\"headerlink\" title=\"縮寫\"></a>縮寫</h3><p>這是 HTML 的縮寫範例<br>它會轉換 “HTML”，但是縮寫旁邊其他的部分，例如：”xxxHTMLyyy”，不受影響</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: 開始\ne=>end: 結束\nop=>operation: 我的操作\nop2=>operation: 啦啦啦\ncond=>condition: 是或否？\n\nst->op->op2->cond\ncond(yes)->e\ncond(no)->op2</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">艾莉絲->包柏: 哈摟，你好嗎？\nNote right of 包柏: 包柏思考中\n包柏-->艾莉絲: 我很好，謝謝！\nNote left of 艾莉絲: 艾莉絲回應\n艾莉絲->包柏: 最近過得怎樣？</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"Hexo-hello-world","slug":"hexo/Hexo-hello-world","date":"2016-12-20T18:02:13.000Z","updated":"2017-09-23T17:28:44.000Z","comments":true,"path":"api/articles/hexo/Hexo-hello-world.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 <code>Node.js</code> 的最佳方式是使用 <code>nvm</code>,或者您也可以下载 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">node.js安装包</a>来安装。</p>\n<ol>\n<li>安装<code>nvm</code><br>方式一：cURL命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>方式二：Wget命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<ol>\n<li>更新npm命令工具至最新版本<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>为了便于在多台电脑上部署博客，可以使用使用git版本库来管理个人博客的内容：<br>具体部署过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://xxxxx/boyer.git boyer</span><br><span class=\"line\">cd boyer</span><br><span class=\"line\">npm install  #安装package.json是插件包，使用git管理更加便于管理安装的完整性。</span><br></pre></td></tr></table></figure></p>\n<p>新建完成后，指定文件夹的目录如下：<br>    .<br>    ├── _config.yml     # 网站的 配置 信息，您可以在此配置大部分的参数。<br>    ├── package.json    # 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装。<br>    ├── scaffolds       # 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>    ├── source<br>    |   ├── _drafts<br>    |   └── _posts<br>    └── themes</p>\n<ol>\n<li><p>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n</li>\n<li><p>source<br>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>\n</li>\n<li>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</li>\n</ol>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft <span class=\"string\">\"草稿名\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish <span class=\"string\">\"草稿名\"</span>  <span class=\"comment\">#Moves a draft post from _drafts to _posts folder.</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>在我们开始之前,你必须在 <code>_config.yml</code> 修改设置。一个有效的部署设置必须有 <code>type</code> 字段。例如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br></pre></td></tr></table></figure></p>\n<p>你可用同时部署到多个type，Hexo将依次执行每个部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    - <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">      repo:</span><br><span class=\"line\">    - <span class=\"built_in\">type</span>: heroku</span><br><span class=\"line\">      repo:</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><h4 id=\"安装同步到git-插件\"><a href=\"#安装同步到git-插件\" class=\"headerlink\" title=\"安装同步到git 插件\"></a>安装同步到git 插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>编辑<code>_config.yml</code>设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装生成RSS支持插件\"><a href=\"#安装生成RSS支持插件\" class=\"headerlink\" title=\"安装生成RSS支持插件\"></a>安装生成RSS支持插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install  hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>编辑<code>_config.yml</code>设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\">    hub:</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"Swift入门","slug":"swift/Swift入门","date":"2015-11-27T17:18:21.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/Swift入门.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><ul>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1\" target=\"_blank\" rel=\"noopener\">苹果官方</a>  </li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">中文版</a><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4>Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来简化内存管理。我们的框架栈则一直基于Cocoa，且Objective-C进化支持了块、collection literal和模块，允许现代语言的框架无需深入即可使用。<br>(by gashero)感谢这些基础工作，才使得可以在Apple软件开发中引入新的编程语言Swift。</li>\n</ul>\n<h4 id=\"swift有点\"><a href=\"#swift有点\" class=\"headerlink\" title=\"swift有点\"></a>swift有点</h4><p>编译器是按照性能优化的，而语言是为开发优化的</p>\n<p>Swift采用了Objective-C的命名参数和动态对象模型。提供了对Cocoa框架和mix-and-match的互操作性。基于这些基础，Swift引入了很多新功能和结合面向过程和面向对象的功能。<br>Swift对新的程序员也是友好的：</p>\n<ol>\n<li>它是工业级品质的系统编程语言，却又像脚本语言一样的友好。</li>\n<li>它支持playground，允许程序员实验一段Swift代码功能并立即看到结果，而无需麻烦的构建和运行一个应用。<br>Swift集成了现代编程语言思想，以及Apple工程文化的智慧，编译器是按照性能优化的，而语言是为开发优化的，无需互相折中。</li>\n</ol>\n<h4 id=\"swift语法\"><a href=\"#swift语法\" class=\"headerlink\" title=\"swift语法\"></a>swift语法</h4><p>Playground允许你编辑代码并立即看到结果,可以从”Hello, world”开始学起并过渡到整个系统。<br>在Xcode的playground中打开:<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">\"Hello, world\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在Swift，这就是完整的程序:</p>\n<ol>\n<li>无需导入(import)输入输出和字符串处理的系统库。</li>\n<li>全局范围的代码就是用于程序的入口，所以你无需编写一个 main() 函数。也无需在每个语句后写分号。</li>\n</ol>\n<p>所有这些使得Swift成为Apple软件开发者创新的源泉。</p>\n<h4 id=\"简单值-–-使用-let-来定义常量，-var-定义变量\"><a href=\"#简单值-–-使用-let-来定义常量，-var-定义变量\" class=\"headerlink\" title=\"简单值  – 使用 let 来定义常量， var 定义变量\"></a>简单值  – 使用 let 来定义常量， var 定义变量</h4><p>提供一个值就可以创建常量或变量，并让编译器推断其类型,一个常量或变量必须与赋值时拥有相同的类型。因此你不用严格定义类型。<br>常量定义类似于函数式编程语言中的变量,常量的值无需在编译时指定，但是至少要赋值一次,赋值后就无法修改。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myVariable = <span class=\"number\">42</span></span><br><span class=\"line\">myVariable = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myConstant = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面例子中，编译其会推断myVariable是一个整数类型，因为其初始化值就是个整数。</p>\n<h6 id=\"1-显示-隐式-初始化数据类型-—-类型与变量名绑定，属于静态类型语言\"><a href=\"#1-显示-隐式-初始化数据类型-—-类型与变量名绑定，属于静态类型语言\" class=\"headerlink\" title=\"1. 显示/隐式 初始化数据类型 —   类型与变量名绑定，属于静态类型语言\"></a>1. 显示/隐式 初始化数据类型 —   类型与变量名绑定，属于静态类型语言</h6><p>类型与变量名绑定，属于静态类型语言。有助于静态优化。与Python、JavaScript等有所区别。<br>例如：初始化值没有提供足够的信息(或没有初始化值)，可以在变量名后写类型，以冒号分隔。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> imlicitInteger = <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imlicitDouble = <span class=\"number\">70.0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">70</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-变量-拼接到字符串-–-变量值永远不会隐含转换到其他类型\"><a href=\"#2-变量-拼接到字符串-–-变量值永远不会隐含转换到其他类型\" class=\"headerlink\" title=\"2. 变量  拼接到字符串  – 变量值永远不会隐含转换到其他类型\"></a>2. 变量  拼接到字符串  – 变量值永远不会隐含转换到其他类型</h6><ul>\n<li><p>String(变量名)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> label = <span class=\"string\">\"The width is \"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> width = <span class=\"number\">94</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> widthLabel = label + <span class=\"type\">String</span>(width)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以小括号来写值，并用反斜线(“”)放在小括号之前</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> apples = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oranges = <span class=\"number\">5</span>     <span class=\"comment\">//by gashero</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> appleSummary = <span class=\"string\">\"I have \\(apples) apples.\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fruitSummary = <span class=\"string\">\"I have \\(apples + oranges) pieces of fruit.\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"数组和字典的用法\"><a href=\"#数组和字典的用法\" class=\"headerlink\" title=\"数组和字典的用法\"></a>数组和字典的用法</h4><ol>\n<li>声明并初始化<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> emptyArray = <span class=\"type\">String</span>[]()</span><br><span class=\"line\"><span class=\"keyword\">let</span> emptyDictionary = <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Float</span>&gt;()</span><br><span class=\"line\">shoppingList = [] <span class=\"comment\">//去购物并买些东西</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果数组类型无法推断，你可以写空的数组为 “[]” 和空的字典为 “[:]“。</p>\n<ol>\n<li>访问<br>创建一个数组和字典使用方括号 “[]”，访问其元素则是通过方括号中的索引或键。                      <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"catfish\"</span>, <span class=\"string\">\"water\"</span>, <span class=\"string\">\"tulips\"</span>, <span class=\"string\">\"blue paint\"</span>]</span><br><span class=\"line\">shoppingList[<span class=\"number\">1</span>] = <span class=\"string\">\"bottle of water\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> occupations = [</span><br><span class=\"line\">   <span class=\"string\">\"Malcolm\"</span>: <span class=\"string\">\"Captain\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"Kaylee\"</span>: <span class=\"string\">\"Mechanic\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\">occupations[<span class=\"string\">\"Jayne\"</span>] = <span class=\"string\">\"Public Relations\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"控制流-–-条件控制，循环控制\"><a href=\"#控制流-–-条件控制，循环控制\" class=\"headerlink\" title=\"控制流  –  条件控制，循环控制\"></a>控制流  –  条件控制，循环控制</h4><h6 id=\"1-条件控制\"><a href=\"#1-条件控制\" class=\"headerlink\" title=\"1. 条件控制\"></a>1. 条件控制</h6><ul>\n<li><p>if  条件必须是布尔表达式<br>在 if 语句中，条件必须是布尔表达式，这意味着 if score { … } 是错误的，不能隐含的与0比较。<br>你可以一起使用 if 和 let 来防止值的丢失。这些值是可选的。<br>可选值可以包含一个值或包含一个 nil 来指定值还不存在。写一个问号 “?” 在类型后表示值是可选的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalString: <span class=\"type\">String</span>? = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">optionalString == <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> optionalName: <span class=\"type\">String</span>? = <span class=\"string\">\"John Appleseed\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">\"Hello!\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name = optionalName &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Hello, \\(name)\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch 支持多种数据以及多种比较，不限制必须是整数和测试相等  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vegetable = <span class=\"string\">\"red pepper\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> vegetable &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"celery\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Add some raisins and make ants on a log.\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"cucumber\"</span>, <span class=\"string\">\"watercress\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"That would make a good tea sandwich.\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x.hasSuffix(<span class=\"string\">\"pepper\"</span>):</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Is it a spicy \\(x)?\"</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:    <span class=\"comment\">//by gashero</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Everything tastes good in soup.\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在执行匹配的情况后，程序会从 switch 跳出，而不是继续执行下一个情况。所以不再需要 break 跳出 switch 。</p>\n<h6 id=\"2-循环控制\"><a href=\"#2-循环控制\" class=\"headerlink\" title=\"2. 循环控制\"></a>2. 循环控制</h6><ul>\n<li>for-in 来迭代字典中的每个元素<br>可使用 for-in 来迭代字典中的每个元素，提供一对名字来使用每个键值对。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> interestingNumbers = [</span><br><span class=\"line\">    <span class=\"string\">\"Prime\"</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">    <span class=\"string\">\"Fibonacci\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">    <span class=\"string\">\"Square\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (kind, numbers) <span class=\"keyword\">in</span> interestingNumbers &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &gt; largest &#123;</span><br><span class=\"line\">            largest = number</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\">你可以在循环中保持一个索引，通过“..”来表示索引范围或明确声明一个初始值、条件、增量。   </span><br><span class=\"line\">这两个循环做相同的事情:  </span><br><span class=\"line\">```swift</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstForLoop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    firstForLoop += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">firstForLoop</span><br><span class=\"line\"><span class=\"keyword\">var</span> secondForLoop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i &#123;</span><br><span class=\"line\">    secondForLoop += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用 .. 构造范围忽略最高值，而用 … 构造的范围则包含两个值。</p>\n<ul>\n<li>while 来重复执行代码块直到条件改变<br>使用 while 来重复执行代码块直到条件改变。循环的条件可以放在末尾来确保循环至少执行一次。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    n = n * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    m = m * <span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> m &lt; <span class=\"number\">100</span></span><br><span class=\"line\">m</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数与闭包-–-函数是闭包的特殊情况\"><a href=\"#函数与闭包-–-函数是闭包的特殊情况\" class=\"headerlink\" title=\"函数与闭包  – 函数是闭包的特殊情况\"></a>函数与闭包  – 函数是闭包的特殊情况</h4><h6 id=\"1-闭包-无需名字，只需要放在大括号中即可\"><a href=\"#1-闭包-无需名字，只需要放在大括号中即可\" class=\"headerlink\" title=\"1. 闭包 无需名字，只需要放在大括号中即可\"></a>1. 闭包 无需名字，只需要放在大括号中即可</h6><p>编写闭包时有多种选项:</p>\n<ol>\n<li><p>使用 in 到特定参数和主体的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;</span><br><span class=\"line\">    (number: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">3</span> * number</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单一语句的闭包可以直接返回值<br>例如：当一个闭包的类型是已知时，例如代表回调，你可以忽略其参数和返回值，或两者</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;number <span class=\"keyword\">in</span> <span class=\"number\">3</span> * number&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过数字而不是名字来引用一个参数，这对于很短的闭包很有用。<br>例如：一个闭包传递其最后一个参数到函数作为返回值。  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>]) &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2. 函数\"></a>2. 函数</h6><ul>\n<li><p>函数的声明   –  使用func 声明一个函数  使用 -&gt;分隔参数的名字和返回值类型,<br>调用函数使用他的名字加上小括号中的参数列表</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(name: String, day: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(name), today is \\(day).\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Tuesday\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数的嵌套<br>内嵌函数可以访问其定义所在函数的变量。<br>你可以使用内嵌函数来组织代码，避免过长和过于复杂：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnFifteen</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        y += <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    add()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数接收的参数</p>\n<ol>\n<li><p>可变参数的个数  sumOf(numbers: Int…) -&gt; Int{}<br>函数可以接受可变参数个数，收集到一个数组中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumOf</span><span class=\"params\">(numbers: Int...)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        sum += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//例子</span></span><br><span class=\"line\">sumOf(<span class=\"number\">42</span>, <span class=\"number\">597</span>, <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他函数作为参数  func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool{}</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasAnyMatches</span><span class=\"params\">(list: Int[], condition: Int -&gt; Bool)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lessThanTen</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number &lt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">hasAnyMatches(numbers, lessThanTen)</span><br></pre></td></tr></table></figure>\n<p>函数实际是闭包的特殊情况。你可以写一个闭包而无需名字，只需要放在大括号中即可。使用 in 到特定参数和主体的返回值。</p>\n</li>\n</ol>\n</li>\n<li><p>函数的返回值</p>\n<ol>\n<li><p>返回多个值 ： getGasPrices() -&gt; (Double, Double, Double)<br>使用元组(tuple)来返回多个值                           </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getGasPrices</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Double</span>, <span class=\"type\">Double</span>, <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">3.59</span>, <span class=\"number\">3.69</span>, <span class=\"number\">3.79</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回另一个函数  ： makeIncrementer() -&gt; (Int -&gt; Int)<br>函数是第一类型的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addOne</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> increment = makeIncrementer()</span><br><span class=\"line\">increment(<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"对象与类\"><a href=\"#对象与类\" class=\"headerlink\" title=\"对象与类\"></a>对象与类</h4><h6 id=\"1-类的创建-：class-类名\"><a href=\"#1-类的创建-：class-类名\" class=\"headerlink\" title=\"1. 类的创建  ：class 类名 {}\"></a>1. 类的创建  ：class 类名 {}</h6><ol>\n<li><p>使用 class 可以创建一个类。<br>一个属性的声明则是在类里作为常量或变量声明的，除了是在类的上下文中。方法和函数也是这么写的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类的构造器  ： 构造器来在创建实例时设置类，使用 init 来创建</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NamedShape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;   <span class=\"comment\">//by gashero</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A Shape with \\(numberOfSides) sides.\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>self 用来区分 name 属性和 name 参数。<br>构造器的声明跟函数一样，除了会创建类的实例。每个属性都需要赋值，无论在声明里还是在构造器里。</p>\n<ol>\n<li>类的析构器，来执行对象销毁时的清理工作，使用 deinit 来创建<br>使用 deinit 来创建一个析构器，来执行对象销毁时的清理工作。</li>\n<li>超类的继承    <ul>\n<li>子类包括其超类的名字，以冒号分隔。在继承标准根类时无需声明，所以你可以忽略超类。  </li>\n<li>子类的方法可以通过标记 override 重载超类中的实现，而没有 override 的会被编译器看作是错误,编译器也会检查那些没有被重载的方法。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">NamedShape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides = <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sideLength * sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A square with sides of length \\(sideLength).\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">\"my test square\"</span>)</span><br><span class=\"line\">test.area()</span><br><span class=\"line\">test.simpleDescription()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"2-类的实例创建-类名-点语法来访问实例的属性和方法\"><a href=\"#2-类的实例创建-类名-点语法来访问实例的属性和方法\" class=\"headerlink\" title=\"2. 类的实例创建   :  类名()  ,点语法来访问实例的属性和方法\"></a>2. 类的实例创建   :  类名()  ,点语法来访问实例的属性和方法</h6><p>通过在类名后加小括号来创建类的实例。使用点语法来访问实例的属性和方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shape = <span class=\"type\">Shape</span>()</span><br><span class=\"line\">shape.numberOfSides = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shapeDescription = shape.simpleDescription()</span><br></pre></td></tr></table></figure></p>\n<p>可选类型 Int?<br>可选绑定 if while</p>\n<p>强制取值表达式 expression!<br>可选链表达式   expression?</p>\n<p>类型转换运算符 is , as, is?, as!</p>\n<p>标示符模式<br>值绑定模式<br>可选模式<br>类型转换模式</p>\n<p>实例方法  func<br>类型方法 class func</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"[转]Swift最佳实践","slug":"swift/[转]Swift最佳实践","date":"2015-09-29T17:05:21.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/[转]Swift最佳实践.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>[英文][SwiftCommunityBestPractices]<br>[SwiftCommunityBestPractices]: <a href=\"https://github.com/schwa/Swift-Community-Best-Practices\" target=\"_blank\" rel=\"noopener\">https://github.com/schwa/Swift-Community-Best-Practices</a><br>[SwiftCommunity]: <a href=\"http://swift-lang.schwa.io/\" target=\"_blank\" rel=\"noopener\">http://swift-lang.schwa.io/</a><br>[swiftCaptureLists]: <a href=\"http://www.russbishop.net/swift-capture-lists\" target=\"_blank\" rel=\"noopener\">http://www.russbishop.net/swift-capture-lists</a><br>[SwiftURL]: <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html</a><br>[驼峰命名法URL]: <a href=\"http://www.wikiwand.com/en/Studly_caps\" target=\"_blank\" rel=\"noopener\">http://www.wikiwand.com/en/Studly_caps</a><br>[匈牙利命名法URL]: <a href=\"http://www.wikiwand.com/en/Hungarian_notation\" target=\"_blank\" rel=\"noopener\">http://www.wikiwand.com/en/Hungarian_notation</a></p>\n<h2 id=\"黄金法则\"><a href=\"#黄金法则\" class=\"headerlink\" title=\"黄金法则\"></a>黄金法则</h2><ul>\n<li>Apple 通常是对的。应紧随苹果所推荐的或他的 Demo 中所展示的方式。您应该尽可能地遵守 Apple 在 [The Swift Programming Language][SwiftURL] 一书中所定义的代码风格。但我们还是可以看到他们的示例代码中有不符合这些规则的地方，毕竟 Apple 是一家大公司嘛。</li>\n<li>不要仅仅为了减少字符的键入数量而使用模棱两可的简短命名，较长的命名都可以依赖自动完成、自我暗示、复制粘贴来减低键入的难度。命名的详细程度往往对代码维护者很有帮助。但过于冗长的命名却会绕过Swift的主要特性之一: 类型推导,所以命名的原则应该是简洁明了。</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>按照 [The Swift Programming Language][SwiftURL] 所推荐的命名法则，类型名称应该使用[首字母大写的驼峰命名法][uppercamelcaseURL] (例如: “VehicleController”)。</p>\n<p>变量与常量应该使用首字母小写的驼峰命名法(例如: “ vehicleName “ )。</p>\n<p>推荐使用 Swift 模块来定义代码的命名空间，而非在 Swift 代码上使用 Objective-C 样式的类前缀(除非接口要与 Objective-C 交互)。</p>\n<p>不推荐使用任何形式的[匈牙利命名法][匈牙利命名法URL]（比如：k 代表常量，m 代表方法）,取代代之我们应该使用短而简洁的名字并使用 Xcode 的类型快速帮助 (⌥ + 左击)。同样我们也不要使用类似 <code>SNAKE_CASE</code> 这样的名字。</p>\n<p>这些法则之上，唯一例外的情况就是枚举值了，枚举值在这里应该首字母大写(这是 Apple 的 [The Swift Programming Language][SwiftURL] 中的规范)：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Planet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mercury</span>, <span class=\"type\">Venus</span>, <span class=\"type\">Earth</span>, <span class=\"type\">Mars</span>, <span class=\"type\">Jupiter</span>, <span class=\"type\">Saturn</span>, <span class=\"type\">Uranus</span>, <span class=\"type\">Nepture</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>有必要的话命名不要缩写<br>实际上在 Xcode 的”文本自动补全”功能下你可以轻而易举地键入 类似 <code>ViewController</code> 的长命名。</li>\n<li>极为常见的缩写<br>例如: <code>URL</code> 缩写应该是全部大写 ( “URL” )或者酌情全部小写( “url” )。<blockquote>\n<p>URL 的类型和变量命名推荐的规则： 如果 url 是一个类型，它应该被大写，如果是一个变量，那么应该小写。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>不应该使用注释来禁用代码,被注释掉的代码会污染你的源代码。<br>如果你当前想要删除一段代码，但将来又可能会用到，推荐你依赖 git 或你的 bug 追踪系统来管理。</p>\n<p>(TODO: 追加一个关于文档注释的小节，使用 nshipster 的链接)</p>\n<h3 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h3><p>如果可能的话，使用 Swift 的类型推导，以避免冗余的类型信息。例如：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currentLocation = <span class=\"type\">Location</span>()</span><br></pre></td></tr></table></figure></p>\n<p>而非：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currentLocation: <span class=\"type\">Location</span> = <span class=\"type\">Location</span>()</span><br></pre></td></tr></table></figure>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>让编译器自动推断所有的情况，这是可以做到的。在一些领域 <code>self</code> 应该被显式地使用，包括在 init 中设置参数，或者 <code>non-escaping</code>闭包。<br>例如：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Example</span></span>&#123;</span><br><span class=\"line\"> \t  <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">\t   <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\"> \t      <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\"> \t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"捕获列表的类型推导\"><a href=\"#捕获列表的类型推导\" class=\"headerlink\" title=\"捕获列表的类型推导\"></a>捕获列表的类型推导</h3><p>在一个捕获列表( capture list )中指定参数类型会导致代码冗余。如果需要的话，仅指定类型即可。  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [</span><br><span class=\"line\">    (<span class=\"string\">\"Mary\"</span>, <span class=\"number\">42</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Susan\"</span>, <span class=\"number\">27</span>),</span><br><span class=\"line\">    (<span class=\"string\">\"Charlie\"</span>, <span class=\"number\">18</span>),</span><br><span class=\"line\">]\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings = people.<span class=\"built_in\">map</span>() &#123;</span><br><span class=\"line\">    (name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\\(name) is \\(age) years old\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果编译器可以推导出来的话，完全可以把类型删掉：<br><code>(name: String, age: Int) -&gt; String</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> strings = people.<span class=\"built_in\">map</span>() &#123;</span><br><span class=\"line\">    (name, age) <span class=\"keyword\">in</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\\(name) is \\(age) years old\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用编号的参数名 (“$0”) 进一步降低冗长，往往能彻底消除捕获列表的代码冗余。在闭包中当参数名没有附带任何更多信息时仅使用编号形式即可( 如非常简单的映射和过滤器 )。</p>\n<p>Apple 能够并且将会改变闭包的参数类型，通过他们的 Objective-C 框架的 Swift 变种提供出来。<br>例如，<code>optionals</code> 被删除或更改为 <code>auto-unwrapping</code> 等。故意 under-specifying 可选并依赖 Swift 来推导类型，可以减少在这些情况下代码被破译的风险。</p>\n<p>你应该避免指定返回类型，例如这个捕获列表( capture list )就是完全多余的:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    ()-&gt;<span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Fired.\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(以上内容也可以参考:[这里][swiftCaptureLists])</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>类型定义中使用的常量应当被申明成静态类型。例如:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhysicsModel</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> speedOfLightInAVacuum = <span class=\"number\">299_792_458</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Spaceship</span> </span>&#123;</span><br><span class=\"line\">  \t\t <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> topSpeed = <span class=\"type\">PhysicsModel</span>.speedOfLightInAVacuum</span><br><span class=\"line\"> \t     <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span></span><br><span class=\"line\">  \t\t <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fullSpeedAhead</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      \t\t speed = <span class=\"type\">Spaceship</span>.topSpeed</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>将常量标示为 <code>static</code> ，允许它们可以被无类型的实例引用。</p>\n<p>一般应该避免生成全局范围的常量，单例除外。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]}]}