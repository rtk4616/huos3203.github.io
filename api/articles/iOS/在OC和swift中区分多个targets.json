{"title":"在OC和swift中区分多个targets","slug":"iOS/在OC和swift中区分多个targets","date":"2017-01-11T13:49:33.000Z","updated":"2017-08-17T14:54:01.000Z","comments":true,"path":"api/articles/iOS/在OC和swift中区分多个targets.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"build-setting预编译位置\"><a href=\"#build-setting预编译位置\" class=\"headerlink\" title=\"build setting预编译位置\"></a>build setting预编译位置</h2><ol>\n<li>Preprocessor Macros</li>\n<li>Other Swift Flags</li>\n</ol>\n<p>为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。</p>\n<h3 id=\"Objective-C项目中Preprocessor-Macros\"><a href=\"#Objective-C项目中Preprocessor-Macros\" class=\"headerlink\" title=\"Objective-C项目中Preprocessor Macros\"></a>Objective-C项目中Preprocessor Macros</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>添加位置：选择项目中对应的target名-&gt;在<code>Build Settings</code>下<code>Apple LLVM 7.0 - Preprocessing</code>-&gt;<code>Preprocessor Macros</code>。<br>添加变量：在Rebug和Release区域添加一个变量<code>DEVELOPMENT</code><br>    对应target1: 设<code>DEVELOPMENT=1</code>表示开发版<br>    对应target2: 设<code>DEVELOPMENT=0</code>表示生产版</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>根据已配置的宏DEV_VERSION，我们可以在代码中利用它动态地编译项目。下面是一个简单的例子：<br>Objective-C中使用<code>＃if</code>检查<code>DEVELOPMENT</code>的环境，并相应的设置URLs/ API密钥。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#if DEVELOPMENT</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://dev.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"DI2023409jf90ew\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://prod.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"71a629j0f090232\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Swift中Other-Swift-Flags\"><a href=\"#Swift中Other-Swift-Flags\" class=\"headerlink\" title=\"Swift中Other Swift Flags\"></a>Swift中Other Swift Flags</h3><p>对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。</p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>选中开发target，添加一个标识表示开发版本<br>选中<code>target</code> -&gt; <code>Build Setting</code>-&gt;<code>Swift Compiler - Custom Flags</code>-&gt;将值设为<code>-DDEVELOPMENT</code>表示这个target作为开发版本。</p>\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>Swift中你仍然可以使用<code>#if</code>判定build的参数动态编译。然而，除了使用<code>#define</code>定义基本常量，在swift中我们也可以用<code>let</code>定义一个全局常量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">DEVELOPMENT</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://dev.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"DI2023409jf90ew\"</span></span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://prod.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"71a629j0f090232\"</span></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cocoachina.com/ios/20160331/15832.html\" target=\"_blank\" rel=\"noopener\">参照</a></p>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"配置","path":"api/categories/配置.json"}],"tags":[{"name":"targets","path":"api/tags/targets.json"}]}