{"title":"Git如何永久删除文件(包括历史记录)","slug":"git/Git如何永久删除文件(包括历史记录)","date":"2018-06-11T20:32:02.000Z","updated":"2018-06-11T20:32:02.000Z","comments":true,"path":"api/articles/git/Git如何永久删除文件(包括历史记录).json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><p>有些时候不小心上传了一些敏感文件(例如密码), 或者不想上传的文件(没及时或忘了加到.gitignore里的),</p>\n<p>而且上传的文件又特别大的时候, 这将导致别人clone你的代码或下载zip包的时候也必须更新或下载这些无用的文件,</p>\n<p>因此, 我们需要一个方法, 永久的删除这些文件(包括该文件的历史记录).</p>\n<p>首先, 可以参考 <a href=\"https://help.github.com/articles/remove-sensitive-data\" target=\"_blank\" rel=\"noopener\">github帮助</a></p>\n<h2 id=\"步骤一-从资料库中清除文件\"><a href=\"#步骤一-从资料库中清除文件\" class=\"headerlink\" title=\"步骤一: 从资料库中清除文件\"></a>步骤一: 从资料库中清除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git filter-branch --force --index-filter <span class=\"string\">'git rm --cached --ignore-unmatch path-to-your-remove-file'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure>\n<p>其中, <code>path-to-your-remove-file</code> 是要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可.</p>\n<blockquote>\n<p>这里的文件或文件夹，都不能以 ‘/‘ 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。</p>\n<h3 id=\"删除文件夹\"><a href=\"#删除文件夹\" class=\"headerlink\" title=\"删除文件夹\"></a>删除文件夹</h3><p>在 <code>git rm --cached</code> 命令后面添加 <code>-r</code> 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 <code>rm -rf</code> 命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git filter-branch --force --index-filter <span class=\"string\">'git rm --cached -r --ignore-unmatch path-to-your-remove-folder'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"支持通配符\"><a href=\"#支持通配符\" class=\"headerlink\" title=\"支持通配符\"></a>支持通配符</h3><p>如果当要删除的文件很多, 文件或路径里有中文, 由于MinGW或CygWin对中文路径设置比较麻烦, 你可以使用通配符<em>号, 例如: `sound/music_</em>.mp3<code>, 这样就把</code>sound<code>目录下以</code>music_<code>开头的mp3文件都删除了.\n使用通配符</code>*`删除目录下的所有文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git filter-branch --force --index-filter <span class=\"string\">'git rm --cached -r --ignore-unmatch path-to-your-remove-folder/*'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure></p>\n<p>成功的日志：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ref <span class=\"string\">'refs/heads/master'</span> was rewritten</span><br><span class=\"line\">Ref <span class=\"string\">'refs/remotes/origin/master'</span> was rewritten</span><br><span class=\"line\">WARNING: Ref <span class=\"string\">'refs/remotes/origin/master'</span> is unchanged</span><br><span class=\"line\">WARNING: Ref <span class=\"string\">'refs/tags/v0.9.0'</span> is unchanged</span><br><span class=\"line\">v0.9.0 -&gt; v0.9.0 (2694a7834dada67cf8768ef27e2d7c3d777f5472 -&gt; 2694a7834dada67cf8768ef27e2d7c3d777f5472)</span><br></pre></td></tr></table></figure></p>\n<p><code>Ref &#39;refs/heads/master&#39; was rewritten</code>:表示成功；<br><code>xxxxx unchanged</code>: 说明在当前分支里没有找到该文件.</p>\n<h2 id=\"步骤二-推送我们修改后的repo\"><a href=\"#步骤二-推送我们修改后的repo\" class=\"headerlink\" title=\"步骤二: 推送我们修改后的repo\"></a>步骤二: 推送我们修改后的repo</h2><h3 id=\"分支同步\"><a href=\"#分支同步\" class=\"headerlink\" title=\"分支同步\"></a>分支同步</h3><p>通过步骤一，需要以强制覆盖的方式推送你的repo, 命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master --force --all</span><br></pre></td></tr></table></figure></p>\n<p>这个过程其实是重新上传我们的repo, 比较耗时, 虽然跟删掉重新建一个repo有些类似, 但是好处是保留了原有的更新记录, 所以还是有些不同的. 如果你实在不在意这些更新记录, 也可以删掉重建, 两者也差不太多, 也许后者还更直观些.</p>\n<h3 id=\"tag同步\"><a href=\"#tag同步\" class=\"headerlink\" title=\"tag同步\"></a>tag同步</h3><p>为了能从打了 tag 的版本中也删除你所指定的文件或文件夹，您可以使用这样的命令来强制推送您的 Git tags：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master --force --tags</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"步骤三-清理和回收空间\"><a href=\"#步骤三-清理和回收空间\" class=\"headerlink\" title=\"步骤三: 清理和回收空间\"></a>步骤三: 清理和回收空间</h2><p>虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间.</p>\n<p>执行命令，再查看<code>.git</code>目录空间会明显变小:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf .git/refs/original/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reflog expire --expire=now --all</span><br><span class=\"line\"></span><br><span class=\"line\">$ git gc --prune=now</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Counting objects: 2437, <span class=\"keyword\">done</span>.</span><br><span class=\"line\"><span class=\"comment\"># Delta compression using up to 4 threads.</span></span><br><span class=\"line\"><span class=\"comment\"># Compressing objects: 100% (1378/1378), done.</span></span><br><span class=\"line\"><span class=\"comment\"># Writing objects: 100% (2437/2437), done.</span></span><br><span class=\"line\"><span class=\"comment\"># Total 2437 (delta 1461), reused 1802 (delta 1048)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ git gc --aggressive --prune=now</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Counting objects: 2437, <span class=\"keyword\">done</span>.</span><br><span class=\"line\"><span class=\"comment\"># Delta compression using up to 4 threads.</span></span><br><span class=\"line\"><span class=\"comment\"># Compressing objects: 100% (2426/2426), done.</span></span><br><span class=\"line\"><span class=\"comment\"># Writing objects: 100% (2437/2437), done.</span></span><br><span class=\"line\"><span class=\"comment\"># Total 2437 (delta 1483), reused 0 (delta 0)</span></span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[]}