{"title":"代码实现AutoLayout相关特性","slug":"iOS/代码实现AutoLayout相关特性","date":"2014-09-02T15:53:11.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/iOS/代码实现AutoLayout相关特性.json","excerpt":"按比例缩放按比例缩放，这是在Interface Builder中无法设置的内容。<br>而在代码中，有如下两种实现方式:使用NSLayoutConstraint类型的初始化函数中的multiplier参数就可以非常简单的设置按比例缩放。  同时也可以设置不同NSLayoutAttribute参数来达到意想不到的效果，比如“A的Width等于B的Height的2倍”这样的效果。  现在就拿一个简单的UIButton做示例，在ViewController中创建一个UIButton字段：<br>1<br>UIButton *btn;  <br>  需求 1：要求UIButton水平居中，始终距离父View底部20单位，其高度是父View高度的三分之一。使用KVO来监控UIButton的大小并实时输出到屏幕上。  1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>- (void)viewDidLoad<br>&#123;<br>    [super viewDidLoad];<br>    <br>    //创建UIButton，不需要设置frame<br>    btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];<br>    [btn setTitle:@\"mgen\" forState:UIControlStateNormal];<br>    btn.backgroundColor = [UIColor greenColor];<br>    [self.view addSubview:btn];<br><br>    //禁止自动转换AutoresizingMask<br>    btn.translatesAutoresizingMaskIntoConstraints = NO;<br>    <br>    //居中<br>    [self.view addConstraint:[NSLayoutConstraint<br>                              constraintWithItem:btn<br>                              attribute:NSLayoutAttributeCenterX<br>                              relatedBy:NSLayoutRelationEqual<br>                              toItem:self.view<br>                              attribute:NSLayoutAttributeCenterX<br>                              multiplier:1<br>                              constant:0]];<br>    <br>    //距离底部20单位<br>    //注意NSLayoutConstraint创建的constant是加在toItem参数的，所以需要-20。<br>    [self.view addConstraint:[NSLayoutConstraint<br>                              constraintWithItem:btn<br>                              attribute:NSLayoutAttributeBottom<br>                              relatedBy:NSLayoutRelationEqual<br>                              toItem:self.view<br>                              attribute:NSLayoutAttributeBottom<br>                              multiplier:1<br>                              constant:-20]];<br>    <br>    //定义高度是父View的三分之一<br>    [self.view addConstraint:[NSLayoutConstraint<br>                              constraintWithItem:btn<br>                              attribute:NSLayoutAttributeHeight<br>                              relatedBy:NSLayoutRelationEqual<br>                              toItem:self.view<br>                              attribute:NSLayoutAttributeHeight<br>                              multiplier:0.3<br>                              constant:0]];<br><br>    //注册KVO方法<br>    [btn addObserver:self forKeyPath:@\"bounds\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionInitial context:nil];    <br>&#125;<br>&lt;!--more--&gt;<br>//KVO回调<br>- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context<br>&#123;<br>    if (object == btn &amp;&amp; [keyPath isEqualToString:@\"bounds\"])<br>    &#123;<br>        [btn setTitle:NSStringFromCGSize(btn.bounds.size) forState:UIControlStateNormal];<br>    &#125;<br>&#125;<br>  运行结果：   [Figure] ","covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/runbtn1.png","http://p27uwfdhv.bkt.clouddn.com/static/images/runbtn3.png","http://p27uwfdhv.bkt.clouddn.com/static/images/MyView.png","http://p27uwfdhv.bkt.clouddn.com/static/images/view1Toview2.png","http://p27uwfdhv.bkt.clouddn.com/static/images/ContentHuggingPriority.png"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"按比例缩放\"><a href=\"#按比例缩放\" class=\"headerlink\" title=\"按比例缩放\"></a>按比例缩放</h2><p>按比例缩放，这是在Interface Builder中无法设置的内容。<br>而在代码中，有如下两种实现方式:</p>\n<ol>\n<li>使用<code>NSLayoutConstraint</code>类型的初始化函数中的<code>multiplier</code>参数就可以非常简单的设置按比例缩放。  </li>\n<li>同时也可以设置不同<code>NSLayoutAttribute</code>参数来达到意想不到的效果，比如“A的Width等于B的Height的2倍”这样的效果。  </li>\n</ol>\n<p>现在就拿一个简单的<strong><code>UIButton</code></strong>做示例，在ViewController中创建一个UIButton字段：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIButton</span> *btn;  </span><br></pre></td></tr></table></figure>  </p>\n<h4 id=\"需求-1：\"><a href=\"#需求-1：\" class=\"headerlink\" title=\"需求 1：\"></a>需求 1：</h4><ol>\n<li>要求<strong><code>UIButton</code></strong>水平居中，始终距离父View底部<strong>20</strong>单位，其高度是父View高度的三分之一。</li>\n<li>使用<strong>KVO</strong>来监控<strong><code>UIButton</code></strong>的大小并实时输出到屏幕上。  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建UIButton，不需要设置frame</span></span><br><span class=\"line\">    btn = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeRoundedRect</span>];</span><br><span class=\"line\">    [btn setTitle:<span class=\"string\">@\"mgen\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    btn.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:btn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//禁止自动转换AutoresizingMask</span></span><br><span class=\"line\">    btn.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//居中</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span></span><br><span class=\"line\">                              constraintWithItem:btn</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeCenterX</span></span><br><span class=\"line\">                              relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></span><br><span class=\"line\">                              toItem:<span class=\"keyword\">self</span>.view</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeCenterX</span></span><br><span class=\"line\">                              multiplier:<span class=\"number\">1</span></span><br><span class=\"line\">                              constant:<span class=\"number\">0</span>]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//距离底部20单位</span></span><br><span class=\"line\">    <span class=\"comment\">//注意NSLayoutConstraint创建的constant是加在toItem参数的，所以需要-20。</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span></span><br><span class=\"line\">                              constraintWithItem:btn</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeBottom</span></span><br><span class=\"line\">                              relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></span><br><span class=\"line\">                              toItem:<span class=\"keyword\">self</span>.view</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeBottom</span></span><br><span class=\"line\">                              multiplier:<span class=\"number\">1</span></span><br><span class=\"line\">                              constant:<span class=\"number\">-20</span>]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//定义高度是父View的三分之一</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span></span><br><span class=\"line\">                              constraintWithItem:btn</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeHeight</span></span><br><span class=\"line\">                              relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></span><br><span class=\"line\">                              toItem:<span class=\"keyword\">self</span>.view</span><br><span class=\"line\">                              attribute:<span class=\"built_in\">NSLayoutAttributeHeight</span></span><br><span class=\"line\">                              multiplier:<span class=\"number\">0.3</span></span><br><span class=\"line\">                              constant:<span class=\"number\">0</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册KVO方法</span></span><br><span class=\"line\">    [btn addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"bounds\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> | <span class=\"built_in\">NSKeyValueObservingOptionInitial</span> context:<span class=\"literal\">nil</span>];    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"><span class=\"comment\">//KVO回调</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span> *)change context:(<span class=\"keyword\">void</span> *)context</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == btn &amp;&amp; [keyPath isEqualToString:<span class=\"string\">@\"bounds\"</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [btn setTitle:<span class=\"built_in\">NSStringFromCGSize</span>(btn.bounds.size) forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n运行结果：  <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/runbtn1.png\"><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/runbtn2.png\">\n<a id=\"more\"></a>\n<h4 id=\"需求-2：\"><a href=\"#需求-2：\" class=\"headerlink\" title=\"需求 2：\"></a>需求 2：</h4></li>\n<li>在横向的显示中，Button的高度只有96，所以要求Button的最小高度为150。   </li>\n</ol>\n<p>涉及到的相关特性：</p>\n<ul>\n<li><strong>优先级</strong>：当两个<strong><code>Constraint</code></strong>同时作用在一个控件时，在某些情况下是有冲突的，可以通过设置<strong><code>Constraint</code></strong>的优先级来解决。<br>优先级对应<strong><code>NSLayoutConstraint</code></strong>类型的<strong><code>priority</code></strong>属性，默认值是<strong><code>UILayoutPriorityRequired</code></strong>，数值上等于<strong>1000</strong>. 设置一个低的值代表更低的优先级。  </li>\n<li><strong>最小值的定义</strong>：使用<strong><code>NSLayoutRelationGreaterThanOrEqual</code></strong>作为<strong><code>NSLayoutConstraint</code></strong>类型创建时的<strong><code>relatedBy</code></strong>参数。</li>\n</ul>\n<p>修改上面的比例Constraint，并在下方加入一个新的限制最小值的Constraint，代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义高度是父View的三分之一</span></span><br><span class=\"line\"><span class=\"comment\">//设置优先级低于UILayoutPriorityRequired(1000)，UILayoutPriorityDefaultHigh是750</span></span><br><span class=\"line\"><span class=\"built_in\">NSLayoutConstraint</span> *con = [<span class=\"built_in\">NSLayoutConstraint</span></span><br><span class=\"line\">                          constraintWithItem:btn</span><br><span class=\"line\">                          attribute:<span class=\"built_in\">NSLayoutAttributeHeight</span></span><br><span class=\"line\">                          relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></span><br><span class=\"line\">                          toItem:<span class=\"keyword\">self</span>.view</span><br><span class=\"line\">                          attribute:<span class=\"built_in\">NSLayoutAttributeHeight</span></span><br><span class=\"line\">                          multiplier:<span class=\"number\">0.3</span></span><br><span class=\"line\">                          constant:<span class=\"number\">0</span>];</span><br><span class=\"line\">con.priority = <span class=\"built_in\">UILayoutPriorityDefaultHigh</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addConstraint:con];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置btn最小高度为150</span></span><br><span class=\"line\">[btn addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span></span><br><span class=\"line\">                    constraintWithItem:btn</span><br><span class=\"line\">                    attribute:<span class=\"built_in\">NSLayoutAttributeHeight</span></span><br><span class=\"line\">                    relatedBy:<span class=\"built_in\">NSLayoutRelationGreaterThanOrEqual</span></span><br><span class=\"line\">                    toItem:<span class=\"literal\">nil</span></span><br><span class=\"line\">                    attribute:<span class=\"built_in\">NSLayoutAttributeNotAnAttribute</span></span><br><span class=\"line\">                    multiplier:<span class=\"number\">1</span></span><br><span class=\"line\">                    constant:<span class=\"number\">150</span>]];</span><br></pre></td></tr></table></figure><br>运行后，横向屏幕中的Button高度成了150：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/runbtn3.png\"></p>\n<h4 id=\"intrinsicContentSize-控件的内置大小\"><a href=\"#intrinsicContentSize-控件的内置大小\" class=\"headerlink\" title=\"intrinsicContentSize 控件的内置大小\"></a>intrinsicContentSize 控件的内置大小</h4><p>控件的内置大小是由控件本身的内容所决定的，比如一个<code>UILabel</code>的文字很长，那么该<code>UILabel</code>的内置大小自然会很长。<br>在代码中获取控件的内置大小的方法：  </p>\n<ol>\n<li>通过<code>UIView</code>的<code>intrinsicContentSize</code>属性来获取；</li>\n<li>通过<code>invalidateIntrinsicContentSize</code>方法来在下次UI规划事件中重新计算<code>intrinsicContentSize</code>。  </li>\n</ol>\n<p>注意：如果直接创建一个原始的UIView对象，它的内置大小为0。  </p>\n<p>先写一个辅助方法来快速设置UIView的边距限制：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置Autolayout中的边距辅助方法</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setEdge:(<span class=\"built_in\">UIView</span>*)superview view:(<span class=\"built_in\">UIView</span>*)view attr:(<span class=\"built_in\">NSLayoutAttribute</span>)attr constant:(<span class=\"built_in\">CGFloat</span>)constant</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [superview addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span> constraintWithItem:view </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t    attribute:attr </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t    relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span> </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t       toItem:superview</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t    attribute:attr </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t   multiplier:<span class=\"number\">1.0</span> </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t     constant:constant]</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>接下来，创建一个UIView，利用上面的辅助方法快速设置其在父控件的左，上，右边距为20单位。如下代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//view1</span></span><br><span class=\"line\"><span class=\"built_in\">UIView</span> *view1 = [<span class=\"built_in\">UIView</span> new];</span><br><span class=\"line\">view1.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</span><br><span class=\"line\"><span class=\"comment\">//不允许AutoresizingMask转换成Autolayout</span></span><br><span class=\"line\">view1.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:view1];</span><br><span class=\"line\"><span class=\"comment\">//设置左，上，右边距为20.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view1 attr:<span class=\"built_in\">NSLayoutAttributeLeft</span> constant:<span class=\"number\">20</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view1 attr:<span class=\"built_in\">NSLayoutAttributeTop</span> constant:<span class=\"number\">20</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view1 attr:<span class=\"built_in\">NSLayoutAttributeRight</span> constant:<span class=\"number\">-20</span>];</span><br></pre></td></tr></table></figure><br>但是运行后会发现，界面上不会显示任何东西。原因就是上面讲的，<code>UIView</code>默认是没有<strong><code>intrinsicContentSize</code></strong>的。</p>\n<p>创建一个自定义的<code>UIView</code>来改写<strong><code>intrinsicContentSize</code></strong>：MyView:<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/MyView.png\"><br>然后在.m文件中改写<strong>intrinsicContentSize</strong>方法，并返回有效值，比如这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改写UIView的intrinsicContentSize</span></span><br><span class=\"line\">- (<span class=\"built_in\">CGSize</span>)intrinsicContentSize</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">70</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>接着修改最上面的代码，把上面view1变量的类型从UIView替换成我们自定义的View：MyView类型：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyView *view1 = [MyView new];  </span><br></pre></td></tr></table></figure><br>再次运行代码，View会按照要求显示在屏幕上：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/Myview2.png\"><br>按照同样的方式，在下方添加另一个<code>MyView</code>，要求其距离父控件边距左，下，右各为<strong>20</strong>，代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//view2  </span></span><br><span class=\"line\">MyView *view2 = [MyView new];  </span><br><span class=\"line\">view2.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];  </span><br><span class=\"line\"><span class=\"comment\">//不允许AutoresizingMask转换成Autolayout  </span></span><br><span class=\"line\">view2.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">NO</span>;  </span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:view2];  </span><br><span class=\"line\"><span class=\"comment\">//设置左，下，右边距为20.  </span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view2 attr:<span class=\"built_in\">NSLayoutAttributeLeft</span> constant:<span class=\"number\">20</span>];  </span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view2 attr:<span class=\"built_in\">NSLayoutAttributeBottom</span> constant:<span class=\"number\">-20</span>];  </span><br><span class=\"line\">[<span class=\"keyword\">self</span> setEdge:<span class=\"keyword\">self</span>.view view:view2 attr:<span class=\"built_in\">NSLayoutAttributeRight</span> constant:<span class=\"number\">-20</span>];  </span><br></pre></td></tr></table></figure><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/myview4.png\"></p>\n<h4 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h4><ol>\n<li><p>通过代码加入Autolayout中的间距，命令view1和view2上下必须间隔20个单位。 </p>\n<ol>\n<li><ul>\n<li>这里要求view2在view1之下的<strong>20</strong>单位，所以创建<strong>NSLayoutConstraint</strong>中view2参数在前面。  </li>\n</ul>\n</li>\n<li><ul>\n<li>view2的<strong><code>attribute</code></strong>参数是<strong><code>NSLayoutAttributeTop</code></strong>，而view1的<strong><code>attribute</code></strong>参数是<strong><code>NSLayoutAttributeBottom</code></strong>  </li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>拉伸view2,而不拉伸view1。  </p>\n<ol>\n<li><ul>\n<li>控件的<strong><code>Content Hugging Priority</code></strong>拒绝拉伸的优先级，优先级越高，控件会越不容易被拉伸。    </li>\n</ul>\n</li>\n<li><ul>\n<li>控件的<strong><code>Content Compression Resistance Priority</code></strong>拒绝压缩内置空间(<code>intrinsicContentSize</code>)的优先级。优先级越高，控件的内置空间(<code>intrinsicContentSize</code>)会越不容易被压缩。  </li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置两个View上下间距为20</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addConstraint:[<span class=\"built_in\">NSLayoutConstraint</span> constraintWithItem:view2 </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\tattribute:<span class=\"built_in\">NSLayoutAttributeTop</span> </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\trelatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t   toItem:view1</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t    attribute:<span class=\"built_in\">NSLayoutAttributeBottom</span> </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t   multiplier:<span class=\"number\">1.0</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t constant:<span class=\"number\">20</span>]</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t];</span><br></pre></td></tr></table></figure>  \n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/view1Toview2.png\">\n<p>OK，的确，此时view1和view2相互间隔20单位，但是view1被拉伸了。</p>\n<p>使用控件的<strong><code>Content Hugging Priority</code></strong>，如下图：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/ContentHuggingPriority.png\"><br>如图,把view1（上图中被拉伸的，在上面的View）的<strong><code>Content Hugging Priority</code></strong>设置一个更高的值，那么当<code>Autolayout</code>遇到这种决定谁来拉伸的情况时，view1不会被优先拉伸，而优先级稍低的view2才会被拉伸。<br>可以直接通过UIView的<code>setContentHuggingPriority:forAxis</code>方法来设置控件的<strong><code>Content Hugging Priority</code></strong>，其中<code>forAxis</code>参数代表横向和纵向，本例中只需要设置纵向，所以传入<strong><code>UILayoutConstraintAxisVertical</code></strong>。整句代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提高view1的Content Hugging Priority</span></span><br><span class=\"line\">[view1 setContentHuggingPriority:<span class=\"built_in\">UILayoutPriorityDefaultHigh</span> forAxis:<span class=\"built_in\">UILayoutConstraintAxisVertical</span>];</span><br></pre></td></tr></table></figure><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/runview1.png\"></p>\n","categories":[{"name":"xcode","path":"api/categories/xcode.json"},{"name":"SB","path":"api/categories/SB.json"}],"tags":[{"name":"Storyboard","path":"api/tags/Storyboard.json"},{"name":"AutoLayout","path":"api/tags/AutoLayout.json"},{"name":"布局","path":"api/tags/布局.json"}]}