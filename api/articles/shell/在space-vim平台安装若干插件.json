{"title":"在space-vim平台安装若干插件","slug":"shell/在space-vim平台安装若干插件","date":"2017-08-17T14:26:46.000Z","updated":"2017-08-17T15:02:27.000Z","comments":true,"path":"api/articles/shell/在space-vim平台安装若干插件.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"space-vim\"><a href=\"#space-vim\" class=\"headerlink\" title=\"space-vim\"></a>space-vim</h2><p>首次启用一个 layer，需要执行 SPC f R, 或者 :so $MYVIMRC, 重新加载 .vimrc 并执行 :PlugInstall 安装所需的相关插件 。或者退出重新打开 vim, vim-plug 将会检测并自动安装缺失的插件。<br>基于vim-plug的插件管理平台<br><a href=\"https://github.com/junegunn/vim-plug#commands\" target=\"_blank\" rel=\"noopener\">vim-plug命令工具</a></p>\n<h3 id=\"Commands\"><a href=\"#Commands\" class=\"headerlink\" title=\"Commands\"></a>Commands</h3><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PlugInstall [name ...] [#threads]</code></td>\n<td>Install plugins</td>\n</tr>\n<tr>\n<td><code>PlugUpdate [name ...] [#threads]</code></td>\n<td>Install or update plugins</td>\n</tr>\n<tr>\n<td><code>PlugClean[!]</code></td>\n<td>Remove unused directories (bang version will clean without prompt)</td>\n</tr>\n<tr>\n<td><code>PlugUpgrade</code></td>\n<td>Upgrade vim-plug itself</td>\n</tr>\n<tr>\n<td><code>PlugStatus</code></td>\n<td>Check the status of plugins</td>\n</tr>\n<tr>\n<td><code>PlugDiff</code></td>\n<td>Examine changes from the previous update and the pending changes</td>\n</tr>\n<tr>\n<td><code>PlugSnapshot[!] [output path]</code></td>\n<td>Generate script for restoring the current snapshot of the plugins</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Plug-options\"><a href=\"#Plug-options\" class=\"headerlink\" title=\"Plug options\"></a><code>Plug</code> options</h3><table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>branch</code>/<code>tag</code>/<code>commit</code></td>\n<td>Branch/tag/commit of the repository to use</td>\n</tr>\n<tr>\n<td><code>rtp</code></td>\n<td>Subdirectory that contains Vim plugin</td>\n</tr>\n<tr>\n<td><code>dir</code></td>\n<td>Custom directory for the plugin</td>\n</tr>\n<tr>\n<td><code>as</code></td>\n<td>Use different name for the plugin</td>\n</tr>\n<tr>\n<td><code>do</code></td>\n<td>Post-update hook (string or funcref)</td>\n</tr>\n<tr>\n<td><code>on</code></td>\n<td>On-demand loading: Commands or <code>&lt;Plug&gt;</code>-mappings</td>\n</tr>\n<tr>\n<td><code>for</code></td>\n<td>On-demand loading: File types</td>\n</tr>\n<tr>\n<td><code>frozen</code></td>\n<td>Do not update unless explicitly specified</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装objc-自动提示插件YouCompleteMe\"><a href=\"#安装objc-自动提示插件YouCompleteMe\" class=\"headerlink\" title=\"安装objc 自动提示插件YouCompleteMe\"></a>安装objc 自动提示插件YouCompleteMe</h2><p><a href=\"https://github.com/Valloric/YouCompleteMe#commands\" target=\"_blank\" rel=\"noopener\">YouCompleteMe命令工具</a></p>\n<ol>\n<li><p>在spacevim添加<br>使用space-vim封装的layer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Layer &apos;ycmd&apos;         &quot;语法自动补齐</span><br></pre></td></tr></table></figure>\n<p>YouCompleteMe 安装位置： <code>~/.vim/plugged/YouCompleteMe</code> 。</p>\n</li>\n<li><p>编译 YCM<br>在使用space-vim平台上，使用layer方式安装会执行如下编译操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!./install.py --clang-completer</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>详见脚本：space-vim/layers/+tools/ycmd/packages.vim</p>\n<p>参考：<a href=\"http://www.cocoachina.com/ios/20170224/18751.html\" target=\"_blank\" rel=\"noopener\">征服恐惧！用 Vim 写 iOS App</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cmake</span><br><span class=\"line\">./install.py --clang-completer --system-libclang</span><br></pre></td></tr></table></figure></p>\n<p><code>--clang-completer</code>: 告诉脚本需要 clang 的支持<br><code>--system-libclang</code>: 告诉编译脚本使用系统的 clang，因为之前 clang 升级 4.0 的时候，并没有已经编译好的包给我下载，所以这里不用系统 clang 的话，编译脚本会下载一个 clang 3.0，这样就无法支持 iOS 10.0 以后的 sdk 了，因为 iOS 10.0 以后的 sdk 为了支持 swift 引入了一些 clang 3.0 不支持的新语法，所以这里要加上 –system-libclang。</p>\n<ol>\n<li>FlagsForFile脚本获取编译参数<br>YCMD 是通过每个项目路径下的 <code>.ycm_extra_conf.py</code> 脚本文件，定义了<code>FlagsForFile</code> 的函数来获取某一个特定文件需要的编译参数，一般情况下大部分文件的编译参数是相同的。</li>\n</ol>\n<h3 id=\"配置swiftlint语法矫正工具\"><a href=\"#配置swiftlint语法矫正工具\" class=\"headerlink\" title=\"配置swiftlint语法矫正工具\"></a>配置swiftlint语法矫正工具</h3><p>安装<br>方式一：<code>brew install swiftlint</code><br>方式二：下载[swiftlint.pkg][<a href=\"https://github.com/realm/SwiftLint/releases/latest\" target=\"_blank\" rel=\"noopener\">https://github.com/realm/SwiftLint/releases/latest</a>]<br>方式三：<code>pod &#39;SwiftLint&#39;</code>，对单个项目集成swiftlint</p>\n<p>配置<br>在Xcode中<br>新增一个： “Run Script Phase”:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">which</span> swiftlint &gt;/dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">swiftlint</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<p>在终端预览：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ swiftlint <span class=\"built_in\">help</span></span><br><span class=\"line\">Available commands:</span><br><span class=\"line\"></span><br><span class=\"line\">autocorrect  Automatically correct warnings and errors</span><br><span class=\"line\"><span class=\"built_in\">help</span>         Display general or <span class=\"built_in\">command</span>-specific <span class=\"built_in\">help</span></span><br><span class=\"line\">lint         Print lint warnings and errors <span class=\"keyword\">for</span> the Swift files <span class=\"keyword\">in</span> the current directory (default <span class=\"built_in\">command</span>)</span><br><span class=\"line\">rules        Display the list of rules and their identifiers</span><br><span class=\"line\">version      Display the current version of SwiftLint</span><br></pre></td></tr></table></figure>\n<p>支持vim编辑器：<br><a href=\"https://github.com/keith/swift.vim\" target=\"_blank\" rel=\"noopener\">keith/swift.vim</a></p>\n<ol>\n<li>安装 <a href=\"https://github.com/scrooloose/syntastic/\" target=\"_blank\" rel=\"noopener\">syntastic</a></li>\n<li>当在存在<code>Package.swift</code>的swift目录中启动vim，swiftpm将自动可用。</li>\n<li>当在存在<code>.swiftlint.yml</code>的swift目录中启动vim，且SwiftLint已安装，自动启用swiftlint。</li>\n<li>在vimrc中添加配置，当启动vim即可使用：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> g:syntastic_swift_checkers = [<span class=\"string\">'swiftpm'</span>, <span class=\"string\">'swiftlint'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"支持swift自动补齐\"><a href=\"#支持swift自动补齐\" class=\"headerlink\" title=\"支持swift自动补齐\"></a>支持swift自动补齐</h3><p>keith/sourcekittendaemon.vim：这个插件提供了Vim集成SourceKittenDaemon。这意味着你可以在vim中开发swift项目<br>需要两步：<br>    方式一：<code>brew install sourcekitten</code><br>    方式二：clone源码 ,运行<code>swift build</code><br>    方式三： clone 源码，运行 <code>make install</code><br>    方式三： <a href=\"https://github.com/jpsim/SourceKitten/releases\" target=\"_blank\" rel=\"noopener\">pkg安装包</a><br>    执行<code>sourcekitten help</code>验证安装成功。</p>\n<ol>\n<li>安装SourceKittenDaemon环境<br> 安装并设置<a href=\"https://github.com/terhechte/SourceKittenDaemon\" target=\"_blank\" rel=\"noopener\">SourceKittenDaemon</a><br> 方式一：<a href=\"https://github.com/terhechte/SourceKittenDaemon/releases/\" target=\"_blank\" rel=\"noopener\">pkg安装包</a><br> 方式二：1. Clone the repository  2. 安装 <code>make install</code><br> 执行<code>SourceKittenDaemon help</code>验证安装成功。<br> 启动后台驻守服务HTTP：<a href=\"https://github.com/terhechte/SourceKittenDaemon/blob/master/Protocol.org\" target=\"_blank\" rel=\"noopener\">参考Protocol.org</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SourceKittenDaemon start --port 44876 --project /private/tmp/abcde/abcde.xcodeproj</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>--port</code>: 服务使用的端口号，默认为<code>8081</code>，vim目前不支持指定SourceKittenDaemon端口，使用默认的8081。<br><code>--project=</code>: 指定服务将要加载的<code>.xcodeproj</code>文件路径，不支持指定<code>.xcworkspaces</code>文件路径</p>\n<p>使用get方法请求后驻服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/complete  # X-Offset|X-Path|X-File</span><br><span class=\"line\">/stop     # 停止后驻服务. 一般用于为其他target提供服务时，重新启动服务。</span><br><span class=\"line\">/ping     # ping后驻服务，运行正常 return OK</span><br><span class=\"line\">/project  # 打印当前加载的project文件路径。</span><br><span class=\"line\">/files    # 打印一个当前加载的project中包含的所有swift文件列表</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>安装vim插件<br>使用vim-plug安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plug &apos;keith/sourcekittendaemon.vim&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>NOTE: This plugin doesn’t provide Swift runtime files. If you’d like those checkout swift.vim</p>\n<h3 id=\"AsyncRun-shell-command\"><a href=\"#AsyncRun-shell-command\" class=\"headerlink\" title=\"AsyncRun shell command\"></a>AsyncRun shell command</h3><p>编辑器命令:AsyncRun + shell命令即可在后台执行shell命令，打开quickfix就可以实时查看执行结果了。也可以通过添加配置的方式来实现开始执行命令的时候自动打开quickfix窗口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:copen //打开脚本运行日志窗口 </span><br><span class=\"line\">:AsyncRun git status  //异步执行shell脚本</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"vim","path":"api/categories/vim.json"},{"name":"工具","path":"api/categories/工具.json"}],"tags":[]}