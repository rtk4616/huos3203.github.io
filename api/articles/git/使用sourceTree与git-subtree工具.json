{"title":"使用sourceTree与git-subtree工具","slug":"git/使用sourceTree与git-subtree工具","date":"2017-05-17T11:23:22.000Z","updated":"2017-05-17T17:52:28.000Z","comments":true,"path":"api/articles/git/使用sourceTree与git-subtree工具.json","excerpt":null,"covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/gittree.png","http://p27uwfdhv.bkt.clouddn.com/static/images/gitsubtreepull.png"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"git-subtree-合并\"><a href=\"#git-subtree-合并\" class=\"headerlink\" title=\"git subtree 合并\"></a>git subtree 合并</h3><p>git subtree：合并策略，通过git subtree命令能将依赖库某分支合并到主项目的分支中，在开发过程中，只需对主项目分支进行统一管理。</p>\n<h4 id=\"创建合并subtree-add命令\"><a href=\"#创建合并subtree-add命令\" class=\"headerlink\" title=\"创建合并subtree add命令\"></a>创建合并subtree add命令</h4><p>命令如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;git subtree&apos; add -P &lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\">&apos;git subtree&apos; add -P &lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"两步走\"><a href=\"#两步走\" class=\"headerlink\" title=\"两步走\"></a>两步走</h5><p>先fetch库再subtree add合并</p>\n<ol>\n<li><p>先将依赖库fetch到本地仓库中</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建lib的远程版本库: </span><br><span class=\"line\">git init --bare lib-rep</span><br><span class=\"line\"><span class=\"comment\">#-f：远端库添加后立即执行fetch操作</span></span><br><span class=\"line\">git remote add -f librepo ../lib-rep</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过git subtree命令将依赖库合并到主项目中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree add -P lib librepo master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"squash合并法\"><a href=\"#squash合并法\" class=\"headerlink\" title=\"squash合并法\"></a>squash合并法</h5><p><code>--squash</code>: 适用于add/pull/merge子命令。先合并引用库的更新记录，将合并结果并到主项目中。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree add --prefix=themes/jacman --squash https://huos3203@github.com/huos3203/jacman.git master</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"subtree其他命令\"><a href=\"#subtree其他命令\" class=\"headerlink\" title=\"subtree其他命令\"></a>subtree其他命令</h4><p>git subtree支持创建(add)之外,还支持更新(pull),推送(push),合并(merge),抽离(split)以下命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'git subtree'</span> pull -P &lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\"><span class=\"string\">'git subtree'</span> push -P &lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class=\"line\"><span class=\"string\">'git subtree'</span> merge -P &lt;prefix&gt; &lt;commit&gt;</span><br><span class=\"line\"><span class=\"string\">'git subtree'</span> split -P &lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>从子树库中拉取最新代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree pull --prefix=themes/jacman --squash https://huos3203@github.com/huos3203/jacman.git master</span><br></pre></td></tr></table></figure></p>\n<p>将自己的代码发布到子树库:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git subtree push --prefix=themes/jacman --squash https://huos3203@github.com/huos3203/jacman.git master</span><br></pre></td></tr></table></figure></p>\n<p>相关参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-q | --quiet</span><br><span class=\"line\">-d | --debug</span><br><span class=\"line\">-P &lt;prefix&gt; | --prefix=&lt;prefix&gt;      引用库对应的本地目录</span><br><span class=\"line\">-m &lt;message&gt; | --message=&lt;message&gt;   适用于add/pull/merge子命令。设置产生的合并提交的说明文本</span><br><span class=\"line\">--squash                             适用于add/pull/merge子命令。先合并引用库的更新记录，将合并结果并到主项目中。</span><br><span class=\"line\">使用此选项时，subtree add/pull会产生两个提交版本：一个是子项目的历史记录，一个是Merge操作。好处是可以让主项目历史记录很规整，缺点是子项目更新时常常需要解决冲突。一个更好的解决方案是：单独建一个分支进行--no-squash的subtree更新，然后再--squash合并到主分支。每次在此分支做操作前都需要先把主分支合并进来。参考：http://www.fwolf.com/blog/post/246</span><br></pre></td></tr></table></figure></p>\n<p>split子命令选项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--annotate=&lt;annotation&gt;              创建合成历史时有可能形成内容不同但提交信息完全相同的提交版本，使用这个选项在每个提交消息前加上此前缀用来区分。</span><br><span class=\"line\">-b &lt;branch&gt; | --branch=&lt;branch&gt;      创建合成的提交历史时，创建此参数指定的新分支包含生成的合成历史。&lt;branch&gt;必须是还不存在的。</span><br><span class=\"line\">--onto=&lt;onto&gt;</span><br><span class=\"line\">--rejoin</span><br><span class=\"line\">--ignore-joins</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用sourcetree管理\"><a href=\"#使用sourcetree管理\" class=\"headerlink\" title=\"使用sourcetree管理\"></a>使用sourcetree管理</h4><ol>\n<li>配置 subtree<br>菜单：Repository -&gt; Add/Link subtree…(添加／链接子树…)<br>在左边栏的SUBTREES(子树)中显示：<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/gittree.png\"></li>\n<li>拉取依赖库的最新代码<br>在右边栏右击已存在的subtree，并选择 pull subtree…菜单项：<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/gitsubtreepull.png\">\n第二步的功能代码如下:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -c subtree pull -P themes/.jacman --squash https://huos3203@github.com/huos3203/jacman.git master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"submodule嵌套\"><a href=\"#submodule嵌套\" class=\"headerlink\" title=\"submodule嵌套\"></a>submodule嵌套</h3><p>git submodule：嵌套策略，将依赖库直接clone到主项目目录中，通过配置.submodule文件来隔离管理主项目／子依赖库的版本。<br>添加子模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/libgit2/objective-git.git External/ObjectiveGit</span><br></pre></td></tr></table></figure></p>\n<p>更新子模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>submodule那样每次子项目修改了后要init和update.万一哪次没update就直接”commit -a” 或者 “add .” 全commit上去就悲剧了。</p>\n</blockquote>\n","categories":[{"name":"git","path":"api/categories/git.json"},{"name":"IDE","path":"api/categories/IDE.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"}]}