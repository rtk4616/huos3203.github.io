<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2018-05-31T12:10:07.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://huos3203.github.io/2018/05/31/hexo/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%96%B9%E6%B3%95/"/>
    <id>https://huos3203.github.io/2018/05/31/hexo/hexo博文置顶方法/</id>
    <published>2018-05-31T11:44:33.000Z</published>
    <updated>2018-05-31T12:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p>修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">                <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">    <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">        perPage: config.index_generator.per_page,</span><br><span class="line">        layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">        format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            __index: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在文章中添加 <code>top</code> 值，数值越大文章越靠前:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 解决Charles乱码问题</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure></p><p>转：<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;修改 &lt;code&gt;hero-generator-index&lt;/code&gt; 插件，把文件：&lt;cod
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>+0800格式转NSDate</title>
    <link href="https://huos3203.github.io/2018/05/31/iOS/+0800%E6%A0%BC%E5%BC%8F%E8%BD%ACNSDate/"/>
    <id>https://huos3203.github.io/2018/05/31/iOS/+0800格式转NSDate/</id>
    <published>2018-05-30T18:42:20.000Z</published>
    <updated>2018-05-30T18:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *timstr = [resData objectForKey:<span class="string">@"Data"</span>];</span><br><span class="line">timstr = [timstr stringByReplacingOccurrencesOfString:<span class="string">@"/Date("</span> withString:<span class="string">@""</span>];</span><br><span class="line">timstr = [timstr stringByReplacingOccurrencesOfString:<span class="string">@"+0800)/"</span> withString:<span class="string">@""</span>];</span><br><span class="line">model.time = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:timstr.longLongValue/<span class="number">1000</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>高德地图API使用</title>
    <link href="https://huos3203.github.io/2018/05/30/iOS/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEAPI%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/05/30/iOS/高德地图API使用/</id>
    <published>2018-05-30T14:40:56.000Z</published>
    <updated>2018-05-30T18:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AMapFoundationKit/AMapFoundationKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AMapLocationKit/AMapLocationKit.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *strKey = <span class="string">@"2d8a96d668576584acebf2bab0ba0c08"</span>;<span class="comment">//默认值</span></span><br><span class="line"><span class="comment">//配置里面取值</span></span><br><span class="line"><span class="built_in">NSString</span> *strBundleKey = [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][<span class="string">@"IOSPostionkey"</span>];</span><br><span class="line"><span class="keyword">if</span> (strBundleKey) &#123;</span><br><span class="line">    strKey = strBundleKey;</span><br><span class="line">&#125;</span><br><span class="line">[AMapServices sharedServices].apiKey = strKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带逆地理信息的一次定位（返回坐标和地址信息）</span></span><br><span class="line"><span class="keyword">self</span>.GaodelocationManager = [[AMapLocationManager alloc] init];</span><br><span class="line">[<span class="keyword">self</span>.GaodelocationManager setDesiredAccuracy:kCLLocationAccuracyHundredMeters];</span><br><span class="line"><span class="comment">//   定位超时时间，最低2s，此处设置为2s</span></span><br><span class="line"><span class="keyword">self</span>.GaodelocationManager.locationTimeout =<span class="number">10</span>;</span><br><span class="line"><span class="comment">//   逆地理请求超时时间，最低2s，此处设置为2s</span></span><br><span class="line"><span class="keyword">self</span>.GaodelocationManager.reGeocodeTimeout = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//设置不允许系统暂停定位</span></span><br><span class="line">[<span class="keyword">self</span>.GaodelocationManager setPausesLocationUpdatesAutomatically:<span class="literal">NO</span>];</span><br><span class="line"><span class="comment">//    //设置允许在后台定位</span></span><br><span class="line"><span class="comment">//    [locationManager setAllowsBackgroundLocationUpdates:YES];</span></span><br><span class="line"><span class="comment">//设置允许连续定位逆地理</span></span><br><span class="line">[<span class="keyword">self</span>.GaodelocationManager setLocatingWithReGeocode:<span class="literal">YES</span>];</span><br><span class="line"><span class="comment">//    [locationManager setDelegate:self];</span></span><br><span class="line"><span class="comment">// [self.locationManager startUpdatingLocation];</span></span><br><span class="line"><span class="comment">//    // 带逆地理（返回坐标和地址信息）。将下面代码中的 YES 改成 NO ，则不会返回地址信息。</span></span><br><span class="line">[<span class="keyword">self</span>.GaodelocationManager requestLocationWithReGeocode:<span class="literal">YES</span> completionBlock:^(<span class="built_in">CLLocation</span> *gaodeLocation, AMapLocationReGeocode *regeocode, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gaodeLocation==<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"高德没有返回地理位置,使用苹果官方定位经纬度"</span>);</span><br><span class="line">        [<span class="keyword">self</span> GetGISInfoByByLocationWithjingdu:jingdu AndWeidu:weidu];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"locError:&#123;%ld - %@&#125;;"</span>, (<span class="keyword">long</span>)error.code, error.localizedDescription);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (error.code == AMapLocationErrorLocateFailed)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"AMapLocationErrorLocateFailed高德没有返回地理位置,使用苹果官方定位经纬度"</span>);</span><br><span class="line">            [<span class="keyword">self</span> GetGISInfoByByLocationWithjingdu:jingdu AndWeidu:weidu];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"使用高德location:%@"</span>, gaodeLocation);</span><br><span class="line">    <span class="built_in">NSString</span> * gaodeWeidu =  [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.9f"</span>,gaodeLocation.coordinate.latitude];</span><br><span class="line">    <span class="built_in">NSString</span> * gaodeJingdu =  [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.9f"</span>,gaodeLocation.coordinate.longitude];</span><br><span class="line">    <span class="keyword">if</span> (regeocode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"reGeocode:%@"</span>, regeocode);</span><br><span class="line">        <span class="keyword">self</span>.theRealAdress = regeocode.formattedAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> GetGISInfoByByLocationWithjingdu:gaodeJingdu AndWeidu:gaodeWeidu];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;引入头文件&quot;&gt;&lt;a href=&quot;#引入头文件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>npm降级的两种方法</title>
    <link href="https://huos3203.github.io/2018/05/29/hexo/npm%E9%99%8D%E7%BA%A7%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://huos3203.github.io/2018/05/29/hexo/npm降级的两种方法/</id>
    <published>2018-05-29T12:06:24.000Z</published>
    <updated>2018-05-29T12:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h3 id="方法一：简单暴力"><a href="#方法一：简单暴力" class="headerlink" title="方法一：简单暴力"></a>方法一：简单暴力</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@4 -g</span><br></pre></td></tr></table></figure><h3 id="方法二：nvm工具"><a href="#方法二：nvm工具" class="headerlink" title="方法二：nvm工具"></a>方法二：nvm工具</h3><p>nvm是node版本管理工具</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>装nvm之前，建议把现有的所有nodejs版本全部删除，以后就让nvm全权管理就好了。保存着旧的node反而容易造成版本管理的困难。</p><p>官网nvm安装指南：<a href="https://github.com/creationix/nvm#installation" target="_blank" rel="noopener">https://github.com/creationix/nvm#installation</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>nvm有了后，直接装对应版本的node，会安装对应版本npm。<br>如：node 8 对应 npm v5，node 7 对应 npm v4<br>如果需要npm v5, 则<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8</span><br><span class="line">nvm use 8</span><br></pre></td></tr></table></figure></p><p>如果需要npm v4了，装上node 7就可以了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 7</span><br><span class="line">nvm use 7</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;方法一：简单暴力&quot;&gt;&lt;a href=&quot;#方法一：简单暴力&quot; class=&quot;header
      
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>终端实现预览plantuml的插件</title>
    <link href="https://huos3203.github.io/2018/05/29/shell/%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E9%A2%84%E8%A7%88plantuml%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>https://huos3203.github.io/2018/05/29/shell/终端实现预览plantuml的插件/</id>
    <published>2018-05-29T11:32:04.000Z</published>
    <updated>2018-05-29T12:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">'huos3203/plantuml-syntax'</span>  <span class="string">"plantuml语法高亮 Plug 'aklt/plantuml-syntax'</span></span><br><span class="line"><span class="string">Plug 'tyru/open-browser.vim'</span></span><br><span class="line"><span class="string">Plug 'weirongxu/plantuml-previewer.vim' "</span>在线工具：http://sujoyu.github.io/plantuml-previewer/</span><br></pre></td></tr></table></figure><h3 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h3><p><a href="https://www.graphviz.org/download/" target="_blank" rel="noopener">下载地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install graphviz</span><br></pre></td></tr></table></figure></p><h3 id="打开浏览器safari插件工具"><a href="#打开浏览器safari插件工具" class="headerlink" title="打开浏览器safari插件工具"></a>打开浏览器safari插件工具</h3><p>open-browser.vim</p><h3 id="语法高亮插件"><a href="#语法高亮插件" class="headerlink" title="语法高亮插件"></a>语法高亮插件</h3><p>aklt/plantuml-syntax (vim syntax file for plantuml)</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建uml文件"><a href="#创建uml文件" class="headerlink" title="创建uml文件"></a>创建uml文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test.uml</span><br></pre></td></tr></table></figure><h3 id="预览uml图"><a href="#预览uml图" class="headerlink" title="预览uml图"></a>预览uml图</h3><p>通过命令打开浏览器预览界面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PlantumlOpen</span><br></pre></td></tr></table></figure></p><p>在vi中执行保存命令<code>:w</code>,预览界面会自动刷新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>GB乐理知识体系</title>
    <link href="https://huos3203.github.io/2018/05/29/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/GB%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>https://huos3203.github.io/2018/05/29/作文作曲/GB乐理知识体系/</id>
    <published>2018-05-29T11:32:04.000Z</published>
    <updated>2018-05-30T18:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="使用puml来梳理乐理知识点"><a href="#使用puml来梳理乐理知识点" class="headerlink" title="使用puml来梳理乐理知识点"></a>使用puml来梳理乐理知识点</h2><h2 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h2><p><img src="http://www.plantuml.com/plantuml/svg/VLDBRzf04Bxlh_2vKcZwF73egHSEELKzLJsWs56GKAY8fTuG4O6O132bTMbZI7030RMgGGg5Wddy6Sy-Jlo5hhCEDT36b_NCV3lpVRCpQaoDAn8CM-wqHcqBj0fBEtJsWPmESFe8p1b2SMLFbVQLgAmaqQEGb4hX_0-iw-xup7K6SDeXdnne7fDoBfL2ZqCybuKlMp0r8DjQJ0eutyOt1gvdsDSo-rwWtICwDwdb-z6Ja4H-cYoT1oFd_ZwdlGpj6gyZwEaoqQWFuslGgjJge6SXYMMBP6h3w0Rq7d6EEGMa7CW-lSFTA5VpV7jRUX-JrNtqvi7RhQqNGKQ-QvCL2gAMYB3F8lBoVt5n4kSZlgWnCmTbxT_8bLgRhhyPGU-wJijlZu_aKSxxJewH0tl0Az3kDnGqmi8GlS963nVjnKG3BSUiNuj9VXLBvoVOQUAwnJl8KUp4Q-j3OjbWds-0MRK3uohjNkDCbYTR2N96Q-6mEscmTELGJIILY8pMer9CfgKXw9-5QpDEp3ukjO8O8SRNB_1GwtdJ6JHkUoX6iq2SFcbuZLwnx-Uwav2L-FgLiCHddhQly4LvwVFArTE2u9tAZMjy5QWzPrMRQm7zIg23T8MedUYxL_SKv_l17yIT5iLD_kDD_-tIkQCpA9Uy5Vio8yrnK1XK2j1iGxFFAXfk366YhmxIMXDyB_zsbGDLIKfxYGG_a3VLzKjlluJZ3m00"></p><h2 id="大音阶"><a href="#大音阶" class="headerlink" title="大音阶"></a>大音阶</h2><p> 12个调：7个大键5个黑键 ： 全音/半音<br> 音名：C Db D Eb E Fb F Gb G Ab A Bb B<br> 音组：十二平均律<br> 音高低，强弱，长短，音色<br> 音符时效：全音符，二分音符，四分音符，八分音符，十六分音符。<br> 斧头/符干/符尾   书写方法：斧头下干居右，斧头上干居左，符尾永居右<br> 节：<br> 拍号：<br> 乐速：BPM<br> 五线谱<br> 音程： 度数：两个音符跨度的线和间的个数，音数：两个音符相差全音和半音的个数<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调试</span><br><span class="line">音阶</span><br><span class="line">调域</span><br><span class="line">固定唱名法/首调唱名法</span><br><span class="line">自然大调/自然小调</span><br><span class="line">和弦的---顺阶和弦</span><br><span class="line">调号</span><br><span class="line">五度圈</span><br><span class="line">大调中的主要和弦的功能与进行</span><br></pre></td></tr></table></figure></p><h3 id="C大调音阶"><a href="#C大调音阶" class="headerlink" title="C大调音阶"></a>C大调音阶</h3><p> do 在C上<br> 音名：C，D，E，F，G，A，B，C<br> 指法：1 ，2，3，1，2，3，4，5</p><h3 id="G大调音阶"><a href="#G大调音阶" class="headerlink" title="G大调音阶"></a>G大调音阶</h3><p> 音名：G，A，B，半音 C，D，E，全音F#，半音G</p><ol><li><del>扫描事件动画处理</del></li><li>巡查录入，执法权限验证进行执法</li><li>筛选商业调试UI</li><li>巡查年度列表</li><li>配置平台组件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;使用puml来梳理乐理知识点&quot;&gt;&lt;a href=&quot;#使用puml来梳理乐理知识点&quot; c
      
    
    </summary>
    
      <category term="作文作曲" scheme="https://huos3203.github.io/categories/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>pyenv切换python的版本</title>
    <link href="https://huos3203.github.io/2018/05/29/hexo/pyenv%E5%88%87%E6%8D%A2python%E7%9A%84%E7%89%88%E6%9C%AC/"/>
    <id>https://huos3203.github.io/2018/05/29/hexo/pyenv切换python的版本/</id>
    <published>2018-05-29T10:33:30.000Z</published>
    <updated>2018-05-29T12:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p><a href="https://stackoverflow.com/questions/32702098/err-stack-error-command-failed-python2-c-import-platform" target="_blank" rel="noopener">在hexo 项目中使用npm 配置环境，出现错误：gyp ERR! configure error</a></p><p>pyenv是python的多版本管理包，实现互相独立、互不干扰的python环境配置。</p><h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><p>安装电脑是mac，所以理所当然的使用神器：homebrew<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure></p><p>安装界面略过，安装结束后，系统提示如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Caveats</span><br><span class="line">To use Homebrew<span class="string">'s directories rather than ~/.pyenv add to your profile:</span></span><br><span class="line"><span class="string">export PYENV_ROOT=/usr/local/var/pyenv</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To enable shims and autocompletion add to your profile:</span></span><br><span class="line"><span class="string">if which pyenv &gt; /dev/null; then eval "$(pyenv init -)"; fi</span></span><br></pre></td></tr></table></figure></p><p>根据此提示，在bash的配置文件（由于我的bash是oh my zsh，所以我的配置文件为~/.zshrc）中添加以下两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PYENV_ROOT=/usr/local/var/pyenv</span><br><span class="line">if which pyenv &gt; /dev/null; then eval &quot;$(pyenv init -)&quot;; fi</span><br></pre></td></tr></table></figure></p><h2 id="使用pyenv"><a href="#使用pyenv" class="headerlink" title="使用pyenv"></a>使用pyenv</h2><h4 id="安装指定版本的python"><a href="#安装指定版本的python" class="headerlink" title="安装指定版本的python"></a>安装指定版本的python</h4><p>显示所有可以安装的python版本软件，如2.1.3…3.5.1等。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -l</span><br><span class="line">pyenv install 2.7.11 -v</span><br></pre></td></tr></table></figure></p><p><code>-v</code>表示在显示安装过程。<br>安装完成后，2.7.11版本在系统中的存放位置为：<br><code>/usr/local/var/pyenv/versions/2.7.11</code></p><h3 id="为项目配置python环境"><a href="#为项目配置python环境" class="headerlink" title="为项目配置python环境"></a>为项目配置python环境</h3><p>接下来进入开发项目的主文件夹，如<code>~/Desktop/Python/TWD</code>，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 2.7.11</span><br></pre></td></tr></table></figure></p><p>即在当前文件夹下配置完成python的开发环境。接下来可通过pip安装开发过程中的各种包。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-显示所有安装的python版本"><a href="#1-显示所有安装的python版本" class="headerlink" title="1.显示所有安装的python版本"></a>1.显示所有安装的python版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><h3 id="2-切换python版本"><a href="#2-切换python版本" class="headerlink" title="2.切换python版本"></a>2.切换python版本</h3><p>要切换python 版本，可以使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global &lt;version&gt;</span><br></pre></td></tr></table></figure></p><p>比如，我使用以上命令pyenv global 2.7.11后，系统默认的python版本即为2.7.11，在命令行输入python后，进入的就是2.7.11的shell，不再是system的shell。</p><h3 id="3-切换python-shell版本"><a href="#3-切换python-shell版本" class="headerlink" title="3.切换python shell版本"></a>3.切换python shell版本</h3><p>若不使用pyenv global命令实现python shell版本切换，可以使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv shell &lt;version&gt;</span><br></pre></td></tr></table></figure></p><p>比如，我使用pyenv shell 2.7.11后，在命令行输入python，进入的是2.7.11的shell。此时系统的默认python版本也变成了2.7.11，如下所示：</p><p><a href="https://www.jianshu.com/p/bcb3f1be9073" target="_blank" rel="noopener">转自</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>雨夜</title>
    <link href="https://huos3203.github.io/2018/05/17/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/%E9%9B%A8%E5%A4%9C/"/>
    <id>https://huos3203.github.io/2018/05/17/作文作曲/雨夜/</id>
    <published>2018-05-17T10:58:36.000Z</published>
    <updated>2018-05-30T21:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="雨夜"><a href="#雨夜" class="headerlink" title="雨夜"></a>雨夜</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">卧听风雨天窗跃，左耳贯注天籁音</span><br><span class="line">不闻春雷潜入夜，广厦飞瀑挂屋檐</span><br></pre></td></tr></table></figure><!-- 简单示例 (id, server, type)  --><h2 id="滑板"><a href="#滑板" class="headerlink" title="滑板"></a>滑板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">心如止水毽如飞，晨练漂移划湖心</span><br><span class="line">夜雨不及暑气盛，黑云压城君汗蒸</span><br></pre></td></tr></table></figure><div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=1468496&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div><div class="owl-media owl-video owl-bilibili"><embed src="http://static.hdslb.com/miniloader.swf" flashvars="aid=1468496&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" quality="high" allowfullscreen="true"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;雨夜&quot;&gt;&lt;a href=&quot;#雨夜&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="作文作曲" scheme="https://huos3203.github.io/categories/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>汉字拼音排序方法</title>
    <link href="https://huos3203.github.io/2018/05/17/iOS/%E6%B1%89%E5%AD%97%E6%8B%BC%E9%9F%B3%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/"/>
    <id>https://huos3203.github.io/2018/05/17/iOS/汉字拼音排序方法/</id>
    <published>2018-05-17T10:46:57.000Z</published>
    <updated>2018-05-17T10:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><!--github库卡片--><div id="badge-container-huos3203-sortChinese-2deab8b" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-sortChinese-2deab8b", "huos3203", "sortChinese", "2deab8b", false);</script><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>实现模型对象排序，当万条数据时，出现卡顿问题。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>实现字符串数组的排序，暂时没有验证大量排序情况，尝试优化第一种方法的排序卡顿问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;!--github库卡片--&gt;
&lt;div id=&quot;badge-container-huos3203-
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>水关长城天漠行</title>
    <link href="https://huos3203.github.io/2018/04/13/%E6%97%85%E8%A1%8C/%E6%B0%B4%E5%85%B3%E9%95%BF%E5%9F%8E%E5%A4%A9%E6%BC%A0%E8%A1%8C/"/>
    <id>https://huos3203.github.io/2018/04/13/旅行/水关长城天漠行/</id>
    <published>2018-04-13T11:52:28.000Z</published>
    <updated>2018-04-24T11:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="trello-card"><a href="https://trello.com/c/fHziBC4z/1-%E8%87%AA%E9%A9%BE%E6%B8%B8" target="_blank" rel="noopener">行程安排</a></blockquote><script src="https://p.trellocdn.com/embed.min.js"></script></p><div class="row">    <embed src="http://p27uwfdhv.bkt.clouddn.com/static/pdf/%E6%B0%B4%E5%85%B3%E9%95%BF%E5%9F%8E%E5%A4%A9%E6%BC%A0%E6%B8%B8.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;trello-card&quot;&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="旅行" scheme="https://huos3203.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Git工具交互式暂存</title>
    <link href="https://huos3203.github.io/2018/04/13/git/Git%E5%B7%A5%E5%85%B7%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98/"/>
    <id>https://huos3203.github.io/2018/04/13/git/Git工具交互式暂存/</id>
    <published>2018-04-12T19:41:46.000Z</published>
    <updated>2018-04-12T19:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="交互式暂存"><a href="#交互式暂存" class="headerlink" title="交互式暂存"></a>交互式暂存</h2><p>Git 自带的一些脚本可以使在命令行下工作更容易。 本节的几个互交命令可以帮助你将文件的特定部分组合成提交。 当你修改一组文件后，希望这些改动能放到若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 –interactive 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add -i</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:    unchanged        +0/-1 TODO</span><br><span class="line">2:    unchanged        +1/-1 index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br><span class="line"></span><br><span class="line">*** Commands ***</span><br><span class="line">1: status     2: update      3: revert     4: add untracked</span><br><span class="line">5: patch      6: diff        7: quit       8: help</span><br><span class="line">What now&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到这个命令以非常不同的视图显示了暂存区 - 基本上与 <code>git status</code> 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。</p><p>在这块区域后是命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、查看暂存内容的区别。</p><h2 id="暂存与取消暂存文件"><a href="#暂存与取消暂存文件" class="headerlink" title="暂存与取消暂存文件"></a>暂存与取消暂存文件</h2><p>如果在 What now&gt; 提示符后键入 2 或 u，脚本将会提示想要暂存哪个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What now&gt; 2</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:    unchanged        +0/-1 TODO</span><br><span class="line">2:    unchanged        +1/-1 index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br><span class="line">Update&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>要暂存 TODO 与 index.html 文件，可以输入数字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Update&gt;&gt; 1,2</span><br><span class="line">staged     unstaged path</span><br><span class="line">* 1:    unchanged        +0/-1 TODO</span><br><span class="line">* 2:    unchanged        +1/-1 index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br><span class="line">Update&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 Update&gt;&gt; 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Update&gt;&gt;</span><br><span class="line">updated 2 paths</span><br><span class="line"></span><br><span class="line">*** Commands ***</span><br><span class="line">1: status     2: update      3: revert     4: add untracked</span><br><span class="line">5: patch      6: diff        7: quit       8: help</span><br><span class="line">What now&gt; 1</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:        +0/-1      nothing TODO</span><br><span class="line">2:        +1/-1      nothing index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br></pre></td></tr></table></figure></p><p>现在可以看到 TODO 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 3 或 r（撤消）选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*** Commands ***</span><br><span class="line">1: status     2: update      3: revert     4: add untracked</span><br><span class="line">5: patch      6: diff        7: quit       8: help</span><br><span class="line">What now&gt; 3</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:        +0/-1      nothing TODO</span><br><span class="line">2:        +1/-1      nothing index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br><span class="line">Revert&gt;&gt; 1</span><br><span class="line">staged     unstaged path</span><br><span class="line">* 1:        +0/-1      nothing TODO</span><br><span class="line">2:        +1/-1      nothing index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br><span class="line">Revert&gt;&gt; [enter]</span><br><span class="line">reverted one path</span><br></pre></td></tr></table></figure></p><p>再次查看 Git 状态，可以看到已经取消暂存 TODO 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*** Commands ***</span><br><span class="line">1: status     2: update      3: revert     4: add untracked</span><br><span class="line">5: patch      6: diff        7: quit       8: help</span><br><span class="line">What now&gt; 1</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:    unchanged        +0/-1 TODO</span><br><span class="line">2:        +1/-1      nothing index.html</span><br><span class="line">3:    unchanged        +5/-1 lib/simplegit.rb</span><br></pre></td></tr></table></figure></p><p>如果想要查看已暂存内容的区别，可以使用 6 或 d（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff –cached 非常相似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*** Commands ***</span><br><span class="line">1: status     2: update      3: revert     4: add untracked</span><br><span class="line">5: patch      6: diff        7: quit       8: help</span><br><span class="line">What now&gt; 6</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:        +1/-1      nothing index.html</span><br><span class="line">Review diff&gt;&gt; 1</span><br><span class="line">diff --git a/index.html b/index.html</span><br><span class="line">index 4d07108..4335f49 100644</span><br><span class="line">--- a/index.html</span><br><span class="line">+++ b/index.html</span><br><span class="line">@@ -16,7 +16,7 @@ Date Finder</span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;out&quot;&gt;...&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">-&lt;div id=&quot;footer&quot;&gt;contact : support@github.com&lt;/div&gt;</span><br><span class="line">+&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。</p><h2 id="暂存补丁"><a href="#暂存补丁" class="headerlink" title="暂存补丁"></a>暂存补丁</h2><p>Git 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。 从交互式提示符中，输入 5 或 p（补丁）。 Git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span><br><span class="line">index dd5ecc4..57399e0 100644</span><br><span class="line">--- a/lib/simplegit.rb</span><br><span class="line">+++ b/lib/simplegit.rb</span><br><span class="line">@@ -22,7 +22,7 @@ class SimpleGit</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def log(treeish = &apos;master&apos;)</span><br><span class="line">-    command(&quot;git log -n 25 #&#123;treeish&#125;&quot;)</span><br><span class="line">+    command(&quot;git log -n 30 #&#123;treeish&#125;&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def blame(path)</span><br><span class="line">Stage this hunk [y,n,a,d,/,j,J,g,e,?]?</span><br></pre></td></tr></table></figure></p><p>这时有很多选项。 输入 ? 显示所有可以使用的命令列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?</span><br><span class="line">y - stage this hunk</span><br><span class="line">n - do not stage this hunk</span><br><span class="line">a - stage this and all the remaining hunks in the file</span><br><span class="line">d - do not stage this hunk nor any of the remaining hunks in the file</span><br><span class="line">g - select a hunk to go to</span><br><span class="line">/ - search for a hunk matching the given regex</span><br><span class="line">j - leave this hunk undecided, see next undecided hunk</span><br><span class="line">J - leave this hunk undecided, see next hunk</span><br><span class="line">k - leave this hunk undecided, see previous undecided hunk</span><br><span class="line">K - leave this hunk undecided, see previous hunk</span><br><span class="line">s - split the current hunk into smaller hunks</span><br><span class="line">e - manually edit the current hunk</span><br><span class="line">? - print help</span><br></pre></td></tr></table></figure></p><p>通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块，当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What now&gt; 1</span><br><span class="line">staged     unstaged path</span><br><span class="line">1:    unchanged        +0/-1 TODO</span><br><span class="line">2:        +1/-1      nothing index.html</span><br><span class="line">3:        +1/-1        +4/-0 lib/simplegit.rb</span><br></pre></td></tr></table></figure></p><p>simplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。</p><p>也可以不必在交互式添加模式中做部分文件暂存 - 可以在命令行中使用 git add -p 或 git add –patch 来启动同样的脚本。</p><p>更进一步地，可以使用 reset –patch 命令的补丁模式来部分重置文件，通过 checkout –patch 命令来部分检出文件与 stash save –patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;交互式暂存&quot;&gt;&lt;a href=&quot;#交互式暂存&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Otherlinkerflags设置ld命令执行的参数</title>
    <link href="https://huos3203.github.io/2018/04/12/xcode/Otherlinkerflags%E8%AE%BE%E7%BD%AEld%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <id>https://huos3203.github.io/2018/04/12/xcode/Otherlinkerflags设置ld命令执行的参数/</id>
    <published>2018-04-11T16:42:57.000Z</published>
    <updated>2018-04-11T19:16:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p>Other linker flags设置的值实际上就是ld命令执行时后面所加的参数。</p><p>3个常用参数：<br><code>-ObjC</code>：加了这个参数后，链接器就会把静态库中所有的Objective-C类和分类都加载到最后的可执行文件中<br><code>-all_load</code>：会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到<code>ld: duplicate symbol</code>错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到<code>-ObjC</code>失效的情况下使用<code>-force_load</code>参数。<br><code>-force_load</code>：所做的事情跟<code>-all_load</code>其实是一样的，但是<code>-force_load</code>需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载.</p><h3 id="加载FrameWork"><a href="#加载FrameWork" class="headerlink" title="加载FrameWork"></a>加载FrameWork</h3><h3 id="加载静态库"><a href="#加载静态库" class="headerlink" title="加载静态库"></a>加载静态库</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;Other linker flags设置的值实际上就是ld命令执行时后面所加的参数。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="xcode" scheme="https://huos3203.github.io/categories/xcode/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS插件化开发之Small</title>
    <link href="https://huos3203.github.io/2018/04/12/xcode/iOS%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E4%B9%8BSmall/"/>
    <id>https://huos3203.github.io/2018/04/12/xcode/iOS插件化开发之Small/</id>
    <published>2018-04-11T16:42:17.000Z</published>
    <updated>2018-04-11T19:16:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><div id="badge-container-huos3203-Small-04f08ae4a26" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-Small-04f08ae4a26", "huos3203", "Small", "04f08ae4a26", false);</script><p><a href="http://code.wequick.net/Small/cn/home" target="_blank" rel="noopener">官网</a></p><h2 id="iOS组件化基础"><a href="#iOS组件化基础" class="headerlink" title="iOS组件化基础"></a>iOS组件化基础</h2><p>iOS组件化基于<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56-SW1" target="_blank" rel="noopener">Cocoa Touch Framework</a>（以下简称CTF）通过<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/cl/NSBundle" target="_blank" rel="noopener">NSBundle</a>实现。</p><ul><li>CTF首次公开在WWDC2014，要求Xcode6 beta以上版本。</li><li>CTF官方表示支持8.0以上系统，但在6.0、7.0上测试正常。</li><li>如果你的App包含了CTF，但是<strong>Deployment Target</strong> &lt; 8.0，上传二进制文件到App Store时会报警中断。</li></ul><p>受苹果官方限制，如果你的CTF没有签名，将无法实现代码级别更新。</p><p>Framework 模式无法上传到App Store。只能应用到企业版</p><h2 id="使用文档"><a href="#使用文档" class="headerlink" title="使用文档"></a>使用文档</h2><ol><li><p>导入模板，重启Xcode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wequick/Small.git</span><br><span class="line"><span class="built_in">cd</span> Small/iOS</span><br><span class="line">cp -r Templates ~/Library/Developer/Xcode/Templates</span><br></pre></td></tr></table></figure></li><li><p>新建工程<br><code>File-&gt;New-&gt;Project...</code>，选择Small-pods模板<br><img src="https://camo.githubusercontent.com/25aac173476e3a5eecdf2853b0e233bf8179bece/687474703a2f2f636f64652e7765717569636b2e6e65742f6173736574732f696d616765732f736d616c6c2d696f732d74656d706c6174652e706e67" alt="Small iOS Template"></p></li><li><p>安装Pods</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [your-project-path]</span><br><span class="line">pod install --no-repo-update</span><br></pre></td></tr></table></figure></li><li><p>关闭工程并打开xcworkspace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open *.xcworkspace</span><br></pre></td></tr></table></figure></li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>使用者模式<a href="Sample">Sample</a></li></ul><blockquote><p>需要先编译Pods</p></blockquote><ul><li>开发者模式<a href="DevSample">DevSample</a></li></ul><blockquote><p>需要去除并行编译模式：<code>Edit Scheme...-&gt;Build-&gt;Build Options-&gt; [ ] Parallelize Build</code></p><p>各个组件需要签名后才支持代码级别更新。示例中更新例子为xib内容更新。<br><br>在没有设置签名之前，请在模拟器上跑示例。</p></blockquote><h2 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h2><ul><li>Sample支持CocoaPods</li><li>设置签名脚本（现在需要对每个组件Project手动设置签名）</li><li>热更新（现在需要重启生效）</li><li>Xcode Template for creating new <code>Small Bundle</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/wequick/small/wiki/iOS" target="_blank" rel="noopener">Wiki/iOS</a><br><a href="http://www.cocoachina.com/industry/20140613/8810.html" target="_blank" rel="noopener">WWDC2014之iOS使用动态库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;div id=&quot;badge-container-huos3203-Small-04f08ae4a26
      
    
    </summary>
    
      <category term="xcode" scheme="https://huos3203.github.io/categories/xcode/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;#标题#&gt;</title>
    <link href="https://huos3203.github.io/2018/04/10/%3C#%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5#%3E/"/>
    <id>https://huos3203.github.io/2018/04/10/&lt;#永久链接#&gt;/</id>
    <published>2018-04-10T05:41:49.000Z</published>
    <updated>2018-04-10T05:43:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="tag标签自增新建脚本"><a href="#tag标签自增新建脚本" class="headerlink" title="tag标签自增新建脚本"></a>tag标签自增新建脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">tag=$(git describe --tags `git rev-list --tags --max-count=1`)</span><br><span class="line">version=<span class="variable">$&#123;tag##*.&#125;</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"version+=1"</span></span><br><span class="line">newTag=<span class="variable">$&#123;tag%.*&#125;</span>.<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Create New Tag '</span><span class="variable">$newTag</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;tag标签自增新建脚本&quot;&gt;&lt;a href=&quot;#tag标签自增新建脚本&quot; class=&quot;
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="&lt;#工具#&gt;" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="&lt;#管理#&gt;" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>当项目过大需要通过SSH方式Clone</title>
    <link href="https://huos3203.github.io/2018/04/05/git/%E5%BD%93%E9%A1%B9%E7%9B%AE%E8%BF%87%E5%A4%A7%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87SSH%E6%96%B9%E5%BC%8FClone/"/>
    <id>https://huos3203.github.io/2018/04/05/git/当项目过大需要通过SSH方式Clone/</id>
    <published>2018-04-04T17:44:24.000Z</published>
    <updated>2018-04-04T17:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h3 id="设置全局提交信息"><a href="#设置全局提交信息" class="headerlink" title="设置全局提交信息"></a>设置全局提交信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><h3 id="修改最后一次提交的用户名信息"><a href="#修改最后一次提交的用户名信息" class="headerlink" title="修改最后一次提交的用户名信息"></a>修改最后一次提交的用户名信息</h3><p>``git<br>  git config user.name ‘wangz’<br>  git config user.email ‘wangz@alib.com’<br>  git commit  –amend –author=wangz<br>```</p><h3 id="项目过大问题"><a href="#项目过大问题" class="headerlink" title="项目过大问题"></a>项目过大问题</h3><blockquote><p>git clone 主工程出现 fatal: The remote end hung up unexpectedly3)</p></blockquote><p>通常的解决办法：</p><ol><li><p>设置提交缓存的大小为 1G：1048576000<br> git config http.postBuffer 1048576000</p></li><li><p>否则，需要配置github/gitlab的公钥<br> 生成：<code>ssh-keygen -t rsa -C &quot;$your_email&quot;</code><br> 拷贝：<code>pbcopy &lt; ~/.ssh/id_rsa.pub</code><br> 创建SSHKey：<br> 在github/gitlab新建公钥<code>add SSH Key</code>：粘贴到密钥文本框中即可。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;设置全局提交信息&quot;&gt;&lt;a href=&quot;#设置全局提交信息&quot; class=&quot;header
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>A++审核问题总结</title>
    <link href="https://huos3203.github.io/2018/04/03/%E6%B5%8B%E8%AF%95/A++%E5%AE%A1%E6%A0%B8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://huos3203.github.io/2018/04/03/测试/A++审核问题总结/</id>
    <published>2018-04-03T15:29:08.000Z</published>
    <updated>2018-04-03T15:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p><a href="https://developer.apple.com/cn/app-store/review/guidelines/" target="_blank" rel="noopener">苹果审核规则</a><br>答审核人员回访时提到的几个问题：</p><ol><li>处理非法内容的预防措施<br>答：我们平台会采取24小时内删除非法内容并将违规用户拉黑销号处理，通过后台运作实现有效的防范措施。</li><li>app完整及数据内容规范化<br>答：我们对含有测试文本及敏感文字的数据进行清理，保证了功能完善内容规范。</li><li>经营模式<br>举例说明：A有事想，通过发布任务给B，询问B是否有朋友可以帮忙，如果有并且愿意介绍，A愿意以红包的方式进行打赏B，这个红包是象征意义的红包，目前不会在APP内进行支付，会在线下支付，也可不支付。主要通过寻找朋友的人脉寻求帮助的场景建立起一个社交的应用场景。</li><li>通讯录权限描述不清晰<br>答：我们重新校正了权限描述，让用户更清晰准确的理解APP使用通讯录的目的。</li></ol><p>希望早日通过审核，Thanks。</p><h2 id="规则1-2-Safety-User-Generated-Content"><a href="#规则1-2-Safety-User-Generated-Content" class="headerlink" title="规则1. 2 Safety: User Generated Content"></a>规则1. 2 Safety: User Generated Content</h2><pre><code>添加举报功能</code></pre><h2 id="规则5-1-2通讯录权限"><a href="#规则5-1-2通讯录权限" class="headerlink" title="规则5.1.2通讯录权限"></a>规则5.1.2通讯录权限</h2><p>微信通讯录权限描述:</p><h4 id="登录之后弹出两个提示"><a href="#登录之后弹出两个提示" class="headerlink" title="登录之后弹出两个提示:"></a>登录之后弹出两个提示:</h4><ol><li>说明APP使用目的<br>微信将上传手机通讯录至微信服务器以匹配及推荐朋友.\n(上传通讯录仅用于匹配,不会保存资料,亦不会用作他用)</li><li>说明APP请求使用权限<br>如果不允许,微信将无法推荐通讯录中的朋友给你.微信仅使用特征码用于匹配识别,不会保存你的通讯录内容.</li></ol><p>规避封帐号的风险：</p><ol><li>总结常被拒的问题，每次发布时做好自查。</li><li>把被拒概率大的单独申请账号审核。</li></ol><h2 id="被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）"><a href="#被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）" class="headerlink" title="被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）"></a>被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）</h2><p>✕ 刷榜<br>众所周知，刷榜绝对是开发者被苹果惩罚的最主要原因。<br>✕ 诱导性运营活动<br>引导用户评论以及消费都属于诱导性运营活动。<br>✕ 被刷榜<br>这边要说下这点。所谓“被刷榜”是指，被竞争对手恶意刷好评通过苹果机制强制下架。竞争对手采用这种方式陷害竞品，而目前苹果很难界定刷榜行为的主动和被动，所以这块开发者也要注意了。<br>✕ 违规做热搜排名<br>热搜排名在ASO优化中占据重要位置，但其实热搜带来的下载量并不多，并且这种行为很容易被苹果检测到，而一些开发者仍然乐意在这块冒险。<br>✕ 加入非官方支付代码<br>有些开发商为了方便玩家支付，擅自绕开苹果的支付体系，加入支付宝代码等，这种行为被苹果发现后绝对是会直接封号，毫不留情。<br>✕ 涉政、违法<br>这点大家应该都很清楚，如果应用的功能涉及侵犯他人的隐私滥用隐私权限或者存在与宗教、法律相悖的内容，也会遭到下架。</p><h2 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h2><p>✓ 1.一旦你的产品被惩罚，第一时间，邮件，电话等等方式找苹果，表示自己毫不知情，是受害者，希望能够恢复。态度一定要诚恳，据说这招很灵，不妨一试。<br>✓ 2.发动用户找苹果投诉，表示自己在App Store找不到喜欢的产品了，影响了用户体验。不过这招一定不能用力过猛，否则可能再给你的应用帮倒忙。<br>✓ 3.没办法中的办法，就是重新申请一个开发者账号，重新申请一个新的应用，换一张皮，重新上架。<br>原文：<a href="http://m.ifeng.com/news/x1PWh003/shareNews?aid=108804258&amp;fresh=1&amp;autoFresh=1" target="_blank" rel="noopener">被苹果惩罚了之后怎么办？如何去规避风险呢</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/cn/app-stor
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>隐藏导航条底部黑线</title>
    <link href="https://huos3203.github.io/2018/03/12/iOS/%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%9D%A1%E5%BA%95%E9%83%A8%E9%BB%91%E7%BA%BF/"/>
    <id>https://huos3203.github.io/2018/03/12/iOS/隐藏导航条底部黑线/</id>
    <published>2018-03-12T13:51:07.000Z</published>
    <updated>2018-03-13T18:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p>当需要导航条为透明色，与背景色一体时，需要去除底边线：<br>如下代码：使用空图片设置背景图，并指定bar的样式。</p><pre><code class="swift"><span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="type">UIImage</span> new] forBarMetrics:<span class="type">UIBarMetricsDefault</span>];<span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="type">UIBarStyleBlackTranslucent</span>;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;当需要导航条为透明色，与背景色一体时，需要去除底边线：&lt;br&gt;如下代码：使用空图片设置背景图，并
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>千百度</title>
    <link href="https://huos3203.github.io/2018/01/06/podcast/%E5%8D%83%E7%99%BE%E5%BA%A6/"/>
    <id>https://huos3203.github.io/2018/01/06/podcast/千百度/</id>
    <published>2018-01-05T21:37:53.000Z</published>
    <updated>2018-01-08T15:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><p>这里就是简介的描写，千百度，很好听的歌曲<br><a id="more"></a><br><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;width:70%;"></div><script>var ap = new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: true,showlrc: 0,music: {title: "千百度",author: "许嵩",url: "/images/qbd.mp3",pic: "/images/BoldText.png",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script></p><h2 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h2><div id="aplayer1" class="aplayer" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">'[ti:千百度][ar:梅朵][00:02.41] 千百度[00:04.08] 演唱：梅朵[00:05.11] 作词：李红雨[00:06.14] 作曲：刘牧[00:22.55] 春色已满园[00:26.53] 细雨缠绵桃花红[00:30.61] 花蝶飞舞[00:34.58] 伴着伊人轻入梦[00:38.68] 秋风凛凛[00:42.69] 冷雨纷飞枫叶红[00:46.84] 鸿雁南飞[00:50.86] 遥望伊人轻轻回[00:55.00] 悄悄的来又轻轻的去[00:59.12] 没留下一点你的消息[01:03.17] 久久的等待苦苦的追寻[01:07.09] 亲爱的人你在哪里[01:13.34] 梦中寻你千百度[01:17.27] 会不会痴心的错付[01:21.31] 日思夜想想憔悴[01:25.37] 曾想一生将你托付[01:49.94] 春色已满园[01:53.99] 细雨缠绵桃花红[01:58.07] 花蝶飞舞[02:02.07] 伴着伊人轻入梦[02:06.23] 秋风凛凛[02:10.18] 冷雨纷飞枫叶红[02:14.24] 鸿雁南飞[02:18.34] 遥望伊人轻轻回[02:22.37] 悄悄的来又轻轻的去[02:26.48] 没留下一点你的消息[02:30.59] 久久的等待苦苦的追寻[02:34.60] 亲爱的人你在哪里[02:40.75] 梦中寻你千百度[02:44.75] 会不会痴心的错付[02:48.89] 日思夜想想憔悴[02:52.95] 曾想一生将你托付[02:59.05] 悄悄的来又轻轻的去[03:03.09] 没留下一点你的消息[03:07.23] 久久的等待苦苦的追寻[03:11.24] 亲爱的人你在哪里[03:17.43] 梦中寻你千百度[03:21.51] 会不会痴心的错付[03:25.44] 日思夜想想憔悴[03:29.42] 曾想一生将你托付[03:35.66] 曾想一生将你托付</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer1"),narrow: false,autoplay: 0,showlrc: 2,music: {title: "千百度",author: "许嵩",url: "/images/qbd.mp3",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p>第一个播客测试了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里就是简介的描写，千百度，很好听的歌曲&lt;br&gt;
    
    </summary>
    
      <category term="podcast" scheme="https://huos3203.github.io/categories/podcast/"/>
    
    
      <category term="test" scheme="https://huos3203.github.io/tags/test/"/>
    
      <category term="audio" scheme="https://huos3203.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C的运行时以及swift的动态性</title>
    <link href="https://huos3203.github.io/2017/09/26/swift/Objective-C%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E4%BB%A5%E5%8F%8Aswift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/"/>
    <id>https://huos3203.github.io/2017/09/26/swift/Objective-C的运行时以及swift的动态性/</id>
    <published>2017-09-25T20:01:36.000Z</published>
    <updated>2017-10-02T22:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h2 id="Objective-C-运行时"><a href="#Objective-C-运行时" class="headerlink" title="Objective-C 运行时"></a>Objective-C 运行时</h2><p>Objective-C 是一门基于运行时的编程语言，这意味着所有方法、变量、类之间的链接，都会推迟到应用实际运行的最后一刻才会建立。这将给开发人员极高的灵活性，因为我们可以修改这些链接。而不同的是，Swift 绝大多数时候是一门面向编译时的语言。因此在 Swift 当中，灵活性受到了限制，不过您会因此得到更多的安全性。</p><h3 id="runtime-h开源库"><a href="#runtime-h开源库" class="headerlink" title="runtime.h开源库"></a>runtime.h开源库</h3><p>Objective-C 的运行时本质上是一个库。它负责了 “Objective” 这个部分，因此您所知、所爱的面向对象编程，都是在这里实现的。如果您想要访问里面的函数的话，只需要导入这个库即可：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><code>runtime.h</code>开源库主要由 C 和汇编编写而成，其实现了诸如类、对象、方法调度、协议等面向对象编程这个部分。</p><h4 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h4><h5 id="对象结构体"><a href="#对象结构体" class="headerlink" title="对象结构体"></a>对象结构体</h5><p>那么什么是对象呢？对象在 runtime.h 当中是这样定义的：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> objc_object &#123;</span><br><span class="line">    Class isa;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>isa</strong>:建立<code>对象</code>只与一个类引用关联，也就是这个 isa 的意思所在。这也就是 Objective-C 当中的所有对象都需要实现的。</p><h5 id="类结构体"><a href="#类结构体" class="headerlink" title="类结构体"></a>类结构体</h5><p>那么类又是什么呢？类的定义要稍微复杂一些。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class isa;</span><br><span class="line">    Class super_class;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">long</span> version;</span><br><span class="line">    <span class="keyword">long</span> info;</span><br><span class="line">    <span class="keyword">long</span> instance_size;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list **methodLists;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache *cache;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>属性说明：<br><strong>isa</strong>属性：建立自身与 <code>super_class</code> 这个值进行关联。<br><strong>super_class</strong>:除了 NSObject 这个类之外，super_class 的值永远不会为 nil，因为 Objective-C 当中的其余类都是以某种方式继承自 NSObject 的。<br><strong>ivars</strong>：变量列表<br><strong>methodLists</strong>：方法列表<br><strong>protocols</strong>：协议列表<br>其他属性：<code>name</code>、<code>version</code>、<code>info</code> 之类的值，不过这些并不是我们感兴趣的内容。<br>这些就是我们能在运行时修改和读取的。可以看到，对象其实本质上是一个非常简单的结构体，类同样也是。</p><h3 id="allocateClassPair函数创建类"><a href="#allocateClassPair函数创建类" class="headerlink" title="allocateClassPair函数创建类"></a>allocateClassPair函数创建类</h3><p>我们可以借助运行时函数，从而在运行时动态创建类。</p><ol><li>要用的 Objective-C 运行时函数：<code>allocateClassPair</code>。提供三个参数即可：<br><strong>isa</strong>：关联引用，这里提供了NSObject<br>类名：<br>额外字节的定义：通常我们都直接赋值 0 即可</li><li>添加变量、方法以及协议</li><li><code>registerClassPair</code>注册这个 ClassPair,注册之后，我们就无法修改变量列表了，不过其余的内容仍然可以修改。</li><li>初始化类结束~我们所创建的这个类和其余的 Objective-C 类毫无区别。<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类函数的构造器</span></span><br><span class="line">Class myClass = objc_allocateClassPair([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="string">"MyClass"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里添加变量、方法和协议</span></span><br><span class="line"></span><br><span class="line">objc_registerClassPair(myClass);</span><br><span class="line"><span class="comment">// 当类注册之后，变量列表将会被锁定</span></span><br><span class="line"></span><br><span class="line">[[myClass alloc] init];</span><br></pre></td></tr></table></figure></li></ol><p>我们为什么要这么做呢？因为这个函数被大量运用在库提供者制作的框架当中。如果您无法知道用户将会创建什么样的数据，那么您就需要在运行时进行类的创建了。Core Data 就使用了这个功能。此外，如果您愿意的话，它还可以用在 JSON 解析当中。</p><h3 id="在类别中添加存储属性"><a href="#在类别中添加存储属性" class="headerlink" title="在类别中添加存储属性"></a>在类别中添加存储属性</h3><p>如果您想要扩展一个不是自己创建的类，想要向其中添加函数，有一个便捷的方法便是使用 Objective-C 的类别 (Category) 特性。Swift 的扩展与之非常相似。类别的一个问题便在于，它无法添加存储属性。您可以添加一个计算属性，但是存储属性是无法添加的。</p><p>运行时的另一个特性便是：我们可以借助 <code>setAssociatedObject</code> 和 <code>getAssociatedObject</code> 这两个函数，向既有的类当中添加存储属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@implementation NSObject (AssociatedObject)</span><br><span class="line">@dynamic associatedObject;</span><br><span class="line"></span><br><span class="line">- (void)setAssociatedObject:(id)object &#123;</span><br><span class="line">    objc_setAssociatedObject(self, @selector(associatedObject), object,</span><br><span class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)associatedObject &#123;</span><br><span class="line">    return objc_getAssociatedObject(self, @selector(associatedObject));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于不是自己创建的类而言，使用这个方法进行扩展无疑是非常好用的。</p><h3 id="内省机制"><a href="#内省机制" class="headerlink" title="内省机制"></a>内省机制</h3><p>「内省 (introspection)」机制是用来判别这个类能执行何种操作。通常，我们所使用的往往是最基础的内省功能。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类成员判断</span></span><br><span class="line">[myObject isMemberOfClass:<span class="built_in">NSObject</span>.class];</span><br><span class="line"><span class="comment">//类方法判断</span></span><br><span class="line">[myObject respondsToSelector:<span class="keyword">@selector</span>(doStuff:)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// isa == class</span></span><br><span class="line">class_respondsToSelector(myObject.class, <span class="keyword">@selector</span>(doStuff:));</span><br></pre></td></tr></table></figure></p><p><code>isMemberOfClass</code>:是 Foundation 当中的一部分，这里我们查看 myObject 是否是 NSObject 的子类。<br><code>respondsToSelector:</code>:当我们使用了一个带有可选方法的协议时，为了避免崩溃发生，可以借助这个函数来判断这个对象是否可以调用此可选方法。<br><strong>在运行时层面</strong><br><code>isMemberOfClass</code>: 对比两者的 <strong>isa</strong> 是否相同。<br><code>respondsToSelector</code>:则封装了一个 Objective-C 运行时函数：<code>respondsToSelector</code>，其接受 <code>Selector</code> 和<code>类</code>为参数。</p><h3 id="单元测试：方法列表"><a href="#单元测试：方法列表" class="headerlink" title="单元测试：方法列表"></a>单元测试：方法列表</h3><p>如果您写过单元测试的话，您就会知道当我们在编写 XCTestCase 的时候，需要完成 setUp 和 tearDown 的设定，随后才能编写相关的 test 函数。当测试运行的时候，系统会自行遍历所有的测试函数，并自动运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unsigned int count;</span><br><span class="line">Method *methods = class_copyMethodList(myObject.class,&amp;count);</span><br><span class="line">//Ivar *list = class_copyIvarList(myObject.class,&amp;count);</span><br><span class="line"></span><br><span class="line">for(unsigned i = 0; i &lt; count; i++) &#123;</span><br><span class="line">    SEL selector = method_getName(methods[i]);</span><br><span class="line">    NSString *selectorString = NSStringFromSelector(selector);</span><br><span class="line">    if ([selectorString containsString:@&quot;test&quot;]) &#123;</span><br><span class="line">        [myObject performSelector:selector];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">free(methods);</span><br></pre></td></tr></table></figure></p><p>这个功能是借助 Objective-C 的运行时机制实现的,即：借助运行时函数获取可以复制方法列表，还可以复制变量列表。可以获取方法名，然后将其转换为字符串，检查其是否包含有 “test”，如果有便可以运行。现在我们便搭建好了 XCTest 的最简单版本！</p><h3 id="方法-变量的结构体成员"><a href="#方法-变量的结构体成员" class="headerlink" title="方法/变量的结构体成员"></a>方法/变量的结构体成员</h3><ol><li><p>变量结构体：包含了变量类型和变量名称。偏移量 (offset) 则是内存管理方面的内容。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_ivar &#123;</span><br><span class="line">    <span class="keyword">char</span> *ivar_name;</span><br><span class="line">    <span class="keyword">char</span> *ivar_type;</span><br><span class="line">    <span class="keyword">int</span> ivar_offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法结构体：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_method &#123;</span><br><span class="line">    SEL method_name;</span><br><span class="line">    <span class="keyword">char</span> *method_types;</span><br><span class="line">    IMP method_imp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>SEL</strong>： 使用Selector 来表示的Objective-C方法的名称，对应在 performSelector 当中所匹配的内容。<br><strong>方法类型</strong>：使用编码字符串来表示其类型。<br><strong>IMP</strong>：是方法实现的一种特定的表示方式。</p><h4 id="给对象添加方法"><a href="#给对象添加方法" class="headerlink" title="给对象添加方法"></a>给对象添加方法</h4><p>了解方法结构体后，可知我们同样可以在运行时向对象当中添加方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">Method doStuff = class_getInstanceMethod(<span class="keyword">self</span>.class, <span class="keyword">@selector</span>(doStuff));</span><br><span class="line"><span class="comment">//获取方法的实现</span></span><br><span class="line">IMP doStuffImplementation = method_getImplementation(doStuff);</span><br><span class="line"><span class="comment">//获取方法的类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(doStuff); <span class="comment">//“v@:@"</span></span><br><span class="line"></span><br><span class="line">class_addMethod(myClass.class, <span class="keyword">@selector</span>(doStuff:), doStuffImplementation, types);</span><br></pre></td></tr></table></figure></p><p><code>class_addMethod</code>: 向对象当中添加方法的运行时函数。它所需的参数，即上述方法结构体当中的那三个值：Selector、方法实现和方法类型。</p><h4 id="调用新加的方法"><a href="#调用新加的方法" class="headerlink" title="调用新加的方法"></a>调用新加的方法</h4><p>当然，我们添加了方法目的就是要使用它们。我们可以使用 <code>[self doStuff]</code> 或者<code>[self performSelector:@selector(doStuff)]</code>来进行调用，实际上在运行时级别，它们都是借助 <code>objc_msgSend</code> 向对象发送了一个消息。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line">[<span class="keyword">self</span> doStuff];</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(doStuff)];</span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line">objc_msgSend(<span class="keyword">self</span>, <span class="keyword">@selector</span>(message));</span><br></pre></td></tr></table></figure></p><p>但是如果调用方法所在的对象为 nil 的时候，我们就会得到一个异常，应用便会崩溃。但事实证明，在崩溃之前会预留几个步骤，从而允许我们对某个不存在的函数进行一些操作。</p><h3 id="方法转发"><a href="#方法转发" class="headerlink" title="方法转发"></a>方法转发</h3><p>当我们试图桥接两个不同的框架的时候，可以将方法转发 (forward) 给其余目标。这个功能便非常有用。当我们调用某个未实现的方法时，这便是会发生的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 1</span><br><span class="line">+(BOOL)resolveInstanceMethod:(SEL)sel&#123;</span><br><span class="line">    // 添加实例方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class="line">&#125;</span><br><span class="line">+(BOOL)resolveClassMethod:(SEL)sel&#123;</span><br><span class="line">    // 添加类方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector&#123;</span><br><span class="line">    // 返回可以处理 Selector 的对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</span><br><span class="line">    // 您需要实现它来创建 NSInvocation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)invocation &#123;</span><br><span class="line">    // 在您所选择的目标上调用 Selector</span><br><span class="line">    [invocation invokeWithTarget:target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当您调用了某个不存在的方法时，运行时有如下处理步骤：</p><ol><li>首先调用两个类方法：一个名为 <code>resolveInstanceMethod</code>类方法，如果所调用的方法是类方法，则调用为调用 <code>resolveClassMethod</code>类方法。这时候我们便有机会来添加方法了，步骤的话我们之前就已经展示过了。如果我们返回了 YES，就意味着原始方法将会再次被调用。</li><li><code>forwardingTargetForSelector</code>：当不要添加新方法时，可以直接返回需要调用方法的目标对象即可，之后这个对象就会调用 Selector。</li><li><code>forwardInvocation</code>方法：实现在您所选择的目标对象上调用 Selector，所有的调用过程都被封装到 <code>NSInvocation</code> 对象当中。如果您需要这么做，那么还需要实现 <code>methodSignatureForSelector</code>。<br>完成以上步骤，便可以可以将方法转发给其他对象。<h3 id="方法混淆：替换或交换"><a href="#方法混淆：替换或交换" class="headerlink" title="方法混淆：替换或交换"></a>方法混淆：替换或交换</h3>您可以使用运行时当中最著名的动态特性：方法混淆 (swizzling),即使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。之所以想要混淆，是因为它可以用于日志记录和 Mock 测试。<br>混淆的基本方法如下所示：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line"></span><br><span class="line">        SEL originalSelector = <span class="keyword">@selector</span>(doSomething);</span><br><span class="line">        SEL swizzledSelector = <span class="keyword">@selector</span>(mo_doSomething);</span><br><span class="line"></span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>,</span><br><span class="line">        originalSelector);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>,</span><br><span class="line">        swizzledSelector);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>, originalSelector,</span><br><span class="line">                                method_getImplementation(swizzledMethod),</span><br><span class="line">                                method_getTypeEncoding(swizzledMethod));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">            class_replaceMethod(<span class="keyword">class</span>,swizzledSelector,</span><br><span class="line">                                method_getImplementation(originalMethod),</span><br><span class="line">                                method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>当类加载之后，会调用一个名为 <code>load</code> 的类函数。由于我们只打算混淆一次，因此我们需要使用 <code>dispatch_once</code>。接着我们便可以得到该方法，然后使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。</p><h2 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h2><p>Foundation 框架实现了基于运行时一个特性的两个API：</p><ol><li><code>键值编码 (key-value-coding, KVC)</code></li><li><code>键值观察 (key-value observing, KVO)</code><br>KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基础。<h3 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h3>KVC 的工作方式如下所示：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *number;</span><br><span class="line"></span><br><span class="line">[myClass valueForKey:<span class="string">@"number"</span>];</span><br><span class="line">[myClass setValue:@(<span class="number">4</span>) forKey:<span class="string">@"number"</span>];</span><br></pre></td></tr></table></figure></li></ol><p>例如，假设我们有这个 number 属性，您可以将属性名称作为键，来获取属性值或者设置属性值。这个功能可以用在此前我们所看到的获取变量列表、协议列表，以及危险的混淆功能当中。</p><h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><p>通常所说的 Objective-C 「动态性」，往往都是指 KVO。虽然还有其余的函数，但是这些是最常见、最常用的。这也就是人们所说的，Swift 缺失的部分。</p><ol><li>使用KVO对状态的变化进行注册<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[myClass addObserver:<span class="keyword">self</span></span><br><span class="line">forKeyPath:<span class="string">@"number"</span></span><br><span class="line">options:<span class="built_in">NSKeyValueObservingOptionInitial</span> | <span class="built_in">NSKeyValueObservingOptionNew</span></span><br><span class="line">context:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">ofObject:(<span class="keyword">id</span>)object</span><br><span class="line">change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change</span><br><span class="line">context:(<span class="keyword">void</span> *)context&#123;</span><br><span class="line">    <span class="comment">// Respond to observation.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在观察的值发生变更之后，KVO 会调用此方法立即通知观察者。通过这个方法，我们便可以按需更新 UI。</p><ol><li>弊端：难以调试<br>KVO这些操作都存有隐患。比方说 KVO，特别是当我们对某个不是自己所创建的类进行观察时，往往会发现有出乎意料的变化发生。通常而言，这些问题是非常难以调试的，也很难去理解为什么出错。在实际产品当中，我并不建议使用它们，尽管它们非常好用。但是在实际产品当中，我会很谨慎地去使用这些功能。</li></ol><p>Apple 也是如此认为的，因此它们在视图控制器当中添加了这个私有方法，可以使用 class-dump 来查看。</p><ul><li>(void)                   attentionClassDumpUser:<br>yesItsUsAgain:<br>althoughSwizzlingAndOverridingPrivateMethodsIsFun:<br>itWasntMuchFunWhenYourAppStoppedWorking:<br>pleaseRefrainFromDoingSoInTheFutureOkayThanksBye:</li></ul><p>的确，很让人抓狂。</p><h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><p>Swift 是一种强类型语言。即默认类型是安全的静态类型。如果需要的话，不安全类型也是存在的，但是 Swift 仍然是尽力推动我们使用安全的静态类型。Swift 中的动态性可以通过 Objective-C 运行时来获得。</p><p>本来这是很好的，但是 Swift 开源并迁移到 Linux 之后，由于 Linux 上的 Swift 并不提供 Objective-C 运行时，事情就大条了。社区的关键点在于，让 Swift 未来能够自己配备动态性，而不是依赖于 Apple。</p><h3 id="Swift中的两个动态修饰符"><a href="#Swift中的两个动态修饰符" class="headerlink" title="Swift中的两个动态修饰符"></a>Swift中的两个动态修饰符</h3><ol><li><code>@objc</code>: 将Swift API 暴露给 Objective-C 运行时，但是它仍然不能保证编译器会尝试对其进行优化。</li><li><code>@dynamic</code>:动态功能修饰符，它隐含添加了 <code>@objc</code>功能。</li></ol><h3 id="Swift中运行时方法"><a href="#Swift中运行时方法" class="headerlink" title="Swift中运行时方法"></a>Swift中运行时方法</h3><p>回到我们的动态特性当中，让我们来看一看 Swift 当中这些动态特性是什么样的。假设我们需要使用内省机制、转发方法、替换和绑定方法。</p><h4 id="方法转发-1"><a href="#方法转发-1" class="headerlink" title="方法转发"></a>方法转发</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">override <span class="keyword">class</span> func resolveInstanceMethod(_ sel: Selector!)</span><br><span class="line">-&gt; Bool &#123;</span><br><span class="line"><span class="comment">// 添加实例方法并返回 true 的一次机会，它随后会再次尝试发送消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">override func forwardingTarget(<span class="keyword">for</span> aSelector: Selector!) -&gt;</span><br><span class="line">Any? &#123;</span><br><span class="line"><span class="comment">// 返回可以处理 Selector 的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 - Swift 不支持 NSInvocation</span></span><br></pre></td></tr></table></figure><p>resolveInstanceMethod 同样会被调用，forwardingTarget 看起来似乎更贴近于 Swift 3 风格的 API。但是 NSInvocation 并不能在 Swift 当中使用。我们同样可以实现方法转发，因此看起来也不算太坏。</p><h4 id="方法混淆"><a href="#方法混淆" class="headerlink" title="方法混淆"></a>方法混淆</h4><p><code>load</code> 在 Swift 不再会被调用，因此我们需要在 <code>initialize</code> 中进行混淆。在 Objective-C 当中使用的 <code>dispatch_once</code>，但是在 Swift 3 中被废弃。事情变得略为复杂。虽然对于特定类型的函数而言，我们仍然可以将其定义为动态函数，但是它会消除大部分混淆的功能。</p><h4 id="内省机制-1"><a href="#内省机制-1" class="headerlink" title="内省机制"></a>内省机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if self is MyClass &#123;</span><br><span class="line">    // YAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myString = &quot;myString&quot;;</span><br><span class="line">let mirror = Mirror(reflecting: myString)</span><br><span class="line">print(mirror.subjectType) // “String&quot;</span><br><span class="line">let string = String(reflecting: type(of:</span><br><span class="line">myString)) // Swift.String</span><br><span class="line"></span><br><span class="line">// No native method introspection</span><br></pre></td></tr></table></figure><p><code>is</code> 替代了 <code>isMemberOfClass</code>，它同样也可以对 Swift 值类型:结构体、枚举以及其他 Swift 当中的新类型使用。此外还有一个新的映射 API，它主要针对于管道 (pipe) 和数据。</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>目前，我们没有原生的办法来实现内省。这也预示着这个功能未来可能会出现，但是目前我们还无法实现。这很令人沮丧，特别是当您想到我们此前所实现的 XCTestCase。如果您打算为 Linux 编写单元测试的时候，就无法自动遍历所有的函数。您必须实现 static var allTests，然后手动列出所有的测试函数。这很糟糕。</p><h4 id="KVC-KVO功能的削弱"><a href="#KVC-KVO功能的削弱" class="headerlink" title="KVC/KVO功能的削弱"></a>KVC/KVO功能的削弱</h4><p>KVO 的魅力在于，您可以在不是自己所创建的类当中使用它，也可以只对您想要监听变化的类使用。KVO 和 KVC 在 Swift 被极大地削弱了。<br>两点要求：</p><ol><li>被观察的对象必须要继承自 NSObject，并且使用一个 Objective-C 类型。</li><li>被观察的变量必须要声明为 @dynamic。您必须要对想要观察的事务了如指掌。<br>问题是 Swift 并没有很好的替代方案。您可以使用 Rx 或者基于协议来观察对象。但是语言自身是没有原生的解决方案的。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，Objective-C 的动态性无疑是非常强大的、极其有用，虽然也存在危险性。Swift 目前没有足够的替代方案来解决这些问题，但是可以预见在不久的将来 Swift 的动态性将会出现，这是值得我们期待的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;Objective-C-运行时&quot;&gt;&lt;a href=&quot;#Objective-C-运行时&quot;
      
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/categories/swift/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>MVVM介绍</title>
    <link href="https://huos3203.github.io/2017/09/25/iOS/MVVM%E4%BB%8B%E7%BB%8D/"/>
    <id>https://huos3203.github.io/2017/09/25/iOS/MVVM介绍/</id>
    <published>2017-09-24T19:26:28.000Z</published>
    <updated>2017-10-02T22:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><script src="/assets/js/APlayer.min.js"> </script><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>所以，MVVM 到底是什么？与其专注于说明 MVVM 的来历，不如让我们看一个典型的 iOS 是如何构建的，并从那里了解 MVVM：</p><p><img src="https://www.objccn.io/images/issues/issue-13/mvvm1.png" alt="Typical Model-View-Controller setup"></p><p>我们看到的是一个典型的 MVC 设置。Model 呈现数据，View 呈现用户界面，而 View Controller 调节它两者之间的交互。</p><p>稍微考虑一下，虽然 View 和 View Controller 是技术上不同的组件，但它们几乎总是手牵手在一起，成对的。你什么时候看到一个 View 能够与不同 View Controller 配对？或者反过来？所以，为什么不正规化它们的连接呢？</p><p><img src="https://www.objccn.io/images/issues/issue-13/intermediate.png" alt="Intermediate"></p><p>这更准确地描述了你可能已经编写的 MVC 代码。但它并没有做太多事情来解决 iOS 应用中日益增长的重量级视图控制器的问题。</p><p>在典型的 MVC 应用里，<em>许多</em>逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（presentation logic）”，以 MVVM 属术语来说，就是那些将 Model 数据转换为 View 可以呈现的东西的事情，例如将一个 <code>NSDate</code> 转换为一个格式化过的 <code>NSString</code>。<br>我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View/Controller 与 Model 之间：</p><p><img src="https://www.objccn.io/images/issues/issue-13/mvvm.png" alt="Model-View-ViewModel"></p><p>看起好多了！这个图解准确地描述了什么是 MVVM：一个 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。MVVM 听起来很复杂，但它本质上就是一个精心优化的 MVC 架构，而 MVC 你早已熟悉。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>现在我们知道了<em>什么</em>是 MVVM，但<em>为什么</em>我们会想要去使用它呢？在 iOS 上使用 MVVM 的动机，对我来说，无论如何，就是它能减少 View Controller 的复杂性并使得表示逻辑更易于测试。通过一些例子，我们将看到它如何达到这些目标。</p><p>此处有三个重点是我希望你看完本文能带走的：</p><ul><li>MVVM 可以兼容你当下使用的 MVC 架构。</li><li>MVVM 增加你的应用的可测试性。</li><li>MVVM 配合一个绑定机制效果最好。</li></ul><p>如我们之前所见，MVVM 基本上就是 MVC 的改进版，所以很容易就能看到它如何被整合到现有使用典型 MVC 架构的应用中。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>让我们看一个简单的 <code>Person</code> Model 以及相应的 View Controller：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initwithSalutation:(<span class="built_in">NSString</span> *)salutation firstName:(<span class="built_in">NSString</span> *)firstName lastName:(<span class="built_in">NSString</span> *)lastName birthdate:(<span class="built_in">NSDate</span> *)birthdate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *salutation;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSDate</span> *birthdate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>现在我们假设我们有一个 <code>PersonViewController</code> ，在 <code>viewDidLoad</code> 里，只需要基于它的 <code>model</code> 属性设置一些 Label 即可。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.model.salutation.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.nameLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@ %@"</span>, <span class="keyword">self</span>.model.salutation, <span class="keyword">self</span>.model.firstName, <span class="keyword">self</span>.model.lastName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.nameLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>, <span class="keyword">self</span>.model.firstName, <span class="keyword">self</span>.model.lastName];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDateFormatter</span> *dateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">    [dateFormatter setDateFormat:<span class="string">@"EEEE MMMM d, yyyy"</span>];</span><br><span class="line">    <span class="keyword">self</span>.birthdateLabel.text = [dateFormatter stringFromDate:model.birthdate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这全都直截了当，标准的 MVC。现在来看看我们如何用一个 View Model 来增强它。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PersonViewModel</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithPerson:(Person *)person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) Person *person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *nameText;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *birthdateText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>我们的 View Model 的实现大概如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@implementation PersonViewModel</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithPerson:(Person *)person &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (!self) return nil;</span><br><span class="line"></span><br><span class="line">    _person = person;</span><br><span class="line">    if (person.salutation.length &gt; 0) &#123;</span><br><span class="line">        _nameText = [NSString stringWithFormat:@&quot;%@ %@ %@&quot;, self.person.salutation, self.person.firstName, self.person.lastName];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        _nameText = [NSString stringWithFormat:@&quot;%@ %@&quot;, self.person.firstName, self.person.lastName];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormatter setDateFormat:@&quot;EEEE MMMM d, yyyy&quot;];</span><br><span class="line">    _birthdateText = [dateFormatter stringFromDate:person.birthdate];</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>我们已经将 <code>viewDidLoad</code> 中的表示逻辑放入我们的 View Model 里了。此时，我们新的 <code>viewDidLoad</code> 就会非常轻量：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.nameLabel.text = <span class="keyword">self</span>.viewModel.nameText;</span><br><span class="line">    <span class="keyword">self</span>.birthdateLabel.text = <span class="keyword">self</span>.viewModel.birthdateText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，如你所见，并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。它与 MVC 兼容，带来<a href="http://objccn.io/issue-1/" target="_blank" rel="noopener">更轻量的 View Controllers</a>。</p><h3 id="可测试"><a href="#可测试" class="headerlink" title="可测试"></a>可测试</h3><p>View Controller 是出了名的难以测试，因为它们做了太多事情。在 MVVM 里，我们试着尽可能多的将代码移入 View Model 里。测试 View Controller 就变得容易多了，因为它们不再做一大堆事情，并且 View Model 也非常易于测试。让我们来看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SpecBegin(Person)</span><br><span class="line">NSString *salutation = @&quot;Dr.&quot;;</span><br><span class="line">NSString *firstName = @&quot;first&quot;;</span><br><span class="line">NSString *lastName = @&quot;last&quot;;</span><br><span class="line">NSDate *birthdate = [NSDate dateWithTimeIntervalSince1970:0];</span><br><span class="line"></span><br><span class="line">it (@&quot;should use the salutation available. &quot;, ^&#123;</span><br><span class="line">    Person *person = [[Person alloc] initWithSalutation:salutation firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">    expect(viewModel.nameText).to.equal(@&quot;Dr. first last&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it (@&quot;should not use an unavailable salutation. &quot;, ^&#123;</span><br><span class="line">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">    expect(viewModel.nameText).to.equal(@&quot;first last&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it (@&quot;should use the correct date format. &quot;, ^&#123;</span><br><span class="line">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class="line">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class="line">    expect(viewModel.birthdateText).to.equal(@&quot;Thursday January 1, 1970&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">SpecEnd</span><br></pre></td></tr></table></figure></p><p>如果我们没有将这个逻辑移入 View Model，我们将不得不实例化一个完整的 View Controller 以及伴随的 View，然后去比较我们 View 中 Label 的值。这样做不只是会变成一个麻烦的间接层，而且它只代表了一个十分脆弱的测试。现在，我们可以按意愿自由地修改视图层级而不必担心破坏我们的单元测试。使用 MVVM 带来的对于测试的好处非常清晰，甚至从这个简单的例子来看也可见一斑，而在有更复杂的表示逻辑的情况下，这个好处会更加明显。</p><h3 id="响应式同步"><a href="#响应式同步" class="headerlink" title="响应式同步"></a>响应式同步</h3><p>注意到在这个简单的例子中， Model 是不可变的，所以我们可以只在初始化的时候指定我们 View Model 的属性。对于可变 Model，我们还需要使用一些绑定机制，这样 View Model 就能在背后的 Model 改变时更新自身的属性。此外，一旦 View Model 上的 Model 发生改变，那 View 的属性也需要更新。Model 的改变应该级联向下通过 View Model 进入 View。</p><p>在 OS X 上，我们可以使用 Cocoa 绑定，但在 iOS 上我们并没有这样好的配置可用。我们想到了 KVO（Key-Value Observation），而且它确实做了很伟大的工作。然而，对于一个简单的绑定都需要很大的样板代码，更不用说有许多属性需要绑定了。作为替代，我个人喜欢使用 ReactiveCocoa，但 MVVM 并未强制我们使用 ReactiveCocoa。MVVM 是一个伟大的典范，它自身独立，只是在有一个良好的绑定框架时做得更好。</p><p>我们覆盖了不少内容：从普通的 MVC 派生出 MVVM，看它们是如何相兼容的范式，从一个可测试的例子观察 MVVM，并看到 MVVM 在有一个配对的绑定机制时工作得更好。如果你有兴趣学习更多关于 MVVM 的知识，你可以看看<a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/" target="_blank" rel="noopener">这篇博客</a>，它用更多细节解释了 MVVM 的好处，或者<a href="http://www.teehanlax.com/blog/krush-ios-architecture/" target="_blank" rel="noopener">这一篇</a>关于我们如何在最近的项目里使用 MVVM 获得巨大的成功的文章。我同样还有一个经过完整测试，基于 MVVM 的应用，叫做 <a href="https://github.com/AshFurrow/C-41" target="_blank" rel="noopener">C-41</a> ，它是开源的。去看看吧，如果你有任何疑问，请<a href="https://twitter.com/ashfurrow" target="_blank" rel="noopener">告诉我</a>。</p><hr><p><a href="http://objccn.io/issue-13" target="_blank" rel="noopener">话题 #13 下的更多文章</a></p><p>原文 <a href="http://www.objc.io/issue-13/mvvm.html" target="_blank" rel="noopener">Introduction to MVVM</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
      <category term="设计" scheme="https://huos3203.github.io/categories/iOS/%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
</feed>
