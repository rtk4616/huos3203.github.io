{"name":"iOS","postlist":[{"title":"使用JavaScript把JSON数据转为对象","slug":"swift/使用JavaScript把JSON数据定义对象","date":"2017-02-12T14:41:35.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/使用JavaScript把JSON数据定义对象.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"将JSON数据序列化为代码实例\"><a href=\"#将JSON数据序列化为代码实例\" class=\"headerlink\" title=\"将JSON数据序列化为代码实例\"></a>将JSON数据序列化为代码实例</h2><ol>\n<li>定义一个继承自 <code>JSExport</code> 子协议 <code>PersonJSExports</code></li>\n<li>定义一个遵守<code>PersonJSExports</code>协议的<code>Person</code>数据模</li>\n<li>使用 <code>JavaScript</code> 把<code>JSON</code>转为<code>类</code>并实例化<code>对象</code><br>都有一个完整的 <code>JVM</code> 在那儿了，谁还需要 <code>NSJSONSerialization</code>？</li>\n</ol>\n<h2 id=\"JSExport语言互通协议\"><a href=\"#JSExport语言互通协议\" class=\"headerlink\" title=\"JSExport语言互通协议\"></a>JSExport语言互通协议</h2><p><code>JavaScript</code>可以脱离<code>prototype继承</code>完全用<code>JSON</code>来定义对象，但是<code>Objective-C</code>编程不能脱离<code>类</code>和<code>继承</code>。所以<code>JavaScriptCore</code>就提供了<code>JSExport</code>作为两种语言的互通协议。<br><code>JSExport</code>中没有预定义任何方法，但是所有继承<code>JSExport</code>的协议中定义的方法即协议方法，都可以在<code>JSContext</code>中被调用。</p>\n<h2 id=\"JSExportAs-宏-指定方法在JS中调用的名称\"><a href=\"#JSExportAs-宏-指定方法在JS中调用的名称\" class=\"headerlink\" title=\"JSExportAs 宏: 指定方法在JS中调用的名称\"></a>JSExportAs 宏: 指定方法在JS中调用的名称</h2><p>对于多参数的方法，<code>JavaScriptCore</code>的转换方式将<code>Objective-C</code>的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">MultiArgs</span> &lt;<span class=\"title\">JSExport</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)doFoo:(<span class=\"keyword\">id</span>)foo withBar:(<span class=\"keyword\">id</span>)bar;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><br>如果希望方法在JavaScript中有一个比较短的名字，就需要用的JSExport.h中提供的宏：<br><figure class=\"highlight objc\"><figcaption><span>JSExport.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(PropertyName, Selector)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><figcaption><span>JSExportAs的官方宏定义 xcdoc://?url=developer.apple.com/library/etc/redirect/xcode/ios/1151/documentation/JavaScriptCore/Reference/JSExport_Ref/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define JSExportAs(PropertyName, Selector) \\</span></span><br><span class=\"line\"><span class=\"keyword\">@optional</span> Selector __JS_EXPORT_AS__<span class=\"meta\">##PropertyName:(id)argument; @required Selector</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>如 <code>setX:Y:Z</code>方法，我们可以给他重命名，让 JS 中通过 <code>set3D(x,y,z)</code> 来调用<br><figure class=\"highlight objc\"><figcaption><span>使用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(set3D,</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setX:(<span class=\"keyword\">id</span>)x Y:(<span class=\"keyword\">id</span>)y Z:(<span class=\"keyword\">id</span>)z</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">set3D(x,y,z)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义PersonJSExports协议和create协议方法（类方法）\"><a href=\"#定义PersonJSExports协议和create协议方法（类方法）\" class=\"headerlink\" title=\"定义PersonJSExports协议和create协议方法（类方法）\"></a>定义PersonJSExports协议和create协议方法（类方法）</h3><p><code>Person 类</code>实现了<code>PersonJSExports 协议</code>，该协议规定哪些属性可以在 <code>JavaScript</code>中可用。<br>在<code>JavaScript</code>语境中，不能像：<code>var person = new Person()</code>来初始化实例，可以在定义<code>PersonJSExports</code>协议方法时，添加一个协议方法来弥补这一点。见下例<code>create...</code>类方法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom protocol must be declared with `@objc`</span></span><br><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">PersonJSExports</span> : <span class=\"title\">JSExport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 在JavaScript中调用这个类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">### 定义<span class=\"title\">Person</span>模型</span></span><br><span class=\"line\"><span class=\"class\">定义一个遵守`<span class=\"title\">PersonJSExports</span>`协议的`<span class=\"title\">Person</span>`数据模</span></span><br><span class=\"line\"><span class=\"class\">// <span class=\"title\">Custom</span> <span class=\"title\">class</span> <span class=\"title\">must</span> <span class=\"title\">inherit</span> <span class=\"title\">from</span> `<span class=\"title\">NSObject</span>`</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">objc</span> <span class=\"title\">class</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>, <span class=\"title\">PersonJSExports</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// JS协议属性必须声明为`dynamic`</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(firstName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>)   </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.firstName = firstName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.lastName = lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span> </span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>(firstName: firstName, lastName: lastName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(firstName) \\(lastName)\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSContext-配置\"><a href=\"#JSContext-配置\" class=\"headerlink\" title=\"JSContext 配置\"></a>JSContext 配置</h3><p>之前，我们可以用我们已经创建的 Person 类，我们需要将其导出到 <code>JavaScript</code> 环境。我们也将借此导入<a href=\"http://mustache.github.io\" target=\"_blank\" rel=\"noopener\">Mustache JS library</a>，我们将应用模板到我们的 Person 对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export Person class，JS中以该`Person标示符`作为类名使用</span></span><br><span class=\"line\">context.setObject(<span class=\"type\">Person</span>.<span class=\"keyword\">self</span>, forKeyedSubscript: <span class=\"string\">\"Person\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load Mustache.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> mustacheJSString = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    context.evaluateScript(mustacheJSString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JavaScript-数据和进程\"><a href=\"#JavaScript-数据和进程\" class=\"headerlink\" title=\"JavaScript 数据和进程\"></a>JavaScript 数据和进程</h3><p>下面就来看看我们简单的 JSON 例子，这段代码将创建新的 Person 实例。<br>数据：<br><figure class=\"highlight json\"><figcaption><span>Persons.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Grace\"</span>,     <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hopper\"</span>,   <span class=\"attr\">\"year\"</span>: <span class=\"number\">1906</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Ada\"</span>,       <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Lovelace\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1815</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Margaret\"</span>,  <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hamilton\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1936</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>创建新的 Person 实例：<br><figure class=\"highlight js\"><figcaption><span>loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadPeopleFromJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonString</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(jsonString);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; data.length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在swift中的js协议方法：`createWithFirstName:lastName:`</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = Person.createWithFirstNameLastName(data[i].first, data[i].last);</span><br><span class=\"line\">        person.birthYear = data[i].year;</span><br><span class=\"line\">        <span class=\"comment\">//`push:`添加到数组中</span></span><br><span class=\"line\">        people.push(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> people;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><code>JSContext</code>加载装换<code>loadPeople.js</code>脚本<br>加载js脚本之后，<code>loadPeopleFromJSON</code>即可作为下标被<code>context</code>调用该方法:<br><figure class=\"highlight swift\"><figcaption><span>加载loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load loadPeople.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> loadPeople = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载js脚本之后，`loadPeopleFromJSON`即可作为下标被context调用该方法</span></span><br><span class=\"line\">    context.evaluateScript(loadPeople)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：JavaScriptCore 转换的 Objective-C / Swift 方法名是 JavaScript 兼容的。由于 JavaScript 没有参数 名称，任何外部参数名称都会被转换为驼峰形式并且附加到函数名后。在这个例子中，Objective-C 的方法 createWithFirstName:lastName: 变成了在JavaScript中的 createWithFirstNameLastName()。</p>\n</blockquote>\n<h3 id=\"使用Mustache-模板-渲染\"><a href=\"#使用Mustache-模板-渲染\" class=\"headerlink\" title=\"使用Mustache 模板 渲染\"></a>使用Mustache 模板 渲染</h3><p>Mustache 是一个很强大的 template 引擎，可以通过解析 json 来绑定并渲染占位符。如果你做过一些前端开发的话，会知道这是一种很常用的 HTML 绑定 Model 的做法，GRMustache.swift 是这个框架的 Swift 实现。<br><a href=\"http://blog.csdn.net/kevin_luan/article/details/46485561\" target=\"_blank\" rel=\"noopener\">mustache模板引擎</a><br><a href=\"https://github.com/BjornRuud/Swiftache\" target=\"_blank\" rel=\"noopener\">Mustache 的 Swift 语言实现版本</a><br>mustache的特点就是很语法很简单，主要语法如下:</p>\n<pre><code>1. {{ name }} 打印变量，默认是escape过的，如果不要escape,用3个分隔符 {{{ name }}}，或者用 {{ &name }}，这个和分隔符无关\n2. {{#person}}…{{/person}} 区块，4种方式\n    person 是真假值，决定是否输出\n    person 是list of array，会循环展开 for x in person:section.render(&apos;xxx)\n    person 是匿名函数/object, 区块包裹的html 会作为参数传递进去\n    person 是dict，直接打印 dict[key]\n3. {{^person}}…{{/person}，反向区块\n    4. {{！name }} 注释\n5. {{> box }} 载入子模块\n</code></pre><p>加载 <code>JSON 数据</code>，调用 <code>JSContext</code> 将数据解析成 <code>Person 对象</code>的数组，并用 <code>Mustache 模板</code>呈现每个<code>Person</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件`Persons.json`中加载json数据</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> peopleJSON = <span class=\"type\">NSString</span>(contentsOfFile:..., encoding: <span class=\"type\">NSUTF8StringEncoding</span>, error: <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取js中定义的`loadPeopleFromJSON`的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> load = context.objectForKeyedSubscript(<span class=\"string\">\"loadPeopleFromJSON\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 通过调用load方法将`JSON 数据`解析成`Person 对象`的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> people = load.callWithArguments([peopleJSON]).toArray() <span class=\"keyword\">as</span>? [<span class=\"type\">Person</span>] </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get rendering function and create template</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> mustacheRender = context.objectForKeyedSubscript(<span class=\"string\">\"Mustache\"</span>).objectForKeyedSubscript(<span class=\"string\">\"render\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> template = <span class=\"string\">\", born \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop through people and render Person object as string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> people </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println</span>(mustacheRender.callWithArguments([template, person]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Grace Hopper, born 1906</span></span><br><span class=\"line\"><span class=\"comment\">// Ada Lovelace, born 1815</span></span><br><span class=\"line\"><span class=\"comment\">// Margaret Hamilton, born 1936</span></span><br></pre></td></tr></table></figure><br>JavaScript 代码段可能是附带应用一起发布的基本的用户定义的插件。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"},{"name":"json","path":"api/tags/json.json"}]},{"title":"Java​Script​Core实现swift混编","slug":"swift/Java​Script​Core实现swift混编","date":"2017-02-12T13:34:06.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/Java​Script​Core实现swift混编.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>OS X Mavericks 和 iOS 7 引入了 <code>JavaScriptCore</code> 库，它把 <code>WebKit 的 JavaScript</code> 引擎用 <code>Objective-C</code> 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，<code>JavaScript</code> 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。</p>\n<ol>\n<li>如何从 <code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</li>\n<li>那么反向呢？怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？</li>\n</ol>\n<h2 id=\"swift通过JSContext调用JavaScript\"><a href=\"#swift通过JSContext调用JavaScript\" class=\"headerlink\" title=\"swift通过JSContext调用JavaScript\"></a>swift通过JSContext调用JavaScript</h2><p>如何从<code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</p>\n<h3 id=\"全局实例JSContext：运行JavaScript代码的环境\"><a href=\"#全局实例JSContext：运行JavaScript代码的环境\" class=\"headerlink\" title=\"全局实例JSContext：运行JavaScript代码的环境\"></a>全局实例JSContext：运行JavaScript代码的环境</h3><p>全局实例<code>JSContext</code>作用就像在浏览器内运行的一个<code>JavaScript</code>脚本，<code>JSContext</code> 类似于 <code>window</code>。<br>通过<code>JSContext</code>实例运行<code>JavaScript</code>代码<code>创建变量</code>，<code>做计算</code>，<code>定义方法</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"type\">JSContext</span>()    <span class=\"comment\">//创建全局环境</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var num = 5 + 5\"</span>) <span class=\"comment\">//计算</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var names = ['Grace', 'Ada', 'Margaret']\"</span>) <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var triple = function(value) &#123; return value * 3 &#125;\"</span>) <span class=\"comment\">//定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleNum: <span class=\"type\">JSValue</span> = context.evaluateScript(<span class=\"string\">\"triple(num)\"</span>)  </span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动态类型JSValue-包裹JSContext环境下每一个可能的JS值\"><a href=\"#动态类型JSValue-包裹JSContext环境下每一个可能的JS值\" class=\"headerlink\" title=\"动态类型JSValue:包裹JSContext环境下每一个可能的JS值\"></a>动态类型JSValue:包裹JSContext环境下每一个可能的JS值</h3><p><code>JavaScript</code> 是动态语言，所以动态类型<code>JSValue</code>包裹JSContext环境中任何可能的JS值，字符串和数字；数组、对象和方法；甚至错误和特殊的 JavaScript 值诸如 <code>null</code> 和 <code>undefined</code>。<br>获取<code>tripleNum</code>值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tripled: \\(tripleNum.toInt32())\"</span>)</span><br></pre></td></tr></table></figure><br><code>JSValue</code> 包括一系列方法用于访问其可能的值以保证有正确的 <code>Foundation 基本类型</code><br>包括：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800\"></p>\n<h3 id=\"下标取值：访问JSContext环境下的任何值\"><a href=\"#下标取值：访问JSContext环境下的任何值\" class=\"headerlink\" title=\"下标取值：访问JSContext环境下的任何值\"></a>下标取值：访问JSContext环境下的任何值</h3><p><code>JSContext</code> 和 <code>JSValue</code> 实例可以使用下标的方式访问之前创建的 <code>context</code> 的任何值。</p>\n<ul>\n<li><code>JSContext</code>：需要一个字符串下标</li>\n<li><code>JSValue</code>：允许使用<code>字符串</code>或<code>整数</code>标来得到里面的对象和数组</li>\n</ul>\n<h4 id=\"JSContext下标取值\"><a href=\"#JSContext下标取值\" class=\"headerlink\" title=\"JSContext下标取值\"></a>JSContext下标取值</h4><ol>\n<li><code>swift</code>语法<figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = context.objectForKeyedSubscript(<span class=\"string\">\"names\"</span>)  <span class=\"comment\">//JSContext字符串下标原始方法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"JSValue整数下标原始方法\"><a href=\"#JSValue整数下标原始方法\" class=\"headerlink\" title=\"JSValue整数下标原始方法\"></a>JSValue整数下标原始方法</h4><figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialName = names.objectAtIndexedSubscript(<span class=\"number\">0</span>)   <span class=\"comment\">//JSValue整数下标原始方法</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The first name: \\(initialName.toString())\"</span>)  <span class=\"comment\">//JSValue method</span></span><br><span class=\"line\"><span class=\"comment\">// The first name: Grace</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里，Objective-C 代码可以利用下标表示法，如下例：context[@”names”]，names[0]，[initialName toString]，Swift 目前只公开<a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">原始方法</a>:<code>objectAtKeyedSubscript()</code> 和 <code>objectAtIndexedSubscript()</code>来让下标成为可能。</p>\n</blockquote>\n<h3 id=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"><a href=\"#callWithArguments调用JS方法：只需传入Foundation基本类型参数\" class=\"headerlink\" title=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"></a>callWithArguments调用JS方法：只需传入Foundation基本类型参数</h3><p>上述<code>JavaScript</code>代码中，<code>JSValue</code>包装了一个<code>triple函数</code>，在<code>Objective-C / Swift</code> 代码中可以使用 <code>Foundation基本类型</code>作为参数来直接调用该函数。再次，<code>JavaScriptCore</code> 很轻松的处理了这个桥接：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleFunction = context.objectForKeyedSubscript(<span class=\"string\">\"triple\"</span>) <span class=\"comment\">//下标取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = tripleFunction.callWithArguments([<span class=\"number\">5</span>]) <span class=\"comment\">//传入基本类型参数直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Five tripled: \\(result.toInt32())\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exceptionHandler错误处理\"><a href=\"#exceptionHandler错误处理\" class=\"headerlink\" title=\"exceptionHandler错误处理\"></a><code>exceptionHandler</code>错误处理</h3><p><code>exceptionHandler</code> 是一个接收<code>JSContext 引用</code>和<code>异常本身</code>的回调处理的闭包。<br>通过设置上下文的 <code>exceptionHandler</code> 属性，可以观察和记录<code>语法</code>，<code>类型</code>以及<code>运行时错误</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = &#123; context, exception <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"JS Error: \\(exception)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>)</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"JS Error: %@\"</span>, exception);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[context evaluateScript:<span class=\"string\">@\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>];</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript-通过JSContext调用-swift／OC\"><a href=\"#JavaScript-通过JSContext调用-swift／OC\" class=\"headerlink\" title=\"JavaScript 通过JSContext调用 swift／OC\"></a>JavaScript 通过JSContext调用 swift／OC</h2><p>怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？<br>让 <code>JSContext</code> 访问我们的本地客户端代码的方式主要有两种：</p>\n<ol>\n<li><code>block块</code>键值对：把OC中的<code>block块</code>赋值给<code>JSContext</code>的一个标示键，该标识键的<code>JSValue</code>可以通过<code>callWithArguments</code>调用.</li>\n<li><code>JSExport 协议</code>。</li>\n</ol>\n<h3 id=\"block块-键值对-该block键的JSValue通过callWithArguments调用\"><a href=\"#block块-键值对-该block键的JSValue通过callWithArguments调用\" class=\"headerlink\" title=\"block块 键值对:该block键的JSValue通过callWithArguments调用\"></a>block块 键值对:该block键的<code>JSValue</code>通过<code>callWithArguments</code>调用</h3><p>当一个 <code>Objective-C block</code> 被赋给 <code>JSContext</code> 里的一个标识符，<code>JavaScriptCore</code> 会自动的把 <code>block</code> 封装在 <code>JavaScript 函数</code>里，并以该标示符作为函数名来调用该block的实现。这使得在 <code>JavaScript</code> 中可以简单的使用 <code>Foundation</code> 和 <code>Cocoa</code>类，所有的桥接都为你做好了。<br><a href=\"http://nshipster.cn/cfstringtransform/\" target=\"_blank\" rel=\"noopener\">CFStringTransform</a>处理语言的强大威力</p>\n<p>在 <code>JSContext</code> 中使用 <code>Swift 闭包</code>需要注意两点:</p>\n<ol>\n<li>与 <code>@objc_block</code> 属性一起声明</li>\n<li>使用Swift中的<code>unsafeBitCast()</code>函数，把对象转换为<code>AnyObject</code></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> simplifyString: <span class=\"meta\">@objc</span>_block <span class=\"type\">String</span> -&gt; <span class=\"type\">String</span> = &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mutableString = <span class=\"type\">NSMutableString</span>(string: input) <span class=\"keyword\">as</span> <span class=\"type\">CFMutableStringRef</span></span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformToLatin, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformStripCombiningMarks, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mutableString</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.setObject(<span class=\"built_in\">unsafeBitCast</span>(simplifyString, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>), forKeyedSubscript: <span class=\"string\">\"simplifyString\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(context.evaluateScript(<span class=\"string\">\"simplifyString('안녕하새요!')\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// annyeonghasaeyo!</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给标示符赋值一个oc-block，该标示符会被自动装换为JavaScript函数</span></span><br><span class=\"line\">context[<span class=\"string\">@\"simplifyString\"</span>] = ^(<span class=\"built_in\">NSString</span> *input) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableString = [input mutableCopy];</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformToLatin, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformStripCombiningMarks, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> mutableString;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [context evaluateScript:<span class=\"string\">@\"simplifyString('안녕하새요!')\"</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>由于 <code>block</code> 可以保有变量引用，而且 <code>JSContext</code> 也强引用它所有的变量，为了避免强引用循环需要特别小心。<br>避免保有<code>JSContext</code> 或<code>一个 block</code> 里的任何 <code>JSValue</code>。相反，使用 <code>[JSContext currentContext]</code> 得到当前上下文，并把你需要的任何值用参数传递。</p>\n<h3 id=\"JSExport-协议\"><a href=\"#JSExport-协议\" class=\"headerlink\" title=\"JSExport 协议\"></a>JSExport 协议</h3><p>在继承<code>JSExport 协议</code>的子协议里声明的属性，实例方法还是类方法，都会自动暴漏给<code>JavaScript</code>代码来调用。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"}]},{"title":"Awsome Apple Develop Guide[转]","slug":"AwsomeAppleDevelopGuide","date":"2017-01-22T18:55:21.000Z","updated":"2017-01-23T17:34:23.000Z","comments":true,"path":"api/articles/AwsomeAppleDevelopGuide.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>此文档是Apple平台开发所使用语言的主流学习资源</p>\n<h1 id=\"iOS开发者博客\"><a href=\"#iOS开发者博客\" class=\"headerlink\" title=\"iOS开发者博客\"></a>iOS开发者博客</h1><ul>\n<li>使用 <a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">iOSBlogCN</a>添加或者订阅</li>\n</ul>\n<h1 id=\"从社区学习知识\"><a href=\"#从社区学习知识\" class=\"headerlink\" title=\"从社区学习知识\"></a>从社区学习知识</h1><ul>\n<li><a href=\"http://weekly.ios-wiki.com/\" target=\"_blank\" rel=\"noopener\">iOS技术周报</a></li>\n<li><a href=\"http://objccn.io/\" target=\"_blank\" rel=\"noopener\">objc中国</a></li>\n<li><a href=\"http://www.cocoachina.com/\" target=\"_blank\" rel=\"noopener\">cocoachina</a></li>\n<li><a href=\"http://swiftist.org/\" target=\"_blank\" rel=\"noopener\">Swift社区</a></li>\n</ul>\n<h1 id=\"从iOS面试题总结\"><a href=\"#从iOS面试题总结\" class=\"headerlink\" title=\"从iOS面试题总结\"></a>从iOS面试题总结</h1><p><a href=\"iOS-usefulInterviewquestions-zh_CN\">iOS有用的面试题</a></p>\n<h1 id=\"建议－学习iOS之前快速预览一下\"><a href=\"#建议－学习iOS之前快速预览一下\" class=\"headerlink\" title=\"建议－学习iOS之前快速预览一下\"></a>建议－学习iOS之前快速预览一下</h1><p><a href=\"http://aaaaaashu.gitbooks.io/mac-dev-setup/content/\" target=\"_blank\" rel=\"noopener\">MAC开发环境配置</a></p>\n<p><a href=\"http://www.zhihu.com/question/24002984\" target=\"_blank\" rel=\"noopener\">什么是Swift，如何评价 Swift 语言？</a></p>\n<p><a href=\"http://zh.wikipedia.org/zh-cn/Objective-C\" target=\"_blank\" rel=\"noopener\">了解一下Objective-C是什么</a></p>\n<p><a href=\"https://github.com/qinjx/30min_guides/blob/master/ios.md\" target=\"_blank\" rel=\"noopener\">iOS开发60分钟入门</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html#//apple_ref/doc/uid/TP40012668-CH2-SW1\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps Today</a></p>\n<p><a href=\"http://www.jianshu.com/p/8472ba0f2bb6\" target=\"_blank\" rel=\"noopener\">从零开始学iOS开发的15条建议</a></p>\n<p><a href=\"http://limboy.me/ios/2014/12/31/learning-ios.html\" target=\"_blank\" rel=\"noopener\">自学iOS开发的一些经验</a></p>\n<p><a href=\"http://www.cocoachina.com/special/fornew.html\" target=\"_blank\" rel=\"noopener\">学习路线</a></p>\n<h2 id=\"语言学习\"><a href=\"#语言学习\" class=\"headerlink\" title=\"语言学习\"></a>语言学习</h2><p>这里包括了Swift，Objective-C，C，C++</p>\n<p><a href=\"https://github.com/numbbbbb/the-swift-programming-language-in-chinese\" target=\"_blank\" rel=\"noopener\">中文版 Apple 官方 Swift 教程《The Swift Programming Language》1.2</a></p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">中文版 Apple 官方 Swift 教程《The Swift Programming Language》2.0</a></p>\n<p><a href=\"https://github.com/raywenderlich/swift-style-guide\" target=\"_blank\" rel=\"noopener\">The Official raywenderlich.com Swift Style Guide</a></p>\n<p><a href=\"http://swift.gg/2015/08/11/raywenderlich-swift-style-guide/\" target=\"_blank\" rel=\"noopener\">The Official raywenderlich.com Swift Style Guide 中文版</a></p>\n<p><a href=\"https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/UsingSwiftwithCocoaandObjective-C%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C.md\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C中文手册</a></p>\n<p><a href=\"http://c-faq-chn.sourceforge.net/ccfaq/index.html\" target=\"_blank\" rel=\"noopener\">C 语言常见问题集</a></p>\n<p><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/\" target=\"_blank\" rel=\"noopener\">Google Objective-C Style Guide 中文版</a></p>\n<p><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/\" target=\"_blank\" rel=\"noopener\">Google C++ Style Guide 中文版</a></p>\n<p><a href=\"https://github.com/oa414/objc-zen-book-cn\" target=\"_blank\" rel=\"noopener\">禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译</a></p>\n<h2 id=\"免费视频资源\"><a href=\"#免费视频资源\" class=\"headerlink\" title=\"免费视频资源\"></a>免费视频资源</h2><p><a href=\"http://www.imooc.com/learn/127\" target=\"_blank\" rel=\"noopener\">玩儿转Swift</a></p>\n<p><a href=\"http://www.imooc.com/learn/218\" target=\"_blank\" rel=\"noopener\">征战Objective-C</a></p>\n<p><a href=\"http://v.163.com/special/opencourse/ios7.html\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：iOS 7应用开发</a></p>\n<p><a href=\"https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：Swift开发iOS 8应用－中文字幕</a></p>\n<p><a href=\"https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：Swift开发iOS 8应用</a></p>\n<p><a href=\"https://github.com/qiaoxueshi/WWDC_2015_Video_Subtitle\" target=\"_blank\" rel=\"noopener\">WWDC 2015 Video 英文字幕 (共104个)</a></p>\n<p><a href=\"https://github.com/6david9/WWDC2015\" target=\"_blank\" rel=\"noopener\">WWDC2015下载链接</a></p>\n<h2 id=\"精粹\"><a href=\"#精粹\" class=\"headerlink\" title=\"精粹\"></a>精粹</h2><p><a href=\"https://github.com/nixzhu/dev-blog\" target=\"_blank\" rel=\"noopener\">一些 iOS / Web 开发相关的翻译或原创博客文章</a></p>\n<p><a href=\"https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques\" target=\"_blank\" rel=\"noopener\">iOS-Core-Animation-Advanced-Techniques</a></p>\n<p><a href=\"https://github.com/objccn/articles\" target=\"_blank\" rel=\"noopener\">objc.io中文翻译版本</a></p>\n<p><a href=\"https://github.com/ipader/SwiftGuide\" target=\"_blank\" rel=\"noopener\">这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排</a></p>\n<p><a href=\"https://github.com/cjwirth/awesome-ios-ui\" target=\"_blank\" rel=\"noopener\">A curated list of awesome iOS UI/UX libraries</a></p>\n<p><a href=\"https://github.com/shinobicontrols/iOS8-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS8-Day-by-Day blog series</a></p>\n<p><a href=\"https://github.com/ShinobiControls/iOS9-day-by-day/\" target=\"_blank\" rel=\"noopener\">iOS9 Day-by-Day blog series</a></p>\n<p><a href=\"https://github.com/matteocrippa/awesome-swift\" target=\"_blank\" rel=\"noopener\">matteocrippa/awesome-swift</a></p>\n<p><a href=\"https://github.com/Wolg/awesome-swift\" target=\"_blank\" rel=\"noopener\">Wolg/awesome-swift</a></p>\n<p><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">awesome-ios</a></p>\n<h2 id=\"Swift-Objective-C-C-C-设计-资源集合\"><a href=\"#Swift-Objective-C-C-C-设计-资源集合\" class=\"headerlink\" title=\"Swift | Objective-C | C/C++ | 设计 资源集合\"></a>Swift | Objective-C | C/C++ | 设计 资源集合</h2><p><a href=\"http://www.jianshu.com/p/f1208b5e42d9\" target=\"_blank\" rel=\"noopener\">Alamofire网络库基础教程</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==&amp;mid=204340894&amp;idx=1&amp;sn=cf7d5b0a9e3a198a39111fb07b0685e5#rd\" target=\"_blank\" rel=\"noopener\">C 语言中的指针和内存泄漏</a></p>\n<p><a href=\"http://www.ideawu.net/blog/archives/878.html\" target=\"_blank\" rel=\"noopener\">C/C++编程的现代习惯</a></p>\n<p><a href=\"http://onevcat.com/2015/01/swift-pointer/\" target=\"_blank\" rel=\"noopener\">Swift指针的使用</a></p>\n<p><a href=\"http://swifter.tips/\" target=\"_blank\" rel=\"noopener\">Swift tips</a></p>\n<p><a href=\"https://github.com/ming1016/study\" target=\"_blank\" rel=\"noopener\">Study</a></p>\n<p><a href=\"https://github.com/100mango/zen\" target=\"_blank\" rel=\"noopener\">iOS心得</a></p>\n<p><a href=\"https://github.com/Aufree/trip-to-iOS\" target=\"_blank\" rel=\"noopener\">A curated list of delightful iOS resources.</a></p>\n<p><a href=\"https://github.com/CocoaChinaTranslationTeam/Excellent-Articles-Translations\" target=\"_blank\" rel=\"noopener\">优秀外文翻译资源集合</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207789673&amp;idx=1&amp;sn=15683e2b9c939f9e21084b4e65df9b92#rd\" target=\"_blank\" rel=\"noopener\">详解Swift中的iOS设计模式</a></p>\n<p><a href=\"http://www.yming9.com/?p=579\" target=\"_blank\" rel=\"noopener\">在iOS8 下用Swift 创建自定义的键盘</a></p>\n<p><a href=\"http://www.devtf.cn/?p=462\" target=\"_blank\" rel=\"noopener\">Swift和自动引用计数(ARC)整理之强，弱和无主引用</a></p>\n<p><a href=\"http://lvwenhan.com/ios/454.html\" target=\"_blank\" rel=\"noopener\">自己动手写一个 iOS 网络请求库（一）—— NSURLSession 初探</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209907200&amp;idx=1&amp;sn=4c3d467cc76980209ed55ae8d08694f5#rd\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa 3.0 初窥</a></p>\n<p><a href=\"http://www.jianshu.com/p/2dc639b2675a\" target=\"_blank\" rel=\"noopener\">Swift 2 有哪些新特性</a></p>\n<p><a href=\"http://www.cocoachina.com/cms/wap.php?action=article&amp;id=12237\" target=\"_blank\" rel=\"noopener\">如何使用Instruments诊断App（Swift版）：起步</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209755668&amp;idx=1&amp;sn=383f306a3cc8cf2463a0a2c951ce17f6#rd\" target=\"_blank\" rel=\"noopener\">理解 ARC 下的循环引用</a></p>\n<p><a href=\"http://www.devtalking.com/articles/what-is-new-in-swift/\" target=\"_blank\" rel=\"noopener\">Swift 2.0初探</a></p>\n<p><a href=\"http://www.cocoachina.com/industry/20140103/7651.html?utm_campaign=ios_wiki_dev_issue_1&amp;utm_source=ios_wiki_com&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">2013 CocoaChina微信精选之技术汇</a></p>\n<p><a href=\"http://www.imooc.com/wenda/detail/238393\" target=\"_blank\" rel=\"noopener\">理解 Objective-C 的 ARC</a></p>\n<p><a href=\"http://www.jianshu.com/p/50b63a221f09\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技</a></p>\n<p><a href=\"http://www.jianshu.com/p/2fa080673842\" target=\"_blank\" rel=\"noopener\">我推荐的一些iOS开发书单 叶孤城___</a></p>\n<p><a href=\"http://www.jianshu.com/p/9e1f0b44935c\" target=\"_blank\" rel=\"noopener\">iOS性能优化</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206525720&amp;idx=1&amp;sn=61ad896414bd492f5dee7a46c1753b50#rd\" target=\"_blank\" rel=\"noopener\">iOS 调试核对清单</a></p>\n<p><a href=\"http://www.jianshu.com/p/e28e8f5c7578?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS APP 测试点摘要</a></p>\n<p><a href=\"http://toutiao.io/r/z71jv\" target=\"_blank\" rel=\"noopener\">GCD使用经验与技巧浅谈</a></p>\n<p><a href=\"http://xuexuefeng.com/autolayout/\" target=\"_blank\" rel=\"noopener\">iOS 开发实践之 Auto Layout</a></p>\n<p><a href=\"http://www.jianshu.com/p/9c35432ec7a4?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">I Found You! 正则表达式!</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206617040&amp;idx=1&amp;sn=35c497c91047130c96490b1e7b9a3fa5#rd\" target=\"_blank\" rel=\"noopener\">iOS 开发中的消息传递机制</a></p>\n<p><a href=\"http://www.jianshu.com/p/6b7d54b3f88b?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS扫一扫功能开发</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206668083&amp;idx=1&amp;sn=1661f83ff6d5e1f1b75eba9176e1b640#rd\" target=\"_blank\" rel=\"noopener\">给游戏开发者们的 7 个制作建议</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206705810&amp;idx=1&amp;sn=32beff0e768d167f9a76a2be003d0886#rd\" target=\"_blank\" rel=\"noopener\">iOS另类的内存管理</a></p>\n<p><a href=\"http://www.jianshu.com/p/613916eea37f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS runloop</a></p>\n<p><a href=\"http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/\" target=\"_blank\" rel=\"noopener\">正确使用Block避免Cycle Retain和Crash</a></p>\n<p><a href=\"http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/\" target=\"_blank\" rel=\"noopener\">为GCD队列绑定NSObject类型上下文数据-利用__bridge_retained(transfer)转移内存管理权</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207272218&amp;idx=1&amp;sn=fe72df0ae11997be7e0dac8cc06115aa#rd\" target=\"_blank\" rel=\"noopener\">iOS事件分发机制（一） hit-Testing</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207315755&amp;idx=1&amp;sn=3e48dbd35674882b46796ac9bd02ad10#rd\" target=\"_blank\" rel=\"noopener\">iOS事件分发机制（二）：The Responder Chain</a></p>\n<p><a href=\"http://blog.cnbang.net/tech/2729/\" target=\"_blank\" rel=\"noopener\">iOS富文本组件的实现—DTCoreText源码解析 渲染篇</a></p>\n<p><a href=\"http://blog.cnbang.net/tech/2630/\" target=\"_blank\" rel=\"noopener\">iOS富文本组件的实现—DTCoreText源码解析 数据篇</a></p>\n<p><a href=\"https://github.com/bboyfeiyu/iOS-tech-frontier/blob/master/issue-2/GCD%E6%A6%82%E8%BF%B0%E3%80%81%E8%AF%AD%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A5%BD%E7%9A%84%E7%A4%BA%E4%BE%8B.md\" target=\"_blank\" rel=\"noopener\">GCD概述、语法以及好的示例</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208119666&amp;idx=1&amp;sn=b85d6532b7804cdeb2accb5e8aea3c38#rd\" target=\"_blank\" rel=\"noopener\">通过减少动态派送提升性能</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206285714&amp;idx=5&amp;sn=2048f89ee84149bac671ce8e204ec277#rd\" target=\"_blank\" rel=\"noopener\">NSString属性什么时候用copy，什么时候用strong?</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206321222&amp;idx=8&amp;sn=71171f2298c2ed6d72015b942733f607#rd\" target=\"_blank\" rel=\"noopener\">NSRecursiveLock递归锁的使用</a></p>\n<p><a href=\"http://cubernet.cn/blog/rootdaemon/\" target=\"_blank\" rel=\"noopener\">在iOS上以root身份运行守护进程</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206483177&amp;idx=2&amp;sn=0431f8a7673bf6633643c23e1776fcdd#rd\" target=\"_blank\" rel=\"noopener\">iOS开发中两个常见问题的处理</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206448996&amp;idx=3&amp;sn=895663ec96a8469820b54b6536975340#rd\" target=\"_blank\" rel=\"noopener\">iOS 8增强的自动布局功能</a></p>\n<p><a href=\"http://cubernet.cn/blog/theos1/\" target=\"_blank\" rel=\"noopener\">Theos介绍</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206637839&amp;idx=7&amp;sn=d5719f4c59753143c288de6d6206832b#rd\" target=\"_blank\" rel=\"noopener\">iOS中几种定时器 - 控制了时间，就控制了一切</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208071791&amp;idx=5&amp;sn=8fd1f5ae65611a4de7ce3885db28dc6f#rd\" target=\"_blank\" rel=\"noopener\">iOS view的frame和bounds之区别（位置和大小）</a></p>\n<p><a href=\"http://www.jianshu.com/p/aa50e5350852?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"noopener\">iOS应用程序的生命周期</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=207857740&amp;idx=2&amp;sn=95d11ae018381f7b711320f406f800ab#rd\" target=\"_blank\" rel=\"noopener\">2015 Objective-C 三大新特性 | 干货</a></p>\n<p><a href=\"http://www.olinone.com/?p=232\" target=\"_blank\" rel=\"noopener\">“自释放”在iOS开发中的应用</a></p>\n<p><a href=\"http://nshipster.cn/\" target=\"_blank\" rel=\"noopener\">关注被忽略的 Objective-C、Swift 和 Cocoa 特性</a></p>\n<p><a href=\"https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift#!/chapters/675\" target=\"_blank\" rel=\"noopener\">Swift开发游戏步骤</a></p>\n<p><a href=\"http://www.jianshu.com/p/d46fb9d72ddb?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">关于iOS编码规范</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206155008&amp;idx=1&amp;sn=360b4f02a9f9aea2cdd21f9253140276#rd\" target=\"_blank\" rel=\"noopener\">Objective-C开发编码规范（一）</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208035695&amp;idx=2&amp;sn=b5069f3429308204dec4dd459bc4652f#rd\" target=\"_blank\" rel=\"noopener\">Objective-C开发编码规范（二）</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206573834&amp;idx=5&amp;sn=b18dc313960fada8e84b76efabd3175c#rd\" target=\"_blank\" rel=\"noopener\">Swift扩展的三个微妙细节</a></p>\n<p><a href=\"http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html\" target=\"_blank\" rel=\"noopener\">Objective-C类成员变量深度剖析</a></p>\n<p><a href=\"http://cubernet.cn/blog/swift-1/\" target=\"_blank\" rel=\"noopener\">Swift基础(一)</a></p>\n<p><a href=\"http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html\" target=\"_blank\" rel=\"noopener\">iOS7人机界面指南</a></p>\n<p><a href=\"http://wileam.com/iphone-6-screen-cn/\" target=\"_blank\" rel=\"noopener\">iphone6 屏幕设计揭秘</a></p>\n<p><a href=\"http://www.mobile-patterns.com/\" target=\"_blank\" rel=\"noopener\">mobile设计</a></p>\n<p><a href=\"http://www.jianshu.com/p/e7fc525f342d?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS常用框架</a></p>\n<p><a href=\"http://www.jianshu.com/p/47201e57d21a?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS面试基础知识36题</a></p>\n<p><a href=\"http://www.jianshu.com/p/ca75fa02cf1e\" target=\"_blank\" rel=\"noopener\">GitHub 上排名前 50 的 Objective-C 项目简介</a></p>\n<p><a href=\"http://www.jianshu.com/p/c5b0eb58b878\" target=\"_blank\" rel=\"noopener\">一些知名App用到的第三方库汇总</a></p>\n<p><a href=\"http://foggry.com/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/\" target=\"_blank\" rel=\"noopener\">Github优秀开源项目大全-iOS</a></p>\n<p><a href=\"http://zixun.github.io/blog/2015/04/11/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/\" target=\"_blank\" rel=\"noopener\">[iOS单元测试系列]单元测试框架选型</a></p>\n<p><a href=\"https://github.com/linqiang/Demo\" target=\"_blank\" rel=\"noopener\">购物商城的Demo</a></p>\n<p><a href=\"https://github.com/jkyin/Subtitle\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：iOS 7 应用开发 Demo</a></p>\n<p><a href=\"https://github.com/Lax/iOS-Swift-Demos\" target=\"_blank\" rel=\"noopener\">iOS-Swift-Demos</a></p>\n<p><a href=\"https://github.com/numbbbbb/Accessibility-Programming-Guide-for-iOS\" target=\"_blank\" rel=\"noopener\">iOS 无障碍开发指导</a></p>\n<p><a href=\"https://github.com/CocoaChinaTranslationTeam/TestingWithXcodeDocsCN\" target=\"_blank\" rel=\"noopener\">TestingWithXcode中文文档</a></p>\n<p><a href=\"http://ourcoders.com/thread/show/117/\" target=\"_blank\" rel=\"noopener\">苹果Xcode帮助文档阅读指南</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209849033&amp;idx=2&amp;sn=59b5aa163d0be134afbbe951e55ea708#rd\" target=\"_blank\" rel=\"noopener\">iOS项目的持续集成与管理</a></p>\n<p><a href=\"http://www.coderyi.com/archives/751\" target=\"_blank\" rel=\"noopener\">（译）WebViewJavascriptBridge－Obj-C和JavaScript互通消息的桥梁</a></p>\n<p><a href=\"http://www.jianshu.com/p/6376149a2c4c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">截获导航控制器系统返回按钮的点击pop及右滑pop事件</a></p>\n<p><a href=\"http://beauty-soft.net/blog/ceiba/Ios/20140102/680.html\" target=\"_blank\" rel=\"noopener\">UITableView常用属性和方法</a></p>\n<p><a href=\"http://www.devtalking.com/articles/swift-access-control/\" target=\"_blank\" rel=\"noopener\">Swift新特性 – 访问控制（Access Control）</a></p>\n<p><a href=\"http://chengway.in/post/ji-zhu/viewcontroller-programming-guide/presenting-a-view-controller\" target=\"_blank\" rel=\"noopener\">ViewController Programming Guide 笔记（一）</a></p>\n<p><a href=\"http://www.cnblogs.com/haibindev/archive/2013/01/30/2880764.html\" target=\"_blank\" rel=\"noopener\">HTTP Live Streaming直播(iOS直播)技术分析与实现</a></p>\n<p><a href=\"http://ourui.github.io/blog/2014/01/22/mantle-use/\" target=\"_blank\" rel=\"noopener\">Mantle 初步使用</a></p>\n<p><a href=\"http://www.jianshu.com/p/76c588893b19?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">使用CAReplicatorLayer创建动画</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206678143&amp;idx=\" target=\"_blank\" rel=\"noopener\">iOS动画——ViewAnimations</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206718165&amp;idx=6&amp;sn=17c3a363f49df7a90a4e973b9c6d9af6#rd\" target=\"_blank\" rel=\"noopener\">iOS动画——Layer Animations</a></p>\n<p><a href=\"https://github.com/sxyx2008/awesome-ios-animation\" target=\"_blank\" rel=\"noopener\">收集整理了下iOS平台下比较主流炫酷的几款动画框架</a></p>\n<p><a href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\" target=\"_blank\" rel=\"noopener\">Masonry介绍与使用实践(快速上手Autolayout)</a></p>\n<p><a href=\"http://vit0.com/blog/2013/12/07/iosxue-xi-zhi-autolayout/\" target=\"_blank\" rel=\"noopener\">iOS学习之Autolayout</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208000068&amp;idx=2&amp;sn=a4fdbf1858302470cab8b0d4bf3484cd#rd\" target=\"_blank\" rel=\"noopener\">如何实现一个不规则排列的图片布局算法 | 干货</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209655681&amp;idx=2&amp;sn=9f89d8d1ecb393db58c3e064d713b9b5#rd\" target=\"_blank\" rel=\"noopener\">响应式视图</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208550104&amp;idx=1&amp;sn=83eca61921efd512c42ec9e68ca6b492#rd\" target=\"_blank\" rel=\"noopener\">微软前员工：开发Apple Watch应用的27个技巧</a></p>\n<p><a href=\"http://nilsun.github.io/apple-watch/\" target=\"_blank\" rel=\"noopener\">Apple Watch开发初探</a></p>\n<p><a href=\"http://www.cocoachina.com/applewatch/\" target=\"_blank\" rel=\"noopener\">Apple Watch开发专题</a></p>\n<p><a href=\"http://tech.meituan.com/DiveIntoMethodCache.html\" target=\"_blank\" rel=\"noopener\">深入理解Objective-C：方法缓存</a></p>\n<p><a href=\"http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/\" target=\"_blank\" rel=\"noopener\">优化UITableViewCell高度计算的那些事</a></p>\n<p><a href=\"http://objccn.io/issue-4-2/\" target=\"_blank\" rel=\"noopener\">一个完整的Core Data应用</a></p>\n<p><a href=\"http://oncenote.com/2014/10/21/Security-1-HTTPS/\" target=\"_blank\" rel=\"noopener\">iOS安全系列之一：HTTPS</a></p>\n<p><a href=\"http://www.90159.com/2015/08/10/ios-block-basic-article/\" target=\"_blank\" rel=\"noopener\">block基础篇</a></p>\n<p><a href=\"http://www.90159.com/2015/08/04/ios-block-ultimate/\" target=\"_blank\" rel=\"noopener\">block终极篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/0b0d9b1f1f19\" target=\"_blank\" rel=\"noopener\">关于iOS多线程，你看我就够了</a></p>\n<h2 id=\"Objective-C-Run-time\"><a href=\"#Objective-C-Run-time\" class=\"headerlink\" title=\"Objective-C Run time\"></a>Objective-C Run time</h2><p><a href=\"http://www.jianshu.com/p/425a39d43d16?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"noopener\">轻松学习之三——IMP指针的作用</a></p>\n<p><a href=\"http://www.jianshu.com/p/d39f7d22db6c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">轻松学习之二——iOS利用Runtime自定义控制器POP手势动画</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206641670&amp;idx=1&amp;sn=3fbc0070451d33b4c87d0da616ead22d#rd\" target=\"_blank\" rel=\"noopener\">Cocoa Runtime系统知识整理</a></p>\n<p><a href=\"http://blog.cocoabit.com/2014-10-06-yi-li-jie-objctive-c-runtime/\" target=\"_blank\" rel=\"noopener\">理解 Objective-C Runtime</a></p>\n<p><a href=\"http://www.jianshu.com/p/41735c66dccb\" target=\"_blank\" rel=\"noopener\">Objective-C isa 指针 与 runtime 机制</a></p>\n<p><a href=\"http://tech.glowing.com/cn/objective-c-runtime/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime</a></p>\n<p><a href=\"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime</a></p>\n<p><a href=\"http://www.jianshu.com/p/25a319aee33d\" target=\"_blank\" rel=\"noopener\">Objective-C特性：Runtime</a></p>\n<h2 id=\"项目结构经验\"><a href=\"#项目结构经验\" class=\"headerlink\" title=\"项目结构经验\"></a>项目结构经验</h2><p><a href=\"http://www.jianshu.com/p/77a948bcbc38\" target=\"_blank\" rel=\"noopener\">iOS 项目的目录结构能看出你的开发经验</a></p>\n<p><a href=\"https://github.com/makeLaugh/TWAPP\" target=\"_blank\" rel=\"noopener\">iOS项目架构探索</a></p>\n<p><a href=\"http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html\" target=\"_blank\" rel=\"noopener\">iOS应用架构谈系列</a></p>\n<h2 id=\"学习UI\"><a href=\"#学习UI\" class=\"headerlink\" title=\"学习UI\"></a>学习UI</h2><p><a href=\"http://segmentfault.com/a/1190000002412930\" target=\"_blank\" rel=\"noopener\">iOS组件之UIScrollView详解</a></p>\n<p><a href=\"http://tech.glowing.com/cn/practice-in-uiscrollview/\" target=\"_blank\" rel=\"noopener\">UIScrollView 实践经验</a></p>\n<p><a href=\"https://github.com/icepy/Awsome-Apple-Develop-Guide\" target=\"_blank\" rel=\"noopener\">参考原文</a></p>\n","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"iOS","path":"api/tags/iOS.json"},{"name":"汇总","path":"api/tags/汇总.json"},{"name":"资源","path":"api/tags/资源.json"}]}]}