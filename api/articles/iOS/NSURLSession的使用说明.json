{"title":"NSURLSession的使用说明","slug":"iOS/NSURLSession的使用说明","date":"2017-09-08T18:48:43.000Z","updated":"2017-09-08T18:50:27.000Z","comments":true,"path":"api/articles/iOS/NSURLSession的使用说明.json","excerpt":null,"covers":["https://www.objccn.io/images/issues/issue-5/NSURLSession.png"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>iOS 7 和 Mac OS X 10.9 Mavericks 中一个显著的变化就是对 Foundation URL 加载系统的彻底重构。</p>\n<p>现在已经有人在深入苹果的网络层基础架构的地方做研究了，所以我想是时候来分享一些对于我对于这些新的 API 的看法和心得了，新的 API 将如何影响我们编写程序，以及它们对于 API 设计理念的影响。</p>\n<h2 id=\"NSURLConnection机制\"><a href=\"#NSURLConnection机制\" class=\"headerlink\" title=\"NSURLConnection机制\"></a>NSURLConnection机制</h2><p><code>NSURLConnection</code> 作为 Core Foundation / CFNetwork 框架的 API 之上的一个抽象，在 2003 年，随着第一版的 Safari 的发布就发布了。<code>NSURLConnection</code> 这个名字，实际上是指代的 Foundation 框架的 URL 加载系统中一系列有关联的组件：<code>NSURLRequest</code>、<code>NSURLResponse</code>、<code>NSURLProtocol</code>、 <code>NSURLCache</code>、 <code>NSHTTPCookieStorage</code>、<code>NSURLCredentialStorage</code> 以及同名类 <code>NSURLConnection</code>。</p>\n<p><code>NSURLRequest</code> 被传递给 <code>NSURLConnection</code>。被委托对象（遵守以前的非正式协议 <code>&lt;NSURLConnectionDelegate&gt;</code> 和 <code>&lt;NSURLConnectionDataDelegate&gt;</code>）异步地返回一个 <code>NSURLResponse</code> 以及包含服务器返回信息的 <code>NSData</code>。</p>\n<h3 id=\"缓存策略\"><a href=\"#缓存策略\" class=\"headerlink\" title=\"缓存策略\"></a>缓存策略</h3><p>在一个请求被发送到服务器之前，系统会先查询共享的缓存信息，然后根据<strong>策略（policy）</strong>以及<strong>可用性（availability）</strong>的不同，一个已经被缓存的响应可能会被立即返回。如果没有缓存的响应可用，则这个请求将根据我们指定的策略来缓存它的响应以便将来的请求可以使用。</p>\n<h3 id=\"鉴权查询\"><a href=\"#鉴权查询\" class=\"headerlink\" title=\"鉴权查询\"></a>鉴权查询</h3><p>在把请求发送给服务器的过程中，服务器可能会发出<strong>鉴权查询（authentication challenge）</strong>，这可以由共享的 cookie 或<strong>机密存储（credential storage）</strong>来自动响应，或者由被委托对象来响应。发送中的请求也可以被注册的 <code>NSURLProtocol</code> 对象所拦截，以便在必要的时候无缝地改变其加载行为。</p>\n<p>不管怎样，<code>NSURLConnection</code> 作为网络基础架构，已经服务了成千上万的 iOS 和 Mac OS 程序，并且做的还算相当不错。但是这些年，一些用例——尤其是在 iPhone 和 iPad 上面——已经对 <code>NSURLConnection</code> 的几个核心概念提出了挑战，让苹果有理由对它进行重构。</p>\n<p>在 2013 的 WWDC 上，苹果推出了 <code>NSURLConnection</code> 的继任者：<code>NSURLSession</code>。</p>\n<hr>\n<h2 id=\"NSURLSession成员\"><a href=\"#NSURLSession成员\" class=\"headerlink\" title=\"NSURLSession成员\"></a>NSURLSession成员</h2><p>和 <code>NSURLConnection</code> 一样，<code>NSURLSession</code> 指的也不仅是同名类 <code>NSURLSession</code>，还包括一系列相互关联的类。<code>NSURLSession</code> 包括了与之前相同的组件，<code>NSURLRequest</code> 与 <code>NSURLCache</code>，但是把 <code>NSURLConnection</code> 替换成了 <code>NSURLSession</code>、<code>NSURLSessionConfiguration</code> 以及 <code>NSURLSessionTask</code> 的 3 个子类：<code>NSURLSessionDataTask</code>，<code>NSURLSessionUploadTask</code>，<code>NSURLSessionDownloadTask</code>。</p>\n<ol>\n<li>NSURLSessionConfiguration可配置性初始化<br>与 <code>NSURLConnection</code> 相比，<code>NSURLsession</code> 最直接的改进就是可以配置每个 session 的缓存，协议，cookie，以及<strong>证书策略（credential policy）</strong>，甚至跨程序共享这些信息。这将允许程序和网络基础框架之间相互独立，不会发生干扰。每个 <code>NSURLSession</code> 对象都由一个 <code>NSURLSessionConfiguration</code> 对象来进行初始化，后者指定了刚才提到的那些策略以及一些用来增强移动设备上性能的新选项。</li>\n<li>抽象类NSURLSessionTask数据加载<br><code>NSURLSession</code> 中另一大块就是 session task。它负责处理数据的加载以及文件和数据在客户端与服务端之间的上传和下载。<code>NSURLSessionTask</code> 与 <code>NSURLConnection</code> 最大的相似之处在于它也负责数据的加载，最大的不同之处在于所有的 task 共享其创造者 <code>NSURLSession</code> 这一<strong>公共委托者（common delegate）</strong>。</li>\n</ol>\n<p>我们先来深入探讨 task，过后再来讨论 <code>NSURLSessionConfiguration</code>。</p>\n<h3 id=\"NSURLSessionTask\"><a href=\"#NSURLSessionTask\" class=\"headerlink\" title=\"NSURLSessionTask\"></a>NSURLSessionTask</h3><p><code>NSURLsessionTask</code> 是一个抽象类，其下有 3 个实体子类封装了现代程序三个最基本的网络任务：</p>\n<ol>\n<li><code>NSURLSessionDataTask</code>：加载数据，当加载任务完成时，它会返回相关联的数据，比如 JSON 或者 XML</li>\n<li><code>NSURLSessionUploadTask</code>：上传文件，当上传任务完成时，也会有上传相关数据返回，所以继承自 <code>NSURLSessionDataTask</code>。</li>\n<li><code>NSURLSessionDownloadTask</code>：下载文件，当下载任务结束时，它会返回已下载文件的一个临时的文件路径。</li>\n</ol>\n<p><img alt=\"NSURLSessionTask class diagram\" src=\"https://www.objccn.io/images/issues/issue-5/NSURLSession.png\" width=\"612\" height=\"294\"></p>\n<p>所有的 task 都是可以取消，暂停或者恢复的。当一个 download task 取消时，可以通过选项来创建一个<strong>恢复数据（resume data）</strong>，然后可以传递给下一次新创建的 download task，以便继续之前的下载。</p>\n<h4 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h4><p>不同于直接使用 <code>alloc-init</code> 初始化方法，task 是由一个 <code>NSURLSession</code> 创建的。每个 task 的构造方法都对应有或者没有 <code>completionHandler</code> 这个 block 的两个版本:</p>\n<ol>\n<li>block回调构造方式: <code>–dataTaskWithRequest:completionHandler:</code><br>通过指定 <code>completionHandler</code> 这个 block 将创建一个隐式的 delegate，来替代该 task 原来的 delegate——session。</li>\n<li>代理回调构造方式：<code>–dataTaskWithRequest:</code><br>对于需要 <code>override</code> 原有 session task 的 delegate 的默认行为的情况,使用代理回调</li>\n</ol>\n<p>这里不会立即运行 task，而是将该 task 对象先返回，允许我们进一步的配置，然后可以使用 <code>resume</code> 方法来让它开始运行。</p>\n<h5 id=\"数据加载工厂\"><a href=\"#数据加载工厂\" class=\"headerlink\" title=\"数据加载工厂\"></a>数据加载工厂</h5><p>Data task 可以通过 <code>NSURL</code> 或 <code>NSURLRequest</code> 创建（使用前者相当于是使用一个对于该 URL 进行标准 <code>GET</code> 请求的 <code>NSURLRequest</code>，这是一种快捷方法）：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *URL = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://example.com\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:URL];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSURLSession</span> *session = [<span class=\"built_in\">NSURLSession</span> sharedSession];</span><br><span class=\"line\"><span class=\"built_in\">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request</span><br><span class=\"line\">completionHandler:</span><br><span class=\"line\">^(<span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[task resume];</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"数据上传工厂\"><a href=\"#数据上传工厂\" class=\"headerlink\" title=\"数据上传工厂\"></a>数据上传工厂</h5><p>Upload task 的创建需要使用一个 request，另外加上一个要上传的 <code>NSData</code> 对象或者是一个本地文件的路径对应的 <code>NSURL</code>：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *URL = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://example.com/upload\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:URL];</span><br><span class=\"line\"><span class=\"built_in\">NSData</span> *data = ...;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSURLSession</span> *session = [<span class=\"built_in\">NSURLSession</span> sharedSession];</span><br><span class=\"line\"><span class=\"built_in\">NSURLSessionUploadTask</span> *uploadTask = [session uploadTaskWithRequest:request</span><br><span class=\"line\">fromData:data</span><br><span class=\"line\">completionHandler:</span><br><span class=\"line\">^(<span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[uploadTask resume];</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"数据下载工厂\"><a href=\"#数据下载工厂\" class=\"headerlink\" title=\"数据下载工厂\"></a>数据下载工厂</h5><p>Download task 也需要一个 request，不同之处在于 <code>completionHandler</code> 这个 block。Data task 和 upload task 会在任务完成时一次性返回，但是 Download task 是将数据一点点地写入本地的临时文件。所以在 <code>completionHandler</code> 这个 block 里，我们需要把文件从一个临时地址移动到一个永久的地址保存起来：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *URL = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://example.com/file.zip\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:URL];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSURLSession</span> *session = [<span class=\"built_in\">NSURLSession</span> sharedSession];</span><br><span class=\"line\"><span class=\"built_in\">NSURLSessionDownloadTask</span> *downloadTask = [session downloadTaskWithRequest:request</span><br><span class=\"line\">completionHandler:</span><br><span class=\"line\">^(<span class=\"built_in\">NSURL</span> *location, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *documentsPath = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>) firstObject];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *documentsDirectoryURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:documentsPath];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *newFileLocation = [documentsDirectoryURL URLByAppendingPathComponent:[[response URL] lastPathComponent]];</span><br><span class=\"line\">[[<span class=\"built_in\">NSFileManager</span> defaultManager] copyItemAtURL:location toURL:newFileLocation error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[downloadTask resume];</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><span class=\"secondary radius label\">编者注</span> 原文中这块代码以及上文的表述中存有一些问题，详见这个 <a href=\"https://github.com/objcio/articles/issues/24\" target=\"_blank\" rel=\"noopener\">issue</a>，本文已进行更正，如果您有不同意见，欢迎在 <a href=\"https://github.com/objccn/articles\" target=\"_blank\" rel=\"noopener\">Github</a> 上给我们反馈。</p>\n</blockquote>\n<h4 id=\"NSURLSession-的-delegate-方法\"><a href=\"#NSURLSession-的-delegate-方法\" class=\"headerlink\" title=\"NSURLSession 的 delegate 方法\"></a>NSURLSession 的 delegate 方法</h4><p><code>NSURLSession</code> 的 delegate 方法是 <code>NSURLConnection</code> 的演化的十年中对于 ad-hoc 模式的一个显著改善。您可以查看这个<a href=\"https://gist.github.com/floriankugler/6870499\" target=\"_blank\" rel=\"noopener\">映射表</a>来进行一个完整的概览。</p>\n<h5 id=\"连接层-任务层代理\"><a href=\"#连接层-任务层代理\" class=\"headerlink\" title=\"连接层/任务层代理\"></a>连接层/任务层代理</h5><p><code>NSURLSession</code> 既拥有 seesion 的 delegate 方法，又拥有 task 的 delegate 方法用来处理鉴权查询。</p>\n<ol>\n<li>session 的 delegate 方法处理连接层的问题：诸如服务器信任，客户端证书的评估，<a href=\"http://en.wikipedia.org/wiki/NTLM\" target=\"_blank\" rel=\"noopener\">NTLM</a> 和 <a href=\"http://zh.wikipedia.org/wiki/Kerberos\" target=\"_blank\" rel=\"noopener\">Kerberos</a> 协议这类问题。</li>\n<li>task 的 delegate 处理网络请求为基础的问题：如 Basic，Digest，以及<strong>代理身份验证（Proxy authentication）</strong>等。</li>\n<li>网络请求结束代理<br>在 <code>NSURLConnection</code> 中两个delegate方法：<br>数据加载完成：<code>NSURLConnectionDataDelegate</code> 中的 <code>-connectionDidFinishLoading:</code><br>网络连接失败： <code>NSURLConnectionDelegate</code> 中的 <code>-connection:didFailWithError:</code>，<br>在 <code>NSURLSession</code> 中改为一个 delegate 方法：<ol>\n<li><code>NSURLSessionTaskDelegate</code> 的 <code>-URLSession:task:didCompleteWithError:</code></li>\n<li><code>NSURLSession</code> 中表示传输多少字节的参数类型现在改为 <code>int64_t</code>，以前在 <code>NSURLConnection</code> 中相应的参数的类型是 <code>long long</code>。</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"block参数回调代理模式\"><a href=\"#block参数回调代理模式\" class=\"headerlink\" title=\"block参数回调代理模式\"></a>block参数回调代理模式</h5><p><code>NSURLSession</code> 给 Foundation 框架引入了一种全新的模式：即 代理方法中以<code>completionHandler:</code>  这种block 作为参数的方式。</p>\n<ol>\n<li>这种模式允许 delegate 方法可以安全地在主线程与运行，而不会阻塞主线程；</li>\n<li>Delgate 只需要简单地调用 <code>dispatch_async</code> 就可以切换到后台进行相关的操作，然后在操作完成时调用 <code>completionHandler</code> 即可。</li>\n<li>它还可以有效地拥有多个返回值，而不需要我们使用笨拙的参数指针。</li>\n</ol>\n<p>以 <code>NSURLSessionTaskDelegate</code>代理中的方法为例：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-URLSession:task:didReceiveChallenge:completionHandler:</span><br></pre></td></tr></table></figure></p>\n<p><code>completionHandler</code> 接受的两个参数：<br>参数一：<code>NSURLSessionAuthChallengeDisposition</code>:鉴权查询的策略<br>参数二：<code>NSURLCredential</code>:证书（仅当第一个参数——应对鉴权查询的策略为使用证书，即 <code>NSURLSessionAuthChallengeUseCredential</code> 时有效，否则该参数为 <code>NULL</code>）。</p>\n<blockquote>\n<p>想要查看更多关于 session task 的信息，可以查看 <a href=\"http://asciiwwdc.com/2013/sessions/705\" target=\"_blank\" rel=\"noopener\">WWDC Session 705: “What’s New in Foundation Networking”</a></p>\n</blockquote>\n<h3 id=\"NSURLSessionConfiguration\"><a href=\"#NSURLSessionConfiguration\" class=\"headerlink\" title=\"NSURLSessionConfiguration\"></a>NSURLSessionConfiguration</h3><p><code>NSURLSessionConfiguration</code> 对象用于对 <code>NSURLSession</code> 对象进行初始化。</p>\n<ol>\n<li>配置开发灵活性<br><code>NSURLSessionConfiguration</code> 扩充了 <code>NSMutableURLRequest</code> 所提供的<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSMutableURLRequest_Class/Reference/Reference.html\" target=\"_blank\" rel=\"noopener\">网络请求层的设置选项</a>，从指定可用网络，到 cookie，安全性，缓存策略，再到使用自定义协议，启动事件的设置，以及用于移动设备优化的几个新属性，你会发现使用 <code>NSURLSessionConfiguration</code> 可以找到几乎任何你想要进行配置的选项，提供给我们相当大的灵活性和控制权。</li>\n<li>配置加载机制<br><code>NSURLSession</code> 在初始化时会把配置它的 <code>NSURLSessionConfiguration</code> 对象进行一次 copy，并保存到自己的 <code>configuration</code> 属性中，而且这个属性是只读的。因此之后再修改最初配置 session 的那个 configuration 对象对于 session 是没有影响的。也就是说，configuration 只在初始化时被读取一次，之后都是不会变化的。</li>\n</ol>\n<h4 id=\"三个配置类工厂方法\"><a href=\"#三个配置类工厂方法\" class=\"headerlink\" title=\"三个配置类工厂方法\"></a>三个配置类工厂方法</h4><p>针对<code>NSURLSession</code> 不同的使用场景，如下三个配置类方法：</p>\n<ol>\n<li><code>+defaultSessionConfiguration</code>： 返回一个标准的 configuration，这个配置实际上与 <code>NSURLConnection</code> 的<strong>网络堆栈（networking stack）</strong>是一样的，具有相同的共享 <code>NSHTTPCookieStorage</code>，共享 <code>NSURLCache</code> 和共享 <code>NSURLCredentialStorage</code>。</li>\n<li><code>+ephemeralSessionConfiguration</code>： 返回一个预设配置，这个配置中不会对缓存，Cookie 和证书进行持久性的存储。这对于实现像秘密浏览这种功能来说是很理想的。</li>\n<li><code>+backgroundSessionConfiguration:(NSString *)identifier</code> 的独特之处在于，它会创建一个<em>后台 session</em>。后台 session 不同于常规的，普通的 session，它甚至可以在应用程序挂起，退出或者崩溃的情况下运行上传和下载任务。初始化时指定的标识符，被用于向任何可能在进程外恢复后台传输的<strong>守护进程（daemon）</strong>提供上下文。</li>\n</ol>\n<p>想要查看更多关于后台 session 的信息，可以查看 <a href=\"http://asciiwwdc.com/2013/sessions/204\" target=\"_blank\" rel=\"noopener\">WWDC Session 204: “What’s New with Multitasking”</a></p>\n<h4 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h4><p><code>NSURLSessionConfiguration</code> 拥有 20 个配置属性。熟练掌握这些配置属性的用处，可以让应用程序充分地利用其网络环境。</p>\n<h5 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h5><ol>\n<li><p><code>HTTPAdditionalHeaders</code>: 指定了一组默认的可以设置<strong>出站请求（outbound request）</strong>的数据头。这对于跨 session 共享信息，如内容类型，语言，用户代理和身份认证，是很有用的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *userPasswordString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@:%@\"</span>, user, password];</span><br><span class=\"line\"><span class=\"built_in\">NSData</span> * userPasswordData = [userPasswordString dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *base64EncodedCredential = [userPasswordData base64EncodedStringWithOptions:<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *authString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Basic %@\"</span>, base64EncodedCredential];</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *userAgentString = <span class=\"string\">@\"AppName/com.example.app (iPhone 5s; iOS 7.0.2; Scale/2.0)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">configuration.HTTPAdditionalHeaders = @&#123;<span class=\"string\">@\"Accept\"</span>: <span class=\"string\">@\"application/json\"</span>,</span><br><span class=\"line\"><span class=\"string\">@\"Accept-Language\"</span>: <span class=\"string\">@\"en\"</span>,</span><br><span class=\"line\"><span class=\"string\">@\"Authorization\"</span>: authString,</span><br><span class=\"line\"><span class=\"string\">@\"User-Agent\"</span>: userAgentString&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>networkServiceType</code>: 对标准的网络流量，网络电话，语音，视频，以及由一个后台进程使用的流量进行了区分。大多数应用程序都不需要设置这个。</p>\n</li>\n<li><code>allowsCellularAccess</code> 和 <code>discretionary</code> 被用于节省通过蜂窝网络连接的带宽。对于后台传输的情况，推荐大家使用 <code>discretionary</code> 这个属性，而不是 <code>allowsCellularAccess</code>，因为前者会把 WiFi 和电源的可用性考虑在内。</li>\n<li><code>timeoutIntervalForRequest</code> 和 <code>timeoutIntervalForResource</code> 分别指定了对于请求和资源的超时间隔。许多开发人员试图使用 <code>timeoutInterval</code> 去限制发送请求的总时间，但其实它真正的含义是：<strong>分组（packet）</strong>之间的时间。实际上我们应该使用 <code>timeoutIntervalForResource</code> 来规定整体超时的总时间，但应该只将其用于后台传输，而不是用户实际上可能想要去等待的任何东西。</li>\n<li><code>HTTPMaximumConnectionsPerHost</code>: 是 Foundation 框架中 URL 加载系统的一个新的配置选项。它曾经被 <code>NSURLConnection</code> 用于管理私有的连接池。现在有了 <code>NSURLSession</code>，开发者可以在需要时限制连接到特定主机的数量。</li>\n<li><code>HTTPShouldUsePipelining</code>: 这个属性在 <code>NSMutableURLRequest</code> 下也有，它可以被用于开启 <strong>HTTP 管线化（<a href=\"http://en.wikipedia.org/wiki/HTTP_pipelining\" target=\"_blank\" rel=\"noopener\">HTTP pipelining</a>）</strong>，这可以显着降低请求的加载时间，但是由于没有被服务器广泛支持，默认是禁用的。</li>\n<li><code>sessionSendsLaunchEvents</code>: 是另一个新的属性，该属性指定该 session 是否应该从后台启动。</li>\n<li><code>connectionProxyDictionary</code>: 指定了 session 连接中的代理服务器。同样地，大多数面向消费者的应用程序都不需要代理，所以基本上不需要配置这个属性。</li>\n</ol>\n<blockquote>\n<p>关于连接代理的更多信息可以在 <a href=\"https://developer.apple.com/library/mac/documentation/CoreFoundation/Reference/CFProxySupport/Reference/reference.html\" target=\"_blank\" rel=\"noopener\"><code>CFProxySupport</code> Reference</a> 找到。</p>\n</blockquote>\n<h5 id=\"Cookie-策略\"><a href=\"#Cookie-策略\" class=\"headerlink\" title=\"Cookie 策略\"></a>Cookie 策略</h5><ol>\n<li><code>HTTPCookieStorage</code>: 存储了 session 所使用的 cookie。默认情况下会使用 <code>NSHTTPCookieShorage</code> 的 <code>+sharedHTTPCookieStorage</code> 这个单例对象，这与 <code>NSURLConnection</code> 是相同的。</li>\n<li><code>HTTPCookieAcceptPolicy</code>: 决定了什么情况下 session 应该接受从服务器发出的 cookie。</li>\n<li><code>HTTPShouldSetCookies</code>: 指定了请求是否应该使用 session 存储的 cookie，即 <code>HTTPCookieSorage</code> 属性的值。</li>\n</ol>\n<h5 id=\"安全策略\"><a href=\"#安全策略\" class=\"headerlink\" title=\"安全策略\"></a>安全策略</h5><ol>\n<li><code>URLCredentialStorage</code>: 存储了 session 所使用的证书。默认情况下会使用 <code>NSURLCredentialStorage</code> 的 <code>+sharedCredentialStorage</code> 这个单例对象，这与 <code>NSURLConnection</code> 是相同的。</li>\n<li><code>TLSMaximumSupportedProtocol</code> 和 <code>TLSMinimumSupportedProtocol</code> 确定 session 是否支持 <a href=\"http://zh.wikipedia.org/wiki/安全套接层\" target=\"_blank\" rel=\"noopener\">SSL 协议</a>。</li>\n</ol>\n<h5 id=\"缓存策略-1\"><a href=\"#缓存策略-1\" class=\"headerlink\" title=\"缓存策略\"></a>缓存策略</h5><ol>\n<li><code>URLCache</code> : 是 session 使用的缓存。默认情况下会使用 <code>NSURLCache</code> 的 <code>+sharedURLCache</code> 这个单例对象，这与 <code>NSURLConnection</code> 是相同的。</li>\n<li><code>requestCachePolicy</code> : 指定了一个请求的缓存响应应该在什么时候返回。这相当于 <code>NSURLRequest</code> 的 <code>-cachePolicy</code> 方法。</li>\n</ol>\n<h5 id=\"自定义协议\"><a href=\"#自定义协议\" class=\"headerlink\" title=\"自定义协议\"></a>自定义协议</h5><ol>\n<li><code>protocolClasses</code>: 用来配置特定某个 session 所使用的自定义协议（该协议是 <code>NSURLProtocol</code> 的子类）的数组。</li>\n</ol>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>iOS 7 和 Mac OS X 10.9 Mavericks 中 URL 加载系统的变化，是对 <code>NSURLConnection</code> 进行深思熟虑后的一个自然而然的进化。总体而言，苹果的 Foundation 框架团队干了一件令人钦佩的的工作，他们研究并预测了移动开发者现有的和新兴的用例，创造了能够满足日常任务而且非常好用的 API 。</p>\n<p>尽管在这个体系结构中，某些决定对于可组合性和可扩展性而言是一种倒退，但是 <code>NSURLSession</code> 仍然是实现更高级别网络功能的一个强大的基础框架。</p>\n<hr>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"API","path":"api/categories/API.json"}],"tags":[]}