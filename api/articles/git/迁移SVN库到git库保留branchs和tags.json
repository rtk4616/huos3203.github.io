{"title":"迁移SVN库到git库保留branchs和tags","slug":"git/迁移SVN库到git库保留branchs和tags","date":"2017-01-18T12:21:46.000Z","updated":"2017-02-17T16:28:51.000Z","comments":true,"path":"api/articles/git/迁移SVN库到git库保留branchs和tags.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><p>SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the de facto standard. Having helped many clients migrate from SVN to Git, here are my notes for a pain-free transition that will preserve the tags and branches in your SVN repository.</p>\n<h2 id=\"首先导入一个本地存储库\"><a href=\"#首先导入一个本地存储库\" class=\"headerlink\" title=\"首先导入一个本地存储库\"></a>首先导入一个本地存储库</h2><h3 id=\"在本地创建一个存储库的目录\"><a href=\"#在本地创建一个存储库的目录\" class=\"headerlink\" title=\"在本地创建一个存储库的目录\"></a>在本地创建一个存储库的目录</h3><figure class=\"highlight bash\"><figcaption><span>新建目录</span><a href=\"http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/#import-staging\" target=\"_blank\" rel=\"noopener\">Create a local staging directory</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir staging</span><br><span class=\"line\"><span class=\"built_in\">cd</span> staging</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：staging 可以用任何你喜欢的字符串命名，也可以放在本地的任何目录中。</p>\n</blockquote>\n<h3 id=\"初始化git-svn\"><a href=\"#初始化git-svn\" class=\"headerlink\" title=\"初始化git svn\"></a>初始化git svn</h3><h4 id=\"使用SVN标准库结构初始化\"><a href=\"#使用SVN标准库结构初始化\" class=\"headerlink\" title=\"使用SVN标准库结构初始化\"></a>使用SVN标准库结构初始化</h4><figure class=\"highlight bash\"><figcaption><span>标准初始化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVNRepo_ROOT_URL --stdlayout --prefix=svn/</span><br></pre></td></tr></table></figure>\n<p><code>SVNRepo_ROOT_URL</code>: 这里svn_url是完全限定的URL下的标准目录，其目录下包括三个目录：<code>trunk</code>，<code>branches</code>， <code>tags</code>。<br><code>--prefix</code>: 强烈建议使用<code>svn/</code>作为分支和标签的前缀：设置为 <code>--prefix=svn/</code>. 这样有助于防止Git用户混淆原声的Git分支和标签。</p>\n<h4 id=\"使用SVN自定义库结构初始化\"><a href=\"#使用SVN自定义库结构初始化\" class=\"headerlink\" title=\"使用SVN自定义库结构初始化\"></a>使用SVN自定义库结构初始化</h4><p>使用非标准的svn layout 来新建svn库，即可以根据自己喜好来自定义分支，标签目录：<br><figure class=\"highlight bash\"><figcaption><span>非标准化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVN_URL -T Trunk -b Branches -t Tags --prefix=svn/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><ol>\n<li><code>review</code>命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review the config</span><br></pre></td></tr></table></figure>\n会有以下信息输出：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn-remote.svn.url=svn://svn.example.com</span><br><span class=\"line\">svn-remote.svn.fetch=some/path/trunk:refs/remotes/svn/trunk</span><br><span class=\"line\">svn-remote.svn.tags=some/path/tags/*:refs/remotes/svn/tags/*</span><br></pre></td></tr></table></figure>\n高级用户可以在执行之前，修改相关配置。</li>\n<li><code>git config</code>命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local --list </span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=true</span><br><span class=\"line\">core.bare=false</span><br><span class=\"line\">core.logallrefupdates=true</span><br><span class=\"line\">core.ignorecase=true</span><br><span class=\"line\">core.precomposeunicode=true</span><br><span class=\"line\">svn-remote.svn.url=https://huoshuguang@192.168.85.6/svn/PBBReader_Mac</span><br><span class=\"line\">svn-remote.svn.fetch=trunk:refs/remotes/origin/trunk</span><br><span class=\"line\">svn-remote.svn.branches=branches/*:refs/remotes/origin/*</span><br><span class=\"line\">svn-remote.svn.tags=tags/*:refs/remotes/origin/tags/*</span><br><span class=\"line\">remote.PBBReader.url=https://git.oschina.net/huosan/PBBReader.git</span><br><span class=\"line\">remote.PBBReader.fetch=+refs/heads/*:refs/remotes/PBBReader/*</span><br><span class=\"line\">branch.master.remote=PBBReader</span><br><span class=\"line\">branch.master.merge=refs/heads/master</span><br><span class=\"line\">remote.server.url=https://server.local/git/PBBReader.git</span><br><span class=\"line\">remote.server.fetch=+refs/heads/*:refs/remotes/server/*</span><br><span class=\"line\">branch.v34.remote=PBBReader</span><br><span class=\"line\">branch.v34.merge=refs/heads/v28</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"从远程SVN服务器拉取代码到新建的本地存储库\"><a href=\"#从远程SVN服务器拉取代码到新建的本地存储库\" class=\"headerlink\" title=\"从远程SVN服务器拉取代码到新建的本地存储库\"></a>从远程SVN服务器拉取代码到新建的本地存储库</h3><figure class=\"highlight bash\"><figcaption><span>拉取</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看本地库状态\"><a href=\"#查看本地库状态\" class=\"headerlink\" title=\"查看本地库状态\"></a>查看本地库状态</h2><h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><figure class=\"highlight bash\"><figcaption><span>status</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight bash\"><figcaption><span>内容</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看分支信息\"><a href=\"#查看分支信息\" class=\"headerlink\" title=\"查看分支信息\"></a>查看分支信息</h3><figure class=\"highlight bash\"><figcaption><span>branch</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* master</span><br><span class=\"line\">remotes/svn/tags/0.1.0</span><br><span class=\"line\">remotes/svn/trunk</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：SVN标记和分支（在这种情况下，没有任何分支机构）仅作为远程引用存在。</p>\n</blockquote>\n<h2 id=\"SVN分支和标签转为本地git仓库中的标签和分支\"><a href=\"#SVN分支和标签转为本地git仓库中的标签和分支\" class=\"headerlink\" title=\"SVN分支和标签转为本地git仓库中的标签和分支\"></a>SVN分支和标签转为本地git仓库中的标签和分支</h2><h3 id=\"SVN分支迁移\"><a href=\"#SVN分支迁移\" class=\"headerlink\" title=\"SVN分支迁移\"></a>SVN分支迁移</h3><p>把远程svn分支转换为本地git仓库中的分支：<br><figure class=\"highlight bash\"><figcaption><span>分支转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"branches/\"</span> | sed <span class=\"string\">'s/ branches\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$branch</span> refs/remotes/<span class=\"variable\">$branch</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"SVN标签迁移\"><a href=\"#SVN标签迁移\" class=\"headerlink\" title=\"SVN标签迁移\"></a>SVN标签迁移</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的标签 :<figure class=\"highlight bash\"><figcaption><span>tags转换tags</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git tag -a -m<span class=\"string\">\"Converting SVN tags\"</span> <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"SVN标签转为本地git分支\"><a href=\"#SVN标签转为本地git分支\" class=\"headerlink\" title=\"SVN标签转为本地git分支\"></a>SVN标签转为本地git分支</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的分支:<figure class=\"highlight bash\"><figcaption><span>标签转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"在本地测试git命令push和clone操作\"><a href=\"#在本地测试git命令push和clone操作\" class=\"headerlink\" title=\"在本地测试git命令push和clone操作\"></a>在本地测试git命令push和clone操作</h2><p>在推送到正式远程库之前，可以通过向本地git库中推送和clone操作。</p>\n<h3 id=\"创建一个临时的git库，用于测试push和clone测试\"><a href=\"#创建一个临时的git库，用于测试push和clone测试\" class=\"headerlink\" title=\"创建一个临时的git库，用于测试push和clone测试\"></a>创建一个临时的git库，用于测试push和clone测试</h3><p>在git中的说法，<code>bare</code>库是一个不存在工作空间备份的库。<br><figure class=\"highlight bash\"><figcaption><span>bare创建</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure><br>这样，在<code>~/test</code>就生成了一个<code>bare</code>git库。</p>\n<h3 id=\"push-测试\"><a href=\"#push-测试\" class=\"headerlink\" title=\"push 测试\"></a>push 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add <span class=\"built_in\">test</span> `~/<span class=\"built_in\">test</span>`</span><br><span class=\"line\">git push --all <span class=\"built_in\">test</span></span><br><span class=\"line\">git push --tags <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>把<code>~/test</code>的放在反引号中，反引号在命令行中会<code>~</code>自动补全为一个绝对路径。如果你给一个绝对路径或URL，可以省略反引号。<br>尽管它的名字，<code>--all</code>选项不推送<code>tags</code>，所以需要对标签单独push操作。</p>\n<h3 id=\"clone-测试\"><a href=\"#clone-测试\" class=\"headerlink\" title=\"clone 测试\"></a>clone 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir aclone</span><br><span class=\"line\"><span class=\"built_in\">cd</span> aclone</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> ~/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>There should now be a clone with a working copy in ~/aclone/test.<br>在<code>~/aclone/test</code>目录中将会clone出一个工作空间备份，检查确保一切OK，这样就可以向正式服务器上推送。</p>\n<h3 id=\"Push到正式git库中\"><a href=\"#Push到正式git库中\" class=\"headerlink\" title=\"Push到正式git库中\"></a>Push到正式git库中</h3><p>如果你是正式库服务器（github，coding）的管理员，为本地git库设置一个空的git库。<br>以<code>Unfuddle</code>为例,路径如下：<br><code>git@example.unfuddle.com:example/blah.git</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add unfuddle REAL_HOST_URL</span><br><span class=\"line\">git push --all unfuddle</span><br><span class=\"line\">git push --tags unfuddle</span><br></pre></td></tr></table></figure><br>在上面的例子中，制定了远程名：<code>unfuddle</code>而不是默认的<code>origin</code>。当然，你可以使用任何你喜欢的名字。</p>\n<h2 id=\"清理操作\"><a href=\"#清理操作\" class=\"headerlink\" title=\"清理操作\"></a>清理操作</h2><h3 id=\"删除临时git库\"><a href=\"#删除临时git库\" class=\"headerlink\" title=\"删除临时git库\"></a>删除临时git库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote rm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p><code>staging</code>库忽略<code>test</code>远程仓库.</p>\n<h3 id=\"清除clone生成的库\"><a href=\"#清除clone生成的库\" class=\"headerlink\" title=\"清除clone生成的库\"></a>清除clone生成的库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf aclone</span><br><span class=\"line\">rm -rf <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Either-keep-or-delete-the-staging-repo\"><a href=\"#Either-keep-or-delete-the-staging-repo\" class=\"headerlink\" title=\"Either keep or delete the staging repo\"></a>Either keep or delete the staging repo</h3><ol>\n<li>如果需要Git和SVN之间频繁交互，建议保留<code>staging</code>库这会节省你非常耗时的初始化：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure></li>\n<li>如果你确信svn是报废的，你可以删除：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf staging</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"题外小贴士\"><a href=\"#题外小贴士\" class=\"headerlink\" title=\"题外小贴士\"></a>题外小贴士</h1><p>在局域网内访问server搭建服务器提供的git服务：<br><figure class=\"highlight bash\"><figcaption><span>小贴士</span><a href=\"https://confluence.atlassian.com/fishkb/unable-to-clone-git-repository-due-to-self-signed-certificate-376838977.html\" target=\"_blank\" rel=\"noopener\">SSL证书问题</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://.../git/mupdf.git</span><br><span class=\"line\">错误：fatal: unable to access <span class=\"string\">'https://..../git/mupdf.git/'</span>: SSL certificate problem: Invalid certificate chain</span><br></pre></td></tr></table></figure><br>解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"git","path":"api/categories/git.json"},{"name":"svn","path":"api/categories/svn.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"git","path":"api/tags/git.json"},{"name":"svn","path":"api/tags/svn.json"},{"name":"git-svn","path":"api/tags/git-svn.json"}]}