<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2018-08-31T16:58:22.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thisdeviceisnotcurrentlyonline</title>
    <link href="https://huos3203.github.io/2018/09/01/%E8%B0%83%E8%AF%95/Thisdeviceisnotcurrentlyonline/"/>
    <id>https://huos3203.github.io/2018/09/01/调试/Thisdeviceisnotcurrentlyonline/</id>
    <published>2018-08-31T16:58:22.000Z</published>
    <updated>2018-08-31T16:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://forums.developer.apple.com/thread/16242" target="_blank" rel="noopener">参考</a></p><ol><li>you can restart your device!  then connect your device  to your mac-&gt;open Xcode-&gt;press command + i</li></ol><p>I’ve encountered this issue today. The record button is disabled and the tooltip says “This device is not currently online”. However my iPhone is connecting with my Mac and can be debugged with Xcode without any problem.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>MPMoviePlayerController遇到的坑</title>
    <link href="https://huos3203.github.io/2018/09/01/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/MPMoviePlayerController%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://huos3203.github.io/2018/09/01/个人项目/MPMoviePlayerController遇到的坑/</id>
    <published>2018-08-31T16:58:22.000Z</published>
    <updated>2018-08-31T16:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>[MPMoviePlayerController播放过程中自动暂停的问题]<br>在使用系统播放器MPMoviePlayerController的过程中，会出现播放器自动暂停的情况，有两种解决办法：<a href="https://www.cnblogs.com/elsonpeng/p/5404969.html" target="_blank" rel="noopener">参看</a><br>1.1 <code>在播放开始的时候，设置useApplicationAudioSession ＝ NO;</code><br>1.2 <code>重启手机，也可以恢复</code></li><li><a href="https://stackoverflow.com/questions/3138660/why-does-mpmovieloadstate-have-state-5" target="_blank" rel="noopener">why does MPMovieLoadState have state 5?</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The playState is a bitmask. Any number of bits can be set, such as</span><br><span class="line">MPMovieLoadStatePlaythroughOK | MPMovieLoadStatePlayable</span><br><span class="line">Check for states like this:</span><br><span class="line">MPMovieLoadState state = [playerController loadState];</span><br><span class="line">if( state &amp; MPMovieLoadStatePlaythroughOK ) &#123;</span><br><span class="line">NSLog(@&quot;State is Playthrough OK&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><h4 id="投影不全屏"><a href="#投影不全屏" class="headerlink" title="投影不全屏"></a>投影不全屏</h4><p>现象：投影仪页面未同步现象，全屏查看视频，横屏全屏显示，但投影在大屏的画面没有同步</p><ol><li><p>隔离业务代码，编写demo复现投影问题。<a href="https://github.com/huos3203/ALMoviePlayerController/tree/master/ALMoviePlayerControllerDemo" target="_blank" rel="noopener">ALMoviePlayerControllerGit库</a></p><h5 id="demo问题"><a href="#demo问题" class="headerlink" title="demo问题"></a>demo问题</h5><p>解决办法：<br>注释掉：<code>- (id)initWithContentURL:(NSURL *)url</code>方法。demo正常播放<br>小插曲：遇到<code>Setting device discovery mode to DiscoveryMode_None</code>，排查之后不影响播放。故没有继续研究。。。</p><blockquote><p>教训：必须深入代码联调测试中，本可以通过断点排查，查处url为nil导致demo无法的播放的原因。却长时间纠结在不必要的日志中。</p></blockquote></li><li><p>通过在投影仪上联调测试<code>不影响播放</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VAALMoviePlayerController[7438:3348866] [] &lt;&lt;&lt;&lt; AVOutputDeviceDiscoverySession (FigRouteDiscoverer) &gt;&gt;&gt;&gt; -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl outputDeviceDiscoverySessionDidChangeDiscoveryMode:]: Setting device discovery mode to DiscoveryMode_None (client: VAALMoviePlayerController)</span><br></pre></td></tr></table></figure></li></ol><p>通过百度有两种方式：<br>1.在viewwillapear中添加<code>player=nil</code><br><a href="https://stackoverflow.com/questions/47438401/avplayer-is-not-playing-in-ios-11#" target="_blank" rel="noopener">AVPlayer is not playing in iOS 11</a><br><a href="https://stackoverflow.com/questions/46321860/avplayerviewcontroller-black-screen-when-swiping-on-ios-11" target="_blank" rel="noopener">AVPlayerViewController black screen when swiping on iOS 11</a></p><p>2.将工程设置为<code>arc=YES</code></p><h4 id="MP4音频不同步"><a href="#MP4音频不同步" class="headerlink" title="MP4音频不同步"></a>MP4音频不同步</h4><p>现象：视频播放到待定的时间点，画面卡顿，拖动进度条，声音画面不同步，复现：《视频美国儿童思维导图特训营》第一课：21:00时长复现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Instruments的工具</title>
    <link href="https://huos3203.github.io/2018/09/01/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Instruments%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>https://huos3203.github.io/2018/09/01/调试/使用Instruments的工具/</id>
    <published>2018-08-31T16:58:22.000Z</published>
    <updated>2018-08-31T16:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>检测app内存爆增代码，优化性能<br><a href="https://www.jianshu.com/p/d0e149332380" target="_blank" rel="noopener">Instruments工具使用办法</a><br>整理Demo，列出几种常用instrument的场景。来熟悉具体操作<br><a href="https://gitee.com/leiming97/MemoryProblems-master.git" target="_blank" rel="noopener">demo</a></p><ol><li>集成归档模块代码，测试内存上升问题</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Chisel-LLDB命令插件</title>
    <link href="https://huos3203.github.io/2018/09/01/%E8%B0%83%E8%AF%95/Chisel-LLDB%E5%91%BD%E4%BB%A4%E6%8F%92%E4%BB%B6/"/>
    <id>https://huos3203.github.io/2018/09/01/调试/Chisel-LLDB命令插件/</id>
    <published>2018-08-31T16:20:20.000Z</published>
    <updated>2018-08-31T16:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-facebook-chisel-56d0e0d" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-facebook-chisel-56d0e0d", "facebook", "chisel", "56d0e0d", false);</script><p>LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。(这里有一个关于调试器如何工作的总体的解释。)</p><p>Chisel 为lldb提供了新增的便捷命令，是非常实用的命令。</p><h3 id="pviews"><a href="#pviews" class="headerlink" title="pviews"></a>pviews</h3><p>这个命令可以递归打印所有的view，并能标示层级，相当于 UIView 的私有辅助方法 <code>[view recursiveDescription]</code> 。 善用使用这个功能会让你在调试定位问题时省去很多麻烦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lldb) pviews view</span><br><span class="line">&lt;TestView: 0x18df8070; baseClass = UIControl; frame = (144 9; 126 167); layer = &lt;CALayer: 0x18df8150&gt;&gt;</span><br><span class="line">| &lt;UIView: 0x18df81d0; frame = (0 0; 126 126); userInteractionEnabled = NO; layer = &lt;CALayer: 0x18df8240&gt;&gt;</span><br><span class="line">| &lt;UIImageView: 0x18df8330; frame = (0 0; 126 126); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x18df83b0&gt;&gt;</span><br><span class="line">| &lt;UILabel: 0x18df8460; frame = (0 135; 126 14); text = &apos;haha&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x18df7fb0&gt;&gt;</span><br><span class="line">|    | &lt;_UILabelContentLayer: 0x131a3d50&gt; (layer)</span><br><span class="line">| &lt;UILabel: 0x18df8670; frame = (0 155; 126 12); text = &apos;hahaha&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x18df8730&gt;&gt;</span><br><span class="line">|    | &lt;_UILabelContentLayer: 0x131bea10&gt; (layer)</span><br><span class="line">| &lt;UIImageView: 0x18df88d0; frame = (0 9; 28 27); hidden = YES; opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x18df8ba0&gt;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h3><p>这个命令也是递归打印层级，但是不是view，而是<code>viewController</code>。利用它我们可以对viewController的结构一目了然。 其实苹果在IOS8也默默的添加了 UIViewController 的一个私有辅助方法 <code>[UIViewController _printHierarchy]</code> 同样的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(lldb) pvc</span><br><span class="line">&lt;TabBarController: 0x13772fd0; view = &lt;UILayoutContainerView; 0x151b3a30&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">| &lt;UINavigationController: 0x1602b800; view = &lt;UILayoutContainerView; 0x1b00aca0&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   | &lt;FirstViewController: 0x16029c00; view = &lt;UIView; 0x1b01e1c0&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">| &lt;UINavigationController: 0x138c5200; view = &lt;UILayoutContainerView; 0x1316a080&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   | &lt;SecondViewController: 0x16030400; view = &lt;UIView; 0x2094b370&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   |   | &lt;SecondChildViewController: 0x15af6000; view = &lt;UIView; 0x18d4e650&gt;; frame = (0, 64; 414, 628)&gt;</span><br><span class="line">| &lt;UINavigationController: 0x1383ca00; view = &lt;UILayoutContainerView; 0x13180070&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   | &lt;ThirdViewController: 0x138ddc00; view = &lt;UIView; 0x18df6650&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   |   | &lt;ThirdChild1ViewController: 0x1393fe00; view = &lt;UIView; 0x131ec000&gt;; frame = (0, 0; 414, 672)&gt;</span><br><span class="line">|   |   | &lt;ThirdChild2ViewController: 0x138dce00; view = &lt;UIView; 0x204075a0&gt;; frame = (414, 0; 414, 672)&gt;</span><br><span class="line">|   |   | &lt;ThirdChild3ViewController: 0x138a8e00; view = &lt;UIView; 0x20426250&gt;; frame = (828, 0; 414, 672)&gt;</span><br><span class="line">| &lt;UINavigationController: 0x160eca00; view = &lt;UILayoutContainerView; 0x152f7d90&gt;; frame = (0, 0; 414, 736)&gt;</span><br><span class="line">|   | &lt;FourViewController: 0x13157cc0; view not loaded&gt;</span><br></pre></td></tr></table></figure></p><h3 id="visualize"><a href="#visualize" class="headerlink" title="visualize"></a>visualize</h3><p>这是个很有意思的功能，它可以让你使用Mac的预览打开一个 UIImage, CGImageRef, UIView, 或 CALayer。 这个功能或许可以帮我们用来截图、用来定位一个view的具体内容。 但是在我试用了一下，发现暂时还是只能在模拟器时使用，真机还不行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) visualize imageView</span><br></pre></td></tr></table></figure></p><h3 id="fv-amp-fvc"><a href="#fv-amp-fvc" class="headerlink" title="fv &amp; fvc"></a>fv &amp; fvc</h3><p><code>fv</code> 和 <code>fvc</code> 这两个命令是用来通过类名搜索当前内存中存在的view和viewController实例的命令，支持正则搜索。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lldb) fv scrollView</span><br><span class="line">0x18d3b8c0 UIScrollView</span><br><span class="line">0x137d0c50 UIScrollView</span><br><span class="line">0x131b1580 UIScrollView</span><br><span class="line">0x131b2070 UIScrollView</span><br><span class="line">(lldb) fvc Home</span><br><span class="line">0x1393fe00 HomeFeedsViewController</span><br><span class="line">0x138a8e00 HomeFeedsViewController</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><h3 id="show-amp-hide"><a href="#show-amp-hide" class="headerlink" title="show &amp; hide"></a>show &amp; hide</h3><p>这两个命令用来显示和隐藏一个指定的 UIView . 你甚至不需要Continue Progress. 就可以看到效果。</p><h3 id="mask-umask-border-unborder"><a href="#mask-umask-border-unborder" class="headerlink" title="mask/umask border/unborder"></a>mask/umask border/unborder</h3><p>这两组命令用来标识一个view或layer的位置时用， mask用来在view上覆盖一个半透明的矩形， border可以给view添加边框。<br>但是在我实际使用的过程中mask总是会报错，估计是有bug， 那么mask/unmask 一般不要用好了，用border命令是一样的效果，反正二者的用途都是找到一个对应的view.</p><h3 id="caflush"><a href="#caflush" class="headerlink" title="caflush"></a>caflush</h3><p>这个命令会重新渲染，即可以重新绘制界面， 相当于执行了 [CATransaction flush] 方法，要注意如果在动画过程中执行这个命令，就直接渲染出动画结束的效果。<br>当你想在调试界面颜色、坐标之类的时候，可以直接在控制台修改属性，然后caflush就可以看到效果啦，是不是要比改代码，然后重新build省事多了呢。<br>例, 其中 $122 即是目标UIView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p view</span><br><span class="line">(long) $122 = 140718754142192</span><br><span class="line">(lldb) e (void)[$122 setBackgroundColor:[UIColor greenColor]]</span><br><span class="line">(lldb) caflush</span><br></pre></td></tr></table></figure></p><h3 id="bmessage"><a href="#bmessage" class="headerlink" title="bmessage"></a>bmessage</h3><p>使用场景：我们想在 <code>[MyViewController viewWillAppear:]</code> 里面打断点，但是 <code>MyViewController</code>并没有实现 <code>viewWillAppear:</code> 方法， 以往的作法可能就是在子类中实现下<code>viewWillAppear:</code>，然后打断点，然后<code>rebuild</code>。<br>那么幸好有了 <code>bmessage</code>命令。我们可以不用这样就可以打这个效果的断点：<code>(lldb) bmessage -[MyViewController viewWillAppear:]</code> 上面命令会在其父类的 <code>viewWillAppear:</code>方法中打断点，并添加上了条件：<code>[self isKindOfClass:[MyViewController class]]</code>.</p><p><a href="https://blog.cnbluebox.com/blog/2015/03/05/chisel/" target="_blank" rel="noopener">Chisel-LLDB命令插件，让调试更Easy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>解决Xcode代码高亮提示功能失效</title>
    <link href="https://huos3203.github.io/2018/09/01/xcode/%E8%A7%A3%E5%86%B3Xcode%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD%E5%A4%B1%E6%95%88/"/>
    <id>https://huos3203.github.io/2018/09/01/xcode/解决Xcode代码高亮提示功能失效/</id>
    <published>2018-08-31T16:20:20.000Z</published>
    <updated>2018-08-31T16:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li>打开失效的项目，选择菜单：Xcode-&gt;File-&gt;Project Settings -&gt; Advanced..，<img src="http://p27uwfdhv.bkt.clouddn.com/static/images/137A80890FBC.png?imageMogr2/2/w/800"></li><li>删除图上所示的位置目录，重启xcode。<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3></li><li>cd进入~/Library/Developer/Xcode/DerivedData</li><li>找到你的项目所用的目录（一般以你的项目名开头）</li><li>cd 目录名</li><li>rm -r Index 删除掉你的项目所用的索引文件夹<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3></li><li>退出 Xcode</li><li>重启电脑</li><li>找到 这个 DerivedData 文件夹 删除 (路径: ~/Library/Developer/Xcode/DerivedData)</li><li>删除这个 com.apple.dt.Xcode 文件 (路径: ~/Library/Caches/com.apple.dt.Xcode)</li><li>运行 Xcode  就好了~~<blockquote><p>(1) 原文表示删除 ~/Library/Developer/Xcode/DerivedData下所有的文件，我尝试发现只需要删除当前项目相关的索引文件即可<br>(2)  DerivedData从字面上理解应该是收集到的数据，应该是Xcode针对这个项目缓存的一些数据，不会影响项目本身的完整性</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="xcode" scheme="https://huos3203.github.io/categories/xcode/"/>
    
    
  </entry>
  
  <entry>
    <title>LLDB命令使用</title>
    <link href="https://huos3203.github.io/2018/09/01/%E8%B0%83%E8%AF%95/LLDB%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/09/01/调试/LLDB命令使用/</id>
    <published>2018-08-31T16:20:20.000Z</published>
    <updated>2018-08-31T16:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-width-=" class="hexo-github" style="width: 100%"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-width-=", "huos3203", "width", "=", false);</script><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>最简单命令是 help，它会列举出所有的命令。如果你忘记了一个命令是做什么的，或者想知道更多的话，你可以通过 help <command> 来了解更多细节，例如 help print 或者 help thread。如果你甚至忘记了 help 命令是做什么的，你可以试试 help help。不过你如果知道这么做，那就说明你大概还没有忘光这个命令。</p><h3 id="打印变量"><a href="#打印变量" class="headerlink" title="打印变量"></a>打印变量</h3><p>可以给 print 指定不同的打印格式。它们都是以 <code>print/&lt;fmt&gt;</code> 或者简化的 <code>p/&lt;fmt&gt;</code> 格式书写。<br>下面是一些例子：<br>默认的格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p 16</span><br><span class="line">16</span><br></pre></td></tr></table></figure></p><p>十六进制:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x 16</span><br><span class="line">0x10</span><br></pre></td></tr></table></figure></p><p>二进制 (t 代表 two)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/t 16</span><br><span class="line">0b00000000000000000000000000010000</span><br><span class="line">(lldb) p/t (char)16</span><br><span class="line">0b00010000</span><br></pre></td></tr></table></figure></p><p>你也可以使用 <code>p/c</code> 打印字符，或者 <code>p/s</code> 打印以空终止的字符串 (译者注：以 ‘\0’ 结尾的字符串)。<br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Output-Formats.html" target="_blank" rel="noopener">这里</a>是格式的完整清单。</p><h3 id="完全在调试器内运行"><a href="#完全在调试器内运行" class="headerlink" title="完全在调试器内运行"></a>完全在调试器内运行</h3><p>在开始舞蹈之前，还有一件事要看一看。实际上你可以在调试器中执行任何 <code>C/Objective-C/C++/Swift</code> 的命令。唯一的缺点就是不能创建新函数… 这意味着不能创建新的类，block，函数，有虚拟函数的 C++ 类等等。除此之外，它都可以做。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>RxSwift爬虫工具</title>
    <link href="https://huos3203.github.io/2018/08/28/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/RxSwift%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7/"/>
    <id>https://huos3203.github.io/2018/08/28/个人项目/RxSwift爬虫工具/</id>
    <published>2018-08-28T12:03:26.000Z</published>
    <updated>2018-08-28T12:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-ReptileTool-60cac75" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-ReptileTool-60cac75", "huos3203", "ReptileTool", "60cac75", false);</script><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li>实践大话设计模式/swift基础语法/函数响应式开发</li></ol><p>先来看看网络爬虫的基本原理：<br>一个通用的网络爬虫的框架如图所示：<br><img src="082246341592742.png" alt=""></p><p>网络爬虫的基本工作流程如下：</p><ol><li>首先选取一部分精心挑选的种子URL；</li><li>将这些URL放入待抓取URL队列；</li><li>从待抓取URL队列中取出待抓取在URL，解析DNS，并且得到主机的ip，并将URL对应的网页下载下来，存储进已下载网页库中。此外，将这些URL放进已抓取URL队列。</li><li>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环。<br>网络数据抓取</li></ol><p>概念：网络数据抓取，也叫网络爬虫。是在我们iOS程序中，获取要抓取到的网页上的数据。<br>用处：如果要用到某网站的一些数据，这个时候我们就要用到抓取数据技术。<br>建议：建议抓取过程中，多利用分类，多写一些分类方法，有助于提高程序可读性，也可提高效率。  </p><p>今天先来介绍一下第一种：正则表达式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Safari浏览器调试WebView</title>
    <link href="https://huos3203.github.io/2018/08/23/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Safari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95WebView/"/>
    <id>https://huos3203.github.io/2018/08/23/调试/使用Safari浏览器调试WebView/</id>
    <published>2018-08-23T13:34:25.000Z</published>
    <updated>2018-08-28T12:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-width-=" class="hexo-github" style="width: 100%"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-width-=", "huos3203", "width", "=", false);</script><h3 id="使用RxSwift开发爬虫工具"><a href="#使用RxSwift开发爬虫工具" class="headerlink" title="使用RxSwift开发爬虫工具"></a>使用RxSwift开发爬虫工具</h3><h3 id="设置真机"><a href="#设置真机" class="headerlink" title="设置真机"></a>设置真机</h3><ol><li>首先打开模拟器或者真机设置中”Safari浏览器”→”高级”→”Web检查器”的开关。</li><li>然后我们打开Mac电脑的Safari浏览器,打开系统偏好设置(快捷键 commond + ,)，点击菜单中的”高级”,然后勾选”在菜单栏中显示”开发”菜单”.方便我们进行快速的调试。</li><li>这时候真机连接上数据线.或者开启模拟器就能在菜单栏”开发”选项中找到我们的设备或者是模拟器.</li><li>接下来我们只需要跑起我们的工程进入对应的WebView页面即可进行调试.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>RxSwift函数响应式开发</title>
    <link href="https://huos3203.github.io/2018/08/23/swift/RxSwift%E5%87%BD%E6%95%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2018/08/23/swift/RxSwift函数响应式开发/</id>
    <published>2018-08-23T09:56:38.000Z</published>
    <updated>2018-08-28T12:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-beeth0ven-RxSwift-Chinese-Documentation-cbbc87e" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-beeth0ven-RxSwift-Chinese-Documentation-cbbc87e", "beeth0ven", "RxSwift-Chinese-Documentation", "cbbc87e", false);</script><h1 id="RxSwift学习"><a href="#RxSwift学习" class="headerlink" title="RxSwift学习"></a>RxSwift学习</h1><p><a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/" target="_blank" rel="noopener">RxSwift 中文文档</a></p><h1 id="更多示例"><a href="#更多示例" class="headerlink" title="更多示例"></a>更多示例</h1><table style="width:100%"><br><tr><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/ImagePicker/ImagePickerFull.gif"></td><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/TableViewSectionedViewController/TableViewSectionedViewControllerFull.png"></td><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/Calculator/CalculatorFull.gif"></td><br></tr><br></table><p><a href="https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples" target="_blank" rel="noopener">RxExample</a> 中包含许多具有代表性的示例。它们都是<strong>很好的学习材料</strong>。这里我们取出其中几个示例来展示如何应用 <strong>RxSwift</strong> ：<br>演示RxExample的两种方式</p><ol><li>clone库，在根目录执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open Rx.xcworkspace</span><br></pre></td></tr></table></figure></li></ol><p>然后，选择想要演示的schemes (RxExample-iOS, RxExample-OSX) and hit Run。</p><ol><li>使用pod工具创建RxExample项目<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod try RxSwift</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong><a href="more_demo/image_picker.md">ImagePicker</a> - 图片选择器</strong></p></li><li><p><strong><a href="more_demo/tableView_sectioned_viewController.md">TableViewSectionedViewController</a> - 多层级的列表页</strong></p></li><li><p><strong><a href="more_demo/calculator.md">Calculator</a> - 计算器</strong></p></li></ul><p>有兴趣的同学还可以研究一下 <a href="https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples" target="_blank" rel="noopener">RxExample</a> 中其他的示例。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>GitBook编辑器使用</title>
    <link href="https://huos3203.github.io/2018/08/23/%E5%B7%A5%E5%85%B7/GitBook%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/08/23/工具/GitBook编辑器使用/</id>
    <published>2018-08-22T19:51:19.000Z</published>
    <updated>2018-08-22T20:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-GitbookIO-gitbook-6efbb70" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-GitbookIO-gitbook-6efbb70", "GitbookIO", "gitbook", "6efbb70", false);</script><p><a href="https://legacy.gitbook.com/editor" target="_blank" rel="noopener">GitBook Editor</a><br><a href="https://legacy.gitbook.com/@huosan/dashboard" target="_blank" rel="noopener">个人中心</a></p><h3 id="制作书籍"><a href="#制作书籍" class="headerlink" title="制作书籍"></a>制作书籍</h3><ol><li>在github找到文档库，fork为自己的库</li><li>登录GitBook<code>个人中心</code>，点击<code>+ New</code>新建book</li><li>在建库页面，选择导入<code>git hub</code>现有库<br> Import and sync an existing GitHub repository.</li><li>进入<code>Personal settings</code>，进入github设置面板</li><li>点击<code>Configure</code>按钮，进入github授权gitbook页面<br>GitBook does not have the permissions to access every GitHub repositories linked to your books. Please add them to your configuration to continue editing your  books.</li><li>github中设置 <code>Repository access</code></li><li>All repositories<br> This applies to all current and future repositories.</li><li>Only select repositories</li></ol><h3 id="gitbook终端命令行"><a href="#gitbook终端命令行" class="headerlink" title="gitbook终端命令行"></a>gitbook终端命令行</h3><p><a href="https://toolchain.gitbook.com/ebook.html" target="_blank" rel="noopener">命令行文档</a><br><a href="https://bookfere.com/post/288.html" target="_blank" rel="noopener">GitBook 制作 Kindle 电子书详细教程（命令行版）</a></p><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></li><li><p>创建电子书项目<br>新建一个目录，并进入该目录使用 gitbook 命令初始化电子书项目。举个例子，现在要创建一个名为“MyFirstBook”的空白电子书项目，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir MyFirstBook</span><br><span class="line">$ cd MyFirstBook</span><br><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure></li><li><p>预览电子书内容<br>电子书内容编写完毕后可以使用浏览器预览一下。先输入下面的命令据 .md 文件生成 HTML 文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook build</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Error: Couldn’t locate plugins “jsbin, anchors, video, ga, toggle-chapters, editlink, include-codeblock, splitter, github-buttons, chart, todo, quiz, include-highlight, tonic”, Run ‘gitbook install’ to install plugins from registry.<br>执行安装插件命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure></p></blockquote><p>生成完毕后，会在电子书项目目录中出现一个名为“_book”的文件夹。进入该文件夹，直接用浏览器打开“index.html”，或先输入下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure></p><p>然后在浏览器中输入<code>“http://localhost:4000”</code>即可预览电子书内容，预览完毕后按 Ctrl + C 结束。</p><ol><li>生成电子书文件<br>确定电子书没有问题后，可以通过输入以下命令生成 mobi 电子书：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook mobi ./ ./MyFirstBook.mobi</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>error: error while generating page “introduction.md”: InstallRequiredError:”svgexport” is not installed. Install it using: “npm install svgexport -g”<br>执行安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svgexport -g</span><br></pre></td></tr></table></figure></p></blockquote><p>如果出现以下错误提示，说明您还未安装 Calibre。由于 GitBook 生成 mobi 格式电子书依赖 Calibre 的 ebook-convert，所以请先<a href="https://bookfere.com/tools#calibre" target="_blank" rel="noopener">点击这里</a>下载安装 Calibre。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Need to install ebook-convert from Calibre</span><br></pre></td></tr></table></figure></p><p>Calibre 安装完毕后，对于 Mac OS X 系统，还需要先设置一下软链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin</span><br></pre></td></tr></table></figure></p><p>再次运行转换命令，即可生成 mobi 格式电子书。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="工具" scheme="https://huos3203.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftLint检查代码使用</title>
    <link href="https://huos3203.github.io/2018/08/22/shell/SwiftLint%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/08/22/shell/SwiftLint检查代码使用/</id>
    <published>2018-08-21T17:02:47.000Z</published>
    <updated>2018-08-21T17:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-realm-SwiftLint-8deb453" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-realm-SwiftLint-8deb453", "realm", "SwiftLint", "8deb453", false);</script><h3 id="配置swiftlint语法矫正工具"><a href="#配置swiftlint语法矫正工具" class="headerlink" title="配置swiftlint语法矫正工具"></a>配置swiftlint语法矫正工具</h3><ol><li>安装<br>方式一：<code>brew install swiftlint</code><br>方式二：下载[swiftlint.pkg][<a href="https://github.com/realm/SwiftLint/releases/latest" target="_blank" rel="noopener">https://github.com/realm/SwiftLint/releases/latest</a>]  </li><li>项目中添加支持<br>方法一：<code>pod &#39;SwiftLint&#39;</code>，对单个项目集成swiftlint<br>方法二：手动配置项目build Phase<br>在Xcode build Phase新增一个： “Run Script Phase”:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> swiftlint &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">swiftlint</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="终端插件集成swiftLint"><a href="#终端插件集成swiftLint" class="headerlink" title="终端插件集成swiftLint"></a>终端插件集成swiftLint</h3><p>支持vim编辑器：<br><a href="https://github.com/keith/swift.vim" target="_blank" rel="noopener">keith/swift.vim</a></p><h4 id="安装-syntastic"><a href="#安装-syntastic" class="headerlink" title="安装 syntastic"></a>安装 <a href="https://github.com/scrooloose/syntastic/" target="_blank" rel="noopener">syntastic</a></h4><p>使用<a href="https://github.com/tpope/vim-pathogen.git" target="_blank" rel="noopener">vim-pathogen</a>安装syntastic，</p><ol><li>第一步安装 <code>pathogen.vim</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.vim/<span class="built_in">autoload</span> ~/.vim/bundle &amp;&amp; \</span><br><span class="line">curl -LSso ~/.vim/<span class="built_in">autoload</span>/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure></li></ol><p>设置<code>~/.vimrc</code>配置项：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute pathogen<span class="comment">#infect()</span></span><br></pre></td></tr></table></figure></p><ol><li>第二步将<code>syntastic</code> 作为 <code>Pathogen</code> bundle的资源方式安装<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle &amp;&amp; \</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/vim-syntastic/syntastic.git</span><br></pre></td></tr></table></figure></li></ol><h4 id="终端集成使用"><a href="#终端集成使用" class="headerlink" title="终端集成使用"></a>终端集成使用</h4><p>在<code>vimrc</code>中添加配置，当启动vim即可使用：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:syntastic_swift_checkers = [<span class="string">'swiftpm'</span>, <span class="string">'swiftlint'</span>]</span><br></pre></td></tr></table></figure></p><ol><li>终端支持<code>Package.swift</code><br>当存在<code>Package.swift</code>的swift目录中启动vim，swiftpm将自动可用。</li><li>终端支持<code>.swiftlint.yml</code></li><li>当存在<code>.swiftlint.yml</code>的swift目录中启动vim，且SwiftLint已安装，自动启用swiftlint。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>终端支持swift自动补齐</title>
    <link href="https://huos3203.github.io/2018/08/21/shell/%E7%BB%88%E7%AB%AF%E6%94%AF%E6%8C%81swift%E8%87%AA%E5%8A%A8%E8%A1%A5%E9%BD%90/"/>
    <id>https://huos3203.github.io/2018/08/21/shell/终端支持swift自动补齐/</id>
    <published>2018-08-21T15:48:24.000Z</published>
    <updated>2018-08-21T17:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="终端支持swift自动补齐"><a href="#终端支持swift自动补齐" class="headerlink" title="终端支持swift自动补齐"></a>终端支持swift自动补齐</h3><p>keith/sourcekittendaemon.vim：这个插件提供了Vim集成SourceKittenDaemon。这意味着你可以在vim中开发swift项目<br>需要两步：安装sourcekitten,   </p><h4 id="第一步安装sourcekitten"><a href="#第一步安装sourcekitten" class="headerlink" title="第一步安装sourcekitten"></a>第一步安装sourcekitten</h4><ol><li>安装<br>方式一：<code>brew install sourcekitten</code><br>方式二：clone源码 ,运行<code>swift build</code><br>方式三：clone 源码，运行 <code>make install</code><br>方式三：<a href="https://github.com/jpsim/SourceKitten/releases" target="_blank" rel="noopener">pkg安装包</a>  </li><li>执行<code>sourcekitten help</code>验证安装成功。  </li></ol><h4 id="第二步安装-SourceKittenDaemon"><a href="#第二步安装-SourceKittenDaemon" class="headerlink" title="第二步安装:SourceKittenDaemon"></a>第二步安装:SourceKittenDaemon</h4><ol><li>安装SourceKittenDaemon环境<br>安装并设置<a href="https://github.com/terhechte/SourceKittenDaemon" target="_blank" rel="noopener">SourceKittenDaemon</a><br>方式一：<a href="https://github.com/terhechte/SourceKittenDaemon/releases/" target="_blank" rel="noopener">pkg安装包</a><br>方式二: 1. Clone the repository   2. 安装 <code>make install</code>  </li><li>执行<code>SourceKittenDaemon help</code>验证安装成功。   </li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动后台驻守服务HTTP：<a href="https://github.com/terhechte/SourceKittenDaemon/blob/master/Protocol.org" target="_blank" rel="noopener">参考Protocol.org</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SourceKittenDaemon start --port 44876 --project /private/tmp/abcde/abcde.xcodeproj</span><br></pre></td></tr></table></figure></p><p><code>--port</code>: 服务使用的端口号，默认为<code>8081</code>，vim目前不支持指定SourceKittenDaemon端口，使用默认的8081。<br><code>--project=</code>: 指定服务将要加载的<code>.xcodeproj</code>文件路径，不支持指定<code>.xcworkspaces</code>文件路径</p><p>使用get方法请求后驻服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/complete  # X-Offset|X-Path|X-File</span><br><span class="line">/stop     # 停止后驻服务. 一般用于为其他target提供服务时，重新启动服务。</span><br><span class="line">/ping     # ping后驻服务，运行正常 return OK</span><br><span class="line">/project  # 打印当前加载的project文件路径。</span><br><span class="line">/files    # 打印一个当前加载的project中包含的所有swift文件列表</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown-preview实现md预览</title>
    <link href="https://huos3203.github.io/2018/08/21/shell/markdown-preview%E5%AE%9E%E7%8E%B0md%E9%A2%84%E8%A7%88/"/>
    <id>https://huos3203.github.io/2018/08/21/shell/markdown-preview实现md预览/</id>
    <published>2018-08-21T10:40:31.000Z</published>
    <updated>2018-08-21T10:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-iamcco-markdown-preview.vim-c09a1ca" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-iamcco-markdown-preview.vim-c09a1ca", "iamcco", "markdown-preview.vim", "c09a1ca", false);</script><p>nisha</p><h3 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MarkdownPreview</span><br><span class="line">" open preview window in markdown buffer</span><br><span class="line"></span><br><span class="line">MarkdownPreviewStop</span><br><span class="line">" close the preview window and server</span><br></pre></td></tr></table></figure><h3 id="插件运行效果预览"><a href="#插件运行效果预览" class="headerlink" title="插件运行效果预览"></a>插件运行效果预览</h3><p><img src="https://cloud.githubusercontent.com/assets/5492542/15363504/839753be-1d4b-11e6-9ac8-def4d7122e8d.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>图文组件及多媒体组件类图</title>
    <link href="https://huos3203.github.io/2018/08/18/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%9B%BE%E6%96%87%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%A4%9A%E5%AA%92%E4%BD%93%E7%BB%84%E4%BB%B6%E7%B1%BB%E5%9B%BE/"/>
    <id>https://huos3203.github.io/2018/08/18/个人项目/图文组件及多媒体组件类图/</id>
    <published>2018-08-18T14:36:18.000Z</published>
    <updated>2018-08-22T20:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="http://www.plantuml.com/plantuml/svg/pJjhKnpNbT_xLzoAgy93Z5adjVkXmTGY94Su85Y1vAga4gMPla2lckb9Tm-8mcmX90H88B0jXCnBGfQ4afY7LZRY8SIFoToUcK_-2pddtdvF3w0aczhv8CrqttlkUJyljcRhb3ZV7XHl7x4d-yMjpSBhGxRyNahJZ4rDqayLbPgIy-nDOVukF7SUJHOEx-GFTt7Pn9l26rpyqxiPjhLMUB33Lbw9DMngiRZ-Ah-tAPw7uJjFtx9tSnBDg2vigQfMV0Z2_6x7UVp0URNELXU9-xnAgi8tQ_VbjAvOLftIOzccahRhD4InLqdJEYMJCMp5renC7Sta1c17SUkujBZ5dZoHgrCrXOrRpifqNVL7DVdZLUVUyxhg_wbXCnFUutCrRE9x-5ObyGD8cp9ivEoBcJujGwzfTAZ5oDYceUlK795IAU8ysdVUB00RI2ebfQe73Ksj6TBKFcgt3YXzOeUkfMzyeTdz5nHRaOaqAabP9Nq3tXB186VzhhEsIneRFpDqO49JquZa7jx26Hy_zbodOjgaDgkOy1g_0oBvWvd2mKPXUOiTBJWBEyxibdCmZoXTxchFsKgFJfjDKnckLKmJTrYmXKsjietxREPHP2-d9w3bZpbg3dSF6NmJ4j79J_tCC2yYQbbJisYNFQnJkLfWLIFGak209DvKW1VVNH6xdTBYON43jQ-q_cDfzLcFeGu7qDCcLMnwcGvPLmp3xaeZnv1x0AyqjbGydWm3on-lExUsGL-B3zwokKVvlSFyqJS8p-LVZ1EAgbuS1EGHEiTUhhxSnPaAQ0DRuRdBMN_zYSj69L1JIaojhzycHc-Yh2MV2-pv4llpru1Ww578kj242C9p5OTpSqIgHqEQsYtU6o-CxxUgfBPU-i-iQMIfQGzNPuoCOXi3MhgEf8tiS0svtDLbcrgcZxWVLyDQLGx7UJe7VFkxW0281gc-lZvi-Z-zMx9imwG0FH4QKA7rPIBmQjqD3MX2exuH2N6nWs-IB0XjhaUnQ0SSm7q2MgqpSok_Fn7JBP3qEL9zlgEZhKRBM82EaDwGhwEjgenxdxmeRZyhDpUnFMfjA75TpqPLtGNZeI3a5uOHGW5rpSF0Rhs06ulRXw2iFisd7OuGll00mCcZKfAUaLfmPMMiadqaIIEolB8hvFkJ0CjS4Pi2MOKq82AkKs1_VkayO1Q3pVPkizTZpkEdRESEctZ1vhw3av9MaiOl0KRN0E3IHXKp4uSpDmiG8Ap0zagBE1RyUHSgOPjcsJ4efBJuYXqi2da2f9CMdyelD_QS068ax61JWPlI3KMz2hh3jraHfC9BkjjGCm8KYES4ntozrbHlGpPdzVCDmVgmmxPZBWbqvHJYTTfhfyWL-iTWNHSrmRkwX2UyWR1N3QXO_M14u05ydq72JWDo0IFJLmFgSlLA6m39KGjm9ARurk3H0xz_HMsVIp9_Mltxcf2dhkbNCYfwuCYMJZ_a1dj-dJ66T0eHlrF98d71rj6Jh4syG274zSZrSgGQMVknOQg8fcBdBFBff-JVQjZRbsnxltGqxoOFF8Lg8f5eaY6wbhb1917q6dkQE4nDRQplQN9MNpWpasnh2OAfym2jfavYzvuMZuuYcPcNGmIHfI8fdrzgpgcQSKrJgO7Ybgyr8r-7Mo0Mzy7_oPJyHuqVqvpLOqm3_yyfyBnG7E689n8QsDnPmUJuUUprcZEsWLutJgeRCoCFOLjtnuKEcN3dZ31zt32vNRiFW5murwXfWUU5uEYyFGIQmWInpPVv_QV5usLsyBAml0SPjq331ryu-gfmk28mZ6Sla9263-0n0V23aD2cMFXVsiX16cOPfdr-6EDCZswaRx3bjUBExG1M74eBH9WUOAfSVQtvV5TpP-iLQcNXEGKp0E_34-IbSRRvM83WUM0kgm9VMfHqFyM8KrqZfT0XHHv0EliyV_1rS30HLFWCb5LDxQ8wJTjNZA5ckpMZqfkTYjqF0GwJ3abAajylG5jpsHI9oKnsrkwKnfwokN4G2qGwheQsaVMKK7BVJs-KbkyAJrfOkYEM1xgLUE8_Tc2beogSv9_ZIaTcimjiuhRpz9rGjwIJ_2KHvTgSbeHRgHSx0OU87Ps0G48ImHK0ObhyS0A7x0FqDAnJ9MVv1pHdB-EGkAW3ErdOWJ1tAWOYhbnhRgUgfc0Uq49rFU03S41OTsm56dPzFM5pNq5AuIpkbXP_-BBqU09IBV43DF3aU7ErjKtfeJgfjRK1ohysaF17m7U-tdGUldU-NmTgNFY2uMU73_Li0dYiAJt28fe6GTFFdslJQEvdIzrhYP_wXn0JsDGHVsDeYvUROvuOGSLLnX7VIu6KsRCreTDHmaNAVpBy1ixAUg6kA9s5uoYG4v7iidFgS1TDkr1Ap-xat-quOuSV3EYY1P869WUmmWRqmHY1wrDpEctmYi8UmuQLM1L6kIWLDxvprkR3DGFQ9WyYKCXAREMLi_aSCjdytgOVGDYzPRUR4muQlYabs6pKRNdk92XPjlUBhzT3nfHOP75fiwDl_EGGc0mu-b2Y1iuZ5QzyXamD-1ewc4U6RkF2ULu9yQ25_G586vwyAApSBsxSBJtxghZzqhazuHuXN8bN8eMgAYA2JuIiwYYP4BaoT8W_WOoJxnAREdLb69qEHavuFMpv08AiCH8SauHPnYb9k4U_HuRY53pnXUeME5C1HR0kNl0dnhiH3mNkTNkJ5qdLF0-we5bPeB1xE4l9ptzEUCPczHj3_06aQv_KICZom_NYxflYyRVvlJyxg-lvmrrWkI_XulOBjhMMVty_m2xKxFhy4Z_e2ar39WZABm9gONegadwT45jQser1ZSkXh6oAoz0QJ0WuI41XV9zD7gR1wGT5YuU7yC_isrT2cKhhFqfnriWO9gQUEuys2mzVWPA1k8h7Zvt7syxY1egEGoWip9HMdyKbT1B-8vAV2_lO22ImukSAxYF7vhVPlLTbgH5YY031QqFjWqe9_u5Avamz51rQVgKRggAtAncG2A-fuiz0YNc9rT7ptrBgMdDpMmZfi4Io5TwW3pk9L4-MaKE9LFP4BAjmY4zFXVSZKl8h2wAW-mtTjXkG7somgTrGBGrlmAEpgKbdzXbxFSVs5r8XHlVcTDrAcvHcEioB0prKLQcAxFOyUWtu-tP3fI8kY2DS7G5JlxKIarc7sQdaB2hOLf7RbNXXoM4QhhQ6d7BYSi6OypdmI60b0IdYIODKPaVug-4ap0Q2nmr-ZCyVF8Jo30lKcUdIrzYUkjhg7OfEfOiEqaphG9zth5kaX5-X5sXEeuiyLQC-_hA9LC3l0jG8VU2yvVpXTuNvkwG9SYL_Kd3Q9f4MvlVkvVV6dEN_3GckX_P2DeBxGEJSHpIuQ--NhLLwuRZofL7r-XTerqcUM5GQ7-29-Nx1jmlKLZGztbBpt9dmOg43IA9RBerDE_V_577BpZUp-QELCeqarc0Yy712SnfwRjUY-ulGEjbti613PmGHIyxEi0jLrLyZLdIQXcsa3TrJqKP2pdn-5DBvrjy4L1JVJx1xVyAcPgCK8pMfLeoLf9NAvrF2S5moVeHl8a48EeKoj3hsvA2mFbRMPOcw9O_jgN8saDh1h0h_-puU6EByk8LnS_sky_XzuVc1xw94LWmE598Pj9whhRmVMckX8tA7Hu8xGSpLCXhF0z4IzOGCqXg4JIBL41umTYOK7iMDAQ6uGOycxlv8K4p598Wy4WDBdqUfyXJ8Hnoe5qam7EAX_fcf351vu2G2t9xQensHWGWGVWUPevEyDQW1ooGJwg5v5M2PTDCvq--XUK86a87Vhc118pxEFiAfCo7ikiTWB3lnFPjuBMRRPtM9bwaxlP156uwzVS4cteRYiRyWA8NT6Ve9RRl1VuTYnFel79g69wROiFCgTBTpXoLAjmOYXUFiTWgiicGT35jNR1bWT9WTkehYrdg7-J9CyDlnfqPLx5fyPl31iCoxj3pLjV4VL0-BwZxAWhDk0VfFw3GgLfgVyS_gE8vA5PI3DE88oBMk5YLhvqmgGouDURnlbhwqOki8jxVNXpvQvwhZAshToGJlNI8uCLrsvbV00yPPPFT3W6_Dz1fyXZF9DXVH3qrFilafPse-dDfVRUNN201ysXZ8wlHcDxrfbusEGyebXRKliGmBZutTknNbxM_iZ7LxpTPO1pnKify3hLDuyUkRdglDtbWoR83ja3DX0GpOL80l1dMeXmdZliBXXZDz37LTydknj-9OHUn6VDrkQ9CKcfMNWqDIIvEpCOg4obUcIwg4NErfyzNmXOzozBa2SWeAKtZTfg8GIFHwpIH47LXYP6d6col98fMKhbydVgw5YPT8Fzn6_VNhGli26S4AqCAW0OzRm6V4s-yf7cJ0Qd43KepcBxlJHTmZC9Um7Sgxl-9A1xnaxnVPzZuxU8WTRmYHotTnET2AC5kGEnvOj9pp_1w6p7_oWRex3Nku3KoDE2aUUR4szypgewofz0qeP40nRv0KmPRTn0kt7VlsJV7e-myPDs3EF-iyt2t-iF_JkvdytaDdyQcpUhlqxNpnvItdzRYpk5kNT88uWDx4qUhr0SFk5sc-3nbuhNdVfL4Ikkxm-QNcj6bObcVoWd1nnSbLrKfM7Gb1RXysx0ryvJvxyF6KwbyIX4OhcdvADOOogO10J-FSlXhtnU8IGzGDkcr3Zs5G4TbAfa-d0SymysgsuMimB3Y7gkUdAVX3EjUh1UhkPeMNCOkiuOQ25ae8M_yBcvXm3M0q1BzTkqdLjkOhc5nuymWIZCn-Q-Lmibn-nEya7fHBO-EbYTcmuLzj5NSZ_5C0bn6q-CZblb0x60t-mvleVrUt_1_hZFin3oZYxUxbOoYZ_K5mVcyJBo0-duMmxdOfeztKyh5gf2l-oST4h12_Vtgt9FtYO-B2uxrtwPVURz6vZRVvUDyYexOefWee9XSuFDkivEg9uHQd4QsJOtSi0bUA9NNPSX4CatHBIdg8Pm8cCibgwHQqv4y_yIlro40UQ_LWZMYtHsvvlblA7nq3SzZi0Z1Vf3N1BKztLEhRe5SkLZOzZYaVrWd3y3LQN62vP0pGB80Q2LTwGGiXbdTXHuJ3uh4ZZVSogSgDEUiszsKIDKnSV6gzAgwZIMVTK5Omn4lHKARX2VTCS9CoN0HGKTCGaIWVunMyrqKlKuAWZmxfEiYR_24Io_uWM2_zDinapVAP_piVX7yWrsYkKC4LnrZhEtuNfG99vNeZHqxn1k4nefBkLRe39Pv3H36DwtIKZm4UPn2S71iyL62whzNUQd43Di3XWnGGpJtMz2dd6_T52IjFTtALpZXHSAU3bSDXcpIH_v_QALKbEkH4VqogF7_AfsnIbL2s-jBIV75n3jBVEh_m536fi3bDm4kK7cv1tIZoNN4LFhW1BwwzIrKf-11nYzw_ebyuE6RF9vqth-hOt7R-y0LEQ6yjOHNy_hwp2ZvdFB_tW4tjYDN5upLmH11L8Gz9LKbLdDq_SotaxKlNIBWj-74t-5bstz-DjNSdsDO-fkISL0YouU6vcCK3bI9h-nbHB0Av8m5wFk8V_gS1d0GtRml-L63bBspdlGX0CaSrVpHREDgIYLZ_aVUfIhnxNQwLag0eaLwfiQUf8eLSKeda0M5_7HiFwOhtrnMz1lmyxQyhS9zO-3S0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;#标题#&gt;</title>
    <link href="https://huos3203.github.io/2018/08/13/%3C#%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5#%3E/"/>
    <id>https://huos3203.github.io/2018/08/13/&lt;#永久链接#&gt;/</id>
    <published>2018-08-13T03:10:22.000Z</published>
    <updated>2018-08-13T03:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="在升级xcode之后，出现playground无法运行的情况，live-view-不显示等问题。"><a href="#在升级xcode之后，出现playground无法运行的情况，live-view-不显示等问题。" class="headerlink" title="在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。"></a>在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="&lt;#工具#&gt;" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="&lt;#管理#&gt;" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>iCompleteMe支持swift语法提示</title>
    <link href="https://huos3203.github.io/2018/08/11/shell/iCompleteMe%E6%94%AF%E6%8C%81swift%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA/"/>
    <id>https://huos3203.github.io/2018/08/11/shell/iCompleteMe支持swift语法提示/</id>
    <published>2018-08-10T16:40:19.000Z</published>
    <updated>2018-08-10T18:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-iCompleteMe-ad0e1fe" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-iCompleteMe-ad0e1fe", "jerrymarino", "iCompleteMe", "ad0e1fe", false);</script><p>iCompleteMe是基于YouCompleteMe。在花了一年多的时间试图实现对YouCompleteMe的快速支持之后，发现在YCM无法支持swift自动补齐。<br>iCompleteMe实现的行为对于Swift的补齐提示。iCompleteMe的核心子系统只与Swift一起工作。代码基占用的空间要小得多，这使得在CI上更容易安装、更容易理解和更稳定(理论上)。</p><h3 id="在space-vim中添加插件支持"><a href="#在space-vim中添加插件支持" class="headerlink" title="在space-vim中添加插件支持"></a>在space-vim中添加插件支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;jerrymarino/iCompleteMe&apos;</span><br></pre></td></tr></table></figure><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/plugged/iCompleteMe/</span><br><span class="line">brew install cmake</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure></p><p>然后 <code>&lt;Leader&gt; f R</code> 使配置生效，并执行   <code>:PlugInstall</code>进行安装.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftPlayground命令操作</title>
    <link href="https://huos3203.github.io/2018/08/10/shell/SwiftPlayground%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://huos3203.github.io/2018/08/10/shell/SwiftPlayground命令操作/</id>
    <published>2018-08-10T15:50:21.000Z</published>
    <updated>2018-08-10T18:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-SwiftPlayground.vim-f603700" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-SwiftPlayground.vim-f603700", "jerrymarino", "SwiftPlayground.vim", "f603700", false);</script><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p>在playgrounds后缀的目录中执行swift文件</p><h2 id="熟悉vim快捷键用法"><a href="#熟悉vim快捷键用法" class="headerlink" title="熟悉vim快捷键用法"></a>熟悉vim快捷键用法</h2><p>空格 + fs 保存文件：此时插件会自动运行playgrounds，显示效果<br>shift + H ：行头<br>shift + L：行尾<br>:copen : AsyncRun显示运行日志<br>:AsyncRun  shell命令</p><h3 id="支持结构"><a href="#支持结构" class="headerlink" title="支持结构"></a>支持结构</h3><p><code>*.playgroud/Contents.swift</code><br>不支持包含：Pages页面的playground。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>FSCalendar支持自定义的日历开源库</title>
    <link href="https://huos3203.github.io/2018/07/18/%E5%BC%80%E6%BA%90%E5%BA%93/FSCalendar%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%A5%E5%8E%86%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/07/18/开源库/FSCalendar支持自定义的日历开源库/</id>
    <published>2018-07-17T17:59:05.000Z</published>
    <updated>2018-07-17T18:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-FSCalendar-1a026a4c" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-FSCalendar-1a026a4c", "huos3203", "FSCalendar", "1a026a4c", false);</script><p><blockquote class="trello-card"><a href="https://trello.com/c/Tq2jnc1E/33-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%8E%86%E6%8E%A7%E4%BB%B6%EF%BC%8C%E6%97%A5%E6%9C%9F%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener">自定义日历控件，日期图标</a></blockquote><script src="https://p.trellocdn.com/embed.min.js"></script></p><p><a href="https://github.com/huos3203/FSCalendar" target="_blank" rel="noopener">FSCalendar</a><br>FSCalendar是一款开源iOS日历控件，支持横向、纵向滑动模式，全屏模式，带有子标题、事件设置等功能。以下是项目截图：<br><img src="https://cloud.githubusercontent.com/assets/5186464/10262249/4fabae40-69f2-11e5-97ab-afbacd0a3da2.jpg" alt=""><br>Use Interface Builder<br>1、 Drag an UIView object to ViewController Scene 2、 Change the Custom Class to FSCalendar<br>3、 Link dataSource and delegate to the ViewController<br>4、 Finally, implement FSCalendarDataSource and FSCalendarDelegate in your ViewController<br><img src="https://cloud.githubusercontent.com/assets/5186464/9488580/a360297e-4c0d-11e5-8548-ee9274e7c4af.jpg" alt=""></p><h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><img src="http://p27uwfdhv.bkt.clouddn.com/static/images/FScalendardemo.gif?imageMogr2/2/w/800">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="开源库" scheme="https://huos3203.github.io/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>高效人士的七个习惯</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E9%AB%98%E6%95%88%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/高效人士的七个习惯/</id>
    <published>2018-07-03T12:30:31.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://book.douban.com/annotation/18551525/" target="_blank" rel="noopener">豆瓣导图</a><br><a href="https://book.douban.com/annotation/39594570/" target="_blank" rel="noopener">豆瓣总结</a></p><h2 id="前言-如何善用本书"><a href="#前言-如何善用本书" class="headerlink" title="前言 如何善用本书"></a>前言 如何善用本书</h2><h2 id="第一部分-重新探索自我"><a href="#第一部分-重新探索自我" class="headerlink" title="第一部分 重新探索自我"></a>第一部分 重新探索自我</h2><h2 id="第一章-由内而外全面造就自己"><a href="#第一章-由内而外全面造就自己" class="headerlink" title="第一章 由内而外全面造就自己"></a>第一章 由内而外全面造就自己</h2><h2 id="第二章-七个习惯——概论"><a href="#第二章-七个习惯——概论" class="headerlink" title="第二章 七个习惯——概论"></a>第二章 七个习惯——概论</h2><h1 id="第二部分-个人的成功：从依赖到独立"><a href="#第二部分-个人的成功：从依赖到独立" class="headerlink" title="第二部分 个人的成功：从依赖到独立"></a>第二部分 个人的成功：从依赖到独立</h1><h2 id="第三章-习惯一：积极主动——个人愿景的原则"><a href="#第三章-习惯一：积极主动——个人愿景的原则" class="headerlink" title="第三章 习惯一：积极主动——个人愿景的原则"></a>第三章 习惯一：积极主动——个人愿景的原则</h2><h2 id="第四章-习惯二：以终为始——自我领导的原则"><a href="#第四章-习惯二：以终为始——自我领导的原则" class="headerlink" title="第四章 习惯二：以终为始——自我领导的原则"></a>第四章 习惯二：以终为始——自我领导的原则</h2><h3 id="个人使命宣言"><a href="#个人使命宣言" class="headerlink" title="个人使命宣言"></a>个人使命宣言</h3><p>以终为始最有效的方法，就是撰写一份个人使命宣言，即人生哲学或基础信念。<br>宣言：主要说明自己想成为怎样的品行的人。成什么样的事业，及为此奠基的价值观和原则。<br>家庭第一<br>借重宗教的力量<br>在诚信问题上决不妥协<br>念及相关的每个人<br>未听取正反双方的意见，不妄下断语<br>征求他人意见<br>维护不在场的人<br>诚恳但立场坚定<br>每年掌握一种新技能<br>今天计划明天的工作<br>利用等待的空闲时间<br>态度积极<br>保持幽默感<br>生活与工作有条不紊<br>别怕犯错，怕的是不能吸取教训<br>协助属下成功<br>多请教别人<br>专注于当前的工作，不为下一次任务或提升操心</p><p>定期储蓄或利用部分收入做投资</p><p>一个人的应变能力取决于他对自己的本性，人生目标以及价值观的不变的信念。<br>只要心中秉持着恒久不变的真理，就能屹立于动荡的环境中。</p><p>标记疗法的基础原理：许多心智或情感疾病，都是由于失落感或空虚感作祟，而标记疗法可以帮助病人找回生命的意义与使命感，以祛除这些感觉。</p><h2 id="第五章-习惯三：要事第一——自我管理的原则"><a href="#第五章-习惯三：要事第一——自我管理的原则" class="headerlink" title="第五章 习惯三：要事第一——自我管理的原则"></a>第五章 习惯三：要事第一——自我管理的原则</h2><p><a href="https://book.douban.com/people/140683087/annotation/1048007/?start=0" target="_blank" rel="noopener">豆瓣笔记</a></p><h1 id="第三部分-公众的成功：从独立到互赖"><a href="#第三部分-公众的成功：从独立到互赖" class="headerlink" title="第三部分 公众的成功：从独立到互赖"></a>第三部分 公众的成功：从独立到互赖</h1><h2 id="第六章-你不是一座孤岛"><a href="#第六章-你不是一座孤岛" class="headerlink" title="第六章 你不是一座孤岛"></a>第六章 你不是一座孤岛</h2><h2 id="第七章-习惯四：双赢思维——人际领导的原则"><a href="#第七章-习惯四：双赢思维——人际领导的原则" class="headerlink" title="第七章 习惯四：双赢思维——人际领导的原则"></a>第七章 习惯四：双赢思维——人际领导的原则</h2><h2 id="第八章-习惯五：知彼知己——同理心交流的原则"><a href="#第八章-习惯五：知彼知己——同理心交流的原则" class="headerlink" title="第八章 习惯五：知彼知己——同理心交流的原则"></a>第八章 习惯五：知彼知己——同理心交流的原则</h2><h2 id="第九章-习惯六：统合综效——创造性合作的原则"><a href="#第九章-习惯六：统合综效——创造性合作的原则" class="headerlink" title="第九章 习惯六：统合综效——创造性合作的原则"></a>第九章 习惯六：统合综效——创造性合作的原则</h2><h1 id="第四部分-全面观照生命"><a href="#第四部分-全面观照生命" class="headerlink" title="第四部分 全面观照生命"></a>第四部分 全面观照生命</h1><h2 id="第十章-习惯七：不断更新——平衡的自我更新的原则"><a href="#第十章-习惯七：不断更新——平衡的自我更新的原则" class="headerlink" title="第十章 习惯七：不断更新——平衡的自我更新的原则"></a>第十章 习惯七：不断更新——平衡的自我更新的原则</h2><h2 id="第十一章-再次由内而外造就自己"><a href="#第十一章-再次由内而外造就自己" class="headerlink" title="第十一章 再次由内而外造就自己"></a>第十一章 再次由内而外造就自己</h2><p>附录<br>一、你是哪种类型的人？——生活重心面面观<br>二、第四代时间管理——高效能人士的一天</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>程序员跳槽全攻略</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%B3%E6%A7%BD%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/程序员跳槽全攻略/</id>
    <published>2018-07-02T19:52:08.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
</feed>
