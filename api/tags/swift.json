{"name":"swift","postlist":[{"title":"使用JavaScript把JSON数据转为对象","slug":"swift/使用JavaScript把JSON数据定义对象","date":"2017-02-12T14:41:35.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/使用JavaScript把JSON数据定义对象.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"将JSON数据序列化为代码实例\"><a href=\"#将JSON数据序列化为代码实例\" class=\"headerlink\" title=\"将JSON数据序列化为代码实例\"></a>将JSON数据序列化为代码实例</h2><ol>\n<li>定义一个继承自 <code>JSExport</code> 子协议 <code>PersonJSExports</code></li>\n<li>定义一个遵守<code>PersonJSExports</code>协议的<code>Person</code>数据模</li>\n<li>使用 <code>JavaScript</code> 把<code>JSON</code>转为<code>类</code>并实例化<code>对象</code><br>都有一个完整的 <code>JVM</code> 在那儿了，谁还需要 <code>NSJSONSerialization</code>？</li>\n</ol>\n<h2 id=\"JSExport语言互通协议\"><a href=\"#JSExport语言互通协议\" class=\"headerlink\" title=\"JSExport语言互通协议\"></a>JSExport语言互通协议</h2><p><code>JavaScript</code>可以脱离<code>prototype继承</code>完全用<code>JSON</code>来定义对象，但是<code>Objective-C</code>编程不能脱离<code>类</code>和<code>继承</code>。所以<code>JavaScriptCore</code>就提供了<code>JSExport</code>作为两种语言的互通协议。<br><code>JSExport</code>中没有预定义任何方法，但是所有继承<code>JSExport</code>的协议中定义的方法即协议方法，都可以在<code>JSContext</code>中被调用。</p>\n<h2 id=\"JSExportAs-宏-指定方法在JS中调用的名称\"><a href=\"#JSExportAs-宏-指定方法在JS中调用的名称\" class=\"headerlink\" title=\"JSExportAs 宏: 指定方法在JS中调用的名称\"></a>JSExportAs 宏: 指定方法在JS中调用的名称</h2><p>对于多参数的方法，<code>JavaScriptCore</code>的转换方式将<code>Objective-C</code>的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">MultiArgs</span> &lt;<span class=\"title\">JSExport</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)doFoo:(<span class=\"keyword\">id</span>)foo withBar:(<span class=\"keyword\">id</span>)bar;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><br>如果希望方法在JavaScript中有一个比较短的名字，就需要用的JSExport.h中提供的宏：<br><figure class=\"highlight objc\"><figcaption><span>JSExport.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(PropertyName, Selector)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><figcaption><span>JSExportAs的官方宏定义 xcdoc://?url=developer.apple.com/library/etc/redirect/xcode/ios/1151/documentation/JavaScriptCore/Reference/JSExport_Ref/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define JSExportAs(PropertyName, Selector) \\</span></span><br><span class=\"line\"><span class=\"keyword\">@optional</span> Selector __JS_EXPORT_AS__<span class=\"meta\">##PropertyName:(id)argument; @required Selector</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>如 <code>setX:Y:Z</code>方法，我们可以给他重命名，让 JS 中通过 <code>set3D(x,y,z)</code> 来调用<br><figure class=\"highlight objc\"><figcaption><span>使用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(set3D,</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setX:(<span class=\"keyword\">id</span>)x Y:(<span class=\"keyword\">id</span>)y Z:(<span class=\"keyword\">id</span>)z</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">set3D(x,y,z)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义PersonJSExports协议和create协议方法（类方法）\"><a href=\"#定义PersonJSExports协议和create协议方法（类方法）\" class=\"headerlink\" title=\"定义PersonJSExports协议和create协议方法（类方法）\"></a>定义PersonJSExports协议和create协议方法（类方法）</h3><p><code>Person 类</code>实现了<code>PersonJSExports 协议</code>，该协议规定哪些属性可以在 <code>JavaScript</code>中可用。<br>在<code>JavaScript</code>语境中，不能像：<code>var person = new Person()</code>来初始化实例，可以在定义<code>PersonJSExports</code>协议方法时，添加一个协议方法来弥补这一点。见下例<code>create...</code>类方法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom protocol must be declared with `@objc`</span></span><br><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">PersonJSExports</span> : <span class=\"title\">JSExport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 在JavaScript中调用这个类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">### 定义<span class=\"title\">Person</span>模型</span></span><br><span class=\"line\"><span class=\"class\">定义一个遵守`<span class=\"title\">PersonJSExports</span>`协议的`<span class=\"title\">Person</span>`数据模</span></span><br><span class=\"line\"><span class=\"class\">// <span class=\"title\">Custom</span> <span class=\"title\">class</span> <span class=\"title\">must</span> <span class=\"title\">inherit</span> <span class=\"title\">from</span> `<span class=\"title\">NSObject</span>`</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">objc</span> <span class=\"title\">class</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>, <span class=\"title\">PersonJSExports</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// JS协议属性必须声明为`dynamic`</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(firstName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>)   </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.firstName = firstName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.lastName = lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span> </span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>(firstName: firstName, lastName: lastName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(firstName) \\(lastName)\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSContext-配置\"><a href=\"#JSContext-配置\" class=\"headerlink\" title=\"JSContext 配置\"></a>JSContext 配置</h3><p>之前，我们可以用我们已经创建的 Person 类，我们需要将其导出到 <code>JavaScript</code> 环境。我们也将借此导入<a href=\"http://mustache.github.io\" target=\"_blank\" rel=\"noopener\">Mustache JS library</a>，我们将应用模板到我们的 Person 对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export Person class，JS中以该`Person标示符`作为类名使用</span></span><br><span class=\"line\">context.setObject(<span class=\"type\">Person</span>.<span class=\"keyword\">self</span>, forKeyedSubscript: <span class=\"string\">\"Person\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load Mustache.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> mustacheJSString = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    context.evaluateScript(mustacheJSString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JavaScript-数据和进程\"><a href=\"#JavaScript-数据和进程\" class=\"headerlink\" title=\"JavaScript 数据和进程\"></a>JavaScript 数据和进程</h3><p>下面就来看看我们简单的 JSON 例子，这段代码将创建新的 Person 实例。<br>数据：<br><figure class=\"highlight json\"><figcaption><span>Persons.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Grace\"</span>,     <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hopper\"</span>,   <span class=\"attr\">\"year\"</span>: <span class=\"number\">1906</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Ada\"</span>,       <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Lovelace\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1815</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Margaret\"</span>,  <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hamilton\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1936</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>创建新的 Person 实例：<br><figure class=\"highlight js\"><figcaption><span>loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadPeopleFromJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonString</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(jsonString);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; data.length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在swift中的js协议方法：`createWithFirstName:lastName:`</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = Person.createWithFirstNameLastName(data[i].first, data[i].last);</span><br><span class=\"line\">        person.birthYear = data[i].year;</span><br><span class=\"line\">        <span class=\"comment\">//`push:`添加到数组中</span></span><br><span class=\"line\">        people.push(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> people;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><code>JSContext</code>加载装换<code>loadPeople.js</code>脚本<br>加载js脚本之后，<code>loadPeopleFromJSON</code>即可作为下标被<code>context</code>调用该方法:<br><figure class=\"highlight swift\"><figcaption><span>加载loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load loadPeople.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> loadPeople = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载js脚本之后，`loadPeopleFromJSON`即可作为下标被context调用该方法</span></span><br><span class=\"line\">    context.evaluateScript(loadPeople)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：JavaScriptCore 转换的 Objective-C / Swift 方法名是 JavaScript 兼容的。由于 JavaScript 没有参数 名称，任何外部参数名称都会被转换为驼峰形式并且附加到函数名后。在这个例子中，Objective-C 的方法 createWithFirstName:lastName: 变成了在JavaScript中的 createWithFirstNameLastName()。</p>\n</blockquote>\n<h3 id=\"使用Mustache-模板-渲染\"><a href=\"#使用Mustache-模板-渲染\" class=\"headerlink\" title=\"使用Mustache 模板 渲染\"></a>使用Mustache 模板 渲染</h3><p>Mustache 是一个很强大的 template 引擎，可以通过解析 json 来绑定并渲染占位符。如果你做过一些前端开发的话，会知道这是一种很常用的 HTML 绑定 Model 的做法，GRMustache.swift 是这个框架的 Swift 实现。<br><a href=\"http://blog.csdn.net/kevin_luan/article/details/46485561\" target=\"_blank\" rel=\"noopener\">mustache模板引擎</a><br><a href=\"https://github.com/BjornRuud/Swiftache\" target=\"_blank\" rel=\"noopener\">Mustache 的 Swift 语言实现版本</a><br>mustache的特点就是很语法很简单，主要语法如下:</p>\n<pre><code>1. {{ name }} 打印变量，默认是escape过的，如果不要escape,用3个分隔符 {{{ name }}}，或者用 {{ &name }}，这个和分隔符无关\n2. {{#person}}…{{/person}} 区块，4种方式\n    person 是真假值，决定是否输出\n    person 是list of array，会循环展开 for x in person:section.render(&apos;xxx)\n    person 是匿名函数/object, 区块包裹的html 会作为参数传递进去\n    person 是dict，直接打印 dict[key]\n3. {{^person}}…{{/person}，反向区块\n    4. {{！name }} 注释\n5. {{> box }} 载入子模块\n</code></pre><p>加载 <code>JSON 数据</code>，调用 <code>JSContext</code> 将数据解析成 <code>Person 对象</code>的数组，并用 <code>Mustache 模板</code>呈现每个<code>Person</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件`Persons.json`中加载json数据</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> peopleJSON = <span class=\"type\">NSString</span>(contentsOfFile:..., encoding: <span class=\"type\">NSUTF8StringEncoding</span>, error: <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取js中定义的`loadPeopleFromJSON`的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> load = context.objectForKeyedSubscript(<span class=\"string\">\"loadPeopleFromJSON\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 通过调用load方法将`JSON 数据`解析成`Person 对象`的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> people = load.callWithArguments([peopleJSON]).toArray() <span class=\"keyword\">as</span>? [<span class=\"type\">Person</span>] </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get rendering function and create template</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> mustacheRender = context.objectForKeyedSubscript(<span class=\"string\">\"Mustache\"</span>).objectForKeyedSubscript(<span class=\"string\">\"render\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> template = <span class=\"string\">\", born \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop through people and render Person object as string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> people </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println</span>(mustacheRender.callWithArguments([template, person]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Grace Hopper, born 1906</span></span><br><span class=\"line\"><span class=\"comment\">// Ada Lovelace, born 1815</span></span><br><span class=\"line\"><span class=\"comment\">// Margaret Hamilton, born 1936</span></span><br></pre></td></tr></table></figure><br>JavaScript 代码段可能是附带应用一起发布的基本的用户定义的插件。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"},{"name":"json","path":"api/tags/json.json"}]},{"title":"Java​Script​Core实现swift混编","slug":"swift/Java​Script​Core实现swift混编","date":"2017-02-12T13:34:06.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/Java​Script​Core实现swift混编.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>OS X Mavericks 和 iOS 7 引入了 <code>JavaScriptCore</code> 库，它把 <code>WebKit 的 JavaScript</code> 引擎用 <code>Objective-C</code> 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，<code>JavaScript</code> 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。</p>\n<ol>\n<li>如何从 <code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</li>\n<li>那么反向呢？怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？</li>\n</ol>\n<h2 id=\"swift通过JSContext调用JavaScript\"><a href=\"#swift通过JSContext调用JavaScript\" class=\"headerlink\" title=\"swift通过JSContext调用JavaScript\"></a>swift通过JSContext调用JavaScript</h2><p>如何从<code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</p>\n<h3 id=\"全局实例JSContext：运行JavaScript代码的环境\"><a href=\"#全局实例JSContext：运行JavaScript代码的环境\" class=\"headerlink\" title=\"全局实例JSContext：运行JavaScript代码的环境\"></a>全局实例JSContext：运行JavaScript代码的环境</h3><p>全局实例<code>JSContext</code>作用就像在浏览器内运行的一个<code>JavaScript</code>脚本，<code>JSContext</code> 类似于 <code>window</code>。<br>通过<code>JSContext</code>实例运行<code>JavaScript</code>代码<code>创建变量</code>，<code>做计算</code>，<code>定义方法</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"type\">JSContext</span>()    <span class=\"comment\">//创建全局环境</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var num = 5 + 5\"</span>) <span class=\"comment\">//计算</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var names = ['Grace', 'Ada', 'Margaret']\"</span>) <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var triple = function(value) &#123; return value * 3 &#125;\"</span>) <span class=\"comment\">//定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleNum: <span class=\"type\">JSValue</span> = context.evaluateScript(<span class=\"string\">\"triple(num)\"</span>)  </span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动态类型JSValue-包裹JSContext环境下每一个可能的JS值\"><a href=\"#动态类型JSValue-包裹JSContext环境下每一个可能的JS值\" class=\"headerlink\" title=\"动态类型JSValue:包裹JSContext环境下每一个可能的JS值\"></a>动态类型JSValue:包裹JSContext环境下每一个可能的JS值</h3><p><code>JavaScript</code> 是动态语言，所以动态类型<code>JSValue</code>包裹JSContext环境中任何可能的JS值，字符串和数字；数组、对象和方法；甚至错误和特殊的 JavaScript 值诸如 <code>null</code> 和 <code>undefined</code>。<br>获取<code>tripleNum</code>值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tripled: \\(tripleNum.toInt32())\"</span>)</span><br></pre></td></tr></table></figure><br><code>JSValue</code> 包括一系列方法用于访问其可能的值以保证有正确的 <code>Foundation 基本类型</code><br>包括：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800\"></p>\n<h3 id=\"下标取值：访问JSContext环境下的任何值\"><a href=\"#下标取值：访问JSContext环境下的任何值\" class=\"headerlink\" title=\"下标取值：访问JSContext环境下的任何值\"></a>下标取值：访问JSContext环境下的任何值</h3><p><code>JSContext</code> 和 <code>JSValue</code> 实例可以使用下标的方式访问之前创建的 <code>context</code> 的任何值。</p>\n<ul>\n<li><code>JSContext</code>：需要一个字符串下标</li>\n<li><code>JSValue</code>：允许使用<code>字符串</code>或<code>整数</code>标来得到里面的对象和数组</li>\n</ul>\n<h4 id=\"JSContext下标取值\"><a href=\"#JSContext下标取值\" class=\"headerlink\" title=\"JSContext下标取值\"></a>JSContext下标取值</h4><ol>\n<li><code>swift</code>语法<figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = context.objectForKeyedSubscript(<span class=\"string\">\"names\"</span>)  <span class=\"comment\">//JSContext字符串下标原始方法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"JSValue整数下标原始方法\"><a href=\"#JSValue整数下标原始方法\" class=\"headerlink\" title=\"JSValue整数下标原始方法\"></a>JSValue整数下标原始方法</h4><figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialName = names.objectAtIndexedSubscript(<span class=\"number\">0</span>)   <span class=\"comment\">//JSValue整数下标原始方法</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The first name: \\(initialName.toString())\"</span>)  <span class=\"comment\">//JSValue method</span></span><br><span class=\"line\"><span class=\"comment\">// The first name: Grace</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里，Objective-C 代码可以利用下标表示法，如下例：context[@”names”]，names[0]，[initialName toString]，Swift 目前只公开<a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">原始方法</a>:<code>objectAtKeyedSubscript()</code> 和 <code>objectAtIndexedSubscript()</code>来让下标成为可能。</p>\n</blockquote>\n<h3 id=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"><a href=\"#callWithArguments调用JS方法：只需传入Foundation基本类型参数\" class=\"headerlink\" title=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"></a>callWithArguments调用JS方法：只需传入Foundation基本类型参数</h3><p>上述<code>JavaScript</code>代码中，<code>JSValue</code>包装了一个<code>triple函数</code>，在<code>Objective-C / Swift</code> 代码中可以使用 <code>Foundation基本类型</code>作为参数来直接调用该函数。再次，<code>JavaScriptCore</code> 很轻松的处理了这个桥接：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleFunction = context.objectForKeyedSubscript(<span class=\"string\">\"triple\"</span>) <span class=\"comment\">//下标取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = tripleFunction.callWithArguments([<span class=\"number\">5</span>]) <span class=\"comment\">//传入基本类型参数直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Five tripled: \\(result.toInt32())\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exceptionHandler错误处理\"><a href=\"#exceptionHandler错误处理\" class=\"headerlink\" title=\"exceptionHandler错误处理\"></a><code>exceptionHandler</code>错误处理</h3><p><code>exceptionHandler</code> 是一个接收<code>JSContext 引用</code>和<code>异常本身</code>的回调处理的闭包。<br>通过设置上下文的 <code>exceptionHandler</code> 属性，可以观察和记录<code>语法</code>，<code>类型</code>以及<code>运行时错误</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = &#123; context, exception <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"JS Error: \\(exception)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>)</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"JS Error: %@\"</span>, exception);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[context evaluateScript:<span class=\"string\">@\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>];</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript-通过JSContext调用-swift／OC\"><a href=\"#JavaScript-通过JSContext调用-swift／OC\" class=\"headerlink\" title=\"JavaScript 通过JSContext调用 swift／OC\"></a>JavaScript 通过JSContext调用 swift／OC</h2><p>怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？<br>让 <code>JSContext</code> 访问我们的本地客户端代码的方式主要有两种：</p>\n<ol>\n<li><code>block块</code>键值对：把OC中的<code>block块</code>赋值给<code>JSContext</code>的一个标示键，该标识键的<code>JSValue</code>可以通过<code>callWithArguments</code>调用.</li>\n<li><code>JSExport 协议</code>。</li>\n</ol>\n<h3 id=\"block块-键值对-该block键的JSValue通过callWithArguments调用\"><a href=\"#block块-键值对-该block键的JSValue通过callWithArguments调用\" class=\"headerlink\" title=\"block块 键值对:该block键的JSValue通过callWithArguments调用\"></a>block块 键值对:该block键的<code>JSValue</code>通过<code>callWithArguments</code>调用</h3><p>当一个 <code>Objective-C block</code> 被赋给 <code>JSContext</code> 里的一个标识符，<code>JavaScriptCore</code> 会自动的把 <code>block</code> 封装在 <code>JavaScript 函数</code>里，并以该标示符作为函数名来调用该block的实现。这使得在 <code>JavaScript</code> 中可以简单的使用 <code>Foundation</code> 和 <code>Cocoa</code>类，所有的桥接都为你做好了。<br><a href=\"http://nshipster.cn/cfstringtransform/\" target=\"_blank\" rel=\"noopener\">CFStringTransform</a>处理语言的强大威力</p>\n<p>在 <code>JSContext</code> 中使用 <code>Swift 闭包</code>需要注意两点:</p>\n<ol>\n<li>与 <code>@objc_block</code> 属性一起声明</li>\n<li>使用Swift中的<code>unsafeBitCast()</code>函数，把对象转换为<code>AnyObject</code></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> simplifyString: <span class=\"meta\">@objc</span>_block <span class=\"type\">String</span> -&gt; <span class=\"type\">String</span> = &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mutableString = <span class=\"type\">NSMutableString</span>(string: input) <span class=\"keyword\">as</span> <span class=\"type\">CFMutableStringRef</span></span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformToLatin, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformStripCombiningMarks, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mutableString</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.setObject(<span class=\"built_in\">unsafeBitCast</span>(simplifyString, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>), forKeyedSubscript: <span class=\"string\">\"simplifyString\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(context.evaluateScript(<span class=\"string\">\"simplifyString('안녕하새요!')\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// annyeonghasaeyo!</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给标示符赋值一个oc-block，该标示符会被自动装换为JavaScript函数</span></span><br><span class=\"line\">context[<span class=\"string\">@\"simplifyString\"</span>] = ^(<span class=\"built_in\">NSString</span> *input) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableString = [input mutableCopy];</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformToLatin, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformStripCombiningMarks, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> mutableString;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [context evaluateScript:<span class=\"string\">@\"simplifyString('안녕하새요!')\"</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>由于 <code>block</code> 可以保有变量引用，而且 <code>JSContext</code> 也强引用它所有的变量，为了避免强引用循环需要特别小心。<br>避免保有<code>JSContext</code> 或<code>一个 block</code> 里的任何 <code>JSValue</code>。相反，使用 <code>[JSContext currentContext]</code> 得到当前上下文，并把你需要的任何值用参数传递。</p>\n<h3 id=\"JSExport-协议\"><a href=\"#JSExport-协议\" class=\"headerlink\" title=\"JSExport 协议\"></a>JSExport 协议</h3><p>在继承<code>JSExport 协议</code>的子协议里声明的属性，实例方法还是类方法，都会自动暴漏给<code>JavaScript</code>代码来调用。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"}]},{"title":"Swift 语言指南[转]","slug":"SwiftGuide","date":"2017-01-03T17:05:20.000Z","updated":"2017-01-23T18:33:57.000Z","comments":true,"path":"api/articles/SwiftGuide.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Swift-语言指南\"><a href=\"#Swift-语言指南\" class=\"headerlink\" title=\"Swift 语言指南\"></a>Swift 语言指南</h1><blockquote>\n<p><span style=\"color:lightgray;font-size:12px\"><a href=\"http://weibo.com/swiftlanguage\" target=\"_blank\" rel=\"noopener\">@SwiftLanguage</a> 更新于 2016-6-6，更新内容详见 <a href=\"https://github.com/ipader/SwiftGuide/blob/master/weekly/Issue-55.md\" target=\"_blank\" rel=\"noopener\">Issue 55</a>。往期更新回顾详见《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/weekly/README.md\" target=\"_blank\" rel=\"noopener\">收录周报</a>》</span></p>\n</blockquote>\n<p>　　<a href=\"https://github.com/ipader/SwiftGuide/blob/master/2014%20letter.md\" target=\"_blank\" rel=\"noopener\">这份指南</a>汇集了 Swift 语言主流学习资源，并以开发者的视角整理编排。对于精选项目及文章，可直接访问《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">Swift 项目精选</a>》和《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md\" target=\"_blank\" rel=\"noopener\">Swift 文章精选</a>》。还有开发者们自己维护的《<a href=\"https://github.com/ipader/SwiftGuide/wiki/%E5%BC%80%E5%8F%91%E8%80%85%E3%80%81%E9%A1%B9%E7%9B%AE%E3%80%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\">开发者、项目、最佳实践</a>》。当然也不能错过那些活跃、优秀的《<a href=\"https://github.com/ipader/SwiftGuide/wiki/%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E9%A1%B5\" target=\"_blank\" rel=\"noopener\">开发者个人资料页</a>》。</p>\n<h2 id=\"入门指引\"><a href=\"#入门指引\" class=\"headerlink\" title=\"入门指引\"></a>入门指引</h2><p>苹果为 <a href=\"http://www.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift</a>（<a href=\"http://www.apple.com/cn/swift/\" target=\"_blank\" rel=\"noopener\">中文介绍</a>）开发者提供的<a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">官方文档入口</a>，包括 <a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">概述</a>，<a href=\"https://developer.apple.com/swift/blog/\" target=\"_blank\" rel=\"noopener\">博客</a>（<a href=\"https://github.com/ipader/SwiftGuide/tree/master/mirror/Swift%20Blog%20-%20Apple%20Developer\" target=\"_blank\" rel=\"noopener\">中文镜像</a>）及 <a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">开发资源</a>。其中以下几份文档（Swift 2.1）为入门级必备（<a href=\"https://itunes.apple.com/us/book-series/swift-programming-series/id888896989?mt=11\" target=\"_blank\" rel=\"noopener\">iBooks 版</a>）：</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift Programming Language</a>（<a href=\"http://gg.swiftguide.cn\" target=\"_blank\" rel=\"noopener\">中文版</a>｜<a href=\"http://wiki.jikexueyuan.com/download/swift/pdf/\" target=\"_blank\" rel=\"noopener\">PDF 版</a> By <a href=\"http://weibo.com/swiftguide\" target=\"_blank\" rel=\"noopener\">SwiftGG翻译组</a>）</p>\n</li>\n<li><p><a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps</a> </p>\n</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C</a>（<a href=\"https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/UsingSwiftwithCocoaandObjective-C%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C.md\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/cocoachina\" target=\"_blank\" rel=\"noopener\">@CocoaChina</a>）</li>\n</ul>\n<p><em>苹果同时也维护着相应 Beta 版（Swift 2.2）文档：<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\" target=\"_blank\" rel=\"noopener\">Swift Programming Language</a>，<a href=\"https://developer.apple.com/library/prerelease/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps</a>，<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C</a>。</em></p>\n<p>学习实践的角度，标准库示例代码 <a href=\"https://developer.apple.com/sample-code/swift/downloads/Standard-Library.zip\" target=\"_blank\" rel=\"noopener\">Swift Standard Library.playground</a> 是很棒的学习伴侣。</p>\n<p>教程方面，苹果力荐了斯坦福课程 <a href=\"https://itunes.com/StanfordSwift\" target=\"_blank\" rel=\"noopener\">Stanford University: Developing iOS 8 Apps with Swift</a>（<a href=\"http://open.163.com/special/opencourse/ios8.html\" target=\"_blank\" rel=\"noopener\">中文字幕版</a> By <a href=\"http://weibo.com/163open\" target=\"_blank\" rel=\"noopener\">@网易公开课</a>）</p>\n<p>除以上所涉及入门级文档，<a href=\"https://developer.apple.com/library/ios/navigation/\" target=\"_blank\" rel=\"noopener\">iOS Developer Library</a> 还为开发者提供了更庞大、系统化的开发文档支持。</p>\n<p>以下列举了几份已有第三方中文翻译文档：</p>\n<ul>\n<li><a href=\"https://swift.org/documentation/api-design-guidelines/\" target=\"_blank\" rel=\"noopener\">API Design Guidelines</a>（<a href=\"http://swift.gg/2016/05/18/api-design-guidelines/\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/u/5174822990\" target=\"_blank\" rel=\"noopener\">@SwiftGG翻译组</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/index.html\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a>（<a href=\"https://github.com/ipader/SwiftGuide/tree/master/mirror/App%20Extension%20Programming%20Guide\" target=\"_blank\" rel=\"noopener\">中译镜像</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html\" target=\"_blank\" rel=\"noopener\">iOS Human Interface Guidelines</a>（<a href=\"https://isux.tencent.com/?s=iOS+9+%E4%BA%BA%E6%9C%BA%E7%95%8C%E9%9D%A2%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">中文版</a>｜<a href=\"http://ixdc.org/2016/files/ISUX[%E8%AF%91]iOS9%20human%20Interface%20Guideline.pdf\" target=\"_blank\" rel=\"noopener\">PDF 版</a> By <a href=\"http://weibo.com/txisux\" target=\"_blank\" rel=\"noopener\">@腾讯ISUX</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"noopener\">HomeKit Developer Guide</a>（<a href=\"http://www.cocoachina.com/ios/20150324/11411.html\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/cocoachina\" target=\"_blank\" rel=\"noopener\">@CocoaChina</a>）</li>\n</ul>\n<p>值得称道的还有：苹果为 <a href=\"https://developer.apple.com/videos/\" target=\"_blank\" rel=\"noopener\">Apple TV Tech Talks</a> 和 <a href=\"https://developer.apple.com/videos/wwdc2015/\" target=\"_blank\" rel=\"noopener\">WWDC 2015</a> 的视频添加简体中文字幕，从而方便中国开发者观看来自官方的权威技术分享。</p>\n<p>有关于 Swift 开源及跨平台开发，可以关注 <a href=\"https://swift.org/\" target=\"_blank\" rel=\"noopener\">swift.org</a></p>\n<h2 id=\"教程文章\"><a href=\"#教程文章\" class=\"headerlink\" title=\"教程文章\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md\" target=\"_blank\" rel=\"noopener\">教程文章</a></h2><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">开源项目</a></h2><h2 id=\"推荐网站\"><a href=\"#推荐网站\" class=\"headerlink\" title=\"推荐网站\"></a>推荐网站</h2><ul>\n<li><strong>苹果官方</strong></li>\n<li><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift</a>：Swift 概述、博客以及开发资源。</li>\n<li><a href=\"https://swift.org/\" target=\"_blank\" rel=\"noopener\">swift.org</a>：开源后独立出来的 Swift 开源社区。</li>\n<li><a href=\"https://github.com/apple\" target=\"_blank\" rel=\"noopener\">GitHub:apple</a>：苹果在 GitHub 上的开源项目。</li>\n<li><a href=\"https://github.com/apple/swift\" target=\"_blank\" rel=\"noopener\">GitHub:apple/swift</a>：swift 语言在 GitHub 上的开源项目。</li>\n<li><a href=\"https://github.com/ksm/SwiftInFlux\" target=\"_blank\" rel=\"noopener\">ksm/SwiftInFlux</a>：作者（Karol Mazur）将 Apple Developer Forums 上有关 Swift 特性、缺陷及变更讨论分类汇总并更新到 GitHub，具有很好的可读性。从中可以一窥 Swift 缺陷及未来潜在地变化。最关键地是有 Chris Lattner 及核心团队答疑解惑。</li>\n<li><del><a href=\"https://www.raywenderlich.com/\" target=\"_blank\" rel=\"noopener\">raywenderlich.com</a>(<a href=\"https://www.raywenderlich.com/zh-hans/\" target=\"_blank\" rel=\"noopener\">中文版</a>)：由Ray Wenderlich创建，专注于开发高质量编程指南（近期优质Swift文章及视频教程不断），著名的iOS/OS X博客及开发教程网站，非常适合新手学习。近期第一时间出了<a href=\"https://www.raywenderlich.com/74832/three-new-swift-books\" target=\"_blank\" rel=\"noopener\">三本 Swift 新书</a>。</del></li>\n<li><a href=\"http://www.natashatherobot.com/\" target=\"_blank\" rel=\"noopener\">Natasha The Robot</a>： 时髦码农不容错过的 Swift 开发实战教程类网站。为了简化学习复杂性，每一篇文章涵盖技术点单一又独立，配以开发步骤、运行结果以及代码等标准方式教授。难能可贵的是，它往往出品“追剧式”（最新开发特性或API跟进式）教程，实在是开发者必藏精品网站。</li>\n<li><a href=\"http://nshipster.com/\" target=\"_blank\" rel=\"noopener\">NShipster</a> (<a href=\"http://nshipster.cn/\" target=\"_blank\" rel=\"noopener\">中译版</a>：<a href=\"http://weibo.com/croath\" target=\"_blank\" rel=\"noopener\">@刘镇夫</a>，<a href=\"http://nshipster.cn/translators/april-peng/\" target=\"_blank\" rel=\"noopener\">April Peng</a>，<a href=\"http://weibo.com/leelejia\" target=\"_blank\" rel=\"noopener\">@李乐佳</a>，<a href=\"http://weibo.com/fallhunter\" target=\"_blank\" rel=\"noopener\">@程序员付恒</a> 等翻译)：著名开源作者 <a href=\"https://github.com/mattt\" target=\"_blank\" rel=\"noopener\">Matt Thompson</a> 创建的开发技术博客网站，他开发了 <a href=\"https://github.com/afnetworking/afnetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> 网络库，也是非常多产的开源作者。更多了解参考：<a href=\"http://www.fallhunter.com/p/10709\" target=\"_blank\" rel=\"noopener\">《COCOA 潮人 MATTT THOMPSON》</a> By <a href=\"http://weibo.com/fallhunter\" target=\"_blank\" rel=\"noopener\">@程序员付恒</a></li>\n<li><a href=\"http://jamesonquave.com/blog/\" target=\"_blank\" rel=\"noopener\">jamesonquave.com</a>：移动开发者，优秀个人博客（近期文章同样关注于Swift 语言，写得很优质）。同时他将于8/30发布一本新书<a href=\"http://jamesonquave.com/swiftebook/\" target=\"_blank\" rel=\"noopener\">《Developing iOS 8 Apps in Swift》</a> (Learn To Make Real World iOS 8 Apps)及视频教程。</li>\n<li><a href=\"https://www.objc.io/\" target=\"_blank\" rel=\"noopener\">objc.io</a>(<a href=\"http://objccn.io\" target=\"_blank\" rel=\"noopener\">中译版 By @onevcat 及其朋友们</a>)：”关于 Objective-C 最佳实践和先进技术的期刊。 由 Chris Eidhof, Daniel Eggert 和 Florian Kugler 成立于柏林。我们成立 objc.io 的目的是针对深入的、跟所有 iOS 和 OS X 开发者相关的技术话题创造一个正式的平台。“</li>\n<li><a href=\"http://www.ioscreator.com/\" target=\"_blank\" rel=\"noopener\">iOSCreator</a>：这类开发指引式教程对于初学者来讲，是直接明了的有效学习资源。推荐者<a href=\"http://weibo.com/qq184675420\" target=\"_blank\" rel=\"noopener\">@荧星诉语</a></li>\n<li><a href=\"https://iosdevweekly.com/\" target=\"_blank\" rel=\"noopener\">iOS Dev Weekly</a>：收录一周以来 iOS 开发资讯链接，并于周五发布。由 <a href=\"https://twitter.com/daveverwer\" target=\"_blank\" rel=\"noopener\">Dave Verwer</a> 创办，他是一位 iPhone 和 iPad 开发者以及培训师。</li>\n<li><a href=\"http://www.appcoda.com/\" target=\"_blank\" rel=\"noopener\">Appcoda.com</a>：质量很高的一个 iOS 开发教程站，其中<a href=\"http://www.appcoda.com/ios-programming-course/\" target=\"_blank\" rel=\"noopener\">iOS Programming Course</a>这个专题很适合刚接触 iOS 开发的新手学习。</li>\n<li><a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">中文 iOS/Mac 开发博客列表</a>：By <a href=\"http://weibo.com/tangqiaoboy\" target=\"_blank\" rel=\"noopener\">@唐巧_body</a></li>\n<li><a href=\"http://www.devtalking.com/\" target=\"_blank\" rel=\"noopener\">devtalking.com</a>：高产的中译博客。翻译了官方博客 Swift Blog - Apple Developer,《App Extension Programming Guide》。参与翻译了《Swift Programming Language》等。</li>\n<li><a href=\"http://swift.gg/\" target=\"_blank\" rel=\"noopener\">SwiftGG</a>：一个走心的 Swift 翻译组，由《The Swift Programming Language》中文版翻译团队原班人马组成， 翻译的文章来源于国外的优秀 Swift 网站和博客，且全部获得作者和网站授权。</li>\n<li><a href=\"http://www.jessesquires.com\" target=\"_blank\" rel=\"noopener\">Swift Weekly Brief</a>：“这个博客现在每周会将Swift开源中的重要讨论和提交整理成Open source Swift weekly brief，这对一线开发者尽早了解这门语言的动态情报很有帮助。By <a href=\"http://weibo.com/cuikang82\" target=\"_blank\" rel=\"noopener\">@崔康总编</a> ”。来源：<a href=\"http://www.jessesquires.com\" target=\"_blank\" rel=\"noopener\">Jesse Squires</a></li>\n<li><a href=\"http://swiftdevweekly.co/\" target=\"_blank\" rel=\"noopener\">Swift Developer Weekly</a>:这个网站每周推送最新的技术文章和书本推荐到你的email，由Phil Wright创办。</li>\n<li><p><a href=\"http://iosdevtips.co\" target=\"_blank\" rel=\"noopener\">iosdevtips.co</a>：iOS Development Tips</p>\n</li>\n<li><p><strong>资源合集</strong></p>\n<blockquote>\n<p>以下是其它开发者社区或 Swift 爱好者整理的有关 Swift 语言学习的资源列表。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/SwiftEducation\" target=\"_blank\" rel=\"noopener\">SwiftEducation</a>：“这是建立在 GitHub 上的一个 Swift 学习资料汇集，包括了有关幻灯和多个练手的应用程序源码。By @极客头条”。的确有不少基础实用的好<a href=\"https://github.com/SwiftEducation/presentations\" target=\"_blank\" rel=\"noopener\">教程</a>。这对于基础学起的同学有福了。</p>\n</li>\n<li><a href=\"https://github.com/hsavit1/Awesome-Swift-Education\" target=\"_blank\" rel=\"noopener\">Awesome-Swift-Education</a>：整理地如此美妙的学习资源，实在让人太欢喜了。</li>\n<li><a href=\"http://www.ioscookies.com/\" target=\"_blank\" rel=\"noopener\">iOS Cookies</a>：分类合理、排序靠谱的 Swift 开源类库集合。</li>\n<li><a href=\"https://github.com/matteocrippa/awesome-swift\" target=\"_blank\" rel=\"noopener\">matteocrippa/awesome-swift</a>：这个版本的 Swift 资源集合内容丰富，分类也不错。作者：<a href=\"https://github.com/matteocrippa\" target=\"_blank\" rel=\"noopener\">Matteo Crippa</a></li>\n<li><a href=\"http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites/1\" target=\"_blank\" rel=\"noopener\">适合iOS开发者的 15 大网站推荐</a>：的确很全、很主流的国外 iOS 开发者网站。</li>\n<li><a href=\"http://gold.xitu.io/#/tag/Swift\" target=\"_blank\" rel=\"noopener\">掘金 Swift 版块</a></li>\n<li><a href=\"http://weekly.manong.io/issues/33?ref=swift\" target=\"_blank\" rel=\"noopener\">码农周刊 －《Swift 特刊》</a></li>\n<li><a href=\"http://www.cocoachina.com/bbs/read.php?tid=204512\" target=\"_blank\" rel=\"noopener\">CocoaChina －《Swift 新手入门汇集帖》</a></li>\n<li><a href=\"http://code.csdn.net/news/2820075\" target=\"_blank\" rel=\"noopener\">CSDN_CODE －《Swift 编程语言资料大合集》</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/06/apple-swift-learning-resources\" target=\"_blank\" rel=\"noopener\">InfoQ －《学习苹果 Swift 语言的一些在线资源（英文）》</a></li>\n<li><a href=\"https://github.com/Lax/iOS-Swift-Demos/wiki\" target=\"_blank\" rel=\"noopener\">刘兰涛 －《Swift 学习资源》</a> By <a href=\"http://weibo.com/u/1653644220\" target=\"_blank\" rel=\"noopener\">@懒桃儿吃桃儿</a></li>\n<li><a href=\"http://www.learnswift.tips/\" target=\"_blank\" rel=\"noopener\">learnswift.tips</a>：国外主流 Swift 学习资源集合。</li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">Awesome iOS</a>：一个 iOS 的各类优秀的开源项目集合。真不错！可惜Swift开源项目资源不足。</li>\n<li><a href=\"http://iosdevelopertips.com/\" target=\"_blank\" rel=\"noopener\">iOS Developer Tips</a>：还是有关 iOS 的开发资源及文章合集。</li>\n<li><a href=\"https://github.com/Wolg/awesome-swift\" target=\"_blank\" rel=\"noopener\">Wolg/awesome-swift</a>：一位俄罗斯朋友分类整理的 Swift 资源列表（有持续更新）。</li>\n<li><a href=\"https://github.com/Aufree/trip-to-iOS\" target=\"_blank\" rel=\"noopener\">Aufree/trip-to-iOS</a>：显然作者很用心的做了非常深入的整理。它对于开发者拓展学习范围及开发知识面非常有益。</li>\n<li><a href=\"https://swift.zeef.com/robin.eggenkamp\" target=\"_blank\" rel=\"noopener\">Robin Eggenkamp - Awesome Swift</a>：“一个收集了很多 Swift 开发资源的网站”。</li>\n<li><a href=\"https://github.com/hehonghui/iOS-tech-frontier\" target=\"_blank\" rel=\"noopener\">iOS 开发技术前线</a>：“一个定期翻译、发布国内外iOS优质的技术、开源库、软件架构设计、测试等文章的开源项目”。主要翻译来源 Ray Wenderlich，App Coda，Medium。来源：<a href=\"http://weibo.com/u/5589212242\" target=\"_blank\" rel=\"noopener\">@开发技术前线</a></li>\n<li><a href=\"http://www.cocoachina.com/ios/20150626/11348.html\" target=\"_blank\" rel=\"noopener\">11个超棒的 iOS 开发学习网站</a>：还算比较主流的归纳。不过，缺了raywenderlich.com 和 ioscreator.com 这两个重量级教程网站实在是不应该啊。</li>\n</ul>\n<hr>\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><h3 id=\"1-编程工具\"><a href=\"#1-编程工具\" class=\"headerlink\" title=\"1. 编程工具\"></a>1. 编程工具</h3><ul>\n<li><a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">Xcode 下载</a>：苹果应用集成开发环境。支持 C/C++, Objective C, Swift 等。不用购买开发者计划，直接下载。</li>\n<li><a href=\"http://macromates.com/\" target=\"_blank\" rel=\"noopener\">Textmate</a>：Mac OS X 上一个可高度自定义的编辑器，尤其在我想做出一个快速改变但又不想等待 Xcode 加载的时候。该工具目前已经<a href=\"https://github.com/textmate/textmate\" target=\"_blank\" rel=\"noopener\">开源</a></li>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">Mou ($)</a>：OS X 上一款 Markdown 的编辑器。非常适用于编写自述文件、变更日志以及其他方面的内容。作者：<a href=\"http://chenluois.com/\" target=\"_blank\" rel=\"noopener\">罗晨</a></li>\n<li><a href=\"http://www.sublimetext.com/\" target=\"_blank\" rel=\"noopener\">Sublime Text ($)</a>：Mac OS X 上另一款非常受欢迎的轻量级，可高度自定义的编辑器。</li>\n<li><a href=\"http://www.runswiftlang.com/\" target=\"_blank\" rel=\"noopener\">RunSwift</a>:正在犹豫是否入手苹果电脑开始一段 Swift 编程旅程的同学们，或仅仅为了试验一段简单 Swift 代码又懒得打开 Xcode，可以试试这款 Web 版 Swift 编译环境 RunSwift。</li>\n<li><a href=\"http://infinitapps.com/bezel/\" target=\"_blank\" rel=\"noopener\">InfinitApps - Bezel</a>：“嫌 Xcode 6 目前提供的 Watch 模拟器不够直观？Bezel 是一个用于视觉预览 WatchKit 所开发程序效果的小工具，前提是你安装了 xScope 软件（Mac端）或 xScopeMirror（iPhone端）。 By <a href=\"http://weibo.com/twios\" target=\"_blank\" rel=\"noopener\">@WatchKit开发</a>”</li>\n<li><a href=\"https://github.com/jas/playground\" target=\"_blank\" rel=\"noopener\">Markdown -&gt; Playground</a>：该开源项目可将内含有 Swift 代码的 Markdown 自动转换为 Xcode Playgrounds 文件。喜欢用 Markdown 编辑的同学很激动吧。P.S. 这款工具写于 NodeJS，原因作者有交待。</li>\n<li><a href=\"https://autolayoutconstraints.com\" target=\"_blank\" rel=\"noopener\">iOS/Mac Autolayout Constraints</a>：这个工具不错，很直观，布局时可以省不少工夫。推荐者：<a href=\"http://weibo.com/qq184675420\" target=\"_blank\" rel=\"noopener\">@荧星诉语</a></li>\n<li><a href=\"https://appscreens.io/yK7cLuBNij\" target=\"_blank\" rel=\"noopener\">在线生成 AppStore 审核用截图</a>：便捷的生产力工具。免费，易操作，可自定义。</li>\n<li><a href=\"https://swiftlang.ng.bluemix.net/#/repl\" target=\"_blank\" rel=\"noopener\">IBM Swift Sandbox</a>：IBM的在线Swift网站，需要翻墙。</li>\n<li><a href=\"http://swiftstub.com/\" target=\"_blank\" rel=\"noopener\">SwiftStub</a>：另外一个Swift在线练习网站。</li>\n</ul>\n<h3 id=\"2-代码管理\"><a href=\"#2-代码管理\" class=\"headerlink\" title=\"2. 代码管理\"></a>2. 代码管理</h3><ul>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>：声望日盛的资源分享之地。</li>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub for Mac</a>：一个设计的非常美观的 git 客户端，不能取代你从命令行获得的所有功能，但使用起来非常简单。</li>\n<li><a href=\"https://gitcafe.com/\" target=\"_blank\" rel=\"noopener\">GitCafe</a>：GitCafe is a source code hosting service based on version control system Git。国内的代码托管服务，基于 Git，值得一提的是最近也推出了和 GitHub Pages 类似的服务 Gitcafe Pages。因为是在国内，所以相比较 GitHub 有速度优势，在网络环境差的情况下也许可以作为 GitHub 的备用。</li>\n<li><a href=\"https://bitbucket.org/\" target=\"_blank\" rel=\"noopener\">Bitbucket</a>：国外的代码托管服务，不同于 GitHub 的是，Bitbucket 可以免费建立 private 项目。</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>：分布式版本控制系统和源码管理系统，其优点是：快和简单易用。对于新手来说，可在此查看免费电子书籍。</li>\n<li><a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SourceTree</a>：A free Git &amp; Mercurial client for Windows or Mac.免费的Git和Mercurial客户端，当然也可以配合Bitbucket使用。</li>\n</ul>\n<h3 id=\"3-Xcode-插件\"><a href=\"#3-Xcode-插件\" class=\"headerlink\" title=\"3. Xcode 插件\"></a>3. Xcode 插件</h3><ul>\n<li><a href=\"http://beta.cocoapods.org/\" target=\"_blank\" rel=\"noopener\">CocoaPods</a>：第三方库的管理利器，允许你简单地把第三方库整合进自己的应用中。对我个人来说，我基本上每个项目都使用 CocoaPods。</li>\n<li><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">CocoaPods Xcode Plugin</a>：一款 Xcode 插件，允许你直接从 Xcode 管理 CocoaPod 依赖。</li>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">onevcat/VVDocumenter-Xcode</a>：快捷注释 Xcode 插件。By <a href=\"http://weibo.com/onevcat\" target=\"_blank\" rel=\"noopener\">@onevcat</a></li>\n<li><a href=\"https://github.com/omz/ColorSense-for-Xcode\" target=\"_blank\" rel=\"noopener\">ColorSense</a>：一款显示颜色数值的插件，还可以直接通过系统的ColorPicker来自动生成对应颜色代码</li>\n<li><a href=\"https://github.com/sopig/DeepIniOS\" target=\"_blank\" rel=\"noopener\">Xcode 优秀插件整理</a>:持续保持整理更新的 Xcode 插件整理 By <a href=\"https://github.com/ddapps\" target=\"_blank\" rel=\"noopener\">@ddapps</a></li>\n<li><a href=\"https://github.com/CodeEagle/SwiftCodeSnippets\" target=\"_blank\" rel=\"noopener\">CodeEagle/SwiftCodeSnippets</a>：自动下载指定 Xcode Snippet 源的 Xcode Plugin。项目缺省提供 Snippet 代码源 <a href=\"https://github.com/burczyk/XcodeSwiftSnippets/tree/master/plist\" target=\"_blank\" rel=\"noopener\">burczyk/XcodeSwiftSnippets</a> 。</li>\n<li><a href=\"https://github.com/realm/SwiftLint\" target=\"_blank\" rel=\"noopener\">realm/SwiftLint</a>：Realm 采用 Swift 编写的基于 GitHub’s Swift Style Guide 规则的检查工具。除了命令行运行方式，也提供集成 Xcode 的方法。对于新团队，这样的工具可以自动约束大家遵循编程规范。</li>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\" target=\"_blank\" rel=\"noopener\">XCode 升级后插件失效的原理与修复办法</a>：由一条命令引发的分析文章。<a href=\"http://weibo.com/u/2068840121\" target=\"_blank\" rel=\"noopener\">@_TongJZ</a></li>\n<li><a href=\"https://github.com/feinstruktur/CoPilot\" target=\"_blank\" rel=\"noopener\">feinstruktur/CoPilot</a>：通过此插件，Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。<a href=\"https://vimeo.com/128713880\" target=\"_blank\" rel=\"noopener\">演示视频</a></li>\n<li><a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a>：新兴起的去中心化的依赖管理器，目标是用最简单的方式来管理Cocoa第三方框架。优势很明显，但是也有不足，看后面的发展吧。</li>\n</ul>\n<h3 id=\"4-管理工具\"><a href=\"#4-管理工具\" class=\"headerlink\" title=\"4. 管理工具\"></a>4. 管理工具</h3><ul>\n<li><a href=\"https://github.com/kylef/swiftenv\" target=\"_blank\" rel=\"noopener\">swiftenv</a>：Swift 版本管理器。类似 rvm（Ruby）, nvm（Node.js）。</li>\n<li><a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">HomeBrew</a>：OS X 上非常出色的包管理工具。</li>\n<li><a href=\"http://panic.com/transmit/\" target=\"_blank\" rel=\"noopener\">Transmit ($)</a>：一个Mac OS X 上 FTP 客户端，有着非常漂亮的用户界面和有用的功能。</li>\n</ul>\n<h3 id=\"5-调试工具\"><a href=\"#5-调试工具\" class=\"headerlink\" title=\"5. 调试工具\"></a>5. 调试工具</h3><ul>\n<li><a href=\"http://fuckingclangwarnings.com/\" target=\"_blank\" rel=\"noopener\">mattt/fuckingclangwarnings.com</a>：警告与语义对照表。以后再也不用为 Xcode 各种警告纠结啦！By <a href=\"http://weibo.com/foogry\" target=\"_blank\" rel=\"noopener\">@foogry</a></li>\n</ul>\n<h3 id=\"6-设计工具\"><a href=\"#6-设计工具\" class=\"headerlink\" title=\"6. 设计工具\"></a>6. 设计工具</h3><ul>\n<li><a href=\"http://www.sketchapp.com/\" target=\"_blank\" rel=\"noopener\">sketch</a>：更适合开发应用的矢量设计工具。通过插件还支持与代码协同工作。推荐书籍：<a href=\"https://designcode.io/sketch\" target=\"_blank\" rel=\"noopener\">Learn Sketch 3</a></li>\n<li><a href=\"http://www.paintcodeapp.com/\" target=\"_blank\" rel=\"noopener\">PaintCode</a><br>:PaintCode是Apple Designer入门APP开发最合适的辅助工具之一，她可以把你绘制的矢量UI自动转化为适用于iOS/OS X的Objective-C代码。</li>\n</ul>\n<h3 id=\"7-发布工具\"><a href=\"#7-发布工具\" class=\"headerlink\" title=\"7. 发布工具\"></a>7. 发布工具</h3><ul>\n<li><a href=\"https://fabric.io\" target=\"_blank\" rel=\"noopener\">Frabic</a></li>\n<li><a href=\"\">fastlane</a></li>\n<li><a href=\"https://support.apple.com/zh-cn/macos/server\" target=\"_blank\" rel=\"noopener\">Xcode Server</a></li>\n</ul>\n<h3 id=\"7-开源项目\"><a href=\"#7-开源项目\" class=\"headerlink\" title=\"7. 开源项目\"></a>7. 开源项目</h3><ul>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a>侧滑布局类库,支持左右滑动，滑动距离;</li>\n<li><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a>易于集成，支持设备的方向，可通过类的方法来启用和禁用键盘管理器；</li>\n<li><a href=\"https://github.com/antoniocasero/ACPDownload\" target=\"_blank\" rel=\"noopener\">ACPDownload</a>实现类似AppStore下载状态样式；</li>\n<li><a href=\"https://github.com/thibaultCha/TCBlobDownload\" target=\"_blank\" rel=\"noopener\">TCBlobDownload</a>支持后台线程执行大文件下载任务，暂停和重新恢复下载；</li>\n<li><a href=\"https://github.com/shingwasix/MobShareSDK\" target=\"_blank\" rel=\"noopener\">MobShareSDK</a>实现微信朋友，朋友圈分享;</li>\n<li><a href=\"https://zwaldowski.github.io/BlocksKit\" target=\"_blank\" rel=\"noopener\">BlocksKit</a>没有创建新的宏，函数，方法和类，仅对Cocoa基础类的一个扩展，是取代了通常的delegate用法;</li>\n<li><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a>图片缓存的框架; </li>\n<li><a href=\"https://github.com/CoderMJLee/MJRefresh\" target=\"_blank\" rel=\"noopener\">MJRefresh</a>下拉刷新上拉加载更多MJRefresh类库;</li>\n<li><a href=\"https://github.com/scalessec/Toast\" target=\"_blank\" rel=\"noopener\">Toast</a>Android风格的Toast控件,用户提示便捷得体；</li>\n<li><a href=\"https://github.com/kcandr/IQLabelView\" target=\"_blank\" rel=\"noopener\">IQLabelView</a>对文本控件覆盖，缩放和旋转；</li>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></li>\n<li><a href=\"https://github.com/RestKit/RestKit\" target=\"_blank\" rel=\"noopener\">RestKit</a>处理web服务api,解析JSON映射响应对象；</li>\n<li><a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a>一个轻量级的布局框架,拥有自己的描述语法，采用更优雅的链式语法封装自动布局；</li>\n</ul>\n<p>*<a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/README.zh_CN.md\" target=\"_blank\" rel=\"noopener\">Perfect 服务器</a></p>\n<h2 id=\"媒体报道\"><a href=\"#媒体报道\" class=\"headerlink\" title=\"媒体报道\"></a><a href=\"https://github.com/ipader/SwiftGuide/tree/master/archive/news.md\" target=\"_blank\" rel=\"noopener\">媒体报道</a></h2><h2 id=\"开放平台\"><a href=\"#开放平台\" class=\"headerlink\" title=\"开放平台\"></a><a href=\"https://github.com/ipader/SwiftGuide/tree/master/archive/platforms.md\" target=\"_blank\" rel=\"noopener\">开放平台</a></h2><h2 id=\"Apple-Watch-指南\"><a href=\"#Apple-Watch-指南\" class=\"headerlink\" title=\"Apple Watch 指南\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Apple%20Watch/README.md\" target=\"_blank\" rel=\"noopener\">Apple Watch 指南</a></h2>","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"汇总","path":"api/tags/汇总.json"},{"name":"资源","path":"api/tags/资源.json"},{"name":"swift","path":"api/tags/swift.json"}]}]}