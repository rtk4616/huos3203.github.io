{"total":157,"pageSize":10,"pageCount":16,"data":[{"title":"当项目过大需要通过SSH方式Clone","slug":"git/当项目过大需要通过SSH方式Clone","date":"2018-04-04T17:44:24.000Z","updated":"2018-04-04T17:44:24.000Z","comments":true,"path":"api/articles/git/当项目过大需要通过SSH方式Clone.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"设置全局提交信息\"><a href=\"#设置全局提交信息\" class=\"headerlink\" title=\"设置全局提交信息\"></a>设置全局提交信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;you@example.com&quot;</span><br><span class=\"line\">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改最后一次提交的用户名信息\"><a href=\"#修改最后一次提交的用户名信息\" class=\"headerlink\" title=\"修改最后一次提交的用户名信息\"></a>修改最后一次提交的用户名信息</h3><p>``git<br>  git config user.name ‘wangz’<br>  git config user.email ‘wangz@alib.com’<br>  git commit  –amend –author=wangz<br>```</p>\n<h3 id=\"项目过大问题\"><a href=\"#项目过大问题\" class=\"headerlink\" title=\"项目过大问题\"></a>项目过大问题</h3><blockquote>\n<p>git clone 主工程出现 fatal: The remote end hung up unexpectedly3)</p>\n</blockquote>\n<p>通常的解决办法：</p>\n<ol>\n<li><p>设置提交缓存的大小为 1G：1048576000<br> git config http.postBuffer 1048576000</p>\n</li>\n<li><p>否则，需要配置github/gitlab的公钥<br> 生成：<code>ssh-keygen -t rsa -C &quot;$your_email&quot;</code><br> 拷贝：<code>pbcopy &lt; ~/.ssh/id_rsa.pub</code><br> 创建SSHKey：<br> 在github/gitlab新建公钥<code>add SSH Key</code>：粘贴到密钥文本框中即可。</p>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[]},{"title":"A++审核问题总结","slug":"测试/A++审核问题总结","date":"2018-04-03T15:29:08.000Z","updated":"2018-04-03T15:29:08.000Z","comments":true,"path":"api/articles/测试/A++审核问题总结.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://developer.apple.com/cn/app-store/review/guidelines/\" target=\"_blank\" rel=\"noopener\">苹果审核规则</a><br>答审核人员回访时提到的几个问题：</p>\n<ol>\n<li>处理非法内容的预防措施<br>答：我们平台会采取24小时内删除非法内容并将违规用户拉黑销号处理，通过后台运作实现有效的防范措施。</li>\n<li>app完整及数据内容规范化<br>答：我们对含有测试文本及敏感文字的数据进行清理，保证了功能完善内容规范。</li>\n<li>经营模式<br>举例说明：A有事想，通过发布任务给B，询问B是否有朋友可以帮忙，如果有并且愿意介绍，A愿意以红包的方式进行打赏B，这个红包是象征意义的红包，目前不会在APP内进行支付，会在线下支付，也可不支付。主要通过寻找朋友的人脉寻求帮助的场景建立起一个社交的应用场景。</li>\n<li>通讯录权限描述不清晰<br>答：我们重新校正了权限描述，让用户更清晰准确的理解APP使用通讯录的目的。</li>\n</ol>\n<p>希望早日通过审核，Thanks。</p>\n<h2 id=\"规则1-2-Safety-User-Generated-Content\"><a href=\"#规则1-2-Safety-User-Generated-Content\" class=\"headerlink\" title=\"规则1. 2 Safety: User Generated Content\"></a>规则1. 2 Safety: User Generated Content</h2><pre><code>添加举报功能\n</code></pre><h2 id=\"规则5-1-2通讯录权限\"><a href=\"#规则5-1-2通讯录权限\" class=\"headerlink\" title=\"规则5.1.2通讯录权限\"></a>规则5.1.2通讯录权限</h2><p>微信通讯录权限描述:</p>\n<h4 id=\"登录之后弹出两个提示\"><a href=\"#登录之后弹出两个提示\" class=\"headerlink\" title=\"\b登录之后弹出两个提示:\"></a>\b登录之后弹出两个提示:</h4><ol>\n<li>说明APP使用目的<br>微信将上传手机通讯录至微信服务器以匹配及推荐朋友.\\n(上传通讯录仅用于匹配,不会保存资料,亦不会用作他用)</li>\n<li>说明APP请求\b使用权限<br>如果不允许,微信将无法推荐通讯录中的朋友给你.微信仅使用特征码用于匹配识别,不会保存你的通讯录内容.</li>\n</ol>\n<p>规避封帐号的风险：</p>\n<ol>\n<li>\b总结常被拒的问题，每次发布时做好自查。</li>\n<li>把\b被拒概率大的单独申请账号审核。</li>\n</ol>\n<h2 id=\"被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）\"><a href=\"#被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）\" class=\"headerlink\" title=\"被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）\"></a>被苹果惩罚的原因（不做以下勾当就不会招来苹果惩罚）</h2><p>✕ 刷榜<br>众所周知，刷榜绝对是开发者被苹果惩罚的最主要原因。<br>✕ 诱导性运营活动<br>引导用户评论以及消费都属于诱导性运营活动。<br>✕ 被刷榜<br>这边要说下这点。所谓“被刷榜”是指，被竞争对手恶意刷好评通过苹果机制强制下架。竞争对手采用这种方式陷害竞品，而目前苹果很难界定刷榜行为的主动和被动，所以这块开发者也要注意了。<br>✕ 违规做热搜排名<br>热搜排名在ASO优化中占据重要位置，但其实热搜带来的下载量并不多，并且这种行为很容易被苹果检测到，而一些开发者仍然乐意在这块冒险。<br>✕ 加入非官方支付代码<br>有些开发商为了方便玩家支付，擅自绕开苹果的支付体系，加入支付宝代码等，这种行为被苹果发现后绝对是会直接封号，毫不留情。<br>✕ 涉政、违法<br>这点大家应该都很清楚，如果应用的功能涉及侵犯他人的隐私滥用隐私权限或者存在与宗教、法律相悖的内容，也会遭到下架。</p>\n<h2 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h2><p>✓ 1.一旦你的产品被惩罚，第一时间，邮件，电话等等方式找苹果，表示自己毫不知情，是受害者，希望能够恢复。态度一定要诚恳，据说这招很灵，不妨一试。<br>✓ 2.发动用户找苹果投诉，表示自己在App Store找不到喜欢的产品了，影响了用户体验。不过这招一定不能用力过猛，否则可能再给你的应用帮倒忙。<br>✓ 3.没办法中的办法，就是重新申请一个开发者账号，重新申请一个新的应用，换一张皮，重新上架。<br>原文：<a href=\"http://m.ifeng.com/news/x1PWh003/shareNews?aid=108804258&amp;fresh=1&amp;autoFresh=1\" target=\"_blank\" rel=\"noopener\">被苹果惩罚了之后怎么办？如何去规避风险呢</a></p>\n","raw":null,"categories":[{"name":"分类","path":"api/categories/分类.json"}],"tags":[]},{"title":"隐藏导航条底部黑线","slug":"iOS/隐藏导航条底部黑线","date":"2018-03-12T13:51:07.000Z","updated":"2018-03-13T18:00:23.000Z","comments":true,"path":"api/articles/iOS/隐藏导航条底部黑线.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>当需要导航条为透明色，与背景色一体时，需要去除底边线：<br>如下代码：使用空图片设置背景图，并指定bar的样式。</p>\n<pre><code class=\"swift\"><span class=\"keyword\">self</span>.navigationController.navigationBar setBackgroundImage:[<span class=\"type\">UIImage</span> new] forBarMetrics:<span class=\"type\">UIBarMetricsDefault</span>];\n<span class=\"keyword\">self</span>.navigationController.navigationBar.barStyle = <span class=\"type\">UIBarStyleBlackTranslucent</span>;\n</code></pre>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"}],"tags":[]},{"title":"千百度","slug":"podcast/千百度","date":"2018-01-05T21:37:53.000Z","updated":"2018-01-08T15:43:08.000Z","comments":true,"path":"api/articles/podcast/千百度.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>这里就是简介的描写，千百度，很好听的歌曲<br><a id=\"more\"></a><br>\n        <div id=\"aplayer-wyXwwgtX\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;width:70%;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-wyXwwgtX\"),\n            narrow: false,\n            autoplay: true,\n            showlrc: false,\n            music: {\n              title: \"千百度\",\n              author: \"许嵩\",\n              url: \"/images/qbd.mp3\",\n              pic: \"/images/BoldText.png\",\n              lrc: \"\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script></p>\n<h2 id=\"歌词\"><a href=\"#歌词\" class=\"headerlink\" title=\"歌词\"></a>歌词</h2>\n\t\t\t<script>\n\t\t\t\tconsole.error(\"Error: [hexo-tag-aplayer] Unrecognized tag argument(2): /images/BoldText.png\");\n\t\t\t</script>\n<p>第一个播客测试了。</p>\n","raw":null,"categories":[{"name":"podcast","path":"api/categories/podcast.json"}],"tags":[{"name":"test","path":"api/tags/test.json"},{"name":"audio","path":"api/tags/audio.json"}]},{"title":"Objective-C的运行时以及swift的动态性","slug":"swift/Objective-C的运行时以及swift的动态性","date":"2017-09-25T20:01:36.000Z","updated":"2017-10-02T22:00:42.000Z","comments":true,"path":"api/articles/swift/Objective-C的运行时以及swift的动态性.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Objective-C-运行时\"><a href=\"#Objective-C-运行时\" class=\"headerlink\" title=\"Objective-C 运行时\"></a>Objective-C 运行时</h2><p>Objective-C 是一门基于运行时的编程语言，这意味着所有方法、变量、类之间的链接，都会推迟到应用实际运行的最后一刻才会建立。这将给开发人员极高的灵活性，因为我们可以修改这些链接。而不同的是，Swift 绝大多数时候是一门面向编译时的语言。因此在 Swift 当中，灵活性受到了限制，不过您会因此得到更多的安全性。</p>\n<h3 id=\"runtime-h开源库\"><a href=\"#runtime-h开源库\" class=\"headerlink\" title=\"runtime.h开源库\"></a>runtime.h开源库</h3><p>Objective-C 的运行时本质上是一个库。它负责了 “Objective” 这个部分，因此您所知、所爱的面向对象编程，都是在这里实现的。如果您想要访问里面的函数的话，只需要导入这个库即可：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>runtime.h</code>开源库主要由 C 和汇编编写而成，其实现了诸如类、对象、方法调度、协议等面向对象编程这个部分。</p>\n<h4 id=\"构建模块\"><a href=\"#构建模块\" class=\"headerlink\" title=\"构建模块\"></a>构建模块</h4><h5 id=\"对象结构体\"><a href=\"#对象结构体\" class=\"headerlink\" title=\"对象结构体\"></a>对象结构体</h5><p>那么什么是对象呢？对象在 runtime.h 当中是这样定义的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>isa</strong>:建立<code>对象</code>只与一个类引用关联，也就是这个 isa 的意思所在。这也就是 Objective-C 当中的所有对象都需要实现的。</p>\n<h5 id=\"类结构体\"><a href=\"#类结构体\" class=\"headerlink\" title=\"类结构体\"></a>类结构体</h5><p>那么类又是什么呢？类的定义要稍微复杂一些。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">    Class super_class;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> version;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> info;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> instance_size;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>属性说明：<br><strong>isa</strong>属性：建立自身与 <code>super_class</code> 这个值进行关联。<br><strong>super_class</strong>:除了 NSObject 这个类之外，super_class 的值永远不会为 nil，因为 Objective-C 当中的其余类都是以某种方式继承自 NSObject 的。<br><strong>ivars</strong>：变量列表<br><strong>methodLists</strong>：方法列表<br><strong>protocols</strong>：协议列表<br>其他属性：<code>name</code>、<code>version</code>、<code>info</code> 之类的值，不过这些并不是我们感兴趣的内容。<br>这些就是我们能在运行时修改和读取的。可以看到，对象其实本质上是一个非常简单的结构体，类同样也是。</p>\n<h3 id=\"allocateClassPair函数创建类\"><a href=\"#allocateClassPair函数创建类\" class=\"headerlink\" title=\"allocateClassPair函数创建类\"></a>allocateClassPair函数创建类</h3><p>我们可以借助运行时函数，从而在运行时动态创建类。</p>\n<ol>\n<li>要用的 Objective-C 运行时函数：<code>allocateClassPair</code>。提供三个参数即可：<br><strong>isa</strong>：关联引用，这里提供了NSObject<br>类名：<br>额外字节的定义：通常我们都直接赋值 0 即可</li>\n<li>添加变量、方法以及协议</li>\n<li><code>registerClassPair</code>注册这个 ClassPair,注册之后，我们就无法修改变量列表了，不过其余的内容仍然可以修改。</li>\n<li>初始化类结束~我们所创建的这个类和其余的 Objective-C 类毫无区别。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类函数的构造器</span></span><br><span class=\"line\">Class myClass = objc_allocateClassPair([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>], <span class=\"string\">\"MyClass\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里添加变量、方法和协议</span></span><br><span class=\"line\"></span><br><span class=\"line\">objc_registerClassPair(myClass);</span><br><span class=\"line\"><span class=\"comment\">// 当类注册之后，变量列表将会被锁定</span></span><br><span class=\"line\"></span><br><span class=\"line\">[[myClass alloc] init];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>我们为什么要这么做呢？因为这个函数被大量运用在库提供者制作的框架当中。如果您无法知道用户将会创建什么样的数据，那么您就需要在运行时进行类的创建了。Core Data 就使用了这个功能。此外，如果您愿意的话，它还可以用在 JSON 解析当中。</p>\n<h3 id=\"在类别中添加存储属性\"><a href=\"#在类别中添加存储属性\" class=\"headerlink\" title=\"在类别中添加存储属性\"></a>在类别中添加存储属性</h3><p>如果您想要扩展一个不是自己创建的类，想要向其中添加函数，有一个便捷的方法便是使用 Objective-C 的类别 (Category) 特性。Swift 的扩展与之非常相似。类别的一个问题便在于，它无法添加存储属性。您可以添加一个计算属性，但是存储属性是无法添加的。</p>\n<p>运行时的另一个特性便是：我们可以借助 <code>setAssociatedObject</code> 和 <code>getAssociatedObject</code> 这两个函数，向既有的类当中添加存储属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation NSObject (AssociatedObject)</span><br><span class=\"line\">@dynamic associatedObject;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setAssociatedObject:(id)object &#123;</span><br><span class=\"line\">    objc_setAssociatedObject(self, @selector(associatedObject), object,</span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)associatedObject &#123;</span><br><span class=\"line\">    return objc_getAssociatedObject(self, @selector(associatedObject));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于不是自己创建的类而言，使用这个方法进行扩展无疑是非常好用的。</p>\n<h3 id=\"内省机制\"><a href=\"#内省机制\" class=\"headerlink\" title=\"内省机制\"></a>内省机制</h3><p>「内省 (introspection)」机制是用来判别这个类能执行何种操作。通常，我们所使用的往往是最基础的内省功能。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类成员判断</span></span><br><span class=\"line\">[myObject isMemberOfClass:<span class=\"built_in\">NSObject</span>.class];</span><br><span class=\"line\"><span class=\"comment\">//类方法判断</span></span><br><span class=\"line\">[myObject respondsToSelector:<span class=\"keyword\">@selector</span>(doStuff:)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// isa == class</span></span><br><span class=\"line\">class_respondsToSelector(myObject.class, <span class=\"keyword\">@selector</span>(doStuff:));</span><br></pre></td></tr></table></figure></p>\n<p><code>isMemberOfClass</code>:是 Foundation 当中的一部分，这里我们查看 myObject 是否是 NSObject 的子类。<br><code>respondsToSelector:</code>:当我们使用了一个带有可选方法的协议时，为了避免崩溃发生，可以借助这个函数来判断这个对象是否可以调用此可选方法。<br><strong>在运行时层面</strong><br><code>isMemberOfClass</code>: 对比两者的 <strong>isa</strong> 是否相同。<br><code>respondsToSelector</code>:则封装了一个 Objective-C 运行时函数：<code>respondsToSelector</code>，其接受 <code>Selector</code> 和<code>类</code>为参数。</p>\n<h3 id=\"单元测试：方法列表\"><a href=\"#单元测试：方法列表\" class=\"headerlink\" title=\"单元测试：方法列表\"></a>单元测试：方法列表</h3><p>如果您写过单元测试的话，您就会知道当我们在编写 XCTestCase 的时候，需要完成 setUp 和 tearDown 的设定，随后才能编写相关的 test 函数。当测试运行的时候，系统会自行遍历所有的测试函数，并自动运行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int count;</span><br><span class=\"line\">Method *methods = class_copyMethodList(myObject.class,&amp;count);</span><br><span class=\"line\">//Ivar *list = class_copyIvarList(myObject.class,&amp;count);</span><br><span class=\"line\"></span><br><span class=\"line\">for(unsigned i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">    SEL selector = method_getName(methods[i]);</span><br><span class=\"line\">    NSString *selectorString = NSStringFromSelector(selector);</span><br><span class=\"line\">    if ([selectorString containsString:@&quot;test&quot;]) &#123;</span><br><span class=\"line\">        [myObject performSelector:selector];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">free(methods);</span><br></pre></td></tr></table></figure></p>\n<p>这个功能是借助 Objective-C 的运行时机制实现的,即：借助运行时函数获取可以复制方法列表，还可以复制变量列表。可以获取方法名，然后将其转换为字符串，检查其是否包含有 “test”，如果有便可以运行。现在我们便搭建好了 XCTest 的最简单版本！</p>\n<h3 id=\"方法-变量的结构体成员\"><a href=\"#方法-变量的结构体成员\" class=\"headerlink\" title=\"方法/变量的结构体成员\"></a>方法/变量的结构体成员</h3><ol>\n<li><p>变量结构体：包含了变量类型和变量名称。偏移量 (offset) 则是内存管理方面的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ivar_name;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ivar_type;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法结构体：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL method_name;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *method_types;</span><br><span class=\"line\">    IMP method_imp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>SEL</strong>： 使用Selector 来表示的Objective-C方法的名称，对应在 performSelector 当中所匹配的内容。<br><strong>方法类型</strong>：使用编码字符串来表示其类型。<br><strong>IMP</strong>：是方法实现的一种特定的表示方式。</p>\n<h4 id=\"给对象添加方法\"><a href=\"#给对象添加方法\" class=\"headerlink\" title=\"给对象添加方法\"></a>给对象添加方法</h4><p>了解方法结构体后，可知我们同样可以在运行时向对象当中添加方法：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">Method doStuff = class_getInstanceMethod(<span class=\"keyword\">self</span>.class, <span class=\"keyword\">@selector</span>(doStuff));</span><br><span class=\"line\"><span class=\"comment\">//获取方法的实现</span></span><br><span class=\"line\">IMP doStuffImplementation = method_getImplementation(doStuff);</span><br><span class=\"line\"><span class=\"comment\">//获取方法的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *types = method_getTypeEncoding(doStuff); <span class=\"comment\">//“v@:@\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">class_addMethod(myClass.class, <span class=\"keyword\">@selector</span>(doStuff:), doStuffImplementation, types);</span><br></pre></td></tr></table></figure></p>\n<p><code>class_addMethod</code>: 向对象当中添加方法的运行时函数。它所需的参数，即上述方法结构体当中的那三个值：Selector、方法实现和方法类型。</p>\n<h4 id=\"调用新加的方法\"><a href=\"#调用新加的方法\" class=\"headerlink\" title=\"调用新加的方法\"></a>调用新加的方法</h4><p>当然，我们添加了方法目的就是要使用它们。我们可以使用 <code>[self doStuff]</code> 或者<code>[self performSelector:@selector(doStuff)]</code>来进行调用，实际上在运行时级别，它们都是借助 <code>objc_msgSend</code> 向对象发送了一个消息。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> doStuff];</span><br><span class=\"line\"><span class=\"comment\">//方式二</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(doStuff)];</span><br><span class=\"line\"><span class=\"comment\">//方式三</span></span><br><span class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(message));</span><br></pre></td></tr></table></figure></p>\n<p>但是如果调用方法所在的对象为 nil 的时候，我们就会得到一个异常，应用便会崩溃。但事实证明，在崩溃之前会预留几个步骤，从而允许我们对某个不存在的函数进行一些操作。</p>\n<h3 id=\"方法转发\"><a href=\"#方法转发\" class=\"headerlink\" title=\"方法转发\"></a>方法转发</h3><p>当我们试图桥接两个不同的框架的时候，可以将方法转发 (forward) 给其余目标。这个功能便非常有用。当我们调用某个未实现的方法时，这便是会发生的操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1</span><br><span class=\"line\">+(BOOL)resolveInstanceMethod:(SEL)sel&#123;</span><br><span class=\"line\">    // 添加实例方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(BOOL)resolveClassMethod:(SEL)sel&#123;</span><br><span class=\"line\">    // 添加类方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2</span><br><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector&#123;</span><br><span class=\"line\">    // 返回可以处理 Selector 的对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3</span><br><span class=\"line\">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</span><br><span class=\"line\">    // 您需要实现它来创建 NSInvocation</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)invocation &#123;</span><br><span class=\"line\">    // 在您所选择的目标上调用 Selector</span><br><span class=\"line\">    [invocation invokeWithTarget:target];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当您调用了某个不存在的方法时，运行时有如下处理步骤：</p>\n<ol>\n<li>首先调用两个类方法：一个名为 <code>resolveInstanceMethod</code>类方法，如果所调用的方法是类方法，则调用为调用 <code>resolveClassMethod</code>类方法。这时候我们便有机会来添加方法了，步骤的话我们之前就已经展示过了。如果我们返回了 YES，就意味着原始方法将会再次被调用。</li>\n<li><code>forwardingTargetForSelector</code>：当不要添加新方法时，可以直接返回需要调用方法的目标对象即可，之后这个对象就会调用 Selector。</li>\n<li><code>forwardInvocation</code>方法：实现在您所选择的目标对象上调用 Selector，所有的调用过程都被封装到 <code>NSInvocation</code> 对象当中。如果您需要这么做，那么还需要实现 <code>methodSignatureForSelector</code>。<br>完成以上步骤，便可以可以将方法转发给其他对象。<h3 id=\"方法混淆：替换或交换\"><a href=\"#方法混淆：替换或交换\" class=\"headerlink\" title=\"方法混淆：替换或交换\"></a>方法混淆：替换或交换</h3>您可以使用运行时当中最著名的动态特性：方法混淆 (swizzling),即使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。之所以想要混淆，是因为它可以用于日志记录和 Mock 测试。<br>混淆的基本方法如下所示：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(doSomething);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(mo_doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">        originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">        swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>, originalSelector,</span><br><span class=\"line\">                                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,swizzledSelector,</span><br><span class=\"line\">                                method_getImplementation(originalMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当类加载之后，会调用一个名为 <code>load</code> 的类函数。由于我们只打算混淆一次，因此我们需要使用 <code>dispatch_once</code>。接着我们便可以得到该方法，然后使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。</p>\n<h2 id=\"Foundation\"><a href=\"#Foundation\" class=\"headerlink\" title=\"Foundation\"></a>Foundation</h2><p>Foundation 框架实现了基于运行时一个特性的两个API：</p>\n<ol>\n<li><code>键值编码 (key-value-coding, KVC)</code></li>\n<li><code>键值观察 (key-value observing, KVO)</code><br>KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基础。<h3 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h3>KVC 的工作方式如下所示：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> *number;</span><br><span class=\"line\"></span><br><span class=\"line\">[myClass valueForKey:<span class=\"string\">@\"number\"</span>];</span><br><span class=\"line\">[myClass setValue:@(<span class=\"number\">4</span>) forKey:<span class=\"string\">@\"number\"</span>];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如，假设我们有这个 number 属性，您可以将属性名称作为键，来获取属性值或者设置属性值。这个功能可以用在此前我们所看到的获取变量列表、协议列表，以及危险的混淆功能当中。</p>\n<h3 id=\"KVO\"><a href=\"#KVO\" class=\"headerlink\" title=\"KVO\"></a>KVO</h3><p>通常所说的 Objective-C 「动态性」，往往都是指 KVO。虽然还有其余的函数，但是这些是最常见、最常用的。这也就是人们所说的，Swift 缺失的部分。</p>\n<ol>\n<li>使用KVO对状态的变化进行注册<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[myClass addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">forKeyPath:<span class=\"string\">@\"number\"</span></span><br><span class=\"line\">options:<span class=\"built_in\">NSKeyValueObservingOptionInitial</span> | <span class=\"built_in\">NSKeyValueObservingOptionNew</span></span><br><span class=\"line\">context:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath</span><br><span class=\"line\">ofObject:(<span class=\"keyword\">id</span>)object</span><br><span class=\"line\">change:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSKeyValueChangeKey</span>,<span class=\"keyword\">id</span>&gt; *)change</span><br><span class=\"line\">context:(<span class=\"keyword\">void</span> *)context&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Respond to observation.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在观察的值发生变更之后，KVO 会调用此方法立即通知观察者。通过这个方法，我们便可以按需更新 UI。</p>\n<ol>\n<li>弊端：难以调试<br>KVO这些操作都存有隐患。比方说 KVO，特别是当我们对某个不是自己所创建的类进行观察时，往往会发现有出乎意料的变化发生。通常而言，这些问题是非常难以调试的，也很难去理解为什么出错。在实际产品当中，我并不建议使用它们，尽管它们非常好用。但是在实际产品当中，我会很谨慎地去使用这些功能。</li>\n</ol>\n<p>Apple 也是如此认为的，因此它们在视图控制器当中添加了这个私有方法，可以使用 class-dump 来查看。</p>\n<ul>\n<li>(void)                   attentionClassDumpUser:<br>yesItsUsAgain:<br>althoughSwizzlingAndOverridingPrivateMethodsIsFun:<br>itWasntMuchFunWhenYourAppStoppedWorking:<br>pleaseRefrainFromDoingSoInTheFutureOkayThanksBye:</li>\n</ul>\n<p>的确，很让人抓狂。</p>\n<h2 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h2><p>Swift 是一种强类型语言。即默认类型是安全的静态类型。如果需要的话，不安全类型也是存在的，但是 Swift 仍然是尽力推动我们使用安全的静态类型。Swift 中的动态性可以通过 Objective-C 运行时来获得。</p>\n<p>本来这是很好的，但是 Swift 开源并迁移到 Linux 之后，由于 Linux 上的 Swift 并不提供 Objective-C 运行时，事情就大条了。社区的关键点在于，让 Swift 未来能够自己配备动态性，而不是依赖于 Apple。</p>\n<h3 id=\"Swift中的两个动态修饰符\"><a href=\"#Swift中的两个动态修饰符\" class=\"headerlink\" title=\"Swift中的两个动态修饰符\"></a>Swift中的两个动态修饰符</h3><ol>\n<li><code>@objc</code>: 将Swift API 暴露给 Objective-C 运行时，但是它仍然不能保证编译器会尝试对其进行优化。</li>\n<li><code>@dynamic</code>:动态功能修饰符，它隐含添加了 <code>@objc</code>功能。</li>\n</ol>\n<h3 id=\"Swift中运行时方法\"><a href=\"#Swift中运行时方法\" class=\"headerlink\" title=\"Swift中运行时方法\"></a>Swift中运行时方法</h3><p>回到我们的动态特性当中，让我们来看一看 Swift 当中这些动态特性是什么样的。假设我们需要使用内省机制、转发方法、替换和绑定方法。</p>\n<h4 id=\"方法转发-1\"><a href=\"#方法转发-1\" class=\"headerlink\" title=\"方法转发\"></a>方法转发</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">override <span class=\"keyword\">class</span> func resolveInstanceMethod(_ sel: Selector!)</span><br><span class=\"line\">-&gt; Bool &#123;</span><br><span class=\"line\"><span class=\"comment\">// 添加实例方法并返回 true 的一次机会，它随后会再次尝试发送消息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">override func forwardingTarget(<span class=\"keyword\">for</span> aSelector: Selector!) -&gt;</span><br><span class=\"line\">Any? &#123;</span><br><span class=\"line\"><span class=\"comment\">// 返回可以处理 Selector 的对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 - Swift 不支持 NSInvocation</span></span><br></pre></td></tr></table></figure>\n<p>resolveInstanceMethod 同样会被调用，forwardingTarget 看起来似乎更贴近于 Swift 3 风格的 API。但是 NSInvocation 并不能在 Swift 当中使用。我们同样可以实现方法转发，因此看起来也不算太坏。</p>\n<h4 id=\"方法混淆\"><a href=\"#方法混淆\" class=\"headerlink\" title=\"方法混淆\"></a>方法混淆</h4><p><code>load</code> 在 Swift 不再会被调用，因此我们需要在 <code>initialize</code> 中进行混淆。在 Objective-C 当中使用的 <code>dispatch_once</code>，但是在 Swift 3 中被废弃。事情变得略为复杂。虽然对于特定类型的函数而言，我们仍然可以将其定义为动态函数，但是它会消除大部分混淆的功能。</p>\n<h4 id=\"内省机制-1\"><a href=\"#内省机制-1\" class=\"headerlink\" title=\"内省机制\"></a>内省机制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if self is MyClass &#123;</span><br><span class=\"line\">    // YAY</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myString = &quot;myString&quot;;</span><br><span class=\"line\">let mirror = Mirror(reflecting: myString)</span><br><span class=\"line\">print(mirror.subjectType) // “String&quot;</span><br><span class=\"line\">let string = String(reflecting: type(of:</span><br><span class=\"line\">myString)) // Swift.String</span><br><span class=\"line\"></span><br><span class=\"line\">// No native method introspection</span><br></pre></td></tr></table></figure>\n<p><code>is</code> 替代了 <code>isMemberOfClass</code>，它同样也可以对 Swift 值类型:结构体、枚举以及其他 Swift 当中的新类型使用。此外还有一个新的映射 API，它主要针对于管道 (pipe) 和数据。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>目前，我们没有原生的办法来实现内省。这也预示着这个功能未来可能会出现，但是目前我们还无法实现。这很令人沮丧，特别是当您想到我们此前所实现的 XCTestCase。如果您打算为 Linux 编写单元测试的时候，就无法自动遍历所有的函数。您必须实现 static var allTests，然后手动列出所有的测试函数。这很糟糕。</p>\n<h4 id=\"KVC-KVO功能的削弱\"><a href=\"#KVC-KVO功能的削弱\" class=\"headerlink\" title=\"KVC/KVO功能的削弱\"></a>KVC/KVO功能的削弱</h4><p>KVO 的魅力在于，您可以在不是自己所创建的类当中使用它，也可以只对您想要监听变化的类使用。KVO 和 KVC 在 Swift 被极大地削弱了。<br>两点要求：</p>\n<ol>\n<li>被观察的对象必须要继承自 NSObject，并且使用一个 Objective-C 类型。</li>\n<li>被观察的变量必须要声明为 @dynamic。您必须要对想要观察的事务了如指掌。<br>问题是 Swift 并没有很好的替代方案。您可以使用 Rx 或者基于协议来观察对象。但是语言自身是没有原生的解决方案的。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，Objective-C 的动态性无疑是非常强大的、极其有用，虽然也存在危险性。Swift 目前没有足够的替代方案来解决这些问题，但是可以预见在不久的将来 Swift 的动态性将会出现，这是值得我们期待的。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[]},{"title":"MVVM介绍","slug":"iOS/MVVM介绍","date":"2017-09-24T19:26:28.000Z","updated":"2017-10-02T22:00:42.000Z","comments":true,"path":"api/articles/iOS/MVVM介绍.json","excerpt":null,"keywords":null,"cover":"https://www.objccn.io/images/issues/issue-13/mvvm1.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>所以，MVVM 到底是什么？与其专注于说明 MVVM 的来历，不如让我们看一个典型的 iOS 是如何构建的，并从那里了解 MVVM：</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/mvvm1.png\" alt=\"Typical Model-View-Controller setup\"></p>\n<p>我们看到的是一个典型的 MVC 设置。Model 呈现数据，View 呈现用户界面，而 View Controller 调节它两者之间的交互。</p>\n<p>稍微考虑一下，虽然 View 和 View Controller 是技术上不同的组件，但它们几乎总是手牵手在一起，成对的。你什么时候看到一个 View 能够与不同 View Controller 配对？或者反过来？所以，为什么不正规化它们的连接呢？</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/intermediate.png\" alt=\"Intermediate\"></p>\n<p>这更准确地描述了你可能已经编写的 MVC 代码。但它并没有做太多事情来解决 iOS 应用中日益增长的重量级视图控制器的问题。</p>\n<p>在典型的 MVC 应用里，<em>许多</em>逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（presentation logic）”，以 MVVM 属术语来说，就是那些将 Model 数据转换为 View 可以呈现的东西的事情，例如将一个 <code>NSDate</code> 转换为一个格式化过的 <code>NSString</code>。<br>我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View/Controller 与 Model 之间：</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/mvvm.png\" alt=\"Model-View-ViewModel\"></p>\n<p>看起好多了！这个图解准确地描述了什么是 MVVM：一个 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。MVVM 听起来很复杂，但它本质上就是一个精心优化的 MVC 架构，而 MVC 你早已熟悉。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>现在我们知道了<em>什么</em>是 MVVM，但<em>为什么</em>我们会想要去使用它呢？在 iOS 上使用 MVVM 的动机，对我来说，无论如何，就是它能减少 View Controller 的复杂性并使得表示逻辑更易于测试。通过一些例子，我们将看到它如何达到这些目标。</p>\n<p>此处有三个重点是我希望你看完本文能带走的：</p>\n<ul>\n<li>MVVM 可以兼容你当下使用的 MVC 架构。</li>\n<li>MVVM 增加你的应用的可测试性。</li>\n<li>MVVM 配合一个绑定机制效果最好。</li>\n</ul>\n<p>如我们之前所见，MVVM 基本上就是 MVC 的改进版，所以很容易就能看到它如何被整合到现有使用典型 MVC 架构的应用中。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>让我们看一个简单的 <code>Person</code> Model 以及相应的 View Controller：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initwithSalutation:(<span class=\"built_in\">NSString</span> *)salutation firstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName birthdate:(<span class=\"built_in\">NSDate</span> *)birthdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *salutation;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *firstName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *lastName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *birthdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们假设我们有一个 <code>PersonViewController</code> ，在 <code>viewDidLoad</code> 里，只需要基于它的 <code>model</code> 属性设置一些 Label 即可。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.model.salutation.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.nameLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@ %@\"</span>, <span class=\"keyword\">self</span>.model.salutation, <span class=\"keyword\">self</span>.model.firstName, <span class=\"keyword\">self</span>.model.lastName];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.nameLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@\"</span>, <span class=\"keyword\">self</span>.model.firstName, <span class=\"keyword\">self</span>.model.lastName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</span><br><span class=\"line\">    [dateFormatter setDateFormat:<span class=\"string\">@\"EEEE MMMM d, yyyy\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.birthdateLabel.text = [dateFormatter stringFromDate:model.birthdate];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这全都直截了当，标准的 MVC。现在来看看我们如何用一个 View Model 来增强它。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PersonViewModel</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithPerson:(Person *)person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) Person *person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *nameText;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *birthdateText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>我们的 View Model 的实现大概如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation PersonViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithPerson:(Person *)person &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (!self) return nil;</span><br><span class=\"line\"></span><br><span class=\"line\">    _person = person;</span><br><span class=\"line\">    if (person.salutation.length &gt; 0) &#123;</span><br><span class=\"line\">        _nameText = [NSString stringWithFormat:@&quot;%@ %@ %@&quot;, self.person.salutation, self.person.firstName, self.person.lastName];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        _nameText = [NSString stringWithFormat:@&quot;%@ %@&quot;, self.person.firstName, self.person.lastName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class=\"line\">    [dateFormatter setDateFormat:@&quot;EEEE MMMM d, yyyy&quot;];</span><br><span class=\"line\">    _birthdateText = [dateFormatter stringFromDate:person.birthdate];</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>我们已经将 <code>viewDidLoad</code> 中的表示逻辑放入我们的 View Model 里了。此时，我们新的 <code>viewDidLoad</code> 就会非常轻量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.nameLabel.text = <span class=\"keyword\">self</span>.viewModel.nameText;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.birthdateLabel.text = <span class=\"keyword\">self</span>.viewModel.birthdateText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以，如你所见，并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。它与 MVC 兼容，带来<a href=\"http://objccn.io/issue-1/\" target=\"_blank\" rel=\"noopener\">更轻量的 View Controllers</a>。</p>\n<h3 id=\"可测试\"><a href=\"#可测试\" class=\"headerlink\" title=\"可测试\"></a>可测试</h3><p>View Controller 是出了名的难以测试，因为它们做了太多事情。在 MVVM 里，我们试着尽可能多的将代码移入 View Model 里。测试 View Controller 就变得容易多了，因为它们不再做一大堆事情，并且 View Model 也非常易于测试。让我们来看看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpecBegin(Person)</span><br><span class=\"line\">NSString *salutation = @&quot;Dr.&quot;;</span><br><span class=\"line\">NSString *firstName = @&quot;first&quot;;</span><br><span class=\"line\">NSString *lastName = @&quot;last&quot;;</span><br><span class=\"line\">NSDate *birthdate = [NSDate dateWithTimeIntervalSince1970:0];</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should use the salutation available. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:salutation firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.nameText).to.equal(@&quot;Dr. first last&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should not use an unavailable salutation. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.nameText).to.equal(@&quot;first last&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should use the correct date format. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.birthdateText).to.equal(@&quot;Thursday January 1, 1970&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SpecEnd</span><br></pre></td></tr></table></figure></p>\n<p>如果我们没有将这个逻辑移入 View Model，我们将不得不实例化一个完整的 View Controller 以及伴随的 View，然后去比较我们 View 中 Label 的值。这样做不只是会变成一个麻烦的间接层，而且它只代表了一个十分脆弱的测试。现在，我们可以按意愿自由地修改视图层级而不必担心破坏我们的单元测试。使用 MVVM 带来的对于测试的好处非常清晰，甚至从这个简单的例子来看也可见一斑，而在有更复杂的表示逻辑的情况下，这个好处会更加明显。</p>\n<h3 id=\"响应式同步\"><a href=\"#响应式同步\" class=\"headerlink\" title=\"响应式同步\"></a>响应式同步</h3><p>注意到在这个简单的例子中， Model 是不可变的，所以我们可以只在初始化的时候指定我们 View Model 的属性。对于可变 Model，我们还需要使用一些绑定机制，这样 View Model 就能在背后的 Model 改变时更新自身的属性。此外，一旦 View Model 上的 Model 发生改变，那 View 的属性也需要更新。Model 的改变应该级联向下通过 View Model 进入 View。</p>\n<p>在 OS X 上，我们可以使用 Cocoa 绑定，但在 iOS 上我们并没有这样好的配置可用。我们想到了 KVO（Key-Value Observation），而且它确实做了很伟大的工作。然而，对于一个简单的绑定都需要很大的样板代码，更不用说有许多属性需要绑定了。作为替代，我个人喜欢使用 ReactiveCocoa，但 MVVM 并未强制我们使用 ReactiveCocoa。MVVM 是一个伟大的典范，它自身独立，只是在有一个良好的绑定框架时做得更好。</p>\n<p>我们覆盖了不少内容：从普通的 MVC 派生出 MVVM，看它们是如何相兼容的范式，从一个可测试的例子观察 MVVM，并看到 MVVM 在有一个配对的绑定机制时工作得更好。如果你有兴趣学习更多关于 MVVM 的知识，你可以看看<a href=\"http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/\" target=\"_blank\" rel=\"noopener\">这篇博客</a>，它用更多细节解释了 MVVM 的好处，或者<a href=\"http://www.teehanlax.com/blog/krush-ios-architecture/\" target=\"_blank\" rel=\"noopener\">这一篇</a>关于我们如何在最近的项目里使用 MVVM 获得巨大的成功的文章。我同样还有一个经过完整测试，基于 MVVM 的应用，叫做 <a href=\"https://github.com/AshFurrow/C-41\" target=\"_blank\" rel=\"noopener\">C-41</a> ，它是开源的。去看看吧，如果你有任何疑问，请<a href=\"https://twitter.com/ashfurrow\" target=\"_blank\" rel=\"noopener\">告诉我</a>。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-13\" target=\"_blank\" rel=\"noopener\">话题 #13 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-13/mvvm.html\" target=\"_blank\" rel=\"noopener\">Introduction to MVVM</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"设计","path":"api/categories/设计.json"}],"tags":[]},{"title":"线程安全类的设计","slug":"iOS/线程安全类的设计","date":"2017-09-24T19:06:03.000Z","updated":"2017-09-24T19:06:03.000Z","comments":true,"path":"api/articles/iOS/线程安全类的设计.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>这篇文章将专注于实用技巧，设计模式，以及对于写出线程安全类和使用 GCD 来说所特别需要注意的一些<a href=\"http://zh.wikipedia.org/wiki/反面模式\" target=\"_blank\" rel=\"noopener\">反面模式</a>。</p>\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><h3 id=\"Apple-的框架\"><a href=\"#Apple-的框架\" class=\"headerlink\" title=\"Apple 的框架\"></a>Apple 的框架</h3><p>首先让我们来看看 Apple 的框架。一般来说除非特别声明，大多数的类默认都不是线程安全的。对于其中的一些类来说，这是很合理的，但是对于另外一些来说就很有趣了。</p>\n<p>就算是在经验丰富的 iOS/Mac 开发者，也难免会犯从后台线程去访问 UIKit/AppKit 这种错误。比如因为图片的内容本身就是从后台的网络请求中获取的话，顺手就在后台线程中设置了 <code>image</code> 之类的属性，这样的错误其实是屡见不鲜的。Apple 的代码都经过了性能的优化，所以即使你从别的线程设置了属性的时候，也不会产生什么警告。</p>\n<p>在设置图片这个例子中，症结其实是你的改变通常要过一会儿才能生效。但是如果有两个线程在同时对图片进行了设定，那么很可能因为当前的图片被释放两次，而导致应用崩溃。这种行为是和时机有关系的，所以很可能在开发阶段没有崩溃，但是你的用户使用时却不断 crash。</p>\n<p>现在没有<strong>官方</strong>的用来寻找类似错误的工具，但我们确实有一些技巧来避免这个问题。<a href=\"https://gist.github.com/steipete/5664345\" target=\"_blank\" rel=\"noopener\">UIKit Main Thread Guard</a> 是一段用来监视每一次对 <code>setNeedsLayout</code> 和 <code>setNeedsDisplay</code> 的调用代码，并检查它们是否是在主线程被调用的。因为这两个方法在 UIKit 的 setter （包括 image 属性）中广泛使用，所以它可以捕获到很多线程相关的错误。虽然这个小技巧并不包含任何私有 API， 但我们还是不建议将它是用在发布产品中，不过在开发过程中使用的话还是相当赞的。</p>\n<p>Apple没有把 UIKit 设计为线程安全的类是有意为之的，将其打造为线程安全的话会使很多操作变慢。而事实上 UIKit 是和主线程绑定的，这一特点使得编写并发程序以及使用 UIKit 十分容易的，你唯一需要确保的就是对于 UIKit 的调用总是在主线程中来进行。</p>\n<h4 id=\"为什么-UIKit-不是线程安全的？\"><a href=\"#为什么-UIKit-不是线程安全的？\" class=\"headerlink\" title=\"为什么 UIKit 不是线程安全的？\"></a>为什么 UIKit 不是线程安全的？</h4><p>对于一个像 UIKit 这样的大型框架，确保它的线程安全将会带来巨大的工作量和成本。将 non-atomic 的属性变为 atomic 的属性只不过是需要做的变化里的微不足道的一小部分。</p>\n<ol>\n<li>通常来说，UI需要同时改变若干个属性，才能看到它所带来的结果。为了解决这个问题，苹果可能不得不提供像 Core Data 中的 <code>performBlock:</code> 和 <code>performBlockAndWait:</code> 那样类似的方法来同步变更。</li>\n<li>绝大多数对 UIKit 类的调用其实都是以<strong>配置</strong>为目的的，这使得将 UIKit 改为线程安全这件事情更显得毫无意义了。</li>\n</ol>\n<p>然而即使是那些与配置共享的内部状态之类事情无关的调用，其实也不是线程安全的。如果你做过 iOS 3.2 或之前的黑暗年代的 app 开发的话，你肯定有过一边在后台准备图像时一边使用 NSString 的 <code>drawInRect:withFont:</code> 时的随机崩溃的经历。值得庆幸的事，在 iOS 4 中 <a href=\"http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html\" target=\"_blank\" rel=\"noopener\">苹果将大部分绘图的方法和诸如 <code>UIColor</code> 和 <code>UIFont</code> 这样的类改写为了后台线程可用</a>。</p>\n<p>但不幸的是 Apple 在线程安全方面的文档是极度匮乏的。他们推荐只访问主线程，并且甚至是绘图方法他们都没有明确地表示保证线程安全。因此在阅读文档的同时，去读读 <a href=\"http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html\" target=\"_blank\" rel=\"noopener\">iOS 版本更新说明</a>会是一个很好的选择。</p>\n<p>对于大多数情况来说，UIKit 类确实只应该用在应用的主线程中。这对于那些继承自 UIResponder 的类以及那些操作你的应用的用户界面的类来说，不管如何都是很正确的。</p>\n<h4 id=\"内存回收-deallocation-问题\"><a href=\"#内存回收-deallocation-问题\" class=\"headerlink\" title=\"内存回收 (deallocation) 问题\"></a>内存回收 (deallocation) 问题</h4><p>另一个在后台使用 UIKit 对象的的危险之处在于“内存回收问题”。Apple 在技术笔记 <a href=\"http://developer.apple.com/library/ios/#technotes/tn2109/_index.html\" target=\"_blank\" rel=\"noopener\">TN2109</a> 中概述了这个问题，并提供了多种解决方案。<br>这个问题其实是要求 UI 对象应该在主线程中被回收，因为在它们的 <code>dealloc</code> 方法被调用回收的时候，可能会去改变 view 的结构关系，而如我们所知，这种操作应该放在主线程来进行。</p>\n<p>因为调用者被其他线程持有是非常常见的（不管是由于 operation 还是 block 所导致的），这也是很容易犯错并且难以被修正的问题。在 <a href=\"https://github.com/AFNetworking/AFNetworking/issues/56\" target=\"_blank\" rel=\"noopener\">AFNetworking 中也一直长久存在这样的 bug</a>，但是由于其自身的隐蔽性而鲜为人知，也很难重现其所造成的崩溃。在异步的 block 或者操作中一致使用 <code>__weak</code>，并且不去直接访问局部变量会对避开这类问题有所帮助。</p>\n<h4 id=\"集合类\"><a href=\"#集合类\" class=\"headerlink\" title=\"集合类\"></a>集合类</h4><p>Apple 有一个<a href=\"https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1\" target=\"_blank\" rel=\"noopener\">针对 iOS 和 Mac 的很好的总览性文档</a>，为大多数基本的 foundation 类列举了其线程安全特性。<br>总的来说，比如 <code>NSArry</code> 这样不可变类是线程安全的。然而它们的可变版本，比如 <code>NSMutableArray</code> 是线程不安全的。<br>事实上，如果是在一个队列中串行地进行访问的话，在不同线程中使用它们也是没有问题的。要记住的是即使你申明了返回类型是不可变的，方法里还是有可能返回的其实是一个可变版本的集合类。<br>一个好习惯是写类似于 <code>return [array copy]</code> 这样的代码来确保返回的对象事实上是不可变对象。</p>\n<p>与和<a href=\"\">Java</a>这样的语言不一样，Foundation 框架并不提供直接可用的集合类，这是有其道理的，因为大多数情况下，你想要的是在更高层级上的锁，以避免太多的加解锁操作。但缓存是一个值得注意的例外，iOS 4 中 Apple 添加的 <code>NSCache</code> 使用一个可变的字典来存储不可变数据，它不仅会对访问加锁，更甚至在低内存情况下会清空自己的内容。</p>\n<p>也就是说，在你的应用中存在可变的且线程安全的字典是可以做到的。借助于 class cluster 的方式，我们也很容易<a href=\"https://gist.github.com/steipete/5928916\" target=\"_blank\" rel=\"noopener\">写出这样的代码</a>。</p>\n<h3 id=\"原子属性-Atomic-Properties\"><a href=\"#原子属性-Atomic-Properties\" class=\"headerlink\" title=\"原子属性 (Atomic Properties)\"></a>原子属性 (Atomic Properties)</h3><p>你曾经好奇过 Apple 是怎么处理 atomic 的设置/读取属性的么？至今为止，你可能听说过自旋锁 (spinlocks)，信标 (semaphores)，锁 (locks)，@synchronized 等，Apple 用的是什么呢？因为 <a href=\"http://www.opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"noopener\">Objctive-C 的 runtime 是开源</a>的，所以我们可以一探究竟。</p>\n<p>一个非原子的 setter 看起来是这个样子的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setUserName:(<span class=\"built_in\">NSString</span> *)userName &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (userName != _userName) &#123;</span><br><span class=\"line\">        [userName <span class=\"keyword\">retain</span>];</span><br><span class=\"line\">        [_userName release];</span><br><span class=\"line\">        _userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是一个手动 retain/release 的版本，ARC 生成的代码和这个看起来也是类似的。当我们看这段代码时，显而易见要是 <code>setUserName:</code> 被并发调用的话会造成麻烦。我们可能会释放 <code>_userName</code> 两次，这回使内存错误，并且导致难以发现的 bug。</p>\n<p>对于任何没有手动实现的属性，编译器都会生成一个 <a href=\"https://github.com/opensource-apple/objc4/blob/master/runtime/Accessors.subproj/objc-accessors.mm#L127\" target=\"_blank\" rel=\"noopener\"><code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code></a> 的调用。在我们的例子中，这个调用的参数是这样的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objc_setProperty_non_gc(<span class=\"keyword\">self</span>, _cmd,</span><br><span class=\"line\">(ptrdiff_t)(&amp;_userName) - (ptrdiff_t)(<span class=\"keyword\">self</span>), userName, <span class=\"literal\">NO</span>, <span class=\"literal\">NO</span>);`</span><br></pre></td></tr></table></figure></p>\n<p><code>ptrdiff_t</code> 可能会吓到你，但是实际上这就是一个简单的指针算术，因为其实 Objective-C 的类仅仅只是 C 结构体而已。</p>\n<p><code>objc_setProperty</code> 调用的是如下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline void reallySetProperty(id self, SEL _cmd, id newValue,</span><br><span class=\"line\">ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    id oldValue;</span><br><span class=\"line\">    id *slot = (id*) ((char*)self + offset);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (copy) &#123;</span><br><span class=\"line\">        newValue = [newValue copyWithZone:NULL];</span><br><span class=\"line\">    &#125; else if (mutableCopy) &#123;</span><br><span class=\"line\">        newValue = [newValue mutableCopyWithZone:NULL];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        if (*slot == newValue) return;</span><br><span class=\"line\">        newValue = objc_retain(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!atomic) &#123;</span><br><span class=\"line\">        oldValue = *slot;</span><br><span class=\"line\">        *slot = newValue;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        spin_lock_t *slotlock = &amp;PropertyLocks[GOODHASH(slot)];</span><br><span class=\"line\">        _spin_lock(slotlock);</span><br><span class=\"line\">        oldValue = *slot;</span><br><span class=\"line\">        *slot = newValue;</span><br><span class=\"line\">        _spin_unlock(slotlock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    objc_release(oldValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除开方法名字很有趣以外，其实方法实际做的事情非常直接，它使用了在 <code>PropertyLocks</code> 中的 128 个自旋锁中的 1 个来给操作上锁。这是一种务实和快速的方式，最糟糕的情况下，如果遇到了哈希碰撞，那么 setter 需要等待另一个和它无关的 setter 完成之后再进行工作。</p>\n<p>虽然这些方法没有定义在任何公开的头文件中，但我们还是可用手动调用他们。我不是说这是一个好的做法，但是知道这个还是蛮有趣的，而且如果你想要同时实现原子属性<strong>和</strong>自定义的 setter 的话，这个技巧就非常有用了。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手动声明运行时的方法</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> objc_setProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, ptrdiff_t offset,</span><br><span class=\"line\"><span class=\"keyword\">id</span> newValue, <span class=\"built_in\">BOOL</span> atomic, <span class=\"built_in\">BOOL</span> shouldCopy);</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">id</span> objc_getProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, ptrdiff_t offset,</span><br><span class=\"line\"><span class=\"built_in\">BOOL</span> atomic);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd,</span></span><br><span class=\"line\">(ptrdiff_t)(&amp;dest) - (ptrdiff_t)(<span class=\"keyword\">self</span>), src, <span class=\"literal\">YES</span>, <span class=\"literal\">NO</span>)</span><br><span class=\"line\"><span class=\"meta\">#define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd,</span></span><br><span class=\"line\">(ptrdiff_t)(&amp;src) - (ptrdiff_t)(<span class=\"keyword\">self</span>), <span class=\"literal\">YES</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gist.github.com/steipete/5928690\" target=\"_blank\" rel=\"noopener\">参考这个 gist</a> 来获取包含处理结构体的完整的代码，但是我们其实并不推荐使用它。</p>\n<h4 id=\"为何不用-synchronized-？\"><a href=\"#为何不用-synchronized-？\" class=\"headerlink\" title=\"为何不用 @synchronized ？\"></a>为何不用 @synchronized ？</h4><p>你也许会想问为什么苹果不用 <code>@synchronized(self)</code> 这样一个已经存在的运行时特性来锁定属？？你可以看看<a href=\"https://github.com/opensource-apple/objc4/blob/master/runtime/objc-sync.mm#L291\" target=\"_blank\" rel=\"noopener\">这里的源码</a>，就会发现其实发生了很多的事情。Apple 使用了<a href=\"http://googlemac.blogspot.co.at/2006/10/synchronized-swimming.html\" target=\"_blank\" rel=\"noopener\">最多三个加/解锁序列</a>，还有一部分原因是他们也添加了<a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3\" target=\"_blank\" rel=\"noopener\">异常开解(exception unwinding)</a>机制。相比于更快的自旋锁方式，这种实现要慢得多。由于设置某个属性一般来说会相当快，因此自旋锁更适合用来完成这项工作。<code>@synchonized(self)</code> 更适合使用在你需要确保在发生错误时代码不会死锁，而是抛出异常的时候。</p>\n<h3 id=\"你自己的类\"><a href=\"#你自己的类\" class=\"headerlink\" title=\"你自己的类\"></a>你自己的类</h3><p>单独使用原子属性并不会使你的类变成线程安全。它不能保护你应用的逻辑，只能保护你免于在 setter 中遭遇到<a href=\"http://objccn.io/issue-3-1\" target=\"_blank\" rel=\"noopener\">竞态条件</a>的困扰。看看下面的代码片段：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.contents) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">CFAttributedStringRef</span> stringRef = <span class=\"built_in\">CFAttributedStringCreate</span>(<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    (__bridge <span class=\"built_in\">CFStringRef</span>)<span class=\"keyword\">self</span>.contents, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 渲染字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我之前在 <a href=\"http://pspdfkit.com\" target=\"_blank\" rel=\"noopener\">PSPDFKit</a> 中就犯了这个错误。时不时地应用就会因为 <code>contents</code> 属性在通过检查之后却又被设成了 nil 而导致 EXC_BAD_ACCESS 崩溃。捕获这个变量就可以简单修复这个问题；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *contents = self.contents;</span><br><span class=\"line\">if (contents) &#123;</span><br><span class=\"line\">    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL,</span><br><span class=\"line\">    (__bridge CFStringRef)contents, NULL);</span><br><span class=\"line\">    // 渲染字符串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这里这样就能解决问题，但是大多数情况下不会这么简单。<br>想象一下我们还有一个 <code>textColor</code> 的属性，我们在一个线程中将两个属性都做了改变。我们的渲染线程有可能使用了新的内容，但是依旧保持了旧的颜色，于是我们得到了一组奇怪的组合。这其实也是为什么 Core Data 要将 model 对象都绑定在一个线程或者队列中的原因。</p>\n<p>对于这个问题，其实没有万用解法。使用 <a href=\"http://www.cocoawithlove.com/2008/04/value-of-immutable-values.html\" target=\"_blank\" rel=\"noopener\">不可变模型</a>是一个可能的方案，但是它也有自己的问题。另一种途径是限制对存在在主线程或者某个特定队列中的既存对象的改变，而是先进行一次拷贝之后再在工作线程中使用。对于这个问题的更多对应方法，我推荐阅读 Jonathan Sterling 的关于 <a href=\"http://www.jonmsterling.com/posts/2012-12-27-a-pattern-for-immutability.html\" target=\"_blank\" rel=\"noopener\">Objective-C 中轻量化不可变对象</a>的文章。</p>\n<p>一个简单的解决办法是使用 <code>@synchronize</code>。其他的方式都非常非常可能使你误入歧途，已经有太多聪明人在这种尝试上一次又一次地以失败告终。</p>\n<h4 id=\"可行的线程安全设计\"><a href=\"#可行的线程安全设计\" class=\"headerlink\" title=\"可行的线程安全设计\"></a>可行的线程安全设计</h4><p>在尝试写一些线程安全的东西之前，应该先想清楚是不是真的需要。确保你要做的事情不会是过早优化。如果要写的东西是一个类似配置类 (configuration class) 的话，去考虑线程安全这种事情就毫无意义了。更正确的做法是扔一个断言上去，以保证它被正确地使用：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> PSPDFAssertIfNotMainThread(<span class=\"keyword\">void</span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSAssert</span>(<span class=\"built_in\">NSThread</span>.isMainThread,</span><br><span class=\"line\"><span class=\"string\">@\"Error: Method needs to be called on the main thread. %@\"</span>,</span><br><span class=\"line\">[<span class=\"built_in\">NSThread</span> callStackSymbols]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于那些肯定应该线程安全的代码（一个好例子是负责缓存的类）来说，一个不错的设计是使用并发的 <code>dispatch_queue</code> 作为读/写锁，并且确保只锁着那些真的需要被锁住的部分，以此来最大化性能。一旦你使用多个队列来给不同的部分上锁的话，整件事情很快就会变得难以控制了。</p>\n<p>于是你也可以重新组织你的代码，这样某些特定的锁就不再需要了。看看下面这段实现了一种多委托的代码（其实在大多数情况下，用 NSNotifications 会更好，但是其实也还是有<a href=\"https://code.google.com/r/riky-adsfasfasf/source/browse/Utilities/GCDMulticastDelegate.h\" target=\"_blank\" rel=\"noopener\">多委托的实用例子</a>）的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 头文件</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableSet *delegates;</span><br><span class=\"line\"></span><br><span class=\"line\">// init方法中</span><br><span class=\"line\">_delegateQueue = dispatch_queue_create(&quot;com.PSPDFKit.cacheDelegateQueue&quot;,</span><br><span class=\"line\">DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate &#123;</span><br><span class=\"line\">    dispatch_barrier_async(_delegateQueue, ^&#123;</span><br><span class=\"line\">        [self.delegates addObject:delegate];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)removeAllDelegates &#123;</span><br><span class=\"line\">    dispatch_barrier_async(_delegateQueue, ^&#123;</span><br><span class=\"line\">        self.delegates removeAllObjects];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)callDelegateForX &#123;</span><br><span class=\"line\">    dispatch_sync(_delegateQueue, ^&#123;</span><br><span class=\"line\">        [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) &#123;</span><br><span class=\"line\">            // 调用delegate</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除非 <code>addDelegate:</code> 或者 <code>removeDelegate:</code> 每秒要被调用上千次，否则我们可以使用一个相对简洁的实现方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 头文件</span><br><span class=\"line\">@property (atomic, copy) NSSet *delegates;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate &#123;</span><br><span class=\"line\">    @synchronized(self) &#123;</span><br><span class=\"line\">        self.delegates = [self.delegates setByAddingObject:delegate];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)removeAllDelegates &#123;</span><br><span class=\"line\">    @synchronized(self) &#123;</span><br><span class=\"line\">        self.delegates = nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)callDelegateForX &#123;</span><br><span class=\"line\">    [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) &#123;</span><br><span class=\"line\">        // 调用delegate</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就算这样，这个例子还是有点理想化，因为其他人可以把变更限制在主线程中。但是对于很多数据结构，可以在可变更操作的方法中创建不可变的拷贝，这样整体的代码逻辑上就不再需要处理过多的锁了。</p>\n<h2 id=\"GCD-的陷阱\"><a href=\"#GCD-的陷阱\" class=\"headerlink\" title=\"GCD 的陷阱\"></a>GCD 的陷阱</h2><p>对于大多数上锁的需求来说，GCD 就足够好了。它简单迅速，并且基于 block 的 API 使得粗心大意造成非平衡锁操作的概率下降了不少。然后，GCD 中还是有不少陷阱，我们在这里探索一下其中的一些。</p>\n<h3 id=\"将-GCD-当作递归锁使用\"><a href=\"#将-GCD-当作递归锁使用\" class=\"headerlink\" title=\"将 GCD 当作递归锁使用\"></a>将 GCD 当作递归锁使用</h3><p>GCD 是一个对共享资源的访问进行串行化的队列。这个特性可以被当作锁来使用，但实际上它和 <code>@synchronized</code> 有很大区别。 GCD队列并非是<a href=\"http://zh.wikipedia.org/w/index.php?title=可重入&amp;variant=zh-cn\" target=\"_blank\" rel=\"noopener\">可重入</a>的，因为这将破坏队列的特性。很多有试图使用 <code>dispatch_get_current_queue()</code> 来绕开这个限制，但是这是一个<a href=\"https://gist.github.com/steipete/3713233\" target=\"_blank\" rel=\"noopener\">糟糕的做法</a>，Apple 在 iOS6 中将这个方法标记为废弃，自然也是有自己的理由。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This is a bad idea.</span><br><span class=\"line\">inline void pst_dispatch_sync_reentrant(dispatch_queue_t queue,</span><br><span class=\"line\">dispatch_block_t block)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    dispatch_get_current_queue() == queue ? block() : dispatch_sync(queue, block);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对当前的队列进行测试也许在简单情况下可以行得通，但是一旦你的代码变得复杂一些，并且你可能有多个队列在同时被锁住的情况下，这种方法很快就悲剧了。一旦这种情况发生，几乎可以肯定的是你会遇到<a href=\"http://objccn.io/issue-2-1/#dead_locks\" target=\"_blank\" rel=\"noopener\">死锁</a>。当然，你可以使用 <code>dispatch_get_specific()</code>，这将截断整个队列结构，从而对某个特定的队列进行测试。要这么做的话，你还得为了在队列中附加标志队列的元数据，而去写自定义的队列构造函数。嘛，最好别这么做。其实在实用中，使用 <code>NSRecursiveLock</code> 会是一个更好的选择。</p>\n<h3 id=\"用-dispatch-async-修复时序问题\"><a href=\"#用-dispatch-async-修复时序问题\" class=\"headerlink\" title=\"用 dispatch_async 修复时序问题\"></a>用 dispatch_async 修复时序问题</h3><p>在使用 UIKit 的时候遇到了一些时序上的麻烦？很多时候，这样进行“修正”看来非常完美：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Some UIKit call that had timing issues but works fine</span></span><br><span class=\"line\">    <span class=\"comment\">// in the next runloop.</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> updatePopoverSize];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>千万别这么做！相信我，这种做法将会在之后你的 app 规模大一些的时候让你找不着北。这种代码非常难以调试，并且你很快就会陷入用更多的 dispatch 来修复所谓的莫名其妙的”时序问题”。审视你的代码，并且找到合适的地方来进行调用（比如在 viewWillAppear 里调用，而不是 viewDidLoad 之类的）才是解决这个问题的正确做法。我在自己的代码中也还留有一些这样的 hack，但是我为它们基本都做了正确的文档工作，并且对应的 issue 也被一一记录过。</p>\n<p>记住这不是真正的 GCD 特性，而只是一个在 GCD 下很容易实现的常见反面模式。事实上你可以使用 <code>performSelector:afterDelay:</code> 方法来实现同样的操作，其中 delay 是在对应时间后的 runloop。</p>\n<h3 id=\"在性能关键的代码中混用-dispatch-sync-和-dispatch-async\"><a href=\"#在性能关键的代码中混用-dispatch-sync-和-dispatch-async\" class=\"headerlink\" title=\"在性能关键的代码中混用 dispatch_sync 和 dispatch_async\"></a>在性能关键的代码中混用 dispatch_sync 和 dispatch_async</h3><p>这个问题我花了好久来研究。在 <a href=\"http://pspdfkit.com\" target=\"_blank\" rel=\"noopener\">PSPDFKit</a> 中有一个使用了 LRU（最久未使用）算法列表的缓存类来记录对图片的访问。当你在页面中滚动时，这个方法将被调用<strong>非常多次</strong>。最初的实现使用了 <code>dispatch_sync</code> 来进行实际有效的访问，使用 <code>dispatch_async</code> 来更新 LRU 列表的位置。这导致了帧数远低于原来的 60 帧的目标。</p>\n<p>当你的 app 中的其他运行的代码阻挡了 GCD 线程的时候，dispatch manager 需要花时间去寻找能够执行 dispatch_async 代码的线程，这有时候会花费一点时间。在找到合适的执行线程之前，你的同步调用就会被 block 住了。其实在这个例子中，异步情况的执行顺序并不是很重要，但没有能将这件事情告诉 GCD 的好办法。读/写锁这里并不能起到什么作用，因为在异步操作中基本上一定会需要进行顺序写入，而在此过程中读操作将被阻塞住。如果误用了 <code>dispatch_async</code> 代价将会是非常惨重的。在将它用作锁的时候，一定要非常小心。</p>\n<h3 id=\"使用-dispatch-async-来派发内存敏感的操作\"><a href=\"#使用-dispatch-async-来派发内存敏感的操作\" class=\"headerlink\" title=\"使用 dispatch_async 来派发内存敏感的操作\"></a>使用 dispatch_async 来派发内存敏感的操作</h3><p>我们已经谈论了很多关于 NSOperations 的话题了，一般情况下，使用这个更高层级的 API 会是一个好主意。当你要处理一段内存敏感的操作的代码块时，这个优势尤为突出、</p>\n<p>在 PSPDFKit 的老版本中，我用了 GCD 队列来将已缓存的 JPG 图片写到磁盘中。当 retina 的 iPad 问世之后，这个操作出现了问题。ß因为分辨率翻倍了，相比渲染这张图片，将它编码花费的时间要长得多。所以，操作堆积在了队列中，当系统繁忙时，甚至有可能因为内存耗尽而崩溃。</p>\n<p>我们没有办法追踪有多少个操作在队列中等待运行（除非你手动添加了追踪这个的代码），我们也没有现成的方法来在接收到低内存通告的时候来取消操作、这时候，切换到 NSOperations 可以使代码变得容易调试得多，并且允许我们在不添加手动管理的代码的情况下，做到对操作的追踪和取消。</p>\n<p>当然也有一些不好的地方，比如你不能在你的 <code>NSOperationQueue</code> 中设置目标队列（就像 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 之于 缓速 I/O 那样）。但这只是为了可调试性的一点小代价，而事实上这也帮助你避免遇到<a href=\"http://objccn.io/issue-2-1/#priority_inversion\" target=\"_blank\" rel=\"noopener\">优先级反转</a>的问题。我甚至不推荐直接使用已经包装好的 <code>NSBlockOperation</code> 的 API，而是建议使用一个 NSOperation 的真正的子类，包括实现其 description。诚然，这样做工作量会大一些，但是能输出所有运行中/准备运行的操作是及其有用的。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-2\" target=\"_blank\" rel=\"noopener\">话题 #2 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-2/thread-safe-class-design.html\" target=\"_blank\" rel=\"noopener\">Thread-Safe Class Design</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"设计","path":"api/categories/设计.json"}],"tags":[]},{"title":"GCD底层并发API","slug":"iOS/GCD底层并发API","date":"2017-09-24T18:21:38.000Z","updated":"2017-09-24T18:21:38.000Z","comments":true,"path":"api/articles/iOS/GCD底层并发API.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>这篇文章里，我们将会讨论一些 iOS 和 OS X 都可以使用的底层 API。除了 <code>dispatch_once</code> ，我们一般不鼓励使用其中的任何一种技术。</p>\n<p>但是我们想要揭示出表面之下深层次的一些可利用的方面。这些底层的 API 提供了大量的灵活性，随之而来的是大量的复杂度和更多的责任。在我们的文章<a href=\"http://objccn.io/issue-2-2/\" target=\"_blank\" rel=\"noopener\">常见的后台实践</a>中提到的高层的 API 和模式能够让你专注于手头的任务并且免于大量的问题。通常来说，高层的 API 会提供更好的性能，除非你能承受起使用底层 API 带来的纠结于调试代码的时间和努力。</p>\n<p>尽管如此，了解深层次下的软件堆栈工作原理还是有很有帮助的。我们希望这篇文章能够让你更好的了解这个平台，同时，让你更加感谢这些高层的 API。</p>\n<p>首先，我们将会分析大多数组成 <em>Grand Central Dispatch</em> 的部分。它已经存在了好几年，并且苹果公司持续添加功能并且改善它。现在苹果已经将其开源，这意味着它对其他平台也是可用的了。最后，我们将会看一下<a href=\"#atomic_operations\">原子操作</a>——另外的一种底层代码块的集合。</p>\n<p>或许关于并发编程最好的书是 <em>M. Ben-Ari</em> 写的《Principles of Concurrent Programming》,<a href=\"https://en.wikipedia.org/wiki/Special:BookSources/0-13-701078-8\" target=\"_blank\" rel=\"noopener\">ISBN 0-13-701078-8</a>。如果你正在做任何与并发编程有关的事情，你需要读一下这本书。这本书已经30多年了，仍然非常卓越。书中简洁的写法，优秀的例子和练习，带你领略并发编程中代码块的基本原理。这本书现在已经绝版了，但是它的一些复印版依然广为流传。有一个新版书，名字叫《Principles of Concurrent and Distributed Programming》,<a href=\"https://en.wikipedia.org/wiki/Special:BookSources/0-321-31283-X\" target=\"_blank\" rel=\"noopener\">ISBN 0-321-31283-X</a>,好像有很多相同的地方，不过我还没有读过。</p>\n<h2 id=\"常用的GCD\"><a href=\"#常用的GCD\" class=\"headerlink\" title=\"常用的GCD\"></a>常用的GCD</h2><h3 id=\"单例：dispatch-once\"><a href=\"#单例：dispatch-once\" class=\"headerlink\" title=\"单例：dispatch_once\"></a>单例：dispatch_once</h3><p>或许GCD中使用最多并且被滥用功能的就是 <code>dispatch_once</code> 了。正确的用法看起来是这样的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">UIColor</span> *)boringColor;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">UIColor</span> *color;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        color = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.380</span>f green:<span class=\"number\">0.376</span>f blue:<span class=\"number\">0.376</span>f alpha:<span class=\"number\">1.000</span>f];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的 block 只会运行一次。并且在连续的调用中，这种检查是很高效的。你能使用它来初始化全局数据比如单例。要注意的是，使用 <code>dispatch_once_t</code> 会使得测试变得非常困难（单例和测试不是很好配合）。</p>\n<p>要确保 <code>onceToken</code> 被声明为 <code>static</code> ，或者有全局作用域。任何其他的情况都会导致无法预知的行为。换句话说，<strong>不要</strong>把 <code>dispatch_once_t</code> 作为一个对象的成员变量，或者类似的情形。</p>\n<p>退回到远古时代（其实也就是几年前），人们会使用 <code>pthread_once</code> ，因为 <code>dispatch_once_t</code> 更容易使用并且不易出错，所以你永远都不会再用到 <code>pthread_once</code> 了。</p>\n<h3 id=\"延后执行：dispatch-after\"><a href=\"#延后执行：dispatch-after\" class=\"headerlink\" title=\"延后执行：dispatch_after\"></a>延后执行：dispatch_after</h3><p>它能使工作延后执行。它是很强大的，但是要注意：你很容易就陷入到一堆麻烦中。一般用法是这样的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)foo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">2.0</span>;</span><br><span class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</span><br><span class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> bar];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第一眼看上去这段代码是极好的。但是这里存在一些缺点。我们不能（直接）取消我们已经提交到 <code>dispatch_after</code> 的代码，它将会运行。</p>\n<h4 id=\"时序性bug\"><a href=\"#时序性bug\" class=\"headerlink\" title=\"时序性bug\"></a>时序性bug</h4><p>当人们使用 <code>dispatch_after</code> 去处理他们代码中存在的时序 bug 时，会存在一些有问题的倾向。一些代码执行的过早而你很可能不知道为什么会这样，所以你把这段代码放到了 <code>dispatch_after</code> 中，现在一切运行正常了。但是几周以后，之前的工作不起作用了。由于你并不十分清楚你自己代码的执行次序，调试代码就变成了一场噩梦。所以不要像上面这样做。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>大多数的情况下，你最好把代码放到正确的位置。如果代码放到 <code>-viewWillAppear</code> 太早，那么或许 <code>-viewDidAppear</code> 就是正确的地方。<br>通过在自己代码中建立直接调用（类似 <code>-viewDidAppear</code> ）而不是依赖于  <code>dispatch_after</code> ，你会为自己省去很多麻烦。</p>\n<h4 id=\"推荐场景\"><a href=\"#推荐场景\" class=\"headerlink\" title=\"推荐场景\"></a>推荐场景</h4><p>如果你需要一些事情在某个特定的时刻运行，那么 <code>dispatch_after</code> 或许会是个好的选择。确保同时考虑了 <code>NSTimer</code>，这个API虽然有点笨重，但是它允许你取消定时器的触发。</p>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>GCD是一个很大抽象层级用户 API，提供管理线程池队列的管理。<br>当使用 GCD 来完成并发的工作时，你不必考虑线程方面的问题，只需考虑队列和功能点（提交给队列的 block）。虽然往下深究，依然都是线程，但是 GCD 的抽象层级为你惯用的编码提供了更好的方式。<br>隔离队列：默认情况下，它们是串行的，也就是说，任何给定的时间内，只能有一个单独的 block 运行。<br>并行队列：同一时间内允许多个 block 一起执行。<br>GCD 中一个基本的代码块就是队列。下面我们会给出一些如何使用它的例子。当使用队列的时候，给它们一个明显的标签会帮自己不少忙。在调试时，这个标签会在 Xcode (和 lldb)中显示，这会帮助你了解你的 app 是由什么决定的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *label = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@.isolation.%p\"</span>, [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        label = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@.work.%p\"</span>, [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">self</span>];</span><br><span class=\"line\">        <span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.workQueue = dispatch_queue_create([label UTF8String], <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"解决扇出问题\"><a href=\"#解决扇出问题\" class=\"headerlink\" title=\"解决扇出问题\"></a>解决扇出问题</h4><p>队列和功能点同时解决了一个连续不断的扇出的问题：如果我们直接使用线程，并且想要做一些并发的事情，我们很可能将我们的工作分成 100 个小的功能点，然后基于可用的 CPU 内核数量来创建线程，假设是 8。我们把这些功能点送到这 8 个线程中。当我们处理这些功能点时，可能会调用一些函数作为功能的一部分。写那个函数的人也想要使用并发，因此当你调用这个函数的时候，这个函数也会创建 8 个线程。现在，你有了 8 × 8 = 64 个线程，尽管你只有 8 个CPU内核——也就是说任何时候只有12%的线程实际在运行而另外88%的线程什么事情都没做。使用 GCD 你就不会遇到这种问题，当系统关闭 CPU 内核以省电时，GCD 甚至能够相应地调整线程数量。</p>\n<h4 id=\"GCD中创建线程\"><a href=\"#GCD中创建线程\" class=\"headerlink\" title=\"GCD中创建线程\"></a>GCD中创建线程</h4><p>GCD 通过创建所谓的<a href=\"http://en.wikipedia.org/wiki/Thread_pool_pattern\" target=\"_blank\" rel=\"noopener\">线程池</a>来大致匹配 CPU 内核数量。要记住，线程的创建并不是无代价的。每个线程都需要占用内存和内核资源。这里也有一个问题：如果你提交了一个 block 给 GCD，但是这段代码阻塞了这个线程，那么这个线程在这段时间内就不能用来完成其他工作——它被阻塞了。为了确保功能点在队列上一直是执行的，GCD 不得不创建一个新的线程，并把它添加到线程池。</p>\n<h4 id=\"线程阻塞问题\"><a href=\"#线程阻塞问题\" class=\"headerlink\" title=\"线程阻塞问题\"></a>线程阻塞问题</h4><p>如果你的代码阻塞了许多线程，这会带来很大的问题。首先，线程消耗资源，此外，创建线程会变得代价高昂。创建过程需要一些时间。并且在这段时间中，GCD 无法以全速来完成功能点。有不少能够导致线程阻塞的情况，但是最常见的情况与 I/O 有关，也就是从文件或者网络中读写数据。正是因为这些原因，你不应该在GCD队列中以阻塞的方式来做这些操作。看一下下面的<a href=\"#input_output\">输入输出</a>段落去了解一些关于如何以 GCD 运行良好的方式来做 I/O 操作的信息。</p>\n<h3 id=\"目标队列\"><a href=\"#目标队列\" class=\"headerlink\" title=\"目标队列\"></a>目标队列</h3><p>目标队列可以设置队列的名字，这让调试变得轻松许多—— Xcode 可以让你在 Debug Navigator 中看到所有的队列名字，如果你直接使用 <code>lldb</code>。<code>(lldb) thread list</code> 命令将会在控制台打印出所有队列的名字。一旦你使用大量的异步内容，这会是非常有用的帮助。<br>如果一个队列的目标队列是串行的（也就是非并发），那么实际上这个队列也会转换为一个串行队列。<br>你能够为你创建的任何一个队列设置一个<strong>目标队列</strong>。这会是很强大的，并且有助于调试。</p>\n<p>使用私有队列同样强调封装性。这时你自己的队列，你要自己决定如何使用它。</p>\n<h4 id=\"队列转发控制\"><a href=\"#队列转发控制\" class=\"headerlink\" title=\"队列转发控制\"></a>队列转发控制</h4><p>默认情况下，一个新创建的队列转发到默认优先级的全局队列中。我们就将会讨论一些有关优先级的东西。</p>\n<p>你可以改变你队列转发到的队列——你可以设置自己队列的目标队列。以这种方式，你可以将不同队列链接在一起。你的 <code>Foo</code> 类有一个队列，该队列转发到 <code>Bar</code> 类的队列，<code>Bar</code> 类的队列又转发到全局队列。</p>\n<p>当你为了隔离目的而使用一个队列时，这会非常有用。<code>Foo</code> 有一个隔离队列，并且转发到 <code>Bar</code> 的隔离队列，与 <code>Bar</code> 的隔离队列所保护的有关的资源，会自动成为线程安全的。</p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>你可以通过设置目标队列为一个全局队列来改变自己队列的优先级，但是你应该克制这么做的冲动。</p>\n<p>在大多数情况下，改变优先级不会使事情照你预想的方向运行。一些看起简单的事情实际上是一个非常复杂的问题。你很容易会碰到一个叫做<a href=\"http://en.wikipedia.org/wiki/Priority_inversion\" target=\"_blank\" rel=\"noopener\">优先级反转</a>的情况。我们的文章<a href=\"http://objccn.io/issue-2-1/#priority_inversion\" target=\"_blank\" rel=\"noopener\">《并发编程：API 及挑战》</a>有更多关于这个问题的信息，这个问题几乎导致了NASA的探路者火星漫游器变成砖头。</p>\n<p>此外，使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 队列时，你需要格外小心。除非你理解了 <em>throttled I/O</em> 和 <em>background status as per setpriority(2)</em> 的意义，否则不要使用它。不然，系统可能会以难以忍受的方式终止你的 app 的运行。打算以不干扰系统其他正在做 I/O 操作的方式去做 I/O 操作时，一旦和优先级反转情况结合起来，这会变成一种危险的情况。</p>\n<h2 id=\"隔离\"><a href=\"#隔离\" class=\"headerlink\" title=\"隔离\"></a>隔离</h2><p>隔离队列是 GCD 队列使用中非常普遍的一种模式。这里有两个变种。</p>\n<h3 id=\"资源保护\"><a href=\"#资源保护\" class=\"headerlink\" title=\"资源保护\"></a>资源保护</h3><p>多线程编程中，最常见的情形是你有一个资源，每次只有一个线程被允许访问这个资源。</p>\n<p>我们在<a href=\"http://objccn.io/issue-2-1/#shared_resources\" target=\"_blank\" rel=\"noopener\">有关多线程技术的文章</a>中讨论了<em>资源</em>在并发编程中意味着什么，它通常就是一块内存或者一个对象，每次只有一个线程可以访问它。</p>\n<h4 id=\"串行队列读写共享资源\"><a href=\"#串行队列读写共享资源\" class=\"headerlink\" title=\"串行队列读写共享资源\"></a>串行队列读写共享资源</h4><p>举例来说，我们需要以多线程（或者多个队列）方式访问 <code>NSMutableDictionary</code> 。我们可能会照下面的代码来做：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setCount:(<span class=\"built_in\">NSUInteger</span>)count forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    key = [key <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.isolationQueue, ^()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span>.counts removeObjectForKey:key];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.counts[key] = @(count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)countForKey:(<span class=\"built_in\">NSString</span> *)key;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __block <span class=\"built_in\">NSUInteger</span> count;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(<span class=\"keyword\">self</span>.isolationQueue, ^()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSNumber</span> *n = <span class=\"keyword\">self</span>.counts[key];</span><br><span class=\"line\">        count = [n unsignedIntegerValue];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过以上代码，只有一个线程可以访问 <code>NSMutableDictionary</code> 的实例。</p>\n<p>注意以下四点：</p>\n<ol>\n<li>不要使用上面的代码，请先阅读<a href=\"#multiple_readers_single_writer\">多读单写</a>和<a href=\"#contention\">锁竞争</a></li>\n<li>我们使用 <code>async</code> 方式来保存值，这很重要。我们不想也不必阻塞当前线程只是为了等待<em>写操作</em>完成。当读操作时，我们使用 <code>sync</code> 因为我们需要返回值。</li>\n<li>从函数接口可以看出，<code>-setCount:forKey:</code> 需要一个 <code>NSString</code> 参数，用来传递给 <code>dispatch_async</code>。函数调用者可以自由传递一个 <code>NSMutableString</code> 值并且能够在函数返回后修改它。因此我们<em>必须</em>对传入的字符串使用 <em>copy</em> 操作以确保函数能够正确地工作。如果传入的字符串不是可变的（也就是正常的 <code>NSString</code> 类型），调用<em>copy</em>基本上是个空操作。</li>\n<li><code>isolationQueue</code> 创建时，参数 <code>dispatch_queue_attr_t</code> 的值必须是<em>DISPATCH_QUEUE_SERIAL</em>（或者0）。</li>\n</ol>\n<p><a id=\"multiple_readers_single_writer\" name=\"multiple_readers_single_writer\"> </a></p>\n<h4 id=\"barrier分发block实现并行队列多读单写\"><a href=\"#barrier分发block实现并行队列多读单写\" class=\"headerlink\" title=\"barrier分发block实现并行队列多读单写\"></a><strong>barrier</strong>分发block实现并行队列多读单写</h4><p>我们能够改善上面的那个例子。GCD 有可以让多线程运行的并发队列。我们能够安全地使用多线程来从 <code>NSMutableDictionary</code> 中读取只要我们不同时修改它。<br>我们使用 <em>barrier</em> 来分发一个block实现对字典的多读单写操作。这样的一个 block 的运行时机是，<strong>在它之前所有计划好的 block 完成之后，并且在所有它后面的 block 运行之前</strong>。</p>\n<p>以如下方式创建队列：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure></p>\n<p>并且用以下代码来改变setter函数：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setCount:(<span class=\"built_in\">NSUInteger</span>)count forKey:(<span class=\"built_in\">NSString</span> *)key</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    key = [key <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    dispatch_barrier_async(<span class=\"keyword\">self</span>.isolationQueue, ^()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.counts removeObjectForKey:key];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.counts[key] = @(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当使用并发队列时，要确保所有的 <em>barrier</em> 调用都是 <em>async</em> 的。如果你使用 <code>dispatch_barrier_sync</code> ，那么你很可能会使你自己（更确切的说是，你的代码）产生死锁。写操作<em>需要</em>  barrier，并且<em>可以</em>是 async 的。</p>\n<p><a id=\"contention\" name=\"contention\"> </a></p>\n<h3 id=\"锁竞争\"><a href=\"#锁竞争\" class=\"headerlink\" title=\"锁竞争\"></a>锁竞争</h3><p>首先，这里有一个警告：上面这个例子中我们保护的资源是一个  <code>NSMutableDictionary</code>，出于这样的目的，这段代码运行地相当不错。但是在真实的代码中，把隔离放到正确的复杂度层级下是很重要的。</p>\n<p>如果你对 <code>NSMutableDictionary</code> 的访问操作变得非常频繁，你会碰到一个已知的叫做锁竞争的问题。锁竞争并不是只是在 GCD 和队列下才变得特殊，任何使用了锁机制的程序都会碰到同样的问题——只不过不同的锁机制会以不同的方式碰到。</p>\n<h4 id=\"时序性避免使用锁\"><a href=\"#时序性避免使用锁\" class=\"headerlink\" title=\"时序性避免使用锁\"></a>时序性避免使用锁</h4><p>所有对  <code>dispatch_async</code>，<code>dispatch_sync</code> 等等的调用都需要完成某种形式的锁——以确保仅有一个线程或者特定的线程运行指定的代码。GCD 某些程序上可以使用时序(译注：原词为 scheduling)来避免使用锁，但在最后，问题只是稍有变化。<br>根本问题仍然存在：如果你有<strong>大量</strong>的线程在相同时间去访问同一个锁或者队列，你就会看到性能的变化。性能会严重下降。</p>\n<h4 id=\"平衡两个开销\"><a href=\"#平衡两个开销\" class=\"headerlink\" title=\"平衡两个开销\"></a>平衡两个开销</h4><p>你应该直接从复杂层次中隔离开。当你发现了性能下降，这明显表明代码中存在设计问题。这里有两个开销需要你来平衡：<br>第一个是独占临界区资源太久的开销，以至于别的线程都因为进入临界区的操作而阻塞。例如：一个在隔离队列中运行 block，它可能潜在的阻塞了其他将要在这个隔离队列中运行的代码。<br>第二个是太频繁出入临界区的开销。例如频繁调用 <code>dispatch_async</code> 和 <code>dispatch_sync</code> 。<br><strong>无论再怎么优化，这两个操作都不是无代价的。</strong><br>令人忧伤的，不存在通用的标准来指导如何正确的平衡，你需要自己评测和调整。启动 Instruments 观察你的 app 忙于什么操作。</p>\n<h4 id=\"设计层保护隔离队列\"><a href=\"#设计层保护隔离队列\" class=\"headerlink\" title=\"设计层保护隔离队列\"></a>设计层保护隔离队列</h4><p>在你自己的代码中，要考虑自己是否在更高的层次保护了隔离队列。<br>举个例子：<br>类 <code>Foo</code> 有一个隔离队列并且它本身保护着对 <code>NSMutableDictionary</code> 的访问，代替的，可以有一个用到了 <code>Foo</code> 类的 <code>Bar</code> 类有一个隔离队列保护所有对类 <code>Foo</code> 的使用。<br>换句话说，你可以把类 <code>Foo</code> 变为非线程安全的（没有隔离队列），并在 <code>Bar</code> 中，使用一个隔离队列来确保任何时刻只能有一个线程使用 <code>Foo</code> 。</p>\n<p><a name=\"async\" id=\"async\"> </a></p>\n<h3 id=\"死锁问题\"><a href=\"#死锁问题\" class=\"headerlink\" title=\"死锁问题\"></a>死锁问题</h3><p>全都使用异步分发</p>\n<h4 id=\"同步分发死锁\"><a href=\"#同步分发死锁\" class=\"headerlink\" title=\"同步分发死锁\"></a>同步分发死锁</h4><ol>\n<li>在 GCD 中，同步和异步地分发一个  block，一个工作单元。以同步分发的方式非常容易出现<a href=\"http://zh.wikipedia.org/wiki/死锁\" target=\"_blank\" rel=\"noopener\">死锁</a>。见下面的代码：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueA; <span class=\"comment\">// assume we have this</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span>(queueA, ^()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^()&#123;</span><br><span class=\"line\">        foo();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一旦我们进入到第二个 <code>dispatch_sync</code> 就会发生死锁。我们不能分发到queueA，因为有人（当前线程）正在队列中并且永远不会离开。</p>\n<ol>\n<li>更隐晦的产生死锁方式：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueA; <span class=\"comment\">// assume we have this</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueB; <span class=\"comment\">// assume we have this</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span>(queueA, ^()&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> foo(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueB, ^()&#123;</span><br><span class=\"line\">        bar();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> bar(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_sync</span>(queueA, ^()&#123;</span><br><span class=\"line\">        baz();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>单独的每次调用 <code>dispatch_sync()</code> 看起来都没有问题，但是一旦组合起来，就会发生死锁。</p>\n<h4 id=\"解决：异步调用不会产生死锁\"><a href=\"#解决：异步调用不会产生死锁\" class=\"headerlink\" title=\"解决：异步调用不会产生死锁\"></a>解决：异步调用不会产生死锁</h4><p>这是使用同步分发存在的固有问题，如果我们使用异步分发，比如：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queueA; <span class=\"comment\">// assume we have this</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(queueA, ^()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_async</span>(queueA, ^()&#123;</span><br><span class=\"line\">        foo();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>一切运行正常。<em>异步调用不会产生死锁</em>。因此值得我们在任何可能的时候都使用异步分发。我们使用一个异步调用结果 block 的函数，来代替编写一个返回值（必须要用同步）的方法或者函数。这种方式，我们会有更少发生死锁的可能性。</p>\n<p>异步调用的副作用就是它们很难调试。当我们在调试器里中止代码运行，回溯并查看已经变得没有意义了。</p>\n<p>要牢记这些。死锁通常是最难处理的问题。</p>\n<h3 id=\"如何设计健壮的异步-API\"><a href=\"#如何设计健壮的异步-API\" class=\"headerlink\" title=\"如何设计健壮的异步 API\"></a>如何设计健壮的异步 API</h3><p>记住几种好的实践：</p>\n<ol>\n<li>需要倾向于异步 API。<br>当你创建一个 API，它会在你的控制之外以各种方式调用，如果你的代码能产生死锁，那么死锁就会发生。</li>\n<li>主动在自己的函数或者方法中调用异步分发<code>dispatch_async()</code>。<br>不要让你的函数调用者来这么做，这个调用应该在你的方法或者函数中来做。</li>\n<li>返回值传递，异步地将方法或函数的返回值传递给回调处理程序。<br>这个API（方法或函数）应该同时持有一个<code>结果 block</code> 和一个<code>将结果传递过去的队列</code>。不需要API调用者自己来做分发。<br>这么做的原因很简单：几乎所有事件，函数调用都应该在一个适当的队列中，而且以这种方式编写的代码是很容易阅读的。总之，你的函数将会（必须）调用 <code>dispatch_async()</code> 去运行回调处理程序，所以它同时也可能在需要调用的队列上做这些工作。</li>\n</ol>\n<p>如果你写一个类，让你类的使用者设置一个回调处理队列或许会是一个好的选择。你的代码可能像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)processImage:(UIImage *)image completionHandler:(void(^)(BOOL success))handler;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    dispatch_async(self.isolationQueue, ^(void)&#123;</span><br><span class=\"line\">        // do actual processing here</span><br><span class=\"line\">        dispatch_async(self.resultQueue, ^(void)&#123;</span><br><span class=\"line\">            handler(YES);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你以这种方式来写你的类，让类之间协同工作就会变得容易。如果类 A 使用了类 B，它会把自己的隔离队列设置为 B 的回调队列。</p>\n<h2 id=\"迭代执行\"><a href=\"#迭代执行\" class=\"headerlink\" title=\"迭代执行\"></a>迭代执行</h2><p>如果你正在倒弄一些数字，并且手头上的问题可以拆分出同样性质的部分，那么 <code>dispatch_apply</code> 会很有用。</p>\n<p>如果你的代码看起来是这样的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (size_t y = <span class=\"number\">0</span>; y &lt; height; ++y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (size_t x = <span class=\"number\">0</span>; x &lt; width; ++x) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something with x and y here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>小小的改动或许就可以让它运行的更快：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_apply(height, dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>), ^(size_t y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (size_t x = <span class=\"number\">0</span>; x &lt; width; x += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something with x and y here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>代码运行良好的程度取决于你在循环内部做的操作。</p>\n<p>block 中运行的工作必须是非常重要的，否则这个头部信息就显得过于繁重了。除非代码受到计算带宽的约束，每个工作单元为了很好适应缓存大小而读写的内存都是临界的。这会对性能会带来显著的影响。受到临界区约束的代码可能不会很好地运行。详细讨论这些问题已经超出了这篇文章的范围。使用 <code>dispatch_apply</code> 可能会对性能提升有所帮助，但是性能优化本身就是个很复杂的主题。维基百科上有一篇关于 <a href=\"https://en.wikipedia.org/wiki/Memory_bound\" target=\"_blank\" rel=\"noopener\">Memory-bound function</a> 的文章。内存访问速度在 L2，L3 和主存上变化很显著。当你的数据访问模式与缓存大小不匹配时，10倍性能下降的情况并不少见。</p>\n<h2 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h2><p>很多时候，你发现需要将异步的 block 组合起来去完成一个给定的任务。这些任务中甚至有些是并行的。<br>现在，如果你想要在这些任务都执行完成后运行一些代码，”groups” 可以完成这项任务。看这里的例子：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_group_t group = dispatch_group_create();</span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something that takes a while</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> doSomeFoo];</span><br><span class=\"line\">    dispatch_group_async(group, dispatch_get_main_queue(), ^()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.foo = <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_group_async(group, queue, ^()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something else that takes a while</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> doSomeBar];</span><br><span class=\"line\">    dispatch_group_async(group, dispatch_get_main_queue(), ^()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This block will run once everything above is done:</span></span><br><span class=\"line\">dispatch_group_notify(group, dispatch_get_main_queue(), ^()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"foo: %d\"</span>, <span class=\"keyword\">self</span>.foo);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"bar: %d\"</span>, <span class=\"keyword\">self</span>.bar);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的重要事情是，所有的这些都是非阻塞的。我们从未让当前的线程一直等待直到别的任务做完。恰恰相反，我们只是简单的将多个 block 放入队列。由于代码不会阻塞，所以就不会产生死锁。</p>\n<p>同时需要注意的是，在这个小并且简单的例子中，我们是怎么在不同的队列间进切换的。</p>\n<h3 id=\"对现有API使用-dispatch-group-t\"><a href=\"#对现有API使用-dispatch-group-t\" class=\"headerlink\" title=\"对现有API使用 dispatch_group_t\"></a>对现有API使用 dispatch_group_t</h3><p>一旦你将  groups 作为你的工具箱中的一部分，你可能会怀疑为什么大多数的异步API不把 <code>dispatch_group_t</code> 作为一个可选参数。这没有什么无法接受的理由，仅仅是因为自己添加这个功能太简单了，但是你还是要小心以确保自己使用 groups 的代码是成对出现的。</p>\n<p>举例来说，我们可以给 Core Data 的 <code>-performBlock:</code> API 函数添加上 groups，就像这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (group == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> performBlock:block];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">dispatch_group_enter(group);</span><br><span class=\"line\">[<span class=\"keyword\">self</span> performBlock:^()&#123;</span><br><span class=\"line\">block();</span><br><span class=\"line\">dispatch_group_leave(group);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当 Core Data 上的一系列操作(很可能和其他的代码组合起来)完成以后，我们可以使用 <code>dispatch_group_notify</code> 来运行一个 block 。</p>\n<p>很明显，我们可以给 <code>NSURLConnection</code> 做同样的事情：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">void</span>)withGroup:(dispatch_group_t)group</span><br><span class=\"line\">sendAsynchronousRequest:(<span class=\"built_in\">NSURLRequest</span> *)request</span><br><span class=\"line\">queue:(<span class=\"built_in\">NSOperationQueue</span> *)queue</span><br><span class=\"line\">completionHandler:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLResponse</span>*, <span class=\"built_in\">NSData</span>*, <span class=\"built_in\">NSError</span>*))handler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (group == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> sendAsynchronousRequest:request</span><br><span class=\"line\">                            queue:queue</span><br><span class=\"line\">                completionHandler:handler];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dispatch_group_enter(group);</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> sendAsynchronousRequest:request</span><br><span class=\"line\">                                queue:queue</span><br><span class=\"line\">                    completionHandler:^(<span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSError</span> *error)&#123;</span><br><span class=\"line\">            handler(response, data, error);</span><br><span class=\"line\">            dispatch_group_leave(group);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了能正常工作，你需要确保:</p>\n<ul>\n<li><code>dispatch_group_enter()</code> 必须要在 <code>dispatch_group_leave()</code>之前运行。</li>\n<li><code>dispatch_group_enter()</code> 和 <code>dispatch_group_leave()</code> 一直是成对出现的（就算有错误产生时）。</li>\n</ul>\n<h2 id=\"事件源\"><a href=\"#事件源\" class=\"headerlink\" title=\"事件源\"></a>事件源</h2><p>GCD 有一个较少人知道的特性：事件源 <code>dispatch_source_t</code>。</p>\n<p>跟 GCD 一样，它也是很底层的东西。当你需要用到它时，它会变得极其有用。它的一些使用是秘传招数，我们将会接触到一部分的使用。但是大部分事件源在 iOS 平台不是很有用，因为在 iOS 平台有诸多限制，你无法启动进程（因此就没有必要监视进程），也不能在你的 app bundle 之外写数据（因此也就没有必要去监视文件）等等。</p>\n<p>GCD 事件源是以极其资源高效的方式实现的。</p>\n<h3 id=\"监视进程\"><a href=\"#监视进程\" class=\"headerlink\" title=\"监视进程\"></a>监视进程</h3><p>如果一些进程正在运行而你想知道他们什么时候存在，GCD 能够做到这些。你也可以使用 GCD 来检测进程什么时候分叉，也就是产生子进程或者传送给了进程的一个信号（比如 <code>SIGTERM</code>）。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSRunningApplication</span> *mail = [<span class=\"built_in\">NSRunningApplication</span></span><br><span class=\"line\">runningApplicationsWithBundleIdentifier:<span class=\"string\">@\"com.apple.mail\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mail == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pid_t <span class=\"keyword\">const</span> pid = mail.processIdentifier;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid,</span><br><span class=\"line\">DISPATCH_PROC_EXIT, DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class=\"line\">dispatch_source_set_event_handler(<span class=\"keyword\">self</span>.source, ^()&#123;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Mail quit.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_resume(<span class=\"keyword\">self</span>.source);</span><br></pre></td></tr></table></figure></p>\n<p>当 Mail.app 退出的时候，这个程序会打印出 <strong>Mail quit.</strong>。</p>\n<p>注意：在所有的事件源被传递到你的事件处理器之前，必须调用 <code>dispatch_resume()</code>。</p>\n<p><a name=\"watching_files\" id=\"watching_files\"> </a></p>\n<h3 id=\"监视文件\"><a href=\"#监视文件\" class=\"headerlink\" title=\"监视文件\"></a>监视文件</h3><p>这种可能性是无穷的。你能直接监视一个文件的改变，并且当改变发生时事件源的事件处理将会被调用。</p>\n<p>你也可以使用它来监视文件夹，比如创建一个 <em>watch folder</em>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSURL *directoryURL; // assume this is set to a directory</span><br><span class=\"line\">int const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</span><br><span class=\"line\">if (fd &lt; 0) &#123;</span><br><span class=\"line\">char buffer[80];</span><br><span class=\"line\">strerror_r(errno, buffer, sizeof(buffer));</span><br><span class=\"line\">NSLog(@&quot;Unable to open \\&quot;%@\\&quot;: %s (%d)&quot;, [directoryURL path], buffer, errno);</span><br><span class=\"line\">return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</span><br><span class=\"line\">DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE, DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class=\"line\">unsigned long const data = dispatch_source_get_data(source);</span><br><span class=\"line\">if (data &amp; DISPATCH_VNODE_WRITE) &#123;</span><br><span class=\"line\">NSLog(@&quot;The directory changed.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (data &amp; DISPATCH_VNODE_DELETE) &#123;</span><br><span class=\"line\">NSLog(@&quot;The directory has been deleted.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_source_set_cancel_handler(source, ^()&#123;</span><br><span class=\"line\">close(fd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">self.source = source;</span><br><span class=\"line\">dispatch_resume(self.source);</span><br></pre></td></tr></table></figure></p>\n<p>你应该总是添加 <code>DISPATCH_VNODE_DELETE</code> 去检测文件或者文件夹是否已经被删除——然后就停止监听。</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><p>大多数情况下，对于定时事件你会选择 <code>NSTimer</code>。定时器的GCD版本是底层的，它会给你更多控制权——但要小心使用。</p>\n<p>需要特别重点指出的是，为了让 OS 节省电量，需要为 GCD 的定时器接口指定一个低的余地值(译注：原文leeway value)。如果你不必要的指定了一个低余地值，将会浪费更多的电量。</p>\n<p>这里我们设定了一个5秒的定时器，并允许有十分之一秒的余地值：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,</span><br><span class=\"line\"><span class=\"number\">0</span>, <span class=\"number\">0</span>, DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class=\"line\">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Time flies.\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">dispatch_time_t start</span><br><span class=\"line\">dispatch_source_set_timer(source, DISPATCH_TIME_NOW, <span class=\"number\">5</span>ull * <span class=\"built_in\">NSEC_PER_SEC</span>,</span><br><span class=\"line\"><span class=\"number\">100</span>ull * <span class=\"built_in\">NSEC_PER_MSEC</span>);</span><br><span class=\"line\"><span class=\"keyword\">self</span>.source = source;</span><br><span class=\"line\">dispatch_resume(<span class=\"keyword\">self</span>.source);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"取消\"><a href=\"#取消\" class=\"headerlink\" title=\"取消\"></a>取消</h3><p>所有的事件源都允许你添加一个 <em>cancel handler</em> 。这对清理你为事件源创建的任何资源都是很有帮助的，比如关闭文件描述符。GCD 保证在 <em>cancel handle</em>  调用前，所有的事件处理都已经完成调用。</p>\n<p>参考上面的<a href=\"#watching_files\">监视文件例子</a>中对 <code>dispatch_source_set_cancel_handler()</code> 的使用。</p>\n<p><a id=\"input_output\" name=\"input_output\"> </a></p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p>写出能够在繁重的 I/O 处理情况下运行良好的代码是一件非常棘手的事情。GCD 有一些能够帮上忙的地方。不会涉及太多的细节，我们只简单的分析下问题是什么，GCD 是怎么处理的。</p>\n<p>习惯上，当你从一个网络套接字中读取数据时，你要么做一个阻塞的读操作，也就是让你个线程一直等待直到数据变得可用，或者是做反复的轮询。这两种方法都是很浪费资源并且无法度量。然而，<code>kqueue</code> 通过当数据变得可用时传递一个事件解决了轮询的问题，GCD 也采用了同样的方法，但是更加优雅。当向套接字写数据时，同样的问题也存在，这时你要么做阻塞的写操作，要么等待套接字直到能够接收数据。</p>\n<p>在处理 I/O 时，还有一个问题就是数据是以数据块的形式到达的。当从网络中读取数据时，依据 MTU(<a href=\"https://en.wikipedia.org/wiki/Maximum_transmission_unit\" target=\"_blank\" rel=\"noopener\">]最大传输单元</a>)，数据块典型的大小是在1.5K字节左右。这使得数据块内可以是任何内容。一旦数据到达，你通常只是对跨多个数据块的内容感兴趣。而且通常你会在一个大的缓冲区里将数据组合起来然后再进行处理。假设（人为例子）你收到了这样8个数据块：</p>\n<p>0: HTTP/1.1 200 OK\\r\\nDate: Mon, 23 May 2005 22:38<br>1: :34 GMT\\r\\nServer: Apache/1.3.3.7 (Unix) (Red-H<br>2: at/Linux)\\r\\nLast-Modified: Wed, 08 Jan 2003 23<br>3: :11:55 GMT\\r\\nEtag: “3f80f-1b6-3e1cb03b”\\r\\nCon<br>4: tent-Type: text/html; charset=UTF-8\\r\\nContent-<br>5: Length: 131\\r\\nConnection: close\\r\\n\\r\\n<html>\\r<br>6: \\n<head>\\r\\n  <title>An Example Page</title>\\r\\n<br>7: </head>\\r\\n<body>\\r\\n  Hello World, this is a ve</body></html></p>\n<p>如果你是在寻找 HTTP 的头部，将所有数据块组合成一个大的缓冲区并且从中查找 <code>\\r\\n\\r\\n</code> 是非常简单的。但是这样做，你会大量地复制这些数据。大量 <em>旧的</em> C 语言 API 存在的另一个问题就是，缓冲区没有所有权的概念，所以函数不得不将数据再次拷贝到自己的缓冲区中——又一次的拷贝。拷贝数据操作看起来是无关紧要的，但是当你正在做大量的 I/O 操作的时候，你会在 profiling tool(Instruments) 中看到这些拷贝操作大量出现。即使你仅仅每个内存区域拷贝一次，你还是使用了两倍的存储带宽并且占用了两倍的内存缓存。</p>\n<h3 id=\"GCD-和缓冲区\"><a href=\"#GCD-和缓冲区\" class=\"headerlink\" title=\"GCD 和缓冲区\"></a>GCD 和缓冲区</h3><p>最直接了当的方法是使用数据缓冲区。GCD 有一个 <code>dispatch_data_t</code> 类型，在某种程度上和 Objective-C 的 <code>NSData</code> 类型很相似。但是它能做别的事情，而且更通用。</p>\n<p>注意，<code>dispatch_data_t</code> 可以被 retained 和 releaseed ，并且 <code>dispatch_data_t</code> <em>拥有</em>它持有的对象。</p>\n<p>这看起来无关紧要，但是我们必须记住 GCD 只是纯 C 的 API，并且不能使用Objective-C。通常的做法是创建一个缓冲区，这个缓冲区要么是基于栈的，要么是  <code>malloc</code> 操作分配的内存区域 —— 这些都没有所有权。</p>\n<p><code>dispatch_data_t</code> 的一个相当独特的属性是它可以基于零碎的内存区域。这解决了我们刚提到的组合内存的问题。当你要将两个数据对象连接起来时：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_data_t a; <span class=\"comment\">// Assume this hold some valid data</span></span><br><span class=\"line\">dispatch_data_t b; <span class=\"comment\">// Assume this hold some valid data</span></span><br><span class=\"line\">dispatch_data_t c = dispatch_data_create_concat(a, b);</span><br></pre></td></tr></table></figure></p>\n<p>数据对象 c 并不会将 a 和 b 拷贝到一个单独的，更大的内存区域里去。相反，它只是简单地 retain 了 a 和 b。你可以使用 <code>dispatch_data_apply</code> 来遍历对象 c 持有的内存区域：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_data_apply(c, ^<span class=\"keyword\">bool</span>(dispatch_data_t region, size_t offset, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *buffer, size_t size) &#123;</span><br><span class=\"line\">fprintf(stderr, <span class=\"string\">\"region with offset %zu, size %zu\\n\"</span>, offset, size);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>类似的，你可以使用 <code>dispatch_data_create_subrange</code> 来创建一个不做任何拷贝操作的子区域。</p>\n<h3 id=\"读和写\"><a href=\"#读和写\" class=\"headerlink\" title=\"读和写\"></a>读和写</h3><p>在 GCD 的核心里，<em>调度 I/O</em>（译注：原文为 Dispatch I/O） 与所谓的<em>通道</em>有关。调度 I/O 通道提供了一种与从文件描述符中读写不同的方式。创建这样一个通道最基本的方式就是调用：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd,</span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue, <span class=\"keyword\">void</span> (^cleanup_handler)(<span class=\"keyword\">int</span> error));</span><br></pre></td></tr></table></figure></p>\n<p>这将返回一个持有文件描述符的创建好的通道。在你通过它创建了通道之后，你不准以任何方式修改这个文件描述符。</p>\n<p>有两种从根本上不同类型的通道：流和随机存取。如果你打开了硬盘上的一个文件，你可以使用它来创建一个随机存取的通道（因为这样的文件描述符是可寻址的）。如果你打开了一个套接字，你可以创建一个流通道。</p>\n<p>如果你想要为一个文件创建一个通道，你最好使用需要一个路径参数的 <code>dispatch_io_create_with_path</code> ，并且让 GCD 来打开这个文件。这是有益的，因为GCD会延迟打开这个文件以限制相同时间内同时打开的文件数量。</p>\n<p>类似通常的 read(2)，write(2) 和 close(2) 的操作，GCD 提供了 <code>dispatch_io_read</code>，<code>dispatch_io_write</code> 和 <code>dispatch_io_close</code>。无论何时数据读完或者写完，读写操作调用一个回调 block 来结束。这些都是以非阻塞，异步 I/O 的形式高效实现的。</p>\n<p>在这你得不到所有的细节，但是这里会提供一个创建TCP服务端的例子：</p>\n<p>首先我们创建一个监听套接字，并且设置一个接受连接的事件源：</p>\n<p>_isolation = dispatch_queue_create([[self description] UTF8String], 0);<br>_nativeSocket = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);<br>struct sockaddr_in sin = {};<br>sin.sin_len = sizeof(sin);<br>sin.sin_family = AF_INET6;<br>sin.sin_port = htons(port);<br>sin.sin_addr.s_addr= INADDR_ANY;<br>int err = bind(result.nativeSocket, (struct sockaddr *) &amp;sin, sizeof(sin));<br>NSCAssert(0 &lt;= err, @””);</p>\n<p>_eventSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, _nativeSocket, 0, _isolation);<br>dispatch_source_set_event_handler(result.eventSource, ^{<br>acceptConnection(_nativeSocket);<br>});</p>\n<p>当接受了连接，我们创建一个I/O通道：</p>\n<p>typedef union socketAddress {<br>struct sockaddr sa;<br>struct sockaddr_in sin;<br>struct sockaddr_in6 sin6;<br>} socketAddressUnion;</p>\n<p>socketAddressUnion rsa; // remote socket address<br>socklen_t len = sizeof(rsa);<br>int native = accept(nativeSocket, &amp;rsa.sa, &amp;len);<br>if (native == -1) {<br>// Error. Ignore.<br>return nil;<br>}</p>\n<p>_remoteAddress = rsa;<br>_isolation = dispatch_queue_create([[self description] UTF8String], 0);<br>_channel = dispatch_io_create(DISPATCH_IO_STREAM, native, _isolation, ^(int error) {<br>NSLog(@”An error occured while listening on socket: %d”, error);<br>});</p>\n<p>//dispatch_io_set_high_water(_channel, 8 <em> 1024);<br>dispatch_io_set_low_water(_channel, 1);<br>dispatch_io_set_interval(_channel, NSEC_PER_MSEC </em> 10, DISPATCH_IO_STRICT_INTERVAL);</p>\n<p>socketAddressUnion lsa; // remote socket address<br>socklen_t len = sizeof(rsa);<br>getsockname(native, &amp;lsa.sa, &amp;len);<br>_localAddress = lsa;</p>\n<p>如果我们想要设置 <code>SO_KEEPALIVE</code>（如果使用了HTTP的keep-alive），我们需要在调用 <code>dispatch_io_create</code> 前这么做。</p>\n<p>创建好 I/O 通道后，我们可以设置读取处理程序：</p>\n<p>dispatch_io_read(_channel, 0, SIZE_MAX, _isolation, ^(bool done, dispatch_data_t data, int error){<br>if (data != NULL) {<br>if (_data == NULL) {<br>_data = data;<br>} else {<br>_data = dispatch_data_create_concat(_data, data);<br>}<br>[self processData];<br>}<br>});</p>\n<p>如果所有你想做的只是读取或者写入一个文件，GCD 提供了两个方便的封装： <code>dispatch_read</code> 和 <code>dispatch_write</code> 。你需要传递给 <code>dispatch_read</code> 一个文件路径和一个在所有数据块读取后调用的 block。类似的，<code>dispatch_write</code> 需要一个文件路径和一个被写入的 <code>dispatch_data_t</code> 对象。</p>\n<h2 id=\"基准测试\"><a href=\"#基准测试\" class=\"headerlink\" title=\"基准测试\"></a>基准测试</h2><p>在 GCD 的一个不起眼的角落，你会发现一个适合优化代码的灵巧小工具：</p>\n<p>uint64_t dispatch_benchmark(size_t count, void (^block)(void));</p>\n<p>把这个声明放到你的代码中，你就能够测量给定的代码执行的平均的纳秒数。例子如下：</p>\n<p>size_t const objectCount = 1000;<br>uint64_t n = dispatch_benchmark(10000, ^{<br>@autoreleasepool {<br>id obj = @42;<br>NSMutableArray *array = [NSMutableArray array];<br>for (size_t i = 0; i &lt; objectCount; ++i) {<br>[array addObject:obj];<br>}<br>}<br>});<br>NSLog(@”-[NSMutableArray addObject:] : %llu ns”, n);</p>\n<p>在我的机器上输出了：</p>\n<p>-[NSMutableArray addObject:] : 31803 ns</p>\n<p>也就是说添加1000个对象到 NSMutableArray 总共消耗了31803纳秒，或者说平均一个对象消耗32纳秒。</p>\n<p>正如 <code>dispatch_benchmark</code> 的<a href=\"http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3\" target=\"_blank\" rel=\"noopener\">帮助页面</a>指出的，测量性能并非如看起来那样不重要。尤其是当比较并发代码和非并发代码时，你需要注意特定硬件上运行的特定计算带宽和内存带宽。不同的机器会很不一样。如果代码的性能与访问临界区有关，那么我们上面提到的锁竞争问题就会有所影响。</p>\n<p>不要把它放到发布代码中，事实上，这是无意义的，它是私有API。它只是在调试和性能分析上起作用。</p>\n<p>访问帮助界面：</p>\n<p>curl “<a href=\"http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt\" target=\"_blank\" rel=\"noopener\">http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt</a>“<br>| /usr/bin/groffer –tty -T utf8</p>\n<p><a id=\"atomic_operations\" name=\"atomic_operations\"> </a></p>\n<h2 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h2><p>头文件 <code>libkern/OSAtomic.h</code> 里有许多强大的函数，专门用来底层多线程编程。尽管它是内核头文件的一部分，它也能够在内核之外来帮助编程。</p>\n<p>这些函数都是很底层的，并且你需要知道一些额外的事情。就算你已经这样做了，你还可能会发现一两件你不能做，或者不易做的事情。当你正在为编写高性能代码或者正在实现无锁的和无等待的算法工作时，这些函数会吸引你。</p>\n<p>这些函数在 <code>atomic(3)</code> 的帮助页里全部有概述——运行 <code>man 3 atomic</code> 命令以得到完整的文档。你会发现里面讨论到了内存屏障。查看维基百科中关于<a href=\"https://en.wikipedia.org/wiki/Memory_barrier\" target=\"_blank\" rel=\"noopener\">内存屏障</a>的文章。如果你还存在疑问，那么你很可能需要它。</p>\n<h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><p><code>OSAtomicIncrement</code> 和 <code>OSAtomicDecrement</code> 有一个很长的函数列表允许你以原子操作的方式去增加和减少一个整数值 —— 不必使用锁（或者队列）同时也是线程安全的。如果你需要让一个全局的计数器值增加，而这个计数器为了统计目的而由多个线程操作，使用原子操作是很有帮助的。如果你要做的仅仅是增加一个全局计数器，那么无屏障版本的 <code>OSAtomicIncrement</code> 是很合适的，并且当没有锁竞争时，调用它们的代价很小。</p>\n<p>类似的，<code>OSAtomicOr</code> ，<code>OSAtomicAnd</code>，<code>OSAtomicXor</code> 的函数能用来进行逻辑运算，而 <code>OSAtomicTest</code> 可以用来设置和清除位。</p>\n<h4 id=\"10-2、比较和交换\"><a href=\"#10-2、比较和交换\" class=\"headerlink\" title=\"10.2、比较和交换\"></a>10.2、比较和交换</h4><p><code>OSAtomicCompareAndSwap</code> 能用来做无锁的惰性初始化，如下：</p>\n<p>void <em> sharedBuffer(void)<br>{<br>static void </em> buffer;<br>if (buffer == NULL) {<br>void * newBuffer = calloc(1, 1024);<br>if (!OSAtomicCompareAndSwapPtrBarrier(NULL, newBuffer, &amp;buffer)) {<br>free(newBuffer);<br>}<br>}<br>return buffer;<br>}</p>\n<p>如果没有 buffer，我们会创建一个，然后原子地将其写到 <code>buffer</code> 中如果 <code>buffer</code> 为NULL。在极少的情况下，其他人在当前线程同时设置了 <code>buffer</code> ，我们简单地将其释放掉。因为比较和交换方法是原子的，所以它是一个线程安全的方式去惰性初始化值。NULL的检测和设置 <code>buffer</code> 都是以原子方式完成的。</p>\n<p>明显的，使用 <code>dispatch_once()</code> 我们也可以完成类似的事情。</p>\n<h3 id=\"原子队列\"><a href=\"#原子队列\" class=\"headerlink\" title=\"原子队列\"></a>原子队列</h3><p><code>OSAtomicEnqueue()</code> 和 <code>OSAtomicDequeue()</code> 可以让你以线程安全，无锁的方式实现一个LIFO队列(常见的就是栈)。对有潜在精确要求的代码来说，这会是强大的代码。</p>\n<p>还有  <code>OSAtomicFifoEnqueue()</code> 和 <code>OSAtomicFifoDequeue()</code> 函数是为了操作FIFO队列，但这些只有在头文件中才有文档 —— 阅读他们的时候要小心。</p>\n<h3 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h3><p>最后，<code>OSAtomic.h</code> 头文件定义了使用自旋锁的函数：<code>OSSpinLock</code>。同样的，维基百科有深入的有关<a href=\"https://en.wikipedia.org/wiki/Spinlock\" target=\"_blank\" rel=\"noopener\">自旋锁</a>的信息。使用命令 <code>man 3 spinlock</code> 查看帮助页的 <code>spinlock(3)</code> 。当没有锁竞争时使用自旋锁代价很小。</p>\n<p>在合适的情况下，使用自旋锁对性能优化是很有帮助的。一如既往：先测量，然后优化。不要做乐观的优化。</p>\n<p>下面是 OSSpinLock 的一个例子：</p>\n<p>@interface MyTableViewCell : UITableViewCell</p>\n<p>@property (readonly, nonatomic, copy) NSDictionary *amountAttributes;</p>\n<p>@end</p>\n<p>@implementation MyTableViewCell<br>{<br>NSDictionary *_amountAttributes;<br>}</p>\n<ul>\n<li>(NSDictionary <em>)amountAttributes;<br>{<br>if (_amountAttributes == nil) {<br>static __weak NSDictionary </em>cachedAttributes = nil;<br>static OSSpinLock lock = OS_SPINLOCK_INIT;<br>OSSpinLockLock(&amp;lock);<br>_amountAttributes = cachedAttributes;<br>if (_amountAttributes == nil) {<br>NSMutableDictionary *attributes = [[self subtitleAttributes] mutableCopy];<br>attributes[NSFontAttributeName] = [UIFont fontWithName:@”ComicSans” size:36];<br>attributes[NSParagraphStyleAttributeName] = [NSParagraphStyle defaultParagraphStyle];<br>_amountAttributes = [attributes copy];<br>cachedAttributes = _amountAttributes;<br>}<br>OSSpinLockUnlock(&amp;lock);<br>}<br>return _amountAttributes;<br>}</li>\n</ul>\n<p>就上面的例子而言，或许用不着这么麻烦，但它演示了一种理念。我们使用了ARC的 <code>__weak</code> 来确保一旦 <code>MyTableViewCell</code> 所有的实例都不存在， <code>amountAttributes</code> 会调用 <code>dealloc</code> 。因此在所有的实例中，我们可以持有字典的一个单独实例。</p>\n<p>这段代码运行良好的原因是我们不太可能访问到方法最里面的部分。这是很深奥的——除非你真正需要，不然不要在你的 App 中使用它。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-2\" target=\"_blank\" rel=\"noopener\">话题 #2 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-2/low-level-concurrency-apis.html\" target=\"_blank\" rel=\"noopener\">Low-Level Concurrency APIs</a></p>\n<p>译文 <a href=\"http://webfrogs.me/2013/07/18/low-level_concurrency_apis/\" target=\"_blank\" rel=\"noopener\">Objc的底层并发API - webfrogs</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"API","path":"api/categories/API.json"}],"tags":[]},{"title":"常见的后台实现","slug":"iOS/常见的后台实现","date":"2017-09-24T11:03:35.000Z","updated":"2017-09-24T11:03:35.000Z","comments":true,"path":"api/articles/iOS/常见的后台实现.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>本文主要探讨一些常用后台任务的最佳实践：</p>\n<ol>\n<li>如何做异步网络请求</li>\n<li>如何异步处理大型文件，以保持较低的内存占用</li>\n</ol>\n<h3 id=\"操作队列-Operation-Queues-还是-GCD\"><a href=\"#操作队列-Operation-Queues-还是-GCD\" class=\"headerlink\" title=\"操作队列 (Operation Queues) 还是 GCD ?\"></a>操作队列 (Operation Queues) 还是 GCD ?</h3><p>操作队列提供了在 GCD 中不那么容易复制的有用特性。其中最重要的一个就是可以取消在任务处理队列中的任务，而且操作队列在管理操作间的依赖关系方面也容易一些。<br>GCD 给予你更多的控制权力以及操作队列中所不能使用的底层函数。详细介绍可以参考<a href=\"http://www.objccn.io/issue-2-3/\" target=\"_blank\" rel=\"noopener\">底层并发 API</a> 这篇文章。</p>\n<h2 id=\"后台-UI-代码\"><a href=\"#后台-UI-代码\" class=\"headerlink\" title=\"后台 UI 代码\"></a>后台 UI 代码</h2><p>首先要强调：UIKit 只能在主线程上运行。而那部分不与 UIKit 直接相关，却会消耗大量时间的 UI 代码可以被移动到后台去处理，以避免其将主线程阻塞太久。</p>\n<h3 id=\"后台获取UI数据\"><a href=\"#后台获取UI数据\" class=\"headerlink\" title=\"后台获取UI数据\"></a>后台获取UI数据</h3><p>例如使用操作队列隔离以下昂贵操作：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"keyword\">weak</span> <span class=\"keyword\">id</span> weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.operationQueue addOperationWithBlock:^&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSNumber</span>* result = findLargestMersennePrime();</span><br><span class=\"line\">    [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">        MyClass* strongSelf = weakSelf;</span><br><span class=\"line\">        strongSelf.textLabel.text = [result stringValue];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<p>如你所见，这些代码其实一点也不直接明了。我们首先声明了一个 weak 引用来参照 self，否则会形成循环引用（ block 持有了 self，私有的 <code>operationQueue</code> retain 了 block，而 self 又 retain 了 <code>operationQueue</code> ）。为了避免在运行 block 时访问到已被释放的对象，在 block 中我们又需要将其转回 strong 引用。</p>\n<blockquote>\n<p>这在 ARC 和 block 主导的编程范式中是解决 retain cycle 的一种常见也是最标准的方法。</p>\n</blockquote>\n<h3 id=\"后台绘制UI\"><a href=\"#后台绘制UI\" class=\"headerlink\" title=\"后台绘制UI\"></a>后台绘制UI</h3><p>如果你确定 <code>drawRect:</code> 是你的应用的性能瓶颈，那么你可以将这些绘制代码放到后台去做。但是在你这样做之前，检查下看看是不是有其他方法来解决，比如、考虑使用 core animation layers 或者预先渲染图片而不去做 Core Graphics 绘制。</p>\n<p>如果你确实认为在后台执行绘制代码会是你的最好选择时再这么做。其实解决起来也很简单，把 <code>drawRect:</code> 中的代码放到一个后台操作中去做就可以了。然后将原本打算绘制的视图用一个 image view 来替换，等到操作执行完后再去更新。在绘制的方法中，使用 <code>UIGraphicsBeginImageContextWithOptions</code> 来取代 <code>UIGraphicsGetCurrentContext</code> ：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIGraphicsBeginImageContextWithOptions</span>(size, <span class=\"literal\">NO</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// drawing code here</span></span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *i = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\"><span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> i;</span><br></pre></td></tr></table></figure></p>\n<p>通过在第三个参数中传入 0 ，设备的主屏幕的 scale 将被自动传入，这将使图片在普通设备和 retina 屏幕上都有良好的表现。</p>\n<h4 id=\"cell在操作队列中异步绘制\"><a href=\"#cell在操作队列中异步绘制\" class=\"headerlink\" title=\"cell在操作队列中异步绘制\"></a>cell在操作队列中异步绘制</h4><p>如果你在 table view 或者是 collection view 的 cell 上做了自定义绘制的话，最好将它们放入 operation 的子类中去。你可以将它们添加到后台操作队列，也可以在用户将 cell 滚动出边界时的 <code>didEndDisplayingCell</code> 委托方法中进行取消。这些技巧都在 2012 年的WWDC <a href=\"https://developer.apple.com/videos/wwdc/2012/\" target=\"_blank\" rel=\"noopener\">Session 211 – Building Concurrent User Interfaces on iOS</a>中有详细阐述。</p>\n<h4 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h4><p>除了在后台自己调度绘制代码，以也可以试试看使用 <code>CALayer</code> 的 <code>drawsAsynchronously</code> 属性。然而你需要精心衡量这样做的效果，因为有时候它能使绘制加速，有时候却适得其反。</p>\n<h2 id=\"异步网络请求处理\"><a href=\"#异步网络请求处理\" class=\"headerlink\" title=\"异步网络请求处理\"></a>异步网络请求处理</h2><p>你的所有网络请求都应该采取异步的方式完成。</p>\n<p>然而，在 GCD 下，有时候你可能会看到这样的代码<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 警告：不要使用这些代码。</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(backgroundQueue, ^&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSData</span>* contents = [<span class=\"built_in\">NSData</span> dataWithContentsOfURL:url]</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理取到的日期</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>乍看起来没什么问题，但是这段代码却有致命缺陷。你没有办法去取消这个同步的网络请求。它将阻塞主线程直到它完成。如果请求一直没结果，那就只能干等到超时（比如 <code>dataWithContentsOfURL:</code> 的超时时间是 30 秒）。</p>\n<h3 id=\"分析状况\"><a href=\"#分析状况\" class=\"headerlink\" title=\"分析状况\"></a>分析状况</h3><ol>\n<li>当队列是串行执行时，它将一直被阻塞住。</li>\n<li>当队列是并行执行时，GCD 需要重开一个线程来补凑你阻塞住的线程。</li>\n</ol>\n<p>两种结果都不太妙，所以最好还是不要阻塞线程。</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>要解决上面的困境，我们可以使用 <code>NSURLConnection</code> 的异步方法，并且把所有操作转化为 operation 来执行。通过这种方法，我们可以从操作队列的强大功能和便利中获益良多：我们能轻易地控制并发操作的数量，添加依赖，以及取消操作。<br>例如：在<code>NSOperation</code>子类<code>DownloadOperation</code>中重写<code>start</code>方法，并实现<code>NSURLConnectionDelegate</code>代理方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DownloadOperation</span> : <span class=\"title\">NSOperation</span>&lt;<span class=\"title\">NSURLConnectionDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:<span class=\"keyword\">self</span>.url];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isConcurrent = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.connection = [<span class=\"built_in\">NSURLConnection</span> connectionWithRequest:request delegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然而，在这里还有一些事情值得注意： <code>NSURLConnection</code> 是通过 run loop 来发送事件的。因为发送事件不会花多少时间，因此最简单的是就只使用 main run loop 来做这个。然后，我们就可以用后台线程来处理输入的数据了。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>另一种可能的方式是使用像 <a href=\"http://afnetworking.com\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> 这样的框架：建立一个独立的线程，为建立的线程设置自己的 run loop，然后在其中调度 URL 连接。但是并不推荐你自己去实现这些事情。</p>\n<p>要处理URL 连接，我们重写自定义的 operation 子类中的 <code>start</code> 方法：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURLRequest</span>* request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:<span class=\"keyword\">self</span>.url];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.connection = [<span class=\"built_in\">NSURLConnectionconnectionWithRequest</span>:request</span><br><span class=\"line\">        delegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于重写的是 <code>start</code> 方法，所以我们需要自己要管理操作的 <code>isExecuting</code> 和 <code>isFinished</code> 状态。要取消一个操作，我们需要取消 connection ，并且设定合适的标记，这样操作队列才知道操作已经完成。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)cancel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> cancel];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.connection cancel];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当连接完成加载后，它向代理发送回调：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)connectionDidFinishLoading:(<span class=\"built_in\">NSURLConnection</span> *)connection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.data = <span class=\"keyword\">self</span>.buffer;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.buffer = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>就这么多了。完整的代码可以参见<a href=\"https://github.com/objcio/issue-2-background-networking\" target=\"_blank\" rel=\"noopener\">GitHub上的示例工程</a>。</p>\n<p>总结来说，我们建议要么你花时间来把事情做对做好，要么就直接使用像 <a href=\"http://afnetworking.com/\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> 这样的框架。其实 <a href=\"http://afnetworking.com/\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> 还提供了不少好用的小工具，比如有个 <code>UIImageView</code> 的 category，来负责异步地从一个 URL 加载图片。在你的 table view 里使用的话，还能自动帮你处理取消加载操作，非常方便。</p>\n<p>扩展阅读：</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1\" target=\"_blank\" rel=\"noopener\">Concurrency Programming Guide</a></li>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html%23http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html%23//apple_ref/doc/uid/TP40004591-RH2-SW15\" target=\"_blank\" rel=\"noopener\">NSOperation Class Reference: Concurrent vs. Non-Concurrent Operations</a></li>\n<li><a href=\"http://www.cocoaintheshell.com/2011/04/nsurlconnection-synchronous-asynchronous/\" target=\"_blank\" rel=\"noopener\">Blog: synchronous vs. asynchronous NSURLConnection</a></li>\n<li><a href=\"https://github.com/rs/SDWebImage/blob/master/SDWebImage/SDWebImageDownloaderOperation.m\" target=\"_blank\" rel=\"noopener\">GitHub: <code>SDWebImageDownloaderOperation.m</code></a></li>\n<li><a href=\"http://www.cocoaintheshell.com/2011/05/progressive-images-download-imageio/\" target=\"_blank\" rel=\"noopener\">Blog: Progressive image download with ImageIO</a></li>\n<li><a href=\"https://developer.apple.com/videos/wwdc/2012/\" target=\"_blank\" rel=\"noopener\">WWDC 2012 Session 211: Building Concurrent User Interfaces on iOS</a></li>\n</ul>\n<h2 id=\"进阶：后台文件-I-O\"><a href=\"#进阶：后台文件-I-O\" class=\"headerlink\" title=\"进阶：后台文件 I/O\"></a>进阶：后台文件 I/O</h2><p>构建一个类，负责一行一行读取文件而不是一次将整个文件读入内存，另外要在后台队列处理文件，以保持应用相应用户的操作。<br>为了达到这个目的，我们使用能让我们异步处理文件的 <code>NSInputStream</code> 。根据<a href=\"http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>的描述：</p>\n<blockquote>\n<p>如果你总是需要从头到尾来读/写文件的话，streams 提供了一个简单的接口来异步完成这个操作</p>\n</blockquote>\n<p>不管你是否使用 streams，大体上逐行读取一个文件的模式是这样的：</p>\n<ol>\n<li>建立一个中间缓冲层以提供，当没有找到换行符号的时候可以向其中添加数据</li>\n<li>从 stream 中读取一块数据</li>\n<li>对于这块数据中发现的每一个换行符，取中间缓冲层，向其中添加数据，直到（并包括）这个换行符，并将其输出</li>\n<li>将剩余的字节添加到中间缓冲层去</li>\n<li>回到 2，直到 stream 关闭</li>\n</ol>\n<p>为了将其运用到实践中，我们又建立了一个<a href=\"https://github.com/objcio/issue-2-background-file-io\" target=\"_blank\" rel=\"noopener\">示例应用</a>，里面有一个 <code>Reader</code> 类完成了这件事情，它的接口十分简单<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Reader</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)enumerateLines:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSString</span>*))block completion:(<span class=\"keyword\">void</span> (^)())completion;</span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)initWithFileAtPath:(<span class=\"built_in\">NSString</span>*)path;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"runloop分发NSInputStream事件\"><a href=\"#runloop分发NSInputStream事件\" class=\"headerlink\" title=\"runloop分发NSInputStream事件\"></a>runloop分发NSInputStream事件</h4><p>注意，这个类不是 NSOperation 的子类。与 URL connections 类似，输入的 streams 通过 run loop 来传递它的事件。这里，我们仍然采用 main run loop 来分发事件，然后将数据处理过程派发至后台操作线程里去处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)enumerateLines:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSString</span>*))block</span><br><span class=\"line\">completion:(<span class=\"keyword\">void</span> (^)())completion</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.queue == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.queue = [[<span class=\"built_in\">NSOperationQueue</span> alloc] init];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.queue.maxConcurrentOperationCount = <span class=\"number\">1</span>;  <span class=\"comment\">//串行队列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.callback = block;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.completion = completion;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.inputStream = [<span class=\"built_in\">NSInputStream</span> inputStreamWithURL:<span class=\"keyword\">self</span>.fileURL];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.inputStream.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    <span class=\"comment\">//分发NSInputStream事件</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.inputStream scheduleInRunLoop:[<span class=\"built_in\">NSRunLoop</span> currentRunLoop]</span><br><span class=\"line\">                                forMode:<span class=\"built_in\">NSDefaultRunLoopMode</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.inputStream open];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用时的代码：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)import:(<span class=\"keyword\">id</span>)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *fileURL = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"Clarissa Harlowe\"</span> withExtension:<span class=\"string\">@\"txt\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSAssert</span>([[<span class=\"built_in\">NSFileManager</span> defaultManager] fileExistsAtPath:[fileURL path]], <span class=\"string\">@\"Please download the sample data\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.reader = [[Reader alloc] initWithFileAtURL:fileURL];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.reader enumerateLinesWithBlock:^(<span class=\"built_in\">NSUInteger</span> i, <span class=\"built_in\">NSString</span> *line)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i % <span class=\"number\">2000</span>ull) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"i: %d\"</span>, i);</span><br><span class=\"line\">        [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span>.button setTitle:line forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; completionHandler:^(<span class=\"built_in\">NSUInteger</span> numberOfLines)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"lines: %d\"</span>, numberOfLines);</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.button setTitle:<span class=\"string\">@\"Done\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"NSInputStream代理方法\"><a href=\"#NSInputStream代理方法\" class=\"headerlink\" title=\"NSInputStream代理方法\"></a>NSInputStream代理方法</h4><p>现在，input stream 将（在主线程）向我们发送代理消息，然后我们可以在操作队列中加入一个 block 操作来执行处理了：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)stream:(<span class=\"built_in\">NSStream</span>*)stream handleEvent:(<span class=\"built_in\">NSStreamEvent</span>)eventCode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (eventCode) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">NSStreamEventHasBytesAvailable</span>: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSMutableData</span> *buffer = [<span class=\"built_in\">NSMutableData</span> dataWithLength:<span class=\"number\">4</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"built_in\">NSUInteger</span> length = [<span class=\"keyword\">self</span>.inputStream read:[buffer mutableBytes]</span><br><span class=\"line\">                                             maxLength:[buffer length]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; length) &#123;</span><br><span class=\"line\">                [buffer setLength:length];</span><br><span class=\"line\">                __<span class=\"keyword\">weak</span> <span class=\"keyword\">id</span> weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">                [<span class=\"keyword\">self</span>.queue addOperationWithBlock:^&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//在后台串行队列的线程池中逐行处理缓冲区</span></span><br><span class=\"line\">                    [weakSelf processDataChunk:buffer];</span><br><span class=\"line\">                &#125;];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"缓冲区处理\"><a href=\"#缓冲区处理\" class=\"headerlink\" title=\"缓冲区处理\"></a>缓冲区处理</h4><p>处理数据块的过程是先查看当前已缓冲的数据，并将新加入的数据附加上去。接下来它将按照换行符分解成小的部分，并逐行处理。<br>数据处理过程中会不断的从buffer中获取已读入的数据。然后把这些新读入的数据按行分开并存储。剩余的数据被再次存储到缓冲区中：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)processDataChunk:(<span class=\"built_in\">NSMutableData</span> *)buffer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.remainder != <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.remainder appendData:buffer];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.remainder = buffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.remainder obj_enumerateComponentsSeparatedBy:<span class=\"keyword\">self</span>.delimiter</span><br><span class=\"line\">                            usingBlock:^(<span class=\"built_in\">NSData</span>* component, <span class=\"built_in\">BOOL</span> last) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!last) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> emitLineWithData:component];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; [component length]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.remainder = [component mutableCopy];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.remainder = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)emitLineWithData:(<span class=\"built_in\">NSData</span> *)data;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> lineNumber = <span class=\"keyword\">self</span>.lineNumber;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.lineNumber = lineNumber + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; data.length) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *line = [[<span class=\"built_in\">NSString</span> alloc] initWithData:data encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.callback(lineNumber, line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在你运行示例应用的话，会发现它在响应事件时非常迅速，内存的开销也保持很低（在我们测试时，不论读入的文件有多大，堆所占用的内存量始终低于 800KB）。绝大部分时候，使用逐块读入的方式来处理大文件，是非常有用的技术。</p>\n<p>延伸阅读：</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/FileManagement/Conceptual/FileSystemProgrammingGUide/TechniquesforReadingandWritingCustomFiles/TechniquesforReadingandWritingCustomFiles.html\" target=\"_blank\" rel=\"noopener\">File System Programming Guide: Techniques for Reading and Writing Files Without File Coordinators</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3707427/how-to-read-data-from-nsfilehandle-line-by-line\" target=\"_blank\" rel=\"noopener\">StackOverflow: How to read data from NSFileHandle line by line?</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过我们所列举的几个示例，我们展示了如何异步地在后台执行一些常见任务。在所有的解决方案中，我们尽力保持了代码的简单，这是因为在并发编程中，稍不留神就会捅出篓子来。</p>\n<p>很多时候为了避免麻烦，你可能更愿意在主线程中完成你的工作，在你能这么做事，这确实让你的工作轻松不少，但是当你发现性能瓶颈时，你可以尝试尽可能用最简单的策略将那些繁重任务放到后台去做。</p>\n<p>我们在上面例子中所展示的方法对于其他任务来说也是安全的选择。在主队列中接收事件或者数据，然后用后台操作队列来执行实际操作，然后回到主队列去传递结果，遵循这样的原则来编写尽量简单的并行代码，将是保证高效正确的不二法则。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-2\" target=\"_blank\" rel=\"noopener\">话题 #2 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-2/common-background-practices.html\" target=\"_blank\" rel=\"noopener\">Common Background Practices</a></p>\n<p>译文 <a href=\"http://onevcat.com/2014/03/common-background-practices/\" target=\"_blank\" rel=\"noopener\">常见的后台实践</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"API","path":"api/categories/API.json"}],"tags":[]},{"title":"iOS多线程API介绍","slug":"iOS/iOS多线程API介绍","date":"2017-09-24T09:18:49.000Z","updated":"2017-09-24T09:18:49.000Z","comments":true,"path":"api/articles/iOS/iOS多线程API介绍.json","excerpt":null,"keywords":null,"cover":"https://www.objccn.io/images/issues/issue-2/gcd-queues.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29\" target=\"_blank\" rel=\"noopener\">并发</a>所描述的概念就是同时运行多个任务。这些任务可能是以在单核 CPU 上<a href=\"http://en.wikipedia.org/wiki/Preemption_%28computing%29\" target=\"_blank\" rel=\"noopener\">分时（时间共享）</a>的形式同时运行，也可能是在多核 CPU 上以真正的并行方式来运行。</p>\n<p>OS X 和 iOS 提供了几种不同的 API 来支持并发编程。每一个 API 都具有不同的功能和使用限制，这使它们适合不同的任务。同时，这些 API 处在不同的抽象层级上。我们有可能用其进行非常深入底层的操作，但是这也意味着背负起将任务进行良好处理的巨大责任。</p>\n<p>实际上，并发编程是一个很有挑战的主题，它有许多错综复杂的问题和陷阱。当开发者在使用类似 <code>Grand Central Dispatch</code>（GCD）或 <code>NSOperationQueue</code> 的 API 时，很容易遗忘这些问题和陷阱。本文首先对 OS X 和 iOS 中不同的并发编程 API 进行一些介绍，然后再深入了解并发编程中独立于与你所使用的特定 API 的一些内在挑战。</p>\n<h2 id=\"OS-X-和-iOS-中的并发编程\"><a href=\"#OS-X-和-iOS-中的并发编程\" class=\"headerlink\" title=\"OS X 和 iOS 中的并发编程\"></a>OS X 和 iOS 中的并发编程</h2><p>OS X 和 iOS 提供了相同的并发编程API。 本文会介绍 <code>pthread</code> 、 <code>NSThread</code> 、<code>GCD</code> 、<code>NSOperationQueue</code>，以及 <code>NSRunLoop</code>（并非并发）。</p>\n<p>由于高层 API 是基于底层 API 构建的，所以我们首先将从底层的 API 开始介绍，然后逐步扩展到高层 API。不过在具体编程中，选择 API 的顺序刚好相反：因为大多数情况下，选择高层的 API 不仅可以完成底层 API 能完成的任务，而且能够让并发模型变得简单。</p>\n<p>如果你对我们为何坚持推荐使用高抽象层级以及简单的并行代码有所疑问的话，那么你可以看看这篇文章的第二部分<a href=\"#challenges\">并发编程中面临的挑战</a>，以及 Peter Steinberger 写的关于<a href=\"http://objccn.io/issue-2-4/\" target=\"_blank\" rel=\"noopener\">线程安全</a>的文章。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><p><a href=\"http://zh.wikipedia.org/wiki/线程\" target=\"_blank\" rel=\"noopener\">线程</a>（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的 —— 包括 GCD 和操作队列（operation queues）。</p>\n<p>多线程可以在单核 CPU 上同时（或者至少看作同时）运行。操作系统将小的时间片分配给每一个线程，这样就能够让用户感觉到有多个任务在同时进行。如果 CPU 是多核的，那么线程就可以真正的以并发方式被执行，从而减少了完成某项操作所需要的总时间。</p>\n<p>你可以使用 Instruments 中的 <a href=\"http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/AnalysingCPUUsageinYourOSXApp/AnalysingCPUUsageinYourOSXApp.html\" target=\"_blank\" rel=\"noopener\">CPU strategy view</a> 来得知你的代码或者你在使用的框架代码是如何在多核 CPU 中调度执行的。</p>\n<p>需要重点关注的是，你无法控制你的代码在什么地方以及什么时候被调度，以及无法控制执行多长时间后将被暂停，以便轮换执行别的任务。这种线程调度是非常强大的一种技术，但是也非常复杂，我们稍后研究。</p>\n<p>先把线程调度的复杂情况放一边，开发者可以使用 <a href=\"http://en.wikipedia.org/wiki/POSIX_Threads\" target=\"_blank\" rel=\"noopener\">POSIX 线程</a> API，或者 Objective-C 中提供的对该 API 的封装 <code>NSThread</code>，来创建自己的线程。</p>\n<h4 id=\"线程实例\"><a href=\"#线程实例\" class=\"headerlink\" title=\"线程实例\"></a>线程实例</h4><p><strong>在一百万个数字中查找最小值和最大值</strong>。</p>\n<h5 id=\"pthread-方式实现\"><a href=\"#pthread-方式实现\" class=\"headerlink\" title=\"pthread 方式实现\"></a><code>pthread</code> 方式实现</h5><p>下面这个小示例利用 <code>pthread</code> 来<strong>在一百万个数字中查找最小值和最大值</strong>。其中并发执行了 4 个线程。从该示例复杂的代码中，应该可以看出为什么你不会希望直接使用 pthread 。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadInfo</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> * inputValues;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadResult</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> min;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> max;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">findMinAndMax</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadInfo</span> <span class=\"title\">const</span> * <span class=\"title\">const</span> <span class=\"title\">info</span> = (<span class=\"title\">struct</span> <span class=\"title\">threadInfo</span> *) <span class=\"title\">arg</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> min = UINT32_MAX;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info-&gt;count; ++i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> v = info-&gt;inputValues[i];</span><br><span class=\"line\">min = MIN(min, v);</span><br><span class=\"line\">max = MAX(max, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">free</span>(arg);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadResult</span> * <span class=\"title\">const</span> <span class=\"title\">result</span> = (<span class=\"title\">struct</span> <span class=\"title\">threadResult</span> *) <span class=\"title\">malloc</span>(<span class=\"title\">sizeof</span>(*<span class=\"title\">result</span>));</span></span><br><span class=\"line\">result-&gt;min = min;</span><br><span class=\"line\">result-&gt;max = max;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> <span class=\"keyword\">const</span> count = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> inputValues[count];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用随机数字填充 inputValues</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">inputValues[i] = arc4random();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始4个寻找最小值和最大值的线程</span></span><br><span class=\"line\"><span class=\"keyword\">size_t</span> <span class=\"keyword\">const</span> threadCount = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">pthread_t</span> tid[threadCount];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; threadCount; ++i) &#123;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadInfo</span> * <span class=\"title\">const</span> <span class=\"title\">info</span> = (<span class=\"title\">struct</span> <span class=\"title\">threadInfo</span> *) <span class=\"title\">malloc</span>(<span class=\"title\">sizeof</span>(*<span class=\"title\">info</span>));</span></span><br><span class=\"line\"><span class=\"keyword\">size_t</span> offset = (count / threadCount) * i;</span><br><span class=\"line\">info-&gt;inputValues = inputValues + offset;</span><br><span class=\"line\">info-&gt;count = MIN(count - offset, count / threadCount);</span><br><span class=\"line\"><span class=\"keyword\">int</span> err = pthread_create(tid + i, <span class=\"literal\">NULL</span>, &amp;findMinAndMax, info);</span><br><span class=\"line\">NSCAssert(err == <span class=\"number\">0</span>, @<span class=\"string\">\"pthread_create() failed: %d\"</span>, err);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等待线程退出</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">threadResult</span> * <span class=\"title\">results</span>[<span class=\"title\">threadCount</span>];</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; threadCount; ++i) &#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> err = pthread_join(tid[i], (<span class=\"keyword\">void</span> **) &amp;(results[i]));</span><br><span class=\"line\">NSCAssert(err == <span class=\"number\">0</span>, @<span class=\"string\">\"pthread_join() failed: %d\"</span>, err);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 寻找 min 和 max</span></span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> min = UINT32_MAX;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; threadCount; ++i) &#123;</span><br><span class=\"line\">min = MIN(min, results[i]-&gt;min);</span><br><span class=\"line\">max = MAX(max, results[i]-&gt;max);</span><br><span class=\"line\"><span class=\"built_in\">free</span>(results[i]);</span><br><span class=\"line\">results[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@<span class=\"string\">\"min = %u\"</span>, min);</span><br><span class=\"line\">NSLog(@<span class=\"string\">\"max = %u\"</span>, max);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"NSThread方式实现\"><a href=\"#NSThread方式实现\" class=\"headerlink\" title=\"NSThread方式实现\"></a>NSThread方式实现</h5><p><code>NSThread</code> 是 Objective-C 对 pthread 的一个封装。通过封装，在 Cocoa 环境中，可以让代码看起来更加亲切。例如，<strong>开发者可以利用 NSThread 的一个子类来定义一个线程，在这个子类的中封装需要在后台线程运行的代码</strong>。针对上面的那个例子，我们可以定义一个这样的 <code>NSThread</code> 子类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">FindMinMaxThread</span> : <span class=\"title\">NSThread</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSUInteger</span> min;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSUInteger</span> max;</span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithNumbers:(<span class=\"built_in\">NSArray</span> *)numbers;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">FindMinMaxThread</span> </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *_numbers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithNumbers:(<span class=\"built_in\">NSArray</span> *)numbers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">_numbers = numbers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> min;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> max;</span><br><span class=\"line\"><span class=\"comment\">// 进行相关数据的处理</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.min = min;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.max = max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>要想启动一个新的线程，需要创建一个线程对象，然后调用它的 <code>start</code> 方法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSMutableSet</span> *threads = [<span class=\"built_in\">NSMutableSet</span> set];</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> numberCount = <span class=\"keyword\">self</span>.numbers.count;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> threadCount = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">NSUInteger</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> offset = (count / threadCount) * i;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> count = MIN(numberCount - offset, numberCount / threadCount);</span><br><span class=\"line\"><span class=\"built_in\">NSRange</span> range = <span class=\"built_in\">NSMakeRange</span>(offset, count);</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *subset = [<span class=\"keyword\">self</span>.numbers subarrayWithRange:range];</span><br><span class=\"line\">FindMinMaxThread *thread = [[FindMinMaxThread alloc] initWithNumbers:subset];</span><br><span class=\"line\">[threads addObject:thread];</span><br><span class=\"line\">[thread start];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们可以<strong>通过检测到线程的 <code>isFinished</code> 属性来检测新生成的线程是否已经结束，并获取结果</strong>。</p>\n<h4 id=\"线程问题\"><a href=\"#线程问题\" class=\"headerlink\" title=\"线程问题\"></a>线程问题</h4><p>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长。这在大型工程中是一个常见问题。例如，在 8 核 CPU 中，你创建了 8 个线程来完全发挥 CPU 性能。然而在这些线程中你的代码所调用的框架代码也做了同样事情（因为它并不知道你已经创建的这些线程），这样会很快产生成成百上千的线程。代码的每个部分自身都没有问题，然而最后却还是导致了问题。使用线程并不是没有代价的，每个线程都会消耗一些内存和内核资源。</p>\n<p>接下来，我们将介绍两个基于队列的并发编程 API ：GCD 和 operation queue 。它们通过集中管理一个被大家协同使用的<a href=\"http://en.wikipedia.org/wiki/Thread_pool_pattern\" target=\"_blank\" rel=\"noopener\">线程池</a>，来解决上面遇到的问题。</p>\n<h3 id=\"Grand-Central-Dispatch\"><a href=\"#Grand-Central-Dispatch\" class=\"headerlink\" title=\"Grand Central Dispatch\"></a>Grand Central Dispatch</h3><p>为了让开发者更加容易的使用设备上的多核CPU，苹果在 OS X 10.6 和 iOS 4 中引入了 Grand Central Dispatch（GCD）。在下一篇关于<a href=\"http://objccn.io/issue-2-3/\" target=\"_blank\" rel=\"noopener\">底层并发 API</a> 的文章中，我们将更深入地介绍 GCD。</p>\n<p>通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个<a href=\"http://en.wikipedia.org/wiki/Thread_pool_pattern\" target=\"_blank\" rel=\"noopener\">线程池</a>。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。</p>\n<p>GCD 带来的另一个重要改变是，作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p>\n<p>GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）。<br>另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-2/gcd-queues.png\" alt=\"GCD queues\"></p>\n<p>使用不同优先级的若干个队列乍听起来非常直接，不过，我们强烈建议，在绝大多数情况下使用默认的优先级队列就可以了。如果执行的任务需要访问一些共享的资源，那么在不同优先级的队列中调度这些任务很快就会造成不可预期的行为。这样可能会引起程序的完全挂起，因为低优先级的任务阻塞了高优先级任务，使它不能被执行。更多相关内容，在本文的<a href=\"#Priority-Inversion\">优先级反转</a>部分中会有介绍。</p>\n<p>虽然 GCD 是一个低层级的 C API ，但是它使用起来非常的直接。不过这也容易使开发者忘记并发编程中的许多注意事项和陷阱。读者可以阅读本文后面的<a href=\"#challenges\">并发编程中面临的挑战</a>，这样可以注意到一些潜在的问题。本期的另外一篇优秀文章：<a href=\"http://objccn.io/issue-2-3/\" target=\"_blank\" rel=\"noopener\">底层并发 API</a> 中，包含了很多深入的解释和一些有价值的提示。</p>\n<h3 id=\"Operation-Queues\"><a href=\"#Operation-Queues\" class=\"headerlink\" title=\"Operation Queues\"></a>Operation Queues</h3><p>操作队列（operation queue）是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能，这些功能对于 app 的开发者来说通常是最好最安全的选择。</p>\n<h4 id=\"操作队列成员\"><a href=\"#操作队列成员\" class=\"headerlink\" title=\"操作队列成员\"></a>操作队列成员</h4><ol>\n<li>主队列：在主线程上运行</li>\n<li>自定义队列：在后台子线程上执行</li>\n<li>操作任务：<code>NSOperation</code> 的子类，即在前两种队列中所要执行的任务代码</li>\n</ol>\n<h4 id=\"实现操作任务\"><a href=\"#实现操作任务\" class=\"headerlink\" title=\"实现操作任务\"></a>实现操作任务</h4><p>你可以通过重写 <code>main</code> 或者 <code>start</code> 方法 来定义自己的 <code>operations</code> 。</p>\n<h5 id=\"重写-main方法\"><a href=\"#重写-main方法\" class=\"headerlink\" title=\"重写 main方法\"></a>重写 <code>main</code>方法</h5><p>当 <code>main</code> 方法返回的时候，这个 operation 就结束了。无法控制操作状态属性（例如 <code>isExecuting</code> 和 <code>isFinished</code>）。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YourOperation</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">// 进行处理 ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"重写-start方法\"><a href=\"#重写-start方法\" class=\"headerlink\" title=\"重写 start方法\"></a>重写 <code>start</code>方法</h5><p>这种方式可以拥有更多的控制权，以及在一个操作中可以执行异步任务，重写 <code>start</code> 方法必须手动管理操作的状态（例如 <code>isExecuting</code> 和 <code>isFinished</code>）。</p>\n<ol>\n<li><p>重写实现：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YourOperation</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">YES</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"comment\">// 开始处理，在结束时应该调用 finished ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)finished</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.isExecuting = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.isFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p> 注意：这种情况下，你必须手动管理操作的状态。 为了让操作队列能够捕获到操作的改变，需要将状态的属性以配合 KVO 的方式进行实现。如果你不使用它们默认的 setter 来进行设置的话，你就需要在合适的时候发送合适的 KVO 消息。</p>\n</li>\n<li><p>取消功能的实现<br>为了能使用操作队列所提供的取消功能，你需要在长时间操作中时不时地检查 <code>isCancelled</code> 属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (notDone &amp;&amp; !<span class=\"keyword\">self</span>.isCancelled) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 进行处理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写 operation 的<code>description</code> 方法<br>这样就可以很容易的标示出在某个队列中当前被调度的所有操作 。</p>\n<h4 id=\"操作队列管理\"><a href=\"#操作队列管理\" class=\"headerlink\" title=\"操作队列管理\"></a>操作队列管理</h4><h5 id=\"添加操作任务\"><a href=\"#添加操作任务\" class=\"headerlink\" title=\"添加操作任务\"></a>添加操作任务</h5><p>当你定义好 operation 类之后，就可以很容易的将一个 operation 添加到队列中：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSOperationQueue</span> *queue = [[<span class=\"built_in\">NSOperationQueue</span> alloc] init];</span><br><span class=\"line\">YourOperation *operation = [[YourOperation alloc] init];</span><br><span class=\"line\">[queue addOperation:operation];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"添加一次性任务\"><a href=\"#添加一次性任务\" class=\"headerlink\" title=\"添加一次性任务\"></a>添加一次性任务</h5><p>另外，你也可以将 block 添加到操作队列中。这有时候会非常的方便，比如你希望在主队列中调度一个一次性任务：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class=\"line\"><span class=\"comment\">// 代码...</span></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"操作队列的任务个数\"><a href=\"#操作队列的任务个数\" class=\"headerlink\" title=\"操作队列的任务个数\"></a>操作队列的任务个数</h5><p>除了提供基本的调度操作或 block 外，操作队列还提供了在 GCD 中不太容易处理好的特性的功能。例如，你可以通过 <code>maxConcurrentOperationCount</code> 属性来控制一个特定队列中可以有多少个操作参与并发执行。将其设置为 1 的话，你将得到一个串行队列，这在以隔离为目的的时候会很有用。</p>\n<h5 id=\"操作优先级\"><a href=\"#操作优先级\" class=\"headerlink\" title=\"操作优先级\"></a>操作优先级</h5><p>另外还有一个方便的功能就是根据队列中 <code>operation</code> 的优先级对其进行排序，这不同于 GCD 的队列优先级，它只影响当前队列中所有被调度的 operation 的执行先后。</p>\n<h5 id=\"操作依赖\"><a href=\"#操作依赖\" class=\"headerlink\" title=\"操作依赖\"></a>操作依赖</h5><p>如果你需要进一步在除了 5 个标准的优先级以外对 operation 的执行顺序进行控制的话，还可以在 operation 之间指定依赖关系。<br>使用<code>NSOperation</code>类的实例方法<code>addDependency:</code>实现操作之间的依赖关系。<br>对于需要明确的执行顺序时，操作依赖是非常强大的一个机制。它可以让你创建一些操作组，并确保这些操作组在依赖它们的操作被执行之前执行，或者在并发队列中以串行的方式执行操作。<br>如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[intermediateOperation addDependency:operation1];</span><br><span class=\"line\">[intermediateOperation addDependency:operation2];</span><br><span class=\"line\">[finishedOperation addDependency:intermediateOperation];</span><br></pre></td></tr></table></figure></p>\n<p>这些简单的代码可以确保 <code>operation1</code> 和 <code>operation2</code> 在 <code>intermediateOperation</code> 之前执行，当然，也会在 <code>finishOperation</code> 之前被执行。</p>\n<p>从本质上来看，操作队列的性能比 GCD 要低那么一点，不过，大多数情况下这点负面影响可以忽略不计，操作队列是并发编程的首选工具。</p>\n<h3 id=\"Run-Loops\"><a href=\"#Run-Loops\" class=\"headerlink\" title=\"Run Loops\"></a>Run Loops</h3><p>实际上，Run loop并不像 GCD 或者操作队列那样是一种并发机制，因为它并不能并行执行任务。不过在主 dispatch/operation 队列中， run loop 将直接配合任务的执行，它提供了一种异步执行代码的机制。</p>\n<p>Run loop 比起操作队列或者 GCD 来说容易使用得多，因为通过 run loop ，你不必处理并发中的复杂情况，就能异步地执行任务。</p>\n<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>一个 run loop 总是绑定到某个特定的线程中。main run loop 是与主线程相关的，在每一个 Cocoa 和 CocoaTouch 程序中，这个 main run loop 都扮演了一个核心角色，它负责处理 UI 事件、计时器，以及其它内核相关事件。无论你什么时候设置计时器、使用 <code>NSURLConnection</code> 或者调用 <code>performSelector:withObject:afterDelay:</code>，其实背后都是 run loop 在处理这些异步任务。</p>\n<h4 id=\"runloop运行模式\"><a href=\"#runloop运行模式\" class=\"headerlink\" title=\"runloop运行模式\"></a>runloop运行模式</h4><p>无论何时你使用 run loop 来执行一个方法的时候，都需要记住一点：run loop 可以运行在不同的模式中，每种模式都定义了一组事件，供 run loop 做出响应。这在对应 main run loop 中暂时性的将某个任务优先执行这种任务上是一种聪明的做法。</p>\n<p>关于这点，在 iOS 中非常典型的一个示例就是滚动。在进行滚动时，run loop 并不是运行在默认模式中的，因此， run loop 此时并不会响应比如滚动前设置的计时器。一旦滚动停止了，run loop 会回到默认模式，并执行添加到队列中的相关事件。如果在滚动时，希望计时器能被触发，需要将其设为 <code>NSRunLoopCommonModes</code> 的模式，并添加到 run loop 中。</p>\n<h4 id=\"子线程中使用runloop\"><a href=\"#子线程中使用runloop\" class=\"headerlink\" title=\"子线程中使用runloop\"></a>子线程中使用runloop</h4><p>主线程一般来说都已经配置好了 main run loop。然而其他线程默认情况下都没有设置 run loop。你也可以自行为其他线程设置 run loop ，但是一般来说我们很少需要这么做。大多数时间使用 main run loop 会容易得多。如果你需要处理一些很重的工作，但是又不想在主线程里做，你仍然可以在你的代码在 main run loop 中被调用后将工作分配给其他队列。Chris 在他关于<a href=\"http://objccn.io/issue-2-2/\" target=\"_blank\" rel=\"noopener\">常见的后台实践</a>的文章里阐述了一些关于这种模式的很好的例子。</p>\n<p>如果你真需要在别的线程中添加一个 run loop ，那么不要忘记在 run loop 中至少添加一个 input source 。如果 run loop 中没有设置好的 input source，那么每次运行这个 run loop ，它都会立即退出。</p>\n<p><a name=\"challenges\" id=\"challenges\"> </a></p>\n<h2 id=\"并发编程中面临的挑战\"><a href=\"#并发编程中面临的挑战\" class=\"headerlink\" title=\"并发编程中面临的挑战\"></a>并发编程中面临的挑战</h2><p>使用并发编程会带来许多陷阱。只要一旦你做的事情超过了最基本的情况，对于并发执行的多任务之间的相互影响的不同状态的监视就会变得异常困难。 问题往往发生在一些不确定性（不可预见性）的地方，这使得在调试相关并发代码时更加困难。</p>\n<p>关于并发编程的不可预见性有一个非常有名的例子：在1995年， NASA (美国宇航局)发送了开拓者号火星探测器，但是当探测器成功着陆在我们红色的邻居星球后不久，任务<a href=\"http://research.microsoft.com/en-us/um/people/mbj/Mars_Pathfinder/Mars_Pathfinder.html\" target=\"_blank\" rel=\"noopener\">嘎然而止</a>，火星探测器莫名其妙的不停重启，在计算机领域内，遇到的这种现象被定为为<a href=\"#priority_inversion\">优先级反转</a>，也就是说低优先级的线程一直阻塞着高优先级的线程。稍后我们会看到关于这个问题的更多细节。在这里我们想说明的是，即使拥有丰富的资源和大量优秀工程师的智慧，并发也还是会在不少情况下反咬你一口。</p>\n<p><a name=\"shared_resources\" id=\"shared_resources\"> </a></p>\n<h3 id=\"资源共享\"><a href=\"#资源共享\" class=\"headerlink\" title=\"资源共享\"></a>资源共享</h3><p>并发编程中许多问题的根源就是在多线程中访问共享资源。资源可以是一个属性、一个对象，通用的内存、网络设备或者一个文件等等。在多线程中任何一个共享的资源都可能是一个潜在的冲突点，你必须精心设计以防止这种冲突的发生。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>为了演示这类问题，我们举一个关于资源的简单示例：<br>描述：比如仅仅用一个整型值来做计数器。在程序运行过程中，我们有两个并行线程 A 和 B，这两个线程都尝试着同时增加计数器的值。<br>问题：你通过 C 语言或 Objective-C 写的代码大多数情况下对于 CPU 来说不会仅仅是一条机器指令。要想增加计数器的值，当前的必须被从内存中读出，然后增加计数器的值，最后还需要将这个增加后的值写回内存中。</p>\n<p>我们可以试着想一下，如果两个线程同时做上面涉及到的操作，会发生怎样的偶然。例如，线程 A 和 B 都从内存中读取出了计数器的值，假设为 <code>17</code> ，然后线程A将计数器的值加1，并将结果 <code>18</code> 写回到内存中。同时，线程B也将计数器的值加 1 ，并将结果 <code>18</code> 写回到内存中。实际上，此时计数器的值已经被破坏掉了，因为计数器的值 <code>17</code> 被加 1 了两次，而它的值却是 <code>18</code>。</p>\n<p><img src=\"https://www.objccn.io/images/issue-2/race-condition.png\" alt=\"竞态条件\"></p>\n<p>这个问题被叫做<a href=\"http://en.wikipedia.org/wiki/Race_conditions#Software\" target=\"_blank\" rel=\"noopener\">竞态条件</a>，<strong>在多线程里面访问一个共享的资源，如果没有一种机制来确保在线程 A 结束访问一个共享资源之前，线程 B 就不会开始访问该共享资源的话，资源竞争的问题就总是会发生</strong>。如果你所写入内存的并不是一个简单的整数，而是一个更复杂的数据结构，可能会发生这样的现象：当第一个线程正在写入这个数据结构时，第二个线程却尝试读取这个数据结构，那么获取到的数据可能是新旧参半或者没有初始化。为了防止出现这样的问题，多线程需要一种互斥的机制来访问共享资源。</p>\n<p>在实际的开发中，情况甚至要比上面介绍的更加复杂，因为现代 CPU 为了优化目的，往往会改变向内存读写数据的顺序（<a href=\"http://en.wikipedia.org/wiki/Out-of-order_execution\" target=\"_blank\" rel=\"noopener\">乱序执行</a>）。</p>\n<h3 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h3><p><a href=\"http://en.wikipedia.org/wiki/Mutex\" target=\"_blank\" rel=\"noopener\">互斥</a>访问的意思就是同一时刻，只允许一个线程访问某个特定资源。为了保证这一点，每个希望访问共享资源的线程，首先需要获得一个共享资源的<a href=\"http://en.wikipedia.org/wiki/Lock_%28computer_science%29\" target=\"_blank\" rel=\"noopener\">互斥锁</a>，一旦某个线程对资源完成了操作，就释放掉这个互斥锁，这样别的线程就有机会访问该共享资源了。</p>\n<p><img src=\"https://www.objccn.io/images/issue-2/locking.png\" alt=\"互斥锁\"></p>\n<p>除了确保互斥访问，还需要解决代码无序执行所带来的问题。如果不能确保 CPU 访问内存的顺序跟编程时的代码指令一样，那么仅仅依靠互斥访问是不够的。为了解决由 CPU 的优化策略引起的副作用，还需要引入<a href=\"http://en.wikipedia.org/wiki/Memory_barrier\" target=\"_blank\" rel=\"noopener\">内存屏障</a>。通过设置内存屏障，来确保没有无序执行的指令能跨过屏障而执行。</p>\n<p>当然，互斥锁自身的实现是需要没有竞争条件的。这实际上是非常重要的一个保证，并且需要在现代 CPU 上使用特殊的指令。更多关于原子操作（atomic operation）的信息，请阅读 Daniel 写的文章：<a href=\"http://objccn.io/issue-2-3/\" target=\"_blank\" rel=\"noopener\">底层并发技术</a>。</p>\n<h4 id=\"解决方案：原子声明属性\"><a href=\"#解决方案：原子声明属性\" class=\"headerlink\" title=\"解决方案：原子声明属性\"></a>解决方案：原子声明属性</h4><p>从语言层面来说，在 Objective-C 中将属性以 atomic 的形式来声明，就能支持互斥锁了。事实上在默认情况下，属性就是 atomic 的。将一个属性声明为 atomic 表示每次访问该属性都会进行隐式的加锁和解锁操作。虽然最把稳的做法就是将所有的属性都声明为 atomic，但是加解锁这也会付出一定的代价。</p>\n<h4 id=\"性能开销及锁的竞争\"><a href=\"#性能开销及锁的竞争\" class=\"headerlink\" title=\"性能开销及锁的竞争\"></a>性能开销及锁的竞争</h4><p>在资源上的加锁会引发一定的性能代价。获取锁和释放锁的操作本身也需要没有竞态条件，这在多核系统中是很重要的。另外，在获取锁的时候，线程有时候需要等待，因为可能其它的线程已经获取过资源的锁了。这种情况下，线程会进入休眠状态。当其它线程释放掉相关资源的锁时，休眠的线程会得到通知。所有这些相关操作都是非常昂贵且复杂的。<br>在这里有一个东西需要进行权衡：获取和释放锁所是要带来开销的，因此你需要确保你不会频繁地进入和退出<a href=\"http://en.wikipedia.org/wiki/Critical_section\" target=\"_blank\" rel=\"noopener\">临界区段</a>（比如获取和释放锁）。同时，如果你获取锁之后要执行一大段代码，这将带来锁竞争的风险：其它线程可能必须等待获取资源锁而无法工作。这并不是一项容易解决的任务。</p>\n<h4 id=\"不同类型的锁\"><a href=\"#不同类型的锁\" class=\"headerlink\" title=\"不同类型的锁\"></a>不同类型的锁</h4><p>锁也有不同的类型。当没有竞争时，有些锁在没有锁竞争的情况下性能很好，但是在有锁的竞争情况下，性能就会大打折扣。另外一些锁则在基本层面上就比较耗费资源，但是在竞争情况下，性能的恶化会没那么厉害。(<a href=\"http://en.wikipedia.org/wiki/Lock_%28computer_science%29#Granularity\" target=\"_blank\" rel=\"noopener\">锁的竞争</a>是这样产生的：当一个或者多个线程尝试获取一个已经被别的线程获取过了的锁)。</p>\n<p>我们经常能看到本来计划并行运行的代码，但实际上由于共享资源中配置了相关的锁，所以同一时间只有一个线程是处于激活状态的。对于你的代码会如何在多核上运行的预测往往十分重要，你可以使用 Instrument 的 <a href=\"http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/AnalysingCPUUsageinYourOSXApp/AnalysingCPUUsageinYourOSXApp.html\" target=\"_blank\" rel=\"noopener\">CPU strategy view</a> 来检查是否有效的利用了 CPU 的可用核数，进而得出更好的想法，以此来优化代码。</p>\n<p><a name=\"dead_locks\" id=\"dead_locks\"> </a></p>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>互斥锁解决了竞态条件的问题，但很不幸同时这也引入了一些<a href=\"http://en.wikipedia.org/wiki/Lock_%28computer_science%29#The_problems_with_locks\" target=\"_blank\" rel=\"noopener\">其他问题</a>，其中一个就是<a href=\"http://en.wikipedia.org/wiki/Deadlock\" target=\"_blank\" rel=\"noopener\">死锁</a>。当多个线程在相互等待着对方的结束时，就会发生死锁，这时程序可能会被卡住。</p>\n<p><img src=\"https://www.objccn.io/images/issue-2/dead-lock.png\" alt=\"死锁\"></p>\n<p>看看下面的代码，它交换两个变量的值：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(A, B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">lock(lockA);</span><br><span class=\"line\">lock(lockB);</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = A;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = B;</span><br><span class=\"line\">A = b;</span><br><span class=\"line\">B = a;</span><br><span class=\"line\">unlock(lockB);</span><br><span class=\"line\">unlock(lockA);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>大多数时候，这能够正常运行。但是当两个线程使用相反的值来同时调用上面这个方法时：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(X, Y); <span class=\"comment\">// 线程 1</span></span><br><span class=\"line\">swap(Y, X); <span class=\"comment\">// 线程 2</span></span><br></pre></td></tr></table></figure></p>\n<p>此时程序可能会由于死锁而被终止。线程 1 获得了 X 的一个锁，线程 2 获得了 Y 的一个锁。 接着它们会同时等待另外一把锁，但是永远都不会获得。</p>\n<p>再说一次，你在线程之间共享的资源越多，你使用的锁也就越多，同时程序被死锁的概率也会变大。这也是为什么我们需要尽量减少线程间资源共享，并确保共享的资源尽量简单的原因之一。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>建议阅读一下<a href=\"http://objccn.io/issue-2-3/\" target=\"_blank\" rel=\"noopener\">底层并发编程 API</a> 中的<a href=\"http://objccn.io/issue-2-3/#async\" target=\"_blank\" rel=\"noopener\">全部使用异步分发</a>一节。</p>\n<h3 id=\"资源饥饿（Starvation）\"><a href=\"#资源饥饿（Starvation）\" class=\"headerlink\" title=\"资源饥饿（Starvation）\"></a>资源饥饿（Starvation）</h3><p>当你认为已经足够了解并发编程面临的问题时，又出现了一个新的问题。锁定的共享资源会引起<a href=\"http://en.wikipedia.org/wiki/Readers-writers_problem\" target=\"_blank\" rel=\"noopener\">读写问题</a>。大多数情况下，限制资源一次只能有一个线程进行读取访问其实是非常浪费的。因此，在资源上没有写入锁的时候，持有一个读取锁是被允许的。这种情况下，如果一个持有读取锁的线程在等待获取写入锁的时候，其他希望读取资源的线程则因为无法获得这个读取锁而导致<a href=\"http://en.wikipedia.org/wiki/Resource_starvation\" target=\"_blank\" rel=\"noopener\">资源饥饿</a>的发生。</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>为了解决这个问题，我们需要使用一个比简单的读/写锁更聪明的方法，例如给定一个 <a href=\"http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock\" target=\"_blank\" rel=\"noopener\">writer preference</a>，或者使用 <a href=\"http://en.wikipedia.org/wiki/Read-copy-update\" target=\"_blank\" rel=\"noopener\">read-copy-update</a> 算法。Daniel 在<a href=\"http://objccn.io/issue-2-3/#multiple-readers-single-writer\" target=\"_blank\" rel=\"noopener\">底层并发编程 API </a>中有介绍了如何用 GCD 实现一个多读取单写入的模式，这样就不会被写入资源饥饿的问题困扰了。</p>\n<p><a name=\"priority_inversion\" id=\"priority_inversion\"> </a></p>\n<h2 id=\"优先级反转\"><a href=\"#优先级反转\" class=\"headerlink\" title=\"优先级反转\"></a>优先级反转</h2><p>本节开头介绍了美国宇航局发射的开拓者号火星探测器在火星上遇到的并发问题。现在我们就来看看为什么开拓者号几近失败，以及为什么有时候我们的程序也会遇到相同的问题，该死的<a href=\"http://en.wikipedia.org/wiki/Priority_inversion\" target=\"_blank\" rel=\"noopener\">优先级反转</a>。</p>\n<p>优先级反转是指程序在运行时低优先级的任务阻塞了高优先级的任务，有效的反转了任务的优先级。由于 GCD 提供了拥有不同优先级的后台队列，甚至包括一个 I/O 队列，所以我们最好了解一下优先级反转的可能性。</p>\n<p>高优先级和低优先级的任务之间共享资源时，就可能发生优先级反转。当低优先级的任务获得了共享资源的锁时，该任务应该迅速完成，并释放掉锁，这样高优先级的任务就可以在没有明显延时的情况下继续执行。然而高优先级任务会在低优先级的任务持有锁的期间被阻塞。如果这时候有一个中优先级的任务(该任务不需要那个共享资源)，那么它就有可能会抢占低优先级任务而被执行，因为此时高优先级任务是被阻塞的，所以中优先级任务是目前所有可运行任务中优先级最高的。此时，中优先级任务就会阻塞着低优先级任务，导致低优先级任务不能释放掉锁，这也就会引起高优先级任务一直在等待锁的释放。</p>\n<p><img src=\"https://www.objccn.io/images/issue-2/priority-inversion.png\" alt=\"优先级反转\"></p>\n<p>在你的实际代码中，可能不会像发生在火星的事情那样戏剧性地不停重启。遇到优先级反转时，一般没那么严重。</p>\n<p>解决这个问题的方法，通常就是不要使用不同的优先级。通常最后你都会以让高优先级的代码等待低优先级的代码来解决问题。当你使用 GCD 时，总是使用默认的优先级队列（直接使用，或者作为目标队列）。如果你使用不同的优先级，很可能实际情况会让事情变得更糟糕。</p>\n<p>从中得到的教训是，使用不同优先级的多个队列听起来虽然不错，但毕竟是纸上谈兵。它将让本来就复杂的并行编程变得更加复杂和不可预见。如果你在编程中，遇到高优先级的任务突然没理由地卡住了，可能你会想起本文，以及那个美国宇航局的工程师也遇到过的被称为优先级反转的问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们希望通过本文你能够了解到并发编程带来的复杂性和相关问题。并发编程中，无论是看起来多么简单的 API ，它们所能产生的问题会变得非常的难以观测，而且要想调试这类问题往往也都是非常困难的。</p>\n<p>但另一方面，并发实际上是一个非常棒的工具。它充分利用了现代多核 CPU 的强大计算能力。在开发中，关键的一点就是尽量让并发模型保持简单，这样可以限制所需要的锁的数量。</p>\n<p>我们建议采纳的安全模式是这样的：从主线程中提取出要使用到的数据，并利用一个操作队列在后台处理相关的数据，最后回到主队列中来发送你在后台队列中得到的结果。使用这种方式，你不需要自己做任何锁操作，这也就大大减少了犯错误的几率。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-2\" target=\"_blank\" rel=\"noopener\">话题 #2 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html\" target=\"_blank\" rel=\"noopener\">Concurrent Programming: APIs and Challenges</a></p>\n<p>精细校对 <a href=\"http://im.onevcat.com\" target=\"_blank\" rel=\"noopener\">@onevcat</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"API","path":"api/categories/API.json"}],"tags":[]}]}