{"name":"JS","postlist":[{"title":"JavaScript自动化组件OC桥接","slug":"macOS/JavaScript自动化组件OC桥接","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/JavaScript自动化组件OC桥接.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8\" target=\"_blank\" rel=\"noopener\">文档</a><br><code>JavaScript自动化</code>有一个内置的<code>Objective-C Bridge</code>，使您能够访问文件系统，创建Cocoa应用程序。<br><code>Objective-C Bridge</code>的主要接入点是全局属性<code>objc</code>和<code>$</code>。</p>\n<h2 id=\"Frameworks\"><a href=\"#Frameworks\" class=\"headerlink\" title=\"Frameworks\"></a>Frameworks</h2><p><code>Foundation framework</code>中的语法默认支持<code>JavaScript自动化</code>。也可以通过使用<code>ObjC.import()</code>方法导入其他Frameworks 和 libraries。<br>例如，使用<code>Cocoa框架</code>中的<code>NSBeep()</code>函数，需要导入<code>Cocoa框架</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjC.import(<span class=\"string\">'Cocoa'</span>)</span><br><span class=\"line\">$.NSBeep()</span><br></pre></td></tr></table></figure><br>除了系统框架之外，一些系统库的功能也被暴露出来。这个功能可以通过<code>头文件</code>的名称来暴漏出来（不带.h）<br>例如：<br>arpa/inet, asl, copyfile, dispatch, dyld, errno, getopt, glob, grp, ifaddrs, launch, membership, netdb, netinet/in, notify, objc, paths, pwd, readline, removefile, signal, spawn, sqlite3, stdio, stdlib, string, sys/fcntl, sys/file, sys/ioctl, sys/mount, sys/param, sys/resource, sys/socket, sys/stat, sys/sysctl, sys/time, sys/times, sys/types, sys/wait, sys/xattr, syslog, time, unistd, uuid/uuid, vImage, vecLib, vmnet, xpc, 和 zlib.<br>导入框架时，系统将参考桥接支持文件。除了内置的框架和库，您可以导入任何具有桥接支持的框架，只需要将完整路径传递给框架，如下示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjC.import(<span class=\"string\">'/Library/Frameworks/Awesome.framework'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>原始的<code>JavaScript数据类型</code>映射到<code>C数据类型</code>。例如，一个<code>JavaScript字符串</code>映射为<code>char *</code>，而<code>JavaScript整数</code>映射到<code>int</code>。使用<code>objc API</code>返回一个<code>char *</code>时，会得到一个<code>JS 字符串</code></p>\n<p>原始的<code>JavaScript数据类型</code>将被自动转换为<code>ObjC对象类型</code>，并能作为一个预期的对象类型的参数传递给ObjC方法。<br>例如，一个<code>JS字符串</code>将被转换为一个<code>NSString对象</code>如果是什么方法签名说应该是输入。</p>\n<blockquote>\n<p>注意，然而，ObjC方法返回的ObjC对象类型是不会自动转换为原始的JavaScript的数据类型。</p>\n</blockquote>\n<h2 id=\"实例化的类和调用方法\"><a href=\"#实例化的类和调用方法\" class=\"headerlink\" title=\"实例化的类和调用方法\"></a>实例化的类和调用方法</h2><p>所有类都定义为<code>$对象</code>的属性。ObjC对象的方法有两种方式调用，根据是否需要参数的方法。<br>如果ObjC方法不带参数，然后调用<code>JavaScript属性名</code>访问<code>属性值</code>。这个例子中实例化一个空的字符串。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = $.NSMutableString.alloc.init</span><br></pre></td></tr></table></figure><br>如果ObjC方法不带参数，根据<code>JSExport</code>规范来命名，通过JavaScript的方法调用（function-typed property）；<br>对于多参数的方法，Objective-C的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br>这个例子说明<code>JavaScript字符串</code>转为<code>NSString</code>然后写入到一个文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = $.NSString.alloc.initWithUTF8String(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">str.writeToFileAtomically(<span class=\"string\">'/tmp/foo'</span>, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure></p>\n<p>如果你调用一个方法，如<code>-intValue</code>，返回<code>C数据类型</code>而不是一个对象，然后你会回到原始的<code>JavaScript数据类型</code>。<br>此示例返回原始的JavaScript的整数，99。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.NSNumber.numberWithInt(<span class=\"number\">99</span>).intValue</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问-ObjC-Properties\"><a href=\"#访问-ObjC-Properties\" class=\"headerlink\" title=\"访问 ObjC Properties\"></a>访问 ObjC Properties</h3><p><code>ObjC属性</code>也可以通过<code>JavaScript属性</code>来访问，很像调用无参数方法。<br>当一个<code>桥接对象属性</code>的被访问时，ObjC属性列表是第一参考，如果列表中存在该名称对应的属性，那么就调用相应属性的<code>getter</code>或<code>setter</code>选择器。如果该名称的ObjC属性不在类中属性的列表中，那么该属性名称就作为<code>方法选择器</code>来调用。<br>使用自定义<code>getter</code>名定义一个属性，你可以使用<code>属性</code>名 或 <code>getter</code>名，并得到相同的结果。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task = $.NSTask.alloc.init</span><br><span class=\"line\">task.running == task.isRunning</span><br></pre></td></tr></table></figure><br>另外，不同的参数方法，<code>桥接对象属性</code>映射到<code>ObjC属性</code>也可以设置为（read/write属性）。下面的两行定义了一个ObjC属性：<code>launchPath</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.launchPath = <span class=\"string\">'/bin/sleep'</span></span><br><span class=\"line\">task.setLaunchPath(<span class=\"string\">'/bin/sleep'</span>)</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"测试","path":"api/tags/测试.json"},{"name":"混编","path":"api/tags/混编.json"}]},{"title":"shell命令+AppleScript脚本+Swift代码相互调用","slug":"macOS/shell命令+AppleScript脚本+Swift代码相互调用","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-15T17:19:30.000Z","comments":true,"path":"api/articles/macOS/shell命令+AppleScript脚本+Swift代码相互调用.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是<code>AppleScript</code>作为互通的桥梁。</p>\n<h2 id=\"NSTask调用AppleScript\"><a href=\"#NSTask调用AppleScript\" class=\"headerlink\" title=\"NSTask调用AppleScript\"></a><code>NSTask</code>调用<code>AppleScript</code></h2><h3 id=\"调用脚本文件main-scpt\"><a href=\"#调用脚本文件main-scpt\" class=\"headerlink\" title=\"调用脚本文件main.scpt\"></a>调用脚本文件<code>main.scpt</code></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//let bundle = NSBundle.init(forClass: self.dynamicType)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> scriptPath = bundle.pathForResource(<span class=\"string\">\"main\"</span>, ofType: <span class=\"string\">\"scpt\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> paths = [scriptPath]</span><br><span class=\"line\">    <span class=\"type\">NSTask</span>.launchedTaskWithLaunchPath(<span class=\"string\">\"/usr/bin/osascript\"</span>, arguments: paths)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用APPleScript脚本片段\"><a href=\"#调用APPleScript脚本片段\" class=\"headerlink\" title=\"调用APPleScript脚本片段\"></a>调用<code>APPleScript脚本片段</code></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bundle = <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoPath = bundle.pathForResource(<span class=\"string\">\"BigBuck\"</span>, ofType: <span class=\"string\">\"m4v\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//https://developer.apple.com/library/mac/technotes/tn2084/_index.html</span></span><br><span class=\"line\"><span class=\"comment\">//open -na /Applications/mpv.app命令行必须是 -na 才能调用当前指定的播放器，否则会调用系统默认播发器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAppleScript = <span class=\"string\">\"on run\\ndo shell script \\\"open -na /Applications/mpv.app \\(videoPath!)\\\"\\ntell application \\\"mpv\\\" to activate\\n end run\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myAppleScript)</span><br><span class=\"line\"><span class=\"keyword\">var</span> error: <span class=\"type\">NSDictionary</span>?</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> scriptObject = <span class=\"type\">NSAppleScript</span>(source: myAppleScript) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> output: <span class=\"type\">NSAppleEventDescriptor</span> = scriptObject.executeAndReturnError(</span><br><span class=\"line\">    &amp;error) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(output.stringValue)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error != <span class=\"literal\">nil</span>) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \\(error)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AppleScript调用shell\"><a href=\"#AppleScript调用shell\" class=\"headerlink\" title=\"AppleScript调用shell\"></a><code>AppleScript</code>调用<code>shell</code></h2><p>AppleScript语句中为on run {变量名称，逗号隔开} 以endrun结束。中间为AppleScript语句。</p>\n<h3 id=\"do-shell-script\"><a href=\"#do-shell-script\" class=\"headerlink\" title=\"do shell script\"></a>do shell script</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on run [变量1,变量2...]  #开始 多个变量名称，用逗号隔开</span><br><span class=\"line\">    do shell script \"open -n /Applications/mpv.app\" #AppleScript语句  </span><br><span class=\"line\">end run #结束</span><br></pre></td></tr></table></figure>\n<h2 id=\"终端osascript调用AppleScript\"><a href=\"#终端osascript调用AppleScript\" class=\"headerlink\" title=\"终端osascript调用AppleScript\"></a>终端<code>osascript</code>调用<code>AppleScript</code></h2><p><a href=\"http://www.hackmac.org/tutorials/run-applescript-from-the-command-line/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e 'applescript command' #单引号</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开Finder窗口\"><a href=\"#打开Finder窗口\" class=\"headerlink\" title=\"打开Finder窗口\"></a>打开Finder窗口</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e 'tell app \"Finder\" to make new Finder window'</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开某个程序同时弹出”Hello-World”提示框\"><a href=\"#打开某个程序同时弹出”Hello-World”提示框\" class=\"headerlink\" title=\"打开某个程序同时弹出”Hello World”提示框\"></a>打开某个程序同时弹出”Hello World”提示框</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e <span class=\"string\">'tell app \"applicationname\" to display dialog \"Hello World\"'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置音量，音量大小范围（0-7）\"><a href=\"#设置音量，音量大小范围（0-7）\" class=\"headerlink\" title=\"设置音量，音量大小范围（0-7）\"></a>设置音量，音量大小范围（0-7）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osascript -e <span class=\"string\">\"set volume number\"</span></span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"脚本","path":"api/tags/脚本.json"},{"name":"AppleScript","path":"api/tags/AppleScript.json"},{"name":"shell","path":"api/tags/shell.json"}]},{"title":"macOS支持JavaScript自动化组件基础","slug":"macOS/macOS支持JavaScript自动化组件基础","date":"2017-02-15T17:19:30.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/macOS支持JavaScript自动化组件基础.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>苹果 <code>OS X Yosemite系统</code>把 <code>JavaScript</code>作为<code>AppleScript</code>的另一选择。<code>Automation</code> 是 <code>OS X 10.10版本</code>中的新特性，苹果在官网发布<a href=\"https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508\" target=\"_blank\" rel=\"noopener\">JavaScript for Automation Release Notes</a>有篇文章介绍了用<code>JavaScript</code>写自动化<code>Automation</code>脚本。<br><code>JavaScript</code>凭借其简单的语法，良好的性能，超轻量的框架，极小耦合的模块系统等等优势已经吸引了很多大厂的关注。<br>再加上<code>JavaScript</code>先天开放且无版权专利纠纷的问题，拥有非常广泛的开发者（开源）群体，苹果将其引入<code>OS X平台</code>代替私有的<code>AppleScript</code>，可能也有着一部分开放性平台的考虑，从而吸引广泛的第三方开发者。<br>资源<br><a href=\"https://github.com/tylergaw/js-osx-app-examples\" target=\"_blank\" rel=\"noopener\">JavaScript OS X App Examples</a><br><a href=\"https://github.com/dtinth/JXA-Cookbook\" target=\"_blank\" rel=\"noopener\">JavaScript for Automation Cookbook</a></p>\n<h2 id=\"OSA框架-Open-Scripting-Architecture\"><a href=\"#OSA框架-Open-Scripting-Architecture\" class=\"headerlink\" title=\"OSA框架:Open Scripting Architecture\"></a>OSA框架:<code>Open Scripting Architecture</code></h2><p><code>OSA</code>组件用于实现MacAPP自动化操作。这些框架组件使用场景包括：<code>Script Editor</code>编辑器，全系统的<code>Script菜单</code>，<code>Run JavaScript Automator</code>命令的操作，<code>applets</code>小程序，命令行<code>osascript</code>工具，<code>NSUserScriptTask API</code>中，还可以运用在其他的<code>OSA</code>组件中例如：<code>AppleScript</code>。这也就包括了<code>Mail</code>规则、<code>Folder</code>操作、<code>Address Book</code>插件、日历闹钟和消息触发器。</p>\n<h2 id=\"脚本字典\"><a href=\"#脚本字典\" class=\"headerlink\" title=\"脚本字典\"></a>脚本字典</h2><p>脚本字典详细介绍APP的对象模型。在脚本字典映射到有效的JavaScript标识符遵循一套规范的术语。在<code>Script Editor</code>脚本字典浏览器已经更新到显示术语<code>AppleScript</code>，<code>JavaScript</code>和O<code>bjective-C</code>（Scripting Bridge framework）格式。</p>\n<h3 id=\"打开脚本字典\"><a href=\"#打开脚本字典\" class=\"headerlink\" title=\"打开脚本字典\"></a>打开脚本字典</h3><p>启动<code>Script Editor</code> (/Applications/Utilities/) –&gt;<code>File &gt; Open Dictionary or Window &gt; Library</code>。</p>\n<h2 id=\"object-specifier\"><a href=\"#object-specifier\" class=\"headerlink\" title=\"object specifier\"></a>object specifier</h2><p>在<code>JavaScript自动化主机</code>环境中的大部分对象指的是外部实例，如：其他APP，window或在这些APP的相关数据。当访问一个APP对象或APP中的某个元素的<code>JavaScript属性</code>时，会返回一个新的<code>object specifier</code>，也就是这个对象的<code>specifier 属性</code>。</p>\n<blockquote>\n<p>object specifier不是外部实例属性的实际值，是这个对象的引用指针。如果要获取这个属性的实际值，使用get／set方法。</p>\n</blockquote>\n<h2 id=\"访问APP\"><a href=\"#访问APP\" class=\"headerlink\" title=\"访问APP\"></a>访问APP</h2><p>六种方式:<br><figure class=\"highlight js\"><figcaption><span>By name</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'Mail'</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><figcaption><span>By bundle ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'com.apple.mail'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>By path</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'/Applications/Mail.app'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>By process ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"number\">763</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>On a remote machine</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application(<span class=\"string\">'eppc://127.0.0.1/Mail'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>currentApplication</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application.currentApplication()</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法示例\"><a href=\"#语法示例\" class=\"headerlink\" title=\"语法示例\"></a>语法示例</h2><figure class=\"highlight js\"><figcaption><span>Access properties</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.name</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Access elements</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.outgoingMessages[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Call commands</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.open(...)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Create new objects</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.OutgoingMessage(...)</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性的get-set方法\"><a href=\"#属性的get-set方法\" class=\"headerlink\" title=\"属性的get/set方法\"></a>属性的get/set方法</h3><p>点运算符访问脚本对象，是JavaScript语法特性之一。<br>如上所述，返回的对象是一个<code>object specifier</code>是一个对象的引用，而不是属性实际值。<br>当访问属性时，会作为一个get函数，返回实际值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject = Mail.inbox.messages[<span class=\"number\">0</span>].subject()</span><br></pre></td></tr></table></figure><br>当赋值属性时，会作为一个set函数，把参数赋值该属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.outgoingMessages[<span class=\"number\">0</span>].subject = <span class=\"string\">'Hello world'</span></span><br></pre></td></tr></table></figure><br>获取数组中的每个元素属性（在这种情况下，得到邮件收件箱中的每份邮件的标题）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subjects = Mail.inbox.messages.subject()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"元素数组\"><a href=\"#元素数组\" class=\"headerlink\" title=\"元素数组\"></a>元素数组</h3><p>通过在数组中调用特定元素检索方法，或使用方括号并指定要检索的元素的名称或索引来访问数组中的元素。返回值是对象相关，与自己的属性和元素，引用数组元素。他们可以访问<br><figure class=\"highlight js\"><figcaption><span>索引</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.at(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><br><figure class=\"highlight js\"><figcaption><span>name</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.byName(<span class=\"string\">'New Message'</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows[<span class=\"string\">'New Message'</span>]</span><br></pre></td></tr></table></figure><br><figure class=\"highlight js\"><figcaption><span>ID</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span> = Mail.windows.byId(<span class=\"number\">412</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: 使用ID来访问不是方括号[]而是().</p>\n</blockquote>\n<h3 id=\"调用命令\"><a href=\"#调用命令\" class=\"headerlink\" title=\"调用命令\"></a>调用命令</h3><p>命令被称为函数。</p>\n<ol>\n<li>直接参数的函数，该参数作为命令的第一个参数传递。</li>\n<li>如果函数需要带参数名的参数，那么这个参数可以接受一个键值对对象。</li>\n<li>如果函数需要一个直接参数，就需要传递一个带参数名的参数作为第二个参数。</li>\n<li>如果函数不存在直接参数，那么带参数名的参数作为第一个参数传递，并且唯一参数。</li>\n<li>直接参数是可选的，可以不用传递任何值，当第一个参数存在参数名时，则传递NULL作为第一个参数。<figure class=\"highlight js\"><figcaption><span>无参数命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message.open()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption><span>无参数名的命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mail.open(message)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>带参数名的命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response = message.reply(&#123;</span><br><span class=\"line\">replayAll: <span class=\"literal\">true</span>,</span><br><span class=\"line\">openingWindow: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><figcaption><span>Command with direct parameter and named parameters</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Safari.doJavaScript(<span class=\"string\">'alert(\"Hello world\")'</span>, &#123;</span><br><span class=\"line\"><span class=\"keyword\">in</span>: Safari.windows[<span class=\"number\">0</span>].tabs[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Creating-Objects\"><a href=\"#Creating-Objects\" class=\"headerlink\" title=\"Creating Objects\"></a>Creating Objects</h2><p>通过调用<code>类构造函数</code>初始化<code>属性</code>和<code>数据</code>来创建新对象。<br>在创建对象时,需要执行的其中步骤：</p>\n<ol>\n<li><code>make()</code>方法：调用对象上的<code>make()</code>方法来实例化对象。</li>\n<li><code>push()</code>方法：调用对象数组上的<code>push</code>方法来实例化对象。<br>在调用这些方法中的一个之前，对象实际上并不存在于应用程序中。</li>\n</ol>\n<h3 id=\"Create-a-new-object\"><a href=\"#Create-a-new-object\" class=\"headerlink\" title=\"Create a new object.\"></a>Create a new object.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage().make()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-object-with-properties\"><a href=\"#Create-a-new-object-with-properties\" class=\"headerlink\" title=\"Create a new object with properties.\"></a>Create a new object with properties.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage(&#123;</span><br><span class=\"line\">subject: <span class=\"string\">'Hello world'</span>,</span><br><span class=\"line\">visible: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Mail.outgoingMessages.push(message)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-object-with-data\"><a href=\"#Create-a-new-object-with-data\" class=\"headerlink\" title=\"Create a new object with data.\"></a>Create a new object with data.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">para = TextEdit.Paragraph(&#123;&#125;, <span class=\"string\">'Some text'</span>)</span><br><span class=\"line\">TextEdit.documents[<span class=\"number\">0</span>].paragraphs.push(para)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用对象\"><a href=\"#使用对象\" class=\"headerlink\" title=\"使用对象\"></a>使用对象</h3><p>一旦你在应用程序中创建一个新的对象（通过调用<code>make</code>或<code>push</code>），可以像任何现有的应用程序对象一样进行交互。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = Mail.OutgoingMessage().make()</span><br><span class=\"line\">message.subject = <span class=\"string\">'Hello world'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Scripting-Additions\"><a href=\"#Scripting-Additions\" class=\"headerlink\" title=\"Scripting Additions\"></a>Scripting Additions</h3><p>使用脚本添加（脚本插件）来增强应用程序的功能。操作系统有一套标准的脚本添加提供speak text,展示用户交互对话，等。<br>使用这些，必须明确设置<code>includeStandardAdditions</code>的<code>flag</code>为 <code>true</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Application.currentApplication()</span><br><span class=\"line\">app.includeStandardAdditions = <span class=\"literal\">true</span></span><br><span class=\"line\">app.say(<span class=\"string\">'Hello world'</span>)</span><br><span class=\"line\">app.displayDialog(<span class=\"string\">'Please enter your email address'</span>, &#123;</span><br><span class=\"line\">withTitle: <span class=\"string\">'Email'</span>,</span><br><span class=\"line\">defaultAnswer: <span class=\"string\">'your_email@site.com'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Applets\"><a href=\"#Applets\" class=\"headerlink\" title=\"Applets\"></a>Applets</h2><p>在<code>Script Editor</code>编写脚本并保存为一个应用程序，且可以被双击独立运行的程序称为<code>Applet</code>。<br>程序支持以下事件处理：<br>当Applet运行时，<code>run</code>处理事件被调用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用于拖放操作的<code>openDocuments</code>处理事件程序包配置小程序，当文档被拖放到该小程序上时，这个处理操作将被执行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openDocuments</span>(<span class=\"params\">docs</span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><br>传递的参数是一个文件路径字符串数组。<br><a href=\"https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8\" target=\"_blank\" rel=\"noopener\">更多样例</a></p>\n<h2 id=\"UI-Automation\"><a href=\"#UI-Automation\" class=\"headerlink\" title=\"UI Automation\"></a>UI Automation</h2><p>通过编写系统事件应用程序，可以自动化应用程序的用户界面。在脚本编辑器<code>Script Editor</code>中浏览<code>System Events</code>的脚本字典，特别是进程套件<code>Processes Suite</code>，以查看支持此类型自动化的应用程序接口元素的列表。<br>下面的示例使用UI脚本创建Notes中的新注释。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notes = Application(<span class=\"string\">'Notes'</span>)</span><br><span class=\"line\">Notes.activate()</span><br><span class=\"line\"></span><br><span class=\"line\">delay(<span class=\"number\">1</span>)</span><br><span class=\"line\">SystemEvents = Application(<span class=\"string\">'System Events'</span>)</span><br><span class=\"line\">Notes = SystemEvents.processes[<span class=\"string\">'Notes'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Notes.windows[<span class=\"number\">0</span>].splitterGroups[<span class=\"number\">0</span>].groups[<span class=\"number\">1</span>].groups[<span class=\"number\">0</span>].buttons[<span class=\"number\">0</span>].click()</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"通过沙盒中JS脚本访问其他APP","slug":"macOS/通过沙盒中JS脚本访问其他APP","date":"2017-02-14T18:25:29.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/通过沙盒中JS脚本访问其他APP.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>如何使用脚本字典里的命令和对象来与其他的应用进行通讯?<br>这个教程将向您展示现在使用 <code>AppleScript</code> 来控制别的应用的最佳方式。我也会告诉您一些小技巧以帮助您和您的用户用最小的努力就架设起 <code>AppleScript</code>。</p>\n<h2 id=\"在自己的APP中编写\"><a href=\"#在自己的APP中编写\" class=\"headerlink\" title=\"在自己的APP中编写\"></a>在自己的APP中编写</h2><h3 id=\"编写AppleScript代码\"><a href=\"#编写AppleScript代码\" class=\"headerlink\" title=\"编写AppleScript代码\"></a>编写AppleScript代码</h3><p><a href=\"https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptlangguide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1\" target=\"_blank\" rel=\"noopener\">AppleScript 脚本指南</a><br>与其他应用进行通讯的脚本一般来说都很短，也容易理解。<code>AppleScript</code> 可以被想做一种传送的机制，而不是一种处理环境。<br>典型脚本:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on chockify(inputString)</span><br><span class=\"line\">    set resultString to <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        repeat <span class=\"keyword\">with</span> inputStringCharacter <span class=\"keyword\">in</span> inputString</span><br><span class=\"line\">            set asciiValue to (ASCII number inputStringCharacter)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asciiValue &gt; <span class=\"number\">96</span> and asciiValue &lt; <span class=\"number\">123</span>) then</span><br><span class=\"line\">                set resultString to resultString &amp; (ASCII character (asciiValue - <span class=\"number\">32</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((asciiValue &gt; <span class=\"number\">64</span> and asciiValue &lt; <span class=\"number\">91</span>) or (asciiValue = <span class=\"number\">32</span>)) then</span><br><span class=\"line\">                    set resultString to resultString &amp; inputStringCharacter</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (asciiValue &gt; <span class=\"number\">47</span> and asciiValue &lt; <span class=\"number\">58</span>) then</span><br><span class=\"line\">                        set numberStrings to &#123;<span class=\"string\">\"ZERO\"</span>, <span class=\"string\">\"ONE\"</span>, <span class=\"string\">\"TWO\"</span>, <span class=\"string\">\"THREE\"</span>, <span class=\"string\">\"FOR\"</span>, <span class=\"string\">\"FIVE\"</span>, <span class=\"string\">\"SIX\"</span>, <span class=\"string\">\"SEVEN\"</span>, <span class=\"string\">\"EIGHT\"</span>, <span class=\"string\">\"NINE\"</span>&#125;</span><br><span class=\"line\">                        set itemIndex to asciiValue - <span class=\"number\">47</span></span><br><span class=\"line\">                        set numberString to item itemIndex <span class=\"keyword\">of</span> numberStrings</span><br><span class=\"line\">                        set resultString to resultString &amp; numberString &amp; <span class=\"string\">\" \"</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (asciiValue = <span class=\"number\">33</span>) then</span><br><span class=\"line\">                            set resultString to resultString &amp; <span class=\"string\">\" DUH\"</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (asciiValue = <span class=\"number\">63</span>) then</span><br><span class=\"line\">                                set resultString to resultString &amp; <span class=\"string\">\" IF YOU KNOW WHAT I MEAN\"</span></span><br><span class=\"line\">                            end <span class=\"keyword\">if</span></span><br><span class=\"line\">                        end <span class=\"keyword\">if</span></span><br><span class=\"line\">                    end <span class=\"keyword\">if</span></span><br><span class=\"line\">                end <span class=\"keyword\">if</span></span><br><span class=\"line\">            end <span class=\"keyword\">if</span></span><br><span class=\"line\">        end repeat</span><br><span class=\"line\">        resultString</span><br><span class=\"line\">end chockify</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建事件描述符-event-descriptor\"><a href=\"#创建事件描述符-event-descriptor\" class=\"headerlink\" title=\"创建事件描述符 (event descriptor)\"></a>创建事件描述符 (event descriptor)</h3><ol>\n<li>导入Carbon.h<br>它有关于所有的 AppleEvent 的定义。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Carbon/Carbon.h&gt;</span> // for AppleScript definitions</span></span><br></pre></td></tr></table></figure></li>\n<li>OC中创建<code>chockify</code>事件描述符<br>这是可以在你的脚本和应用之间互相传递的一个数据块。可以把它理解成一个封装好的会去执行某个事件的目标，一个将被调用的函数，以及这个函数的参数。使用一个 <code>NSString</code> 作为参数，创建<code>chockify</code>事件描述符：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSAppleEventDescriptor</span> *)chockifyEventDescriptorWithString:(<span class=\"built_in\">NSString</span> *)inputString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// parameter</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *parameter = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithString:inputString];</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *parameters = [<span class=\"built_in\">NSAppleEventDescriptor</span> listDescriptor];</span><br><span class=\"line\">    [parameters insertDescriptor:parameter atIndex:<span class=\"number\">1</span>]; <span class=\"comment\">// you have to love a language with indices that start at 1 instead of 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// target</span></span><br><span class=\"line\">    ProcessSerialNumber psn = &#123;<span class=\"number\">0</span>, kCurrentProcess&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *target = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithDescriptorType:typeProcessSerialNumber bytes:&amp;psn length:<span class=\"keyword\">sizeof</span>(ProcessSerialNumber)];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// function</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *function = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithString:<span class=\"string\">@\"chockify\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// event</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"built_in\">NSAppleEventDescriptor</span> appleEventWithEventClass:kASAppleScriptSuite eventID:kASSubroutineEvent targetDescriptor:target returnID:kAutoGenerateReturnID transactionID:kAnyTransactionID];</span><br><span class=\"line\">    [event setParamDescriptor:function forKeyword:keyASSubroutineName];</span><br><span class=\"line\">    [event setParamDescriptor:parameters forKeyword:keyDirectObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"OC中加载-AppleScript\"><a href=\"#OC中加载-AppleScript\" class=\"headerlink\" title=\"OC中加载 AppleScript\"></a>OC中加载 AppleScript</h3><p>通过应用包(Application bundle)的一个 <code>URL</code> 可以创建 <code>NSAppleScript</code>的实例。而反过来，脚本也要和上面创建的 <code>chockify 事件描述符</code>一起使用。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *URL = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"Automation\"</span> withExtension:<span class=\"string\">@\"scpt\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (URL) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleScript</span> *appleScript = [[<span class=\"built_in\">NSAppleScript</span> alloc] initWithContentsOfURL:URL error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> chockifyEventDescriptorWithString:[<span class=\"keyword\">self</span>.chockifyInputTextField stringValue]];</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor = [appleScript executeAppleEvent:event error:&amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! resultEventDescriptor) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript run error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *string = [<span class=\"keyword\">self</span> stringForResultEventDescriptor:resultEventDescriptor];</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> updateChockifyTextFieldWithString:string];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果一切正常的话，你会得到另一个事件描述符。如果出错了，你会得到一个包含了描述错误信息的字典。虽说这个模式和很多其他 <code>Foundation 类</code>很相似，但是返回的错误并不是一个 <code>NSError</code> 的实例。</p>\n<h3 id=\"调用事件描述符\"><a href=\"#调用事件描述符\" class=\"headerlink\" title=\"调用事件描述符\"></a>调用事件描述符</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)stringForResultEventDescriptor:(<span class=\"built_in\">NSAppleEventDescriptor</span> *)resultEventDescriptor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultEventDescriptor)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([resultEventDescriptor descriptorType] != kAENullEvent)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([resultEventDescriptor descriptorType] == kTXNUnicodeTextData) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = [resultEventDescriptor stringValue];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InputString 输入可以被正确整形输出，并且你现在也看到想在你的应用里运行 AppleScripts 的方法</p>\n<h2 id=\"调用沙盒中脚本代码与访问其他应用\"><a href=\"#调用沙盒中脚本代码与访问其他应用\" class=\"headerlink\" title=\"调用沙盒中脚本代码与访问其他应用\"></a>调用沙盒中脚本代码与访问其他应用</h2><h3 id=\"了解APP沙盒限制\"><a href=\"#了解APP沙盒限制\" class=\"headerlink\" title=\"了解APP沙盒限制\"></a>了解APP沙盒限制</h3><p>如果一段脚本可以轻易地拿到浏览器当前页面上的内容，甚至是在任意标签和窗口运行<code>JavaScript</code>。想象一下如果这些页面里有你的银行账号，或者包含你的信用卡信息什么的。</p>\n<p>对于沙盒应用，Apple 所提倡的是通过用户的需要来驱动安全策略。这意味着是否运行你的脚本完全取决于用户。这些脚本可能是来自互联网，也可能是你应用的一部分。一旦得到了权限，脚本就可以以一种受限的方式与系统其他部分进行交互了。<code>NSUserScriptTask</code>使这一切变得可能。<br>由此：Apple 引入了一个新的抽象类 <code>NSUserScriptTask</code>,有三个具体的子类实现:</p>\n<ol>\n<li><code>NSUserUnixTask</code>: 执行 Unix shell 命令</li>\n<li><code>NSUserAutomatorTask</code>: Automator 工作流</li>\n<li><code>NSUserAppleScriptTask</code>:执行<code>AppleScript脚本</code>,脚本是异步执行的,所以脚本不能对用户界面做更新操作。</li>\n</ol>\n<h3 id=\"开始安装运行脚本\"><a href=\"#开始安装运行脚本\" class=\"headerlink\" title=\"开始安装运行脚本\"></a>开始安装运行脚本</h3><p>怎么向用户请求运行脚本的许可，让你的应用与用户的其他应用更好地工作在一起？<br>两种策略:</p>\n<ol>\n<li>帮助用户来存放运行脚本的位置</li>\n<li>获取行脚本目录可读写</li>\n</ol>\n<h4 id=\"帮用户存放运行脚本的位置\"><a href=\"#帮用户存放运行脚本的位置\" class=\"headerlink\" title=\"帮用户存放运行脚本的位置\"></a>帮用户存放运行脚本的位置</h4><p>只能把把这些脚本放到用户的脚本文件夹(<code>User &gt; Library &gt; Application Scripts/bundle identifier/</code>)中，以只读的方式来运行你的脚本。<br>脚本想要进入这个特定的文件夹的唯一方式就是用用户把它们复制到那里。再者<code>Library 文件夹</code>在 OS X 里默认还是隐藏的。这样对用户都很不友好。<br>让代码来帮助用户打开这个隐藏文件夹：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\">[[<span class=\"built_in\">NSWorkspace</span> sharedWorkspace] openURL:directoryURL];</span><br></pre></td></tr></table></figure><br>通过你的应用的某个控件打开这个文件夹，然后进行编辑。这对于用户自己写的脚本来说是个很好的解决方案。</p>\n<h4 id=\"设置运行脚本目录的读写权限\"><a href=\"#设置运行脚本目录的读写权限\" class=\"headerlink\" title=\"设置运行脚本目录的读写权限\"></a>设置运行脚本目录的读写权限</h4><ol>\n<li>在 Xcode 里，你需要更新 <code>Capabilities</code>，让其包括 <code>User Selected File to Read/Write</code>。在 <code>App Sandbox &gt; File Access</code>里找到相关选项。</li>\n<li>用户的意愿是关键，因为你需要获取权限以将脚本添加到文件夹：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\"><span class=\"built_in\">NSOpenPanel</span> *openPanel = [<span class=\"built_in\">NSOpenPanel</span> openPanel];</span><br><span class=\"line\">[openPanel setDirectoryURL:directoryURL];</span><br><span class=\"line\">[openPanel setCanChooseDirectories:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">[openPanel setCanChooseFiles:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">[openPanel setPrompt:<span class=\"string\">@\"Select Script Folder\"</span>];</span><br><span class=\"line\">[openPanel setMessage:<span class=\"string\">@\"Please select the User &gt; Library &gt; Application Scripts &gt; com.iconfactory.Scriptinator folder\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[openPanel beginWithCompletionHandler:^(<span class=\"built_in\">NSInteger</span> result) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result == <span class=\"built_in\">NSFileHandlingPanelOKButton</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *selectedURL = [openPanel URL];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([selectedURL isEqual:directoryURL])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *destinationURL = [selectedURL URLByAppendingPathComponent:<span class=\"string\">@\"Automation.scpt\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fileManager = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *sourceURL = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"Automation\"</span> withExtension:<span class=\"string\">@\"scpt\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> success = [fileManager copyItemAtURL:sourceURL toURL:destinationURL error:&amp;error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSAlert</span> *alert = [<span class=\"built_in\">NSAlert</span> alertWithMessageText:<span class=\"string\">@\"Script Installed\"</span> defaultButton:<span class=\"string\">@\"OK\"</span> alternateButton:<span class=\"literal\">nil</span> otherButton:<span class=\"literal\">nil</span> informativeTextWithFormat:<span class=\"string\">@\"The Automation script was installed succcessfully.\"</span>];</span><br><span class=\"line\">            [alert runModal];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([error code] == <span class=\"built_in\">NSFileWriteFileExistsError</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// this is where you could update the script, by removing the old one and copying in a new one</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// the item couldn't be copied, try again</span></span><br><span class=\"line\">                [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(installAutomationScript:) withObject:<span class=\"keyword\">self</span> afterDelay:<span class=\"number\">0.0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// try again because the user changed the folder path</span></span><br><span class=\"line\">        [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(installAutomationScript:) withObject:<span class=\"keyword\">self</span> afterDelay:<span class=\"number\">0.0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n这么一来，应用包中的 <code>Automation.scpt</code> 文件现在暴露在常规的文件系统中了。</li>\n</ol>\n<h3 id=\"执行脚本任务\"><a href=\"#执行脚本任务\" class=\"headerlink\" title=\"执行脚本任务\"></a>执行脚本任务</h3><p>使用 <code>NSUserAppleScriptTask</code> 来替代 <code>NSAppleScript</code>，来运行上面创建的<code>事件描述符</code>。<br>你大概会经常用到这些脚本任务。文档警告说对于给定的类的某个实例， <code>NSUserAppleScriptTask</code> 不应该被执行多次。所以写一个<code>工厂函数</code>来在需要的时候创建任务：<br><figure class=\"highlight objc\"><figcaption><span>工厂函数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUserAppleScriptTask</span> *)automationScriptTask</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUserAppleScriptTask</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directoryURL) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *scriptURL = [directoryURL URLByAppendingPathComponent:<span class=\"string\">@\"Automation.scpt\"</span>];</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSUserAppleScriptTask</span> alloc] initWithURL:scriptURL error:&amp;error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! result) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s no AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> if you're not running in a sandbox, the directory URL will always be nil</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s no Application Scripts folder error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果你正在写一个同时适用于沙盒和非沙盒的 Mac 应用的话，在获取 <code>directoryURL</code> 时你需要特别小心。<code>NSApplicationScriptsDirectory</code>只在沙盒中有效。</p>\n</blockquote>\n<p>在创建脚本任务后，你需要使用 <code>AppleEvent</code> 并提供一个结束处理来执行它：<br><figure class=\"highlight objc\"><figcaption><span>AppleEvent</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSUserAppleScriptTask</span> *automationScriptTask = [<span class=\"keyword\">self</span> automationScriptTask];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (automationScriptTask) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> safariURLEventDescriptor];</span><br><span class=\"line\">    [automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! resultEventDescriptor) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSURL</span> *URL = [<span class=\"keyword\">self</span> URLForResultEventDescriptor:resultEventDescriptor];</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> The completion handler for the script is not run on the main thread. Before you update any UI, you'll need to get</span></span><br><span class=\"line\">            <span class=\"comment\">// on that thread by using libdispatch or performing a selector.</span></span><br><span class=\"line\">            [<span class=\"keyword\">self</span> performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(updateURLTextFieldWithURL:) withObject:URL waitUntilDone:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>对于用户写的脚本，用户可能期望你的应用只是简单地’运行’脚本 (而不去调用事件描述符中指定的函数)。在这种情况下，你可以为 <code>event</code> 传递一个 <code>nil</code>，脚本就会像用户在 <code>Finder</code> 中双击那样的行为进行执行。<br><code>NSUserAppleScriptTask</code>脚本是异步执行的，所以你的用户界面并不会被一个 (比较长) 的脚本锁住，在结束后会执行回调处理。</p>\n<h2 id=\"同步操作\"><a href=\"#同步操作\" class=\"headerlink\" title=\"同步操作\"></a>同步操作</h2><p><code>NSAppleScript</code> 和 <code>NSUserAppleScriptTask</code> 有一个微妙的区别：新的机制是异步执行的。对于大部分情况，使用一个结束回调来处理会是一个好得多的方式，因为这样就不会因为执行脚本而阻碍你的应用。<br>然而有时候如果你想带有依赖地来执行任务的时候，事情就变得有些取巧了。比方说一个任务需要在另一个任务开始之前必须完成。这种情况下你就会想念 <code>NSAppleScript</code> 的同步特性了。<br>要获得传统方式的行为，一种简单的方法是使用一个<code>信号量(semaphore)</code> 来确保同时只有一个任务运行、在你的类或者应用的初始化方法中，使用 <code>libdispatch</code> 创建一个信号量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.appleScriptTaskSemaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure><br>接下来在初始化脚本任务之前，简单地等待信号量。当任务完成时，标记相同的这个信号量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// wait for any previous tasks to complete before starting a new one — remember that you're blocking the main thread here!</span></span><br><span class=\"line\">dispatch_semaphore_wait(<span class=\"keyword\">self</span>.appleScriptTaskSemaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run the script task</span></span><br><span class=\"line\"><span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> openNetworkPreferencesEventDescriptor];</span><br><span class=\"line\">[automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! resultEventDescriptor)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(showNetworkAlert) withObject:<span class=\"literal\">nil</span> waitUntilDone:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// the task has completed, so let any pending tasks proceed</span></span><br><span class=\"line\">    dispatch_semaphore_signal(<span class=\"keyword\">self</span>.appleScriptTaskSemaphore);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure><br>再强调一下，除非确实有所需要，否则最好别这么做。</p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"沙盒","path":"api/tags/沙盒.json"},{"name":"脚本","path":"api/tags/脚本.json"},{"name":"AppleScript","path":"api/tags/AppleScript.json"}]}]}