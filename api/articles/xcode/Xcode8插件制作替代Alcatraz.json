{"title":"Xcode8插件制作替代Alcatraz","slug":"xcode/Xcode8插件制作替代Alcatraz","date":"2017-05-15T14:09:30.000Z","updated":"2017-06-23T10:51:21.000Z","comments":true,"path":"api/articles/xcode/Xcode8插件制作替代Alcatraz.json","excerpt":null,"covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/插件架构图.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/extensionsApp.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/xcodeAPP.gif?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/KeyBindings.png?imageMogr2/2/w/800"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ol>\n<li>Xcode7插件工具Alcatraz<br>开发者可以在Xcode运行的时候通过注入代码去实现插件的功能。插件可以在一个Alcatraz这个优秀的APP上面提交和分发。</li>\n<li>Xcode8编辑源码的插件Xcode source editor extensions<br>Xcode 8验证每个库和包，以防止恶意代码未经您的许可运行。苹果公司在今年的WWDC上宣布了可以通过开发<code>Xcode source editor extensions</code>来扩展现有的源代码编辑功能。<br>当Xcode启动的时候，先前通过<code>Alcatraz</code>安装的插件不会再被加载。</li>\n</ol>\n<h2 id=\"源码编辑器插件\"><a href=\"#源码编辑器插件\" class=\"headerlink\" title=\"源码编辑器插件\"></a>源码编辑器插件</h2><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/插件架构图.png?imageMogr2/2/w/800\">\n<h3 id=\"Info-plist文件\"><a href=\"#Info-plist文件\" class=\"headerlink\" title=\"Info.plist文件\"></a>Info.plist文件</h3><p>Source Editor Command是命令默认的名字。开发者可以在extension的Info.plist文件里面修改。打开之后修改为 Clean Syntax</p>\n<h3 id=\"解析插件启动类SourceEditorExtension-swift\"><a href=\"#解析插件启动类SourceEditorExtension-swift\" class=\"headerlink\" title=\"解析插件启动类SourceEditorExtension.swift\"></a>解析插件启动类SourceEditorExtension.swift</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> XcodeKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceEditorExtension</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">XCSourceEditorExtension</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 启动extension被调用，自定义相关操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">extensionDidFinishLaunching</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//commandDefinitions属性的getter方法可以动态的展示或是隐藏特定的指令</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> commandDefinitions: [[<span class=\"type\">XCSourceEditorCommandDefinitionKey</span>: <span class=\"type\">AnyObject</span>]]&#123;<span class=\"keyword\">return</span> []&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析插件核心类SourceEditorCommand-swift\"><a href=\"#解析插件核心类SourceEditorCommand-swift\" class=\"headerlink\" title=\"解析插件核心类SourceEditorCommand.swift\"></a>解析插件核心类SourceEditorCommand.swift</h3><p>在这个文件里面可以实现extension的相关逻辑<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SourceEditorCommand</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">XCSourceEditorCommand</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当通过Xcode菜单键调用插件时调用，实现插件功能的主体</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with invocation: XCSourceEditorCommandInvocation,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               completionHandler: @escaping <span class=\"params\">(Error?)</span></span></span> -&gt; <span class=\"type\">Void</span> ) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 正则匹配含有 闭包 的文本</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> updatedLineIndexes = [<span class=\"type\">Int</span>]()</span><br><span class=\"line\">       <span class=\"keyword\">for</span> lineIndex <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; invocation.buffer.lines.<span class=\"built_in\">count</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> line = invocation.buffer.lines[lineIndex] <span class=\"keyword\">as</span>! <span class=\"type\">NSString</span></span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> results = <span class=\"keyword\">try</span> findClosureSyntax(line: line)</span><br><span class=\"line\">               <span class=\"comment\">//简化所有闭包语法格式：移除闭包里面括号</span></span><br><span class=\"line\">               <span class=\"number\">_</span> = results.<span class=\"built_in\">map</span> &#123; result <span class=\"keyword\">in</span></span><br><span class=\"line\">                   <span class=\"keyword\">let</span> cleanLine = line.remove(characters: [<span class=\"string\">\"(\"</span>, <span class=\"string\">\")\"</span>], <span class=\"keyword\">in</span>: result.range)</span><br><span class=\"line\">                   updatedLineIndexes.append(lineIndex)</span><br><span class=\"line\">                   invocation.buffer.lines[lineIndex] = cleanLine</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">               completionHandler(error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//使用正则表达式去遍历每一行代码是否含有闭包</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findClosureSyntax</span><span class=\"params\">(line:NSString)</span></span> <span class=\"keyword\">throws</span> -&gt;[<span class=\"type\">NSTextCheckingResult</span>]</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> regex =  <span class=\"keyword\">try</span> <span class=\"type\">NSRegularExpression</span>(pattern: <span class=\"string\">\"\\\\&#123;.*\\\\(.+\\\\).+in\"</span>, options: .caseInsensitive)</span><br><span class=\"line\">       <span class=\"keyword\">let</span> range = <span class=\"type\">NSRange</span>(<span class=\"number\">0</span> ..&lt; line.length)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> regex.matches(<span class=\"keyword\">in</span>: line <span class=\"keyword\">as</span> <span class=\"type\">String</span>, options: .reportProgress, range: range)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一个方法两个参数\"><a href=\"#一个方法两个参数\" class=\"headerlink\" title=\"一个方法两个参数\"></a>一个方法两个参数</h4><ol>\n<li><p>方法<br>当通过Xcode菜单键调用插件时：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perform(with:completionHandler:)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两个参数<br><code>buffer</code>属性：访问当前选中的文件源代码，<code>XCSourceEditorCommandInvocation</code>对象的<code>buffer</code>属性；<br><code>completionhandler</code>：将会以参数为nil进行调用，否则将会给它传递一个<code>NSError</code>实例作为参数。</p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li>选择scheme后编译运行自定义的extensions插件</li>\n<li>选择测试安装插件的Xcode<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/extensionsApp.png?imageMogr2/2/w/800\"></li>\n<li>点击run按钮会单独启动一个全新的Xcode<br>在新的Xcode实例中，创建一个新的工程或是打开一个存在的工程。</li>\n<li>然后执行Editor &gt; Clean Closure &gt; Source Editor Command，需要确保在当前的文件里面含有一个闭包。这样就可以看到如下的效果，刚才开发的extension工作了！<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcodeAPP.gif?imageMogr2/2/w/800\">\n</li>\n</ol>\n<h2 id=\"命令快捷键\"><a href=\"#命令快捷键\" class=\"headerlink\" title=\"命令快捷键\"></a>命令快捷键</h2><p>设置快捷键去自动调用Clean Syntax命令</p>\n<ol>\n<li>打开Xcode的Preferences，选择Key Bindings ;</li>\n<li>搜索Clean Syntax，点击右边然后输入快捷键，例如：Command-Alt-Shift-+。<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/KeyBindings.png?imageMogr2/2/w/800\">\n</li>\n</ol>\n","categories":[{"name":"xcode","path":"api/categories/xcode.json"},{"name":"插件","path":"api/categories/插件.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"}]}