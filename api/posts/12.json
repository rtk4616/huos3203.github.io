{"total":157,"pageSize":10,"pageCount":16,"data":[{"title":"Kindle之ResilioSync索引","slug":"工具/Kindle之ResilioSync索引","date":"2017-01-23T12:49:49.000Z","updated":"2017-06-28T15:57:36.000Z","comments":true,"path":"api/articles/工具/Kindle之ResilioSync索引.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/sync高级设置.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Kindle伴侣精品书库\"><a href=\"#Kindle伴侣精品书库\" class=\"headerlink\" title=\"Kindle伴侣精品书库\"></a>Kindle伴侣精品书库</h2><p><a href=\"https://kindlefere.com/share\" target=\"_blank\" rel=\"noopener\">Kindle伴原文</a><br>Resilio Sync同步密钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOC3NIGPF2DOKETOF2FAHXJXE2HF24QWC</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"精品书库\"><a href=\"#精品书库\" class=\"headerlink\" title=\"精品书库\"></a>精品书库</h3><p><a href=\"https://kindlefere.github.io/share/ebook/\" target=\"_blank\" rel=\"noopener\">精品库</a><br><iframe src=\"https://kindlefere.github.io/share/ebook/\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"每周一书\"><a href=\"#每周一书\" class=\"headerlink\" title=\"每周一书\"></a>每周一书</h3><p><a href=\"https://kindlefere.github.io/share/weekly/index.html\" target=\"_blank\" rel=\"noopener\">每周一书</a><br><iframe src=\"https://kindlefere.github.io/share/weekly/index.html\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"国外书籍\"><a href=\"#国外书籍\" class=\"headerlink\" title=\"国外书籍\"></a>国外书籍</h3><p><a href=\"https://kindlefere.github.io/share/ebook-en/index.html\" target=\"_blank\" rel=\"noopener\">国外精选</a><br><iframe src=\"https://kindlefere.github.io/share/ebook-en/index.html\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h2 id=\"Resilio-Sync\"><a href=\"#Resilio-Sync\" class=\"headerlink\" title=\"Resilio Sync\"></a>Resilio Sync</h2><p><a href=\"https://kindlefere.com/post/347.html\" target=\"_blank\" rel=\"noopener\">原地址详解</a></p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>Resilio Sync 这款软件的优点上面已经说了一些，就是不依赖中心服务器，所有的文件都分布在用密钥连接在一起的电脑上。这里重点说一下小伙伴们关心的缺点。</p>\n<p>缺点一：免费版只能强制同步所有文件，比如书库的大小有 5G，只能将这 5G 的电子书全部同步到你的电脑上，这需要你有一块足够大的硬盘。除非你升级到收费版（每年 100 元）实现选择性同步。</p>\n<p>缺点二：因为没有中心服务器，所以下载的速度依赖于每个电脑的上传速度，和中心服务器的分享方式相反，人越多同步的速度就越快，反之，人越少同步的速度就越慢。</p>\n<h3 id=\"在IgnoreList文件中忽略不想同步的文件\"><a href=\"#在IgnoreList文件中忽略不想同步的文件\" class=\"headerlink\" title=\"在IgnoreList文件中忽略不想同步的文件\"></a>在IgnoreList文件中忽略不想同步的文件</h3><p>BitTorrent Sync还支持文件过滤，如果你有一些文件不想被同步，你可以通过配置<code>IgnoreList</code>实现。<br><code>IgnoreList</code>是一个UTF-8编码的txt文件，里面你可以定义单个文件，路径，以及规则，他支持简单的“？”和“*”匹配。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 同步目录/.sync／</span><br><span class=\"line\">cat IgnoreList</span><br></pre></td></tr></table></figure></p>\n<pre><code>&gt;# IgnoreList is a UTF-8 encoded .txt file that helps you specify single files, paths and rules \n&gt;# for ignoring during the synchronization job. It supports &quot;?&quot; and &quot;*&quot; wildcard symbols.\n#\n#\n# OS generated files #\n.DS_Store\n.Spotlight-V100\n.Trashes\nehthumbs.db\ndesktop.ini\nThumbs.db\n# Temporary files #\n~*\n*~\n.~lock.*\n*.part\n*.crdownload\n@eaDir\n@SynoResource\n.@__thumb\n</code></pre><h3 id=\"高级设置相关说明\"><a href=\"#高级设置相关说明\" class=\"headerlink\" title=\"高级设置相关说明\"></a>高级设置相关说明</h3><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/sync高级设置.png?imageMogr2/2/w/800\">\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disk_low_priority：<span class=\"literal\">true</span>  设置在磁盘上操作文件的优先级，如果设置为<span class=\"literal\">false</span>，在同步文件时读写文件将会采用最高速度和优先级，不过这样会影响其他应用的性能。</span><br><span class=\"line\"></span><br><span class=\"line\">folder_rescan_interval：<span class=\"number\">600</span>  设置扫描目录的时间间隔，单位为秒</span><br><span class=\"line\"></span><br><span class=\"line\">lan_encrypt_data：<span class=\"literal\">true</span>  如果设置为ture，则在本地网络传输时会采用加密传输。</span><br><span class=\"line\"></span><br><span class=\"line\">lan_use_tcp：<span class=\"literal\">false</span>  如果设置为ture，在本地网络同步会采用tcp传输，而不是采用udp传输。注意：在LAN中禁止加密并采用tcp传输，会增加传输速度。</span><br><span class=\"line\"></span><br><span class=\"line\">rate_limit_local_peers：<span class=\"literal\">false</span>  申请在本地网络的peers直接限速传输，默认没有在LAN里面限速</span><br><span class=\"line\"></span><br><span class=\"line\">send_buf_size：<span class=\"number\">5</span>  在发送文件时可以使用的发送缓存，可以设置<span class=\"number\">1</span>~<span class=\"number\">100</span>M</span><br><span class=\"line\"></span><br><span class=\"line\">recv_buf_size：<span class=\"number\">5</span>  在接收文件时可以使用的接收缓存，可以设置<span class=\"number\">1</span>~<span class=\"number\">100</span>M</span><br><span class=\"line\"></span><br><span class=\"line\">sync_max_time_diff：<span class=\"number\">600</span>  同步的设备之间的时间差别</span><br><span class=\"line\"></span><br><span class=\"line\">sync_trash_ttl：<span class=\"number\">30</span>  设置多少天之后自动删除.SyncArchive目录中的文件</span><br><span class=\"line\"></span><br><span class=\"line\">max_file_size_diff_for_patching：<span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">max_file_size_for_versioning：<span class=\"number\">1000</span>  版本控制的一个参数，不了解...</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见问题汇总\"><a href=\"#常见问题汇总\" class=\"headerlink\" title=\"常见问题汇总\"></a>常见问题汇总</h3><h4 id=\"添加同步链接后为什么找不到节点？\"><a href=\"#添加同步链接后为什么找不到节点？\" class=\"headerlink\" title=\"添加同步链接后为什么找不到节点？\"></a>添加同步链接后为什么找不到节点？</h4><p>如果是刚添加同步密钥或链接，请稍等片刻。如果很长时间仍然找不到节点无法同步，请尝试：把已经添加的同步目录删除，在 Sync 界面上谭家的同步断开，然后重新添加同步密钥或同步链接。</p>\n<h4 id=\"提示“与-x-个用户的时间差”怎么办？\"><a href=\"#提示“与-x-个用户的时间差”怎么办？\" class=\"headerlink\" title=\"提示“与 x 个用户的时间差”怎么办？\"></a>提示“与 x 个用户的时间差”怎么办？</h4><p>如果系统的时间严重不准会导致 BT Sync 无法正常工作。如果 Sync 软件提示的事您的电脑有时间差，请确保开启自动时间同步，如果时间同步没问题，请先退出 Sync 软件重新开启。如果提醒其他人有时间差，请忽略。</p>\n<h4 id=\"为什么同步的电子书比目录标示的大？\"><a href=\"#为什么同步的电子书比目录标示的大？\" class=\"headerlink\" title=\"为什么同步的电子书比目录标示的大？\"></a>为什么同步的电子书比目录标示的大？</h4><p>书库在维护的过程中会删除一些质量较差和重复的电子书，如果被删除的电子书已经同步到你的电脑上，就会被 Sync 自动备份下来。备份位置在同步目录下的隐藏文件夹 .sync/Archive 中，在 Sync 软件中右键点击同步文件夹，在弹出的菜单中点击“打开存档文件”即可打开。</p>\n<p>默认情况下，此目录中的文件 30 天后会自动删除。书库中删除的文件没有保留的必要，为了避免备份文件占用空间，可以禁用此功能。先把 Archive 文件夹删除，然后在 Sync 软件中右键点击同步文件夹，在弹出的菜单中点击“首选项”，取消“在文件夹存档中存储已删除的文件”前面的勾选即可。</p>\n<h4 id=\"开启-Sync-后电脑变得很卡怎么办？\"><a href=\"#开启-Sync-后电脑变得很卡怎么办？\" class=\"headerlink\" title=\"开启 Sync 后电脑变得很卡怎么办？\"></a>开启 Sync 后电脑变得很卡怎么办？</h4><p>因为 Sync 传输数据时需要读写硬盘，这可能会导致电脑其它的数据读取变慢，解决方法就是设置限速，让同步细水长流。打开 Sync 的软件的“首选项”，在“高级”选项卡中找到“限制接收速率”和“限制发送速率”，输入一个合适的值即可。另外，如果正在做其他工作，建议暂停或暂时退出 Sync 软件。</p>\n<p>另外，在“高级”界面里，点击底部的“打开高级用户偏好设置”，把“disk_low_priority”这项设置为 true 也可以缓解卡顿的现象。其中“rate_limit_local_peers”是设置在磁盘上操作文件的优先级，默认为 false，在同步文件时读写文件将会采用最高速度和优先级，所以会影响其他应用的性能。</p>\n<h4 id=\"重新添加能继续用之前的同步目录吗？\"><a href=\"#重新添加能继续用之前的同步目录吗？\" class=\"headerlink\" title=\"重新添加能继续用之前的同步目录吗？\"></a>重新添加能继续用之前的同步目录吗？</h4><p>有时因为某种原因，导致添加到 Resilio Sync 的同步丢失，需要重新添加密钥，这种情况下，是可以继续使用之前的同步目录的，只需要在重新添加密钥选择同步目录的时候，选择原来的目录即可。</p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[{"name":"资源","path":"api/tags/资源.json"},{"name":"kindle","path":"api/tags/kindle.json"},{"name":"书籍","path":"api/tags/书籍.json"},{"name":"ResilioSync","path":"api/tags/ResilioSync.json"}]},{"title":"AR 开发资料汇[转]","slug":"AR开发资料汇","date":"2017-01-22T18:55:21.000Z","updated":"2017-01-22T18:55:21.000Z","comments":true,"path":"api/articles/AR开发资料汇.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。</p>\n<hr>\n<h1 id=\"AR-平台\"><a href=\"#AR-平台\" class=\"headerlink\" title=\"AR 平台\"></a>AR 平台</h1><p><a href=\"https://developer.vuforia.com/\" target=\"_blank\" rel=\"noopener\">Vuforia</a>–不用多说，最流行的AR应用开发引擎。<br><a href=\"http://www.easyar.cn/\" target=\"_blank\" rel=\"noopener\">EasyAR</a>－－EasyAR是国内最专业的AR引擎,是国内首款投入应用的AR SDK。EasyAR是好用且免费的增强现实(Augmented Reality)开发者引擎。<br><a href=\"http://www.hiar.com.cn/\" target=\"_blank\" rel=\"noopener\">HiAR</a>–HiAR 增强现实开发平台 HiAR 是亮风台信息科技打造的新一代移动增强现实(AR)开发平台,提供一整套世界领先的增强现实(AR)技术服务。<br><a href=\"http://www.voidar.net/\" target=\"_blank\" rel=\"noopener\">太虚AR</a>－－成都米有网络科技有限公司自主研发集成于Unity3d实现增强现实的SDK开发包,虚拟现实SDK太虚官方网站。<br><a href=\"http://www.wikitude.com/\" target=\"_blank\" rel=\"noopener\">Wikitude</a>–Wikitude是一家专门从事智能手机增强现实的应用，分别出品了两款应用Wikitude drive与Wikitude World Browser。<br><a href=\"http://www.intel.com/content/www/us/en/architecture-and-technology/realsense-overview.html\" target=\"_blank\" rel=\"noopener\">Inter RealSense</a>–RealSense 3D是一套感知计算解决方案,包括世界上最小的3D摄像头,模块比两个硬币摞起来还薄,除了硬件外,英特尔还将提供驱动及软件等全套开发工具<br><a href=\"https://www.icreator.cn/\" target=\"_blank\" rel=\"noopener\">ICreator</a>–依托于iCreator 3D, VR引擎,模型师可以快速创建交互式3D, VR内容,并支持微信平台传播,也为模型师提供可视化3D模型交易功能。<br><a href=\"http://www.tianyanar.com/\" target=\"_blank\" rel=\"noopener\">天眼</a>－－天眼AR包括天眼云平台和天眼AR浏览器,用户需在天眼云平台完成“AR内容”制作,然后在天眼AR浏览器查看效果。<br><a href=\"https://developers.google.com/tango/\" target=\"_blank\" rel=\"noopener\">Google Tango</a>–小编重点推荐。运动追踪(Motion Tracking)，深度感知(Depth Perception)和区域学习(Area Learning)。</p>\n<hr>\n<h1 id=\"AR-视频教程\"><a href=\"#AR-视频教程\" class=\"headerlink\" title=\"AR 视频教程\"></a>AR 视频教程</h1><p><a href=\"http://edu.manew.com/course/204\" target=\"_blank\" rel=\"noopener\">Hololens 开发教程</a><br><a href=\"http://edu.manew.com/course/154\" target=\"_blank\" rel=\"noopener\">增强现实技术分享</a><br><a href=\"http://edu.manew.com/course/172\" target=\"_blank\" rel=\"noopener\">AR房地产</a><br><a href=\"http://edu.manew.com/course/175\" target=\"_blank\" rel=\"noopener\">AR - 双卡互动</a><br><a href=\"http://edu.manew.com/course/162\" target=\"_blank\" rel=\"noopener\">AR涂涂乐</a><br><a href=\"http://www.taikr.com/course/378\" target=\"_blank\" rel=\"noopener\">Hololens 开发</a><br><a href=\"http://www.arinchina.com/video/list/149/\" target=\"_blank\" rel=\"noopener\">Vuforia 公开课</a><br><a href=\"http://www.arinchina.com/video/show-1946.html\" target=\"_blank\" rel=\"noopener\">Intel realSense制作面部捕捉小游戏</a><br><a href=\"http://www.arinchina.com/video/show-1972.html\" target=\"_blank\" rel=\"noopener\">HiAR 视频播放</a><br><a href=\"http://www.arinchina.com/video/show-1965.html\" target=\"_blank\" rel=\"noopener\">HiAR 水晶球</a><br><a href=\"http://www.arinchina.com/video/show-1982.html\" target=\"_blank\" rel=\"noopener\">HiAR 瞬间拥有Apple Watch</a><br><a href=\"http://www.arvrschool.com/read.php?tid=325&amp;fid=21\" target=\"_blank\" rel=\"noopener\">Vuforia 入门－基础－进阶</a></p>\n<hr>\n<h1 id=\"AR-网站\"><a href=\"#AR-网站\" class=\"headerlink\" title=\"AR 网站\"></a>AR 网站</h1><p><a href=\"http://arjiang.com/\" target=\"_blank\" rel=\"noopener\">AR酱</a>–发现闪闪发光的AR从业者|增强现实|混合现实|虚拟现实<br><a href=\"http://www.arinchina.com/\" target=\"_blank\" rel=\"noopener\">增强现实</a>－－增强现实中国ARinChina 是中国最大的专注于AR增强现实技术行业的门户网站。<br><a href=\"http://www.arvrschool.com/\" target=\"_blank\" rel=\"noopener\">AR 学院</a>－－增强现实|虚拟现实技术交流社区、综合门户<br><a href=\"http://www.arcun.cn/\" target=\"_blank\" rel=\"noopener\">AR 村</a>－－提供最新最快的AR增强现实信息,最权威的AR增强现实解读与产品发布.<br><a href=\"http://www.youziar.com/\" target=\"_blank\" rel=\"noopener\">柚子AR</a>－－柚子AR打造专业的增强现实技术领域门户网站,提供AR资讯、AR技术、AR视频、AR游戏、AR设备等相关知识教程,柚子AR,打造增强现实行业交流聚集地。<br><a href=\"http://www.chinaar.com/\" target=\"_blank\" rel=\"noopener\">ChinaAR</a>－－中国AR网,是国内第一家打造增强现实技术交流的一个自媒体平台!意在打造中国AR爱好者对AR技术的交流与学习的一个平台<br><a href=\"http://www.archina.org/\" target=\"_blank\" rel=\"noopener\">AR 中国</a>－－AR中国是专注于增强现实技术的新闻门户网站<br><a href=\"http://www.arjishu.com/\" target=\"_blank\" rel=\"noopener\">AR 技术网</a><br><a href=\"http://www.arcompetition.com/Default.aspx\" target=\"_blank\" rel=\"noopener\">Realseer</a></p>\n<hr>\n<h1 id=\"增强现实视频合辑\"><a href=\"#增强现实视频合辑\" class=\"headerlink\" title=\"增强现实视频合辑\"></a>增强现实视频合辑</h1><p><a href=\"http://www.arcun.cn/thread-2111-1-1.html\" target=\"_blank\" rel=\"noopener\">增强现实技术1-31篇技术视频教程合集</a></p>\n<hr>\n<h1 id=\"Vuforai-教程精选\"><a href=\"#Vuforai-教程精选\" class=\"headerlink\" title=\"Vuforai 教程精选\"></a>Vuforai 教程精选</h1><p><a href=\"http://www.arinchina.com/video/list/149/\" target=\"_blank\" rel=\"noopener\">Vuforia 公开课</a>－－包括Vuforia 环境搭建，多图识别，单页翻页效果，模型自动旋转…<br><a href=\"http://www.arvrschool.com/read.php?tid=325&amp;fid=21\" target=\"_blank\" rel=\"noopener\">VUforia 视频合辑</a><br><a href=\"http://www.chinaar.com/Vuforia/\" target=\"_blank\" rel=\"noopener\">Vuforia 官方教程</a><br><a href=\"http://www.arvrschool.com/index.php?c=thread&amp;fid=36\" target=\"_blank\" rel=\"noopener\">Vuforia 论坛</a><br><a href=\"http://dev.arinchina.com/qualcomm/1\" target=\"_blank\" rel=\"noopener\">Vuforia 论坛</a><br><a href=\"http://www.manew.com/thread-92723-1-1.html?_dsign=51711fb9\" target=\"_blank\" rel=\"noopener\">Vufoira 涂涂乐文章教程</a>－－讲解详细<br><a href=\"http://mec0825.net/blog/?p=126\" target=\"_blank\" rel=\"noopener\">Vuforia 实现物体阴影特效</a><br><a href=\"http://www.th7.cn/Program/Android/201502/394666.shtml\" target=\"_blank\" rel=\"noopener\">Vuforia 多图识别</a><br><a href=\"http://www.arinchina.com/video/show-1956.html\" target=\"_blank\" rel=\"noopener\">Vuforia 脱卡</a><br><a href=\"http://lib.csdn.net/article/vr/20346\" target=\"_blank\" rel=\"noopener\">Vuforia SDK—- AR开发vuforia实现拍照截屏功能</a></p>\n<hr>\n<h1 id=\"EasyAR教程精选\"><a href=\"#EasyAR教程精选\" class=\"headerlink\" title=\"EasyAR教程精选\"></a>EasyAR教程精选</h1><p><a href=\"http://www.manew.com/thread-98569-1-1.html\" target=\"_blank\" rel=\"noopener\">Leap Motion+EasyAR AR手势开发教程</a><br><a href=\"http://www.manew.com/thread-98708-1-1.html\" target=\"_blank\" rel=\"noopener\">AR从入门到精通开发系列教程(1)—搭建开发环境</a><br><a href=\"http://www.manew.com/thread-98992-1-1.html\" target=\"_blank\" rel=\"noopener\">AR从入门到精通开发系列教程(2)–创建模型并互动</a><br><a href=\"http://www.arinchina.com/video/list/151/\" target=\"_blank\" rel=\"noopener\">EasyAR 公开课</a><br><a href=\"http://www.easyar.cn/view/documentapi.html\" target=\"_blank\" rel=\"noopener\">EasyAR 文档</a><br><a href=\"http://bbs.sightp.com/thread-249-1-1.html\" target=\"_blank\" rel=\"noopener\">EasyAR官方Sample之涂涂乐</a><br><a href=\"http://www.arvrschool.com/index.php?c=thread&amp;fid=86\" target=\"_blank\" rel=\"noopener\">EasyAR 论坛</a><br><a href=\"http://www.taidous.com/bbs/thread-42793-1-1.html\" target=\"_blank\" rel=\"noopener\">带你开发类似Pokemon Go的AR游戏(1)</a><br><a href=\"http://www.taidous.com/bbs/thread-42825-1-1.html\" target=\"_blank\" rel=\"noopener\">带你开发类似Pokemon Go的AR游戏(2)</a></p>\n<hr>\n<h1 id=\"HiAR-教程\"><a href=\"#HiAR-教程\" class=\"headerlink\" title=\"HiAR 教程\"></a>HiAR 教程</h1><p><a href=\"http://www.hiar.com.cn/doc-v1/main/home/\" target=\"_blank\" rel=\"noopener\">HiAR 官方文档</a>－－看完之后就掌握的大概了，官方文档很详细了。<br><a href=\"http://www.arvrschool.com/index.php?c=thread&amp;fid=98\" target=\"_blank\" rel=\"noopener\">HiAR 论坛</a><br><a href=\"http://dev.arinchina.com/hiar/1\" target=\"_blank\" rel=\"noopener\">HiAR 论坛</a><br><a href=\"http://edu.51cto.com/course/course_id-5565.html\" target=\"_blank\" rel=\"noopener\">HiAR SDK 教学视频</a></p>\n<hr>\n<h1 id=\"其他平台教程\"><a href=\"#其他平台教程\" class=\"headerlink\" title=\"其他平台教程\"></a>其他平台教程</h1><p><a href=\"http://www.arvrschool.com/index.php?c=thread&amp;fid=87\" target=\"_blank\" rel=\"noopener\">太虚AR教程</a><br><a href=\"http://dev.arinchina.com/143/1\" target=\"_blank\" rel=\"noopener\">太虚AR学习</a><br><a href=\"http://dev.arinchina.com/metaio/1\" target=\"_blank\" rel=\"noopener\">Metaio 学习</a><br><a href=\"http://www.arinchina.com/video/list/150/\" target=\"_blank\" rel=\"noopener\">Wikitude 公开课</a><br><a href=\"http://www.arinchina.com/video/list/154/\" target=\"_blank\" rel=\"noopener\">太虚AR公开课</a></p>\n<hr>\n<h1 id=\"Google-tango教程\"><a href=\"#Google-tango教程\" class=\"headerlink\" title=\"Google tango教程\"></a>Google tango教程</h1><p><a href=\"https://pan.baidu.com/s/1i44Fpat\" target=\"_blank\" rel=\"noopener\">Tango SDK 下载</a>（提取码：sh18）<br><a href=\"http://www.aiweibang.com/yuedu/147339646.html\" target=\"_blank\" rel=\"noopener\">跟着Shrek Team学tango</a><br><a href=\"https://www.zhihu.com/question/37920173\" target=\"_blank\" rel=\"noopener\">Project Tango 知识原理</a><br><a href=\"http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=308\" target=\"_blank\" rel=\"noopener\">Google Tango 项目</a></p>\n<hr>\n<h1 id=\"AR-技术文章\"><a href=\"#AR-技术文章\" class=\"headerlink\" title=\"AR 技术文章\"></a>AR 技术文章</h1><p><a href=\"http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=344\" target=\"_blank\" rel=\"noopener\">两家AR专利大厂在AR硬件方面的探索</a><br><a href=\"http://www.doc88.com/p-5661286681360.html\" target=\"_blank\" rel=\"noopener\">增强现实技术及其应用</a><br><a href=\"http://www.vrguancha.net/a/start/baogaoku/2016/1102/2026.html\" target=\"_blank\" rel=\"noopener\">全球首份VR/AR医疗健康产业应用创新报告</a></p>\n<hr>\n<h1 id=\"AR-精选论文\"><a href=\"#AR-精选论文\" class=\"headerlink\" title=\"AR 精选论文\"></a>AR 精选论文</h1><p><a href=\"http://www.docin.com/p-62167994.html\" target=\"_blank\" rel=\"noopener\">基于ARM和OpenCV的增强现实平台研究</a><br><a href=\"http://www.docin.com/p-890798256.html\" target=\"_blank\" rel=\"noopener\">基于Android的增强现实技术研究与实现</a><br><a href=\"http://www.docin.com/p-123294670.html\" target=\"_blank\" rel=\"noopener\">增强现实应用技术研究</a><br><a href=\"http://www.docin.com/p-220443601.html\" target=\"_blank\" rel=\"noopener\">基于ARTOOLKIT的增强现实技术在恐龙博物馆中的应用研究</a><br><a href=\"http://www.docin.com/p-983104432.html\" target=\"_blank\" rel=\"noopener\">基于增强现实技术的虚拟留言墙系统的设计与实现</a><br><a href=\"http://www.docin.com/p-880664177.html\" target=\"_blank\" rel=\"noopener\">基于智能移动终端的移动增强现实应用研究与实现 </a><br><a href=\"http://www.docin.com/p-1404596806.html\" target=\"_blank\" rel=\"noopener\">基于unity3d的移动增强现实技术与应用研究分析</a><br><a href=\"http://www.docin.com/p-129257030.html\" target=\"_blank\" rel=\"noopener\">增强现实中标记设计与识别方法研究</a><br><a href=\"http://www.docin.com/p-1124496600.html\" target=\"_blank\" rel=\"noopener\">户外增强现实gis的应用研究</a><br><a href=\"http://www.docin.com/p-1701043105.html\" target=\"_blank\" rel=\"noopener\">手持式增强现实神经导航关键技术研究及其系统建立</a><br><a href=\"http://www.docin.com/p-118637060.html\" target=\"_blank\" rel=\"noopener\">基于ARToolKit平台的增强现实人机交互系统的若干问题研究</a><br><a href=\"http://www.docin.com/p-427198314.html\" target=\"_blank\" rel=\"noopener\">基于ARToolkit的汉字识别系统的设计与实现</a><br><a href=\"http://www.docin.com/p-1609057674.html\" target=\"_blank\" rel=\"noopener\">基于ARToolKit的增强现实技术在恐龙博物馆中的应用研究</a></p>\n<hr>\n<h1 id=\"AR应用精选\"><a href=\"#AR应用精选\" class=\"headerlink\" title=\"AR应用精选\"></a>AR应用精选</h1><p><a href=\"http://www.anzhi.com/soft_2519240.html\" target=\"_blank\" rel=\"noopener\">视+AR</a>－－搭载独立开发的EasyAR引擎，全新视+2.0强势来袭！包罗丰富ar内容的增强现实浏览器，等你来体验！<br><a href=\"http://www.anzhi.com/soft_2699705.html\" target=\"_blank\" rel=\"noopener\">AR</a>–这是一款增强现实AR的应用，主要分为三部分：LOL人物展示（带有经典音效），太空大战，手势交互（可以旋转与缩放）。突破现在AR格局，给玩家带来更多的乐趣。你只需一张个人身份证的反面，便会通过AR得到一个精彩的世界！<br><a href=\"http://neobear.com/index.php/home/product/product/\" target=\"_blank\" rel=\"noopener\">小熊尼奥产品</a><br><a href=\"http://mec0825.net/blog/?p=107\" target=\"_blank\" rel=\"noopener\">增强现实优秀应用</a>－－大部分是国外的。<br><a href=\"http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=298\" target=\"_blank\" rel=\"noopener\">十一用12个案例SoLoMo，AR+LBS</a><br><a href=\"http://digi.163.com/15/0312/14/AKGVTR86001668IL.html\" target=\"_blank\" rel=\"noopener\">让你脑洞大开的AR技术应用</a><br><a href=\"http://www.leiphone.com/news/201406/the-best-augmented-reality-apps.html\" target=\"_blank\" rel=\"noopener\">13款最叫绝的增强现实应用</a><br><a href=\"http://www.arinchina.com/news/show-2573.html\" target=\"_blank\" rel=\"noopener\">9款超赞的AR教育APP</a><br><a href=\"https://github.com/GeekLiB/AR-Source\" target=\"_blank\" rel=\"noopener\">参考原文</a></p>\n","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"},{"name":"AR","path":"api/categories/AR.json"}],"tags":[{"name":"AR","path":"api/tags/AR.json"},{"name":"LBS+AR","path":"api/tags/LBS+AR.json"},{"name":"QQ红包","path":"api/tags/QQ红包.json"}]},{"title":"Awsome Apple Develop Guide[转]","slug":"AwsomeAppleDevelopGuide","date":"2017-01-22T18:55:21.000Z","updated":"2017-01-23T17:34:23.000Z","comments":true,"path":"api/articles/AwsomeAppleDevelopGuide.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>此文档是Apple平台开发所使用语言的主流学习资源</p>\n<h1 id=\"iOS开发者博客\"><a href=\"#iOS开发者博客\" class=\"headerlink\" title=\"iOS开发者博客\"></a>iOS开发者博客</h1><ul>\n<li>使用 <a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">iOSBlogCN</a>添加或者订阅</li>\n</ul>\n<h1 id=\"从社区学习知识\"><a href=\"#从社区学习知识\" class=\"headerlink\" title=\"从社区学习知识\"></a>从社区学习知识</h1><ul>\n<li><a href=\"http://weekly.ios-wiki.com/\" target=\"_blank\" rel=\"noopener\">iOS技术周报</a></li>\n<li><a href=\"http://objccn.io/\" target=\"_blank\" rel=\"noopener\">objc中国</a></li>\n<li><a href=\"http://www.cocoachina.com/\" target=\"_blank\" rel=\"noopener\">cocoachina</a></li>\n<li><a href=\"http://swiftist.org/\" target=\"_blank\" rel=\"noopener\">Swift社区</a></li>\n</ul>\n<h1 id=\"从iOS面试题总结\"><a href=\"#从iOS面试题总结\" class=\"headerlink\" title=\"从iOS面试题总结\"></a>从iOS面试题总结</h1><p><a href=\"iOS-usefulInterviewquestions-zh_CN\">iOS有用的面试题</a></p>\n<h1 id=\"建议－学习iOS之前快速预览一下\"><a href=\"#建议－学习iOS之前快速预览一下\" class=\"headerlink\" title=\"建议－学习iOS之前快速预览一下\"></a>建议－学习iOS之前快速预览一下</h1><p><a href=\"http://aaaaaashu.gitbooks.io/mac-dev-setup/content/\" target=\"_blank\" rel=\"noopener\">MAC开发环境配置</a></p>\n<p><a href=\"http://www.zhihu.com/question/24002984\" target=\"_blank\" rel=\"noopener\">什么是Swift，如何评价 Swift 语言？</a></p>\n<p><a href=\"http://zh.wikipedia.org/zh-cn/Objective-C\" target=\"_blank\" rel=\"noopener\">了解一下Objective-C是什么</a></p>\n<p><a href=\"https://github.com/qinjx/30min_guides/blob/master/ios.md\" target=\"_blank\" rel=\"noopener\">iOS开发60分钟入门</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html#//apple_ref/doc/uid/TP40012668-CH2-SW1\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps Today</a></p>\n<p><a href=\"http://www.jianshu.com/p/8472ba0f2bb6\" target=\"_blank\" rel=\"noopener\">从零开始学iOS开发的15条建议</a></p>\n<p><a href=\"http://limboy.me/ios/2014/12/31/learning-ios.html\" target=\"_blank\" rel=\"noopener\">自学iOS开发的一些经验</a></p>\n<p><a href=\"http://www.cocoachina.com/special/fornew.html\" target=\"_blank\" rel=\"noopener\">学习路线</a></p>\n<h2 id=\"语言学习\"><a href=\"#语言学习\" class=\"headerlink\" title=\"语言学习\"></a>语言学习</h2><p>这里包括了Swift，Objective-C，C，C++</p>\n<p><a href=\"https://github.com/numbbbbb/the-swift-programming-language-in-chinese\" target=\"_blank\" rel=\"noopener\">中文版 Apple 官方 Swift 教程《The Swift Programming Language》1.2</a></p>\n<p><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">中文版 Apple 官方 Swift 教程《The Swift Programming Language》2.0</a></p>\n<p><a href=\"https://github.com/raywenderlich/swift-style-guide\" target=\"_blank\" rel=\"noopener\">The Official raywenderlich.com Swift Style Guide</a></p>\n<p><a href=\"http://swift.gg/2015/08/11/raywenderlich-swift-style-guide/\" target=\"_blank\" rel=\"noopener\">The Official raywenderlich.com Swift Style Guide 中文版</a></p>\n<p><a href=\"https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/UsingSwiftwithCocoaandObjective-C%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C.md\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C中文手册</a></p>\n<p><a href=\"http://c-faq-chn.sourceforge.net/ccfaq/index.html\" target=\"_blank\" rel=\"noopener\">C 语言常见问题集</a></p>\n<p><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/\" target=\"_blank\" rel=\"noopener\">Google Objective-C Style Guide 中文版</a></p>\n<p><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/\" target=\"_blank\" rel=\"noopener\">Google C++ Style Guide 中文版</a></p>\n<p><a href=\"https://github.com/oa414/objc-zen-book-cn\" target=\"_blank\" rel=\"noopener\">禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译</a></p>\n<h2 id=\"免费视频资源\"><a href=\"#免费视频资源\" class=\"headerlink\" title=\"免费视频资源\"></a>免费视频资源</h2><p><a href=\"http://www.imooc.com/learn/127\" target=\"_blank\" rel=\"noopener\">玩儿转Swift</a></p>\n<p><a href=\"http://www.imooc.com/learn/218\" target=\"_blank\" rel=\"noopener\">征战Objective-C</a></p>\n<p><a href=\"http://v.163.com/special/opencourse/ios7.html\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：iOS 7应用开发</a></p>\n<p><a href=\"https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：Swift开发iOS 8应用－中文字幕</a></p>\n<p><a href=\"https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：Swift开发iOS 8应用</a></p>\n<p><a href=\"https://github.com/qiaoxueshi/WWDC_2015_Video_Subtitle\" target=\"_blank\" rel=\"noopener\">WWDC 2015 Video 英文字幕 (共104个)</a></p>\n<p><a href=\"https://github.com/6david9/WWDC2015\" target=\"_blank\" rel=\"noopener\">WWDC2015下载链接</a></p>\n<h2 id=\"精粹\"><a href=\"#精粹\" class=\"headerlink\" title=\"精粹\"></a>精粹</h2><p><a href=\"https://github.com/nixzhu/dev-blog\" target=\"_blank\" rel=\"noopener\">一些 iOS / Web 开发相关的翻译或原创博客文章</a></p>\n<p><a href=\"https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques\" target=\"_blank\" rel=\"noopener\">iOS-Core-Animation-Advanced-Techniques</a></p>\n<p><a href=\"https://github.com/objccn/articles\" target=\"_blank\" rel=\"noopener\">objc.io中文翻译版本</a></p>\n<p><a href=\"https://github.com/ipader/SwiftGuide\" target=\"_blank\" rel=\"noopener\">这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排</a></p>\n<p><a href=\"https://github.com/cjwirth/awesome-ios-ui\" target=\"_blank\" rel=\"noopener\">A curated list of awesome iOS UI/UX libraries</a></p>\n<p><a href=\"https://github.com/shinobicontrols/iOS8-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS8-Day-by-Day blog series</a></p>\n<p><a href=\"https://github.com/ShinobiControls/iOS9-day-by-day/\" target=\"_blank\" rel=\"noopener\">iOS9 Day-by-Day blog series</a></p>\n<p><a href=\"https://github.com/matteocrippa/awesome-swift\" target=\"_blank\" rel=\"noopener\">matteocrippa/awesome-swift</a></p>\n<p><a href=\"https://github.com/Wolg/awesome-swift\" target=\"_blank\" rel=\"noopener\">Wolg/awesome-swift</a></p>\n<p><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">awesome-ios</a></p>\n<h2 id=\"Swift-Objective-C-C-C-设计-资源集合\"><a href=\"#Swift-Objective-C-C-C-设计-资源集合\" class=\"headerlink\" title=\"Swift | Objective-C | C/C++ | 设计 资源集合\"></a>Swift | Objective-C | C/C++ | 设计 资源集合</h2><p><a href=\"http://www.jianshu.com/p/f1208b5e42d9\" target=\"_blank\" rel=\"noopener\">Alamofire网络库基础教程</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==&amp;mid=204340894&amp;idx=1&amp;sn=cf7d5b0a9e3a198a39111fb07b0685e5#rd\" target=\"_blank\" rel=\"noopener\">C 语言中的指针和内存泄漏</a></p>\n<p><a href=\"http://www.ideawu.net/blog/archives/878.html\" target=\"_blank\" rel=\"noopener\">C/C++编程的现代习惯</a></p>\n<p><a href=\"http://onevcat.com/2015/01/swift-pointer/\" target=\"_blank\" rel=\"noopener\">Swift指针的使用</a></p>\n<p><a href=\"http://swifter.tips/\" target=\"_blank\" rel=\"noopener\">Swift tips</a></p>\n<p><a href=\"https://github.com/ming1016/study\" target=\"_blank\" rel=\"noopener\">Study</a></p>\n<p><a href=\"https://github.com/100mango/zen\" target=\"_blank\" rel=\"noopener\">iOS心得</a></p>\n<p><a href=\"https://github.com/Aufree/trip-to-iOS\" target=\"_blank\" rel=\"noopener\">A curated list of delightful iOS resources.</a></p>\n<p><a href=\"https://github.com/CocoaChinaTranslationTeam/Excellent-Articles-Translations\" target=\"_blank\" rel=\"noopener\">优秀外文翻译资源集合</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207789673&amp;idx=1&amp;sn=15683e2b9c939f9e21084b4e65df9b92#rd\" target=\"_blank\" rel=\"noopener\">详解Swift中的iOS设计模式</a></p>\n<p><a href=\"http://www.yming9.com/?p=579\" target=\"_blank\" rel=\"noopener\">在iOS8 下用Swift 创建自定义的键盘</a></p>\n<p><a href=\"http://www.devtf.cn/?p=462\" target=\"_blank\" rel=\"noopener\">Swift和自动引用计数(ARC)整理之强，弱和无主引用</a></p>\n<p><a href=\"http://lvwenhan.com/ios/454.html\" target=\"_blank\" rel=\"noopener\">自己动手写一个 iOS 网络请求库（一）—— NSURLSession 初探</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209907200&amp;idx=1&amp;sn=4c3d467cc76980209ed55ae8d08694f5#rd\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa 3.0 初窥</a></p>\n<p><a href=\"http://www.jianshu.com/p/2dc639b2675a\" target=\"_blank\" rel=\"noopener\">Swift 2 有哪些新特性</a></p>\n<p><a href=\"http://www.cocoachina.com/cms/wap.php?action=article&amp;id=12237\" target=\"_blank\" rel=\"noopener\">如何使用Instruments诊断App（Swift版）：起步</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209755668&amp;idx=1&amp;sn=383f306a3cc8cf2463a0a2c951ce17f6#rd\" target=\"_blank\" rel=\"noopener\">理解 ARC 下的循环引用</a></p>\n<p><a href=\"http://www.devtalking.com/articles/what-is-new-in-swift/\" target=\"_blank\" rel=\"noopener\">Swift 2.0初探</a></p>\n<p><a href=\"http://www.cocoachina.com/industry/20140103/7651.html?utm_campaign=ios_wiki_dev_issue_1&amp;utm_source=ios_wiki_com&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">2013 CocoaChina微信精选之技术汇</a></p>\n<p><a href=\"http://www.imooc.com/wenda/detail/238393\" target=\"_blank\" rel=\"noopener\">理解 Objective-C 的 ARC</a></p>\n<p><a href=\"http://www.jianshu.com/p/50b63a221f09\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技</a></p>\n<p><a href=\"http://www.jianshu.com/p/2fa080673842\" target=\"_blank\" rel=\"noopener\">我推荐的一些iOS开发书单 叶孤城___</a></p>\n<p><a href=\"http://www.jianshu.com/p/9e1f0b44935c\" target=\"_blank\" rel=\"noopener\">iOS性能优化</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206525720&amp;idx=1&amp;sn=61ad896414bd492f5dee7a46c1753b50#rd\" target=\"_blank\" rel=\"noopener\">iOS 调试核对清单</a></p>\n<p><a href=\"http://www.jianshu.com/p/e28e8f5c7578?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS APP 测试点摘要</a></p>\n<p><a href=\"http://toutiao.io/r/z71jv\" target=\"_blank\" rel=\"noopener\">GCD使用经验与技巧浅谈</a></p>\n<p><a href=\"http://xuexuefeng.com/autolayout/\" target=\"_blank\" rel=\"noopener\">iOS 开发实践之 Auto Layout</a></p>\n<p><a href=\"http://www.jianshu.com/p/9c35432ec7a4?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">I Found You! 正则表达式!</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206617040&amp;idx=1&amp;sn=35c497c91047130c96490b1e7b9a3fa5#rd\" target=\"_blank\" rel=\"noopener\">iOS 开发中的消息传递机制</a></p>\n<p><a href=\"http://www.jianshu.com/p/6b7d54b3f88b?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS扫一扫功能开发</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206668083&amp;idx=1&amp;sn=1661f83ff6d5e1f1b75eba9176e1b640#rd\" target=\"_blank\" rel=\"noopener\">给游戏开发者们的 7 个制作建议</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206705810&amp;idx=1&amp;sn=32beff0e768d167f9a76a2be003d0886#rd\" target=\"_blank\" rel=\"noopener\">iOS另类的内存管理</a></p>\n<p><a href=\"http://www.jianshu.com/p/613916eea37f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS runloop</a></p>\n<p><a href=\"http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/\" target=\"_blank\" rel=\"noopener\">正确使用Block避免Cycle Retain和Crash</a></p>\n<p><a href=\"http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/\" target=\"_blank\" rel=\"noopener\">为GCD队列绑定NSObject类型上下文数据-利用__bridge_retained(transfer)转移内存管理权</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207272218&amp;idx=1&amp;sn=fe72df0ae11997be7e0dac8cc06115aa#rd\" target=\"_blank\" rel=\"noopener\">iOS事件分发机制（一） hit-Testing</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207315755&amp;idx=1&amp;sn=3e48dbd35674882b46796ac9bd02ad10#rd\" target=\"_blank\" rel=\"noopener\">iOS事件分发机制（二）：The Responder Chain</a></p>\n<p><a href=\"http://blog.cnbang.net/tech/2729/\" target=\"_blank\" rel=\"noopener\">iOS富文本组件的实现—DTCoreText源码解析 渲染篇</a></p>\n<p><a href=\"http://blog.cnbang.net/tech/2630/\" target=\"_blank\" rel=\"noopener\">iOS富文本组件的实现—DTCoreText源码解析 数据篇</a></p>\n<p><a href=\"https://github.com/bboyfeiyu/iOS-tech-frontier/blob/master/issue-2/GCD%E6%A6%82%E8%BF%B0%E3%80%81%E8%AF%AD%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A5%BD%E7%9A%84%E7%A4%BA%E4%BE%8B.md\" target=\"_blank\" rel=\"noopener\">GCD概述、语法以及好的示例</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208119666&amp;idx=1&amp;sn=b85d6532b7804cdeb2accb5e8aea3c38#rd\" target=\"_blank\" rel=\"noopener\">通过减少动态派送提升性能</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206285714&amp;idx=5&amp;sn=2048f89ee84149bac671ce8e204ec277#rd\" target=\"_blank\" rel=\"noopener\">NSString属性什么时候用copy，什么时候用strong?</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206321222&amp;idx=8&amp;sn=71171f2298c2ed6d72015b942733f607#rd\" target=\"_blank\" rel=\"noopener\">NSRecursiveLock递归锁的使用</a></p>\n<p><a href=\"http://cubernet.cn/blog/rootdaemon/\" target=\"_blank\" rel=\"noopener\">在iOS上以root身份运行守护进程</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206483177&amp;idx=2&amp;sn=0431f8a7673bf6633643c23e1776fcdd#rd\" target=\"_blank\" rel=\"noopener\">iOS开发中两个常见问题的处理</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206448996&amp;idx=3&amp;sn=895663ec96a8469820b54b6536975340#rd\" target=\"_blank\" rel=\"noopener\">iOS 8增强的自动布局功能</a></p>\n<p><a href=\"http://cubernet.cn/blog/theos1/\" target=\"_blank\" rel=\"noopener\">Theos介绍</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206637839&amp;idx=7&amp;sn=d5719f4c59753143c288de6d6206832b#rd\" target=\"_blank\" rel=\"noopener\">iOS中几种定时器 - 控制了时间，就控制了一切</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208071791&amp;idx=5&amp;sn=8fd1f5ae65611a4de7ce3885db28dc6f#rd\" target=\"_blank\" rel=\"noopener\">iOS view的frame和bounds之区别（位置和大小）</a></p>\n<p><a href=\"http://www.jianshu.com/p/aa50e5350852?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"noopener\">iOS应用程序的生命周期</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=207857740&amp;idx=2&amp;sn=95d11ae018381f7b711320f406f800ab#rd\" target=\"_blank\" rel=\"noopener\">2015 Objective-C 三大新特性 | 干货</a></p>\n<p><a href=\"http://www.olinone.com/?p=232\" target=\"_blank\" rel=\"noopener\">“自释放”在iOS开发中的应用</a></p>\n<p><a href=\"http://nshipster.cn/\" target=\"_blank\" rel=\"noopener\">关注被忽略的 Objective-C、Swift 和 Cocoa 特性</a></p>\n<p><a href=\"https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift#!/chapters/675\" target=\"_blank\" rel=\"noopener\">Swift开发游戏步骤</a></p>\n<p><a href=\"http://www.jianshu.com/p/d46fb9d72ddb?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">关于iOS编码规范</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206155008&amp;idx=1&amp;sn=360b4f02a9f9aea2cdd21f9253140276#rd\" target=\"_blank\" rel=\"noopener\">Objective-C开发编码规范（一）</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208035695&amp;idx=2&amp;sn=b5069f3429308204dec4dd459bc4652f#rd\" target=\"_blank\" rel=\"noopener\">Objective-C开发编码规范（二）</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206573834&amp;idx=5&amp;sn=b18dc313960fada8e84b76efabd3175c#rd\" target=\"_blank\" rel=\"noopener\">Swift扩展的三个微妙细节</a></p>\n<p><a href=\"http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html\" target=\"_blank\" rel=\"noopener\">Objective-C类成员变量深度剖析</a></p>\n<p><a href=\"http://cubernet.cn/blog/swift-1/\" target=\"_blank\" rel=\"noopener\">Swift基础(一)</a></p>\n<p><a href=\"http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html\" target=\"_blank\" rel=\"noopener\">iOS7人机界面指南</a></p>\n<p><a href=\"http://wileam.com/iphone-6-screen-cn/\" target=\"_blank\" rel=\"noopener\">iphone6 屏幕设计揭秘</a></p>\n<p><a href=\"http://www.mobile-patterns.com/\" target=\"_blank\" rel=\"noopener\">mobile设计</a></p>\n<p><a href=\"http://www.jianshu.com/p/e7fc525f342d?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS常用框架</a></p>\n<p><a href=\"http://www.jianshu.com/p/47201e57d21a?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">iOS面试基础知识36题</a></p>\n<p><a href=\"http://www.jianshu.com/p/ca75fa02cf1e\" target=\"_blank\" rel=\"noopener\">GitHub 上排名前 50 的 Objective-C 项目简介</a></p>\n<p><a href=\"http://www.jianshu.com/p/c5b0eb58b878\" target=\"_blank\" rel=\"noopener\">一些知名App用到的第三方库汇总</a></p>\n<p><a href=\"http://foggry.com/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/\" target=\"_blank\" rel=\"noopener\">Github优秀开源项目大全-iOS</a></p>\n<p><a href=\"http://zixun.github.io/blog/2015/04/11/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/\" target=\"_blank\" rel=\"noopener\">[iOS单元测试系列]单元测试框架选型</a></p>\n<p><a href=\"https://github.com/linqiang/Demo\" target=\"_blank\" rel=\"noopener\">购物商城的Demo</a></p>\n<p><a href=\"https://github.com/jkyin/Subtitle\" target=\"_blank\" rel=\"noopener\">斯坦福大学公开课：iOS 7 应用开发 Demo</a></p>\n<p><a href=\"https://github.com/Lax/iOS-Swift-Demos\" target=\"_blank\" rel=\"noopener\">iOS-Swift-Demos</a></p>\n<p><a href=\"https://github.com/numbbbbb/Accessibility-Programming-Guide-for-iOS\" target=\"_blank\" rel=\"noopener\">iOS 无障碍开发指导</a></p>\n<p><a href=\"https://github.com/CocoaChinaTranslationTeam/TestingWithXcodeDocsCN\" target=\"_blank\" rel=\"noopener\">TestingWithXcode中文文档</a></p>\n<p><a href=\"http://ourcoders.com/thread/show/117/\" target=\"_blank\" rel=\"noopener\">苹果Xcode帮助文档阅读指南</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209849033&amp;idx=2&amp;sn=59b5aa163d0be134afbbe951e55ea708#rd\" target=\"_blank\" rel=\"noopener\">iOS项目的持续集成与管理</a></p>\n<p><a href=\"http://www.coderyi.com/archives/751\" target=\"_blank\" rel=\"noopener\">（译）WebViewJavascriptBridge－Obj-C和JavaScript互通消息的桥梁</a></p>\n<p><a href=\"http://www.jianshu.com/p/6376149a2c4c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">截获导航控制器系统返回按钮的点击pop及右滑pop事件</a></p>\n<p><a href=\"http://beauty-soft.net/blog/ceiba/Ios/20140102/680.html\" target=\"_blank\" rel=\"noopener\">UITableView常用属性和方法</a></p>\n<p><a href=\"http://www.devtalking.com/articles/swift-access-control/\" target=\"_blank\" rel=\"noopener\">Swift新特性 – 访问控制（Access Control）</a></p>\n<p><a href=\"http://chengway.in/post/ji-zhu/viewcontroller-programming-guide/presenting-a-view-controller\" target=\"_blank\" rel=\"noopener\">ViewController Programming Guide 笔记（一）</a></p>\n<p><a href=\"http://www.cnblogs.com/haibindev/archive/2013/01/30/2880764.html\" target=\"_blank\" rel=\"noopener\">HTTP Live Streaming直播(iOS直播)技术分析与实现</a></p>\n<p><a href=\"http://ourui.github.io/blog/2014/01/22/mantle-use/\" target=\"_blank\" rel=\"noopener\">Mantle 初步使用</a></p>\n<p><a href=\"http://www.jianshu.com/p/76c588893b19?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">使用CAReplicatorLayer创建动画</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206678143&amp;idx=\" target=\"_blank\" rel=\"noopener\">iOS动画——ViewAnimations</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206718165&amp;idx=6&amp;sn=17c3a363f49df7a90a4e973b9c6d9af6#rd\" target=\"_blank\" rel=\"noopener\">iOS动画——Layer Animations</a></p>\n<p><a href=\"https://github.com/sxyx2008/awesome-ios-animation\" target=\"_blank\" rel=\"noopener\">收集整理了下iOS平台下比较主流炫酷的几款动画框架</a></p>\n<p><a href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\" target=\"_blank\" rel=\"noopener\">Masonry介绍与使用实践(快速上手Autolayout)</a></p>\n<p><a href=\"http://vit0.com/blog/2013/12/07/iosxue-xi-zhi-autolayout/\" target=\"_blank\" rel=\"noopener\">iOS学习之Autolayout</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208000068&amp;idx=2&amp;sn=a4fdbf1858302470cab8b0d4bf3484cd#rd\" target=\"_blank\" rel=\"noopener\">如何实现一个不规则排列的图片布局算法 | 干货</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209655681&amp;idx=2&amp;sn=9f89d8d1ecb393db58c3e064d713b9b5#rd\" target=\"_blank\" rel=\"noopener\">响应式视图</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208550104&amp;idx=1&amp;sn=83eca61921efd512c42ec9e68ca6b492#rd\" target=\"_blank\" rel=\"noopener\">微软前员工：开发Apple Watch应用的27个技巧</a></p>\n<p><a href=\"http://nilsun.github.io/apple-watch/\" target=\"_blank\" rel=\"noopener\">Apple Watch开发初探</a></p>\n<p><a href=\"http://www.cocoachina.com/applewatch/\" target=\"_blank\" rel=\"noopener\">Apple Watch开发专题</a></p>\n<p><a href=\"http://tech.meituan.com/DiveIntoMethodCache.html\" target=\"_blank\" rel=\"noopener\">深入理解Objective-C：方法缓存</a></p>\n<p><a href=\"http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/\" target=\"_blank\" rel=\"noopener\">优化UITableViewCell高度计算的那些事</a></p>\n<p><a href=\"http://objccn.io/issue-4-2/\" target=\"_blank\" rel=\"noopener\">一个完整的Core Data应用</a></p>\n<p><a href=\"http://oncenote.com/2014/10/21/Security-1-HTTPS/\" target=\"_blank\" rel=\"noopener\">iOS安全系列之一：HTTPS</a></p>\n<p><a href=\"http://www.90159.com/2015/08/10/ios-block-basic-article/\" target=\"_blank\" rel=\"noopener\">block基础篇</a></p>\n<p><a href=\"http://www.90159.com/2015/08/04/ios-block-ultimate/\" target=\"_blank\" rel=\"noopener\">block终极篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/0b0d9b1f1f19\" target=\"_blank\" rel=\"noopener\">关于iOS多线程，你看我就够了</a></p>\n<h2 id=\"Objective-C-Run-time\"><a href=\"#Objective-C-Run-time\" class=\"headerlink\" title=\"Objective-C Run time\"></a>Objective-C Run time</h2><p><a href=\"http://www.jianshu.com/p/425a39d43d16?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo\" target=\"_blank\" rel=\"noopener\">轻松学习之三——IMP指针的作用</a></p>\n<p><a href=\"http://www.jianshu.com/p/d39f7d22db6c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note\" target=\"_blank\" rel=\"noopener\">轻松学习之二——iOS利用Runtime自定义控制器POP手势动画</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206641670&amp;idx=1&amp;sn=3fbc0070451d33b4c87d0da616ead22d#rd\" target=\"_blank\" rel=\"noopener\">Cocoa Runtime系统知识整理</a></p>\n<p><a href=\"http://blog.cocoabit.com/2014-10-06-yi-li-jie-objctive-c-runtime/\" target=\"_blank\" rel=\"noopener\">理解 Objective-C Runtime</a></p>\n<p><a href=\"http://www.jianshu.com/p/41735c66dccb\" target=\"_blank\" rel=\"noopener\">Objective-C isa 指针 与 runtime 机制</a></p>\n<p><a href=\"http://tech.glowing.com/cn/objective-c-runtime/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime</a></p>\n<p><a href=\"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime</a></p>\n<p><a href=\"http://www.jianshu.com/p/25a319aee33d\" target=\"_blank\" rel=\"noopener\">Objective-C特性：Runtime</a></p>\n<h2 id=\"项目结构经验\"><a href=\"#项目结构经验\" class=\"headerlink\" title=\"项目结构经验\"></a>项目结构经验</h2><p><a href=\"http://www.jianshu.com/p/77a948bcbc38\" target=\"_blank\" rel=\"noopener\">iOS 项目的目录结构能看出你的开发经验</a></p>\n<p><a href=\"https://github.com/makeLaugh/TWAPP\" target=\"_blank\" rel=\"noopener\">iOS项目架构探索</a></p>\n<p><a href=\"http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html\" target=\"_blank\" rel=\"noopener\">iOS应用架构谈系列</a></p>\n<h2 id=\"学习UI\"><a href=\"#学习UI\" class=\"headerlink\" title=\"学习UI\"></a>学习UI</h2><p><a href=\"http://segmentfault.com/a/1190000002412930\" target=\"_blank\" rel=\"noopener\">iOS组件之UIScrollView详解</a></p>\n<p><a href=\"http://tech.glowing.com/cn/practice-in-uiscrollview/\" target=\"_blank\" rel=\"noopener\">UIScrollView 实践经验</a></p>\n<p><a href=\"https://github.com/icepy/Awsome-Apple-Develop-Guide\" target=\"_blank\" rel=\"noopener\">参考原文</a></p>\n","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"iOS","path":"api/tags/iOS.json"},{"name":"汇总","path":"api/tags/汇总.json"},{"name":"资源","path":"api/tags/资源.json"}]},{"title":"腾讯云之小直播开发","slug":"腾讯云之小直播开发","date":"2017-01-22T18:55:21.000Z","updated":"2017-05-26T11:03:05.000Z","comments":true,"path":"api/articles/腾讯云之小直播开发.json","excerpt":null,"keywords":null,"cover":"https://mc.qcloudimg.com/static/img/92a464fc26bbe52fea8816f8e6061ef3/image.jpg","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"视频服务\"><a href=\"#视频服务\" class=\"headerlink\" title=\"视频服务\"></a>视频服务</h1><ol>\n<li><p><a href=\"https://www.qcloud.com/product/LVB\" target=\"_blank\" rel=\"noopener\">直播LVB</a> </p>\n<ol>\n<li><a href=\"https://www.qcloud.com/document/product/267/7964\" target=\"_blank\" rel=\"noopener\">开发指南</a></li>\n</ol>\n</li>\n<li><p><a href=\"https://www.qcloud.com/product/mlvb\" target=\"_blank\" rel=\"noopener\">移动直播MLVB</a></p>\n<ol>\n<li><a href=\"https://www.qcloud.com/document/product/454/7876\" target=\"_blank\" rel=\"noopener\">开发指南</a><br>移动直播是一套移动终端直播解决方案的<code>集合</code>，它以免费源码的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"快速集成方案\"><a href=\"#快速集成方案\" class=\"headerlink\" title=\"快速集成方案\"></a>快速集成方案</h2><img src=\"https://mc.qcloudimg.com/static/img/92a464fc26bbe52fea8816f8e6061ef3/image.jpg\" class=\"导图\" title=\"100% 200 集成导图 图片\">\n<p>如果您想要在自己的 APP 里集成直播推流和播放功能，下面三步就能达成目标：</p>\n<ol>\n<li>开通直播服务<br><a href=\"https://console.qcloud.com/live\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n<li>集成 RTMP SDK<br><a href=\"https://www.qcloud.com/document/product/454/7880\" target=\"_blank\" rel=\"noopener\">RTMP SDK - iOS 平台播放</a></li>\n<li>对接直播流管理<ol>\n<li><a href=\"https://www.qcloud.com/document/product/454/7915\" target=\"_blank\" rel=\"noopener\">云端API - 如何获取推流URL？</a></li>\n<li><a href=\"https://www.qcloud.com/document/product/454/7916\" target=\"_blank\" rel=\"noopener\">云端API - 如何构建房间列表？</a></li>\n<li><a href=\"https://www.qcloud.com/document/product/454/7920\" target=\"_blank\" rel=\"noopener\">云端API - 如何管理直播流？</a><br>小直播是有腾讯云研发团队提供的一套开源源码集，致力于以 DEMO 的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>\n</ol>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"视频","path":"api/categories/视频.json"}],"tags":[{"name":"搭建","path":"api/tags/搭建.json"},{"name":"直播","path":"api/tags/直播.json"},{"name":"腾讯云","path":"api/tags/腾讯云.json"},{"name":"集成","path":"api/tags/集成.json"},{"name":"SDK","path":"api/tags/SDK.json"}]},{"title":"iOS面试题大集合[转]","slug":"iOS面试题大集合","date":"2017-01-22T18:55:21.000Z","updated":"2017-01-22T18:55:21.000Z","comments":true,"path":"api/articles/iOS面试题大集合.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 align=\"center\">iOS有用的面试题大集合</h1>\n\n<h2 id=\"面试题从何处得来\"><a href=\"#面试题从何处得来\" class=\"headerlink\" title=\"面试题从何处得来\"></a>面试题从何处得来</h2><ul>\n<li><a href=\"http://blog.sunnyxx.com/2015/07/04/ios-interview/\" target=\"_blank\" rel=\"noopener\">招聘一个靠谱的 iOS</a></li>\n<li><a href=\"http://www.zhihu.com/question/19604641\" target=\"_blank\" rel=\"noopener\">知乎－如何面试 iOS 工程师？</a></li>\n</ul>\n<h2 id=\"阅读面试题之前\"><a href=\"#阅读面试题之前\" class=\"headerlink\" title=\"阅读面试题之前\"></a>阅读面试题之前</h2><p>在正式开始之前，我期望你能对iOS/Mac OS X平台开发有所了解，在iOS开发中已经很少需要自己写复杂的算法了，一般情况下很少会在面试中出现算法的考核，如果你了解一些基础的算法，还是有帮助的。</p>\n<p>Now！！请使用ARC</p>\n<h3 id=\"什么是iOS开发\"><a href=\"#什么是iOS开发\" class=\"headerlink\" title=\"什么是iOS开发\"></a>什么是iOS开发</h3><p>iOS是iPhone iPad等手持设备的操作系统，所谓的iOS开发就是开发运行在iOS系统上的应用或者游戏，比如支付宝，微信，微博等，当然这也包括了iPad版的应用，iOS开发可以归纳到<strong>移动开发</strong>领域。</p>\n<p><strong>有时候面试官是那种’脑残粉’，了解一下Apple的发展历史，可能比较聊的开。</strong></p>\n<p><a href=\"http://digi.tech.qq.com/a/20150127/021898.htm\" target=\"_blank\" rel=\"noopener\">苹果Mac计算机31年发展历程回顾</a></p>\n<p><a href=\"http://baike.baidu.com/link?url=68F4Bl4llkNvdFJ1Md0fkZDDudN-NS46JeZoLrgPeqEbZmm8oBKG92Ocyd983yNQU6FVuDTFZOnjjPjfUHnuoePdfh6zJJ973pXFKYcbIKp5bCnQy_WvUVNJ6P84s8HE1xAlRaGdLVuoCb2p_8uaMa\" target=\"_blank\" rel=\"noopener\">苹果公司</a></p>\n<p><a href=\"http://www.zhihu.com/topic/19551762\" target=\"_blank\" rel=\"noopener\">苹果公司在知乎上的话题</a></p>\n<p><a href=\"http://www.amazon.cn/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0-%E6%B2%83%E5%B0%94%E7%89%B9%C2%B7%E8%89%BE%E8%90%A8%E5%85%8B%E6%A3%AE/dp/B00IM4IFL2/ref=sr_1_1?ie=UTF8&amp;qid=1436592631&amp;sr=8-1&amp;keywords=%E4%B9%94%E5%B8%83%E6%96%AF\" target=\"_blank\" rel=\"noopener\">乔布斯个人传记</a></p>\n<h3 id=\"拼写正确的重要性\"><a href=\"#拼写正确的重要性\" class=\"headerlink\" title=\"拼写正确的重要性\"></a>拼写正确的重要性</h3><p>有些面试官可能更注重细节，所以，拼写的单词一定要对，比如iOS，Xcode，iPhone，Objective-C，JSON等，良好的拼写习惯，会让面试官觉得你细心靠谱。</p>\n<h3 id=\"Swift和Objective-C的比较\"><a href=\"#Swift和Objective-C的比较\" class=\"headerlink\" title=\"Swift和Objective-C的比较\"></a>Swift和Objective-C的比较</h3><p>仁者见仁智者见智，从个人的使用角度上来看，Swift在某些情况上比Objective-C更加的严谨了，入门非常简单，但是想开发应用，还是需要学习cocoa框架，这玩意路子还是Objective-C的，所以有基础可能更好的理解Swift在iOS/Mac OS X 中的开发和应用。</p>\n<p><a href=\"http://www.zhihu.com/question/24002984\" target=\"_blank\" rel=\"noopener\">知乎原文</a></p>\n<h3 id=\"了解Watch-OS\"><a href=\"#了解Watch-OS\" class=\"headerlink\" title=\"了解Watch OS\"></a>了解Watch OS</h3><p><code>Watch OS</code>是苹果公司推出的应用在手表上的一个操作系统，<code>Watch OS 1.0</code>需要跟iPhone相结合才能工作。</p>\n<p><a href=\"https://stratechery.com/2014/apple-watch-asking-saying/\" target=\"_blank\" rel=\"noopener\">Apple Watch</a></p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=208847424&amp;idx=1&amp;sn=fac57c5da8136b07fe9cdf53d1ec9f4c#rd\" target=\"_blank\" rel=\"noopener\">Watch OS 2.0 开发概述</a></p>\n<hr>\n<h2 id=\"iOS面试\"><a href=\"#iOS面试\" class=\"headerlink\" title=\"iOS面试\"></a>iOS面试</h2><h5>property 后面可以有哪些修饰符</h5>\n\n<ol>\n<li><p>读写修饰符 <code>readwrite</code> | <code>readonly</code></p>\n<p> <code>readwrite</code> Xcode会帮助我们创建<code>setter</code>，<code>getter</code>方法，<code>readonly</code> Xcode只会帮助我们创建<code>getter</code>方法，不会创建<code>setter</code>方法。</p>\n</li>\n<li><p><code>setter</code>相关的修饰符 <code>assign</code> | <code>retain</code> | <code>copy</code></p>\n<p> 2.1 <code>setter</code>相关的修饰符表明了<code>setter</code>方法该如何实现，<code>assign</code>用于基本数据类型<code>NSInteger</code>，<code>CGFloat</code>，C数据类型<code>int</code>，<code>float</code>，<code>id</code>类型等，这个符号不会涉及内存管理，但是如果是对象类使用了它，可能会导致内存泄漏或者<code>EXC_BAD_ACCESS</code>错误。</p>\n<p> 2.2 <code>retain</code>用于对象类的内存管理，如果基本数据类型使用它，<code>Xcode</code>会直接报错。当对象类使用此修饰符时，<code>setter</code>方法的实现是先<code>release</code>一次，然后再对新的对象做一次<code>retain</code>操作。</p>\n<p> 2.3 <code>copy</code>主要用于<code>NSString</code>，用于内容复制。</p>\n</li>\n<li><p>原子性修饰符 <code>atomic</code> | <code>nonatomic</code></p>\n<p> <code>atomic</code> 表示线程安全</p>\n<p> <code>nonatomic</code> 表示非线程安全，使用此修饰符会提高性能</p>\n</li>\n<li><p><code>getter</code>，<code>setter</code>修饰符</p>\n<p> 这两个修饰符用于设置生成的getter，setter的方法名</p>\n</li>\n<li><p><code>strong</code>，<code>weak</code>修饰符（ARC）<br>在ARC中内存管理都只需要使用这两个修饰符，而且<code>strong</code>是默认全局的，只要你写了<code>Objective-C</code>的对象，不自己添加<code>weak</code>的话，默认就是<code>strong</code>。<br> 5.1 <code>strong</code>表示这个对象的拥有者<br> 一个对象可以有多个拥有者，<code>strong</code>就是用来表示对这个对象的拥有。比如在往<code>NSMutableArray</code>中添加<code>Objective-C</code>对象，当你从数组中删除时，这个对象并不会释放。需要你手动设置为<code>nil</code>，或者在控制器的生命周期内，由系统来释放。<br> 5.2 <code>weak</code>指针变量仍然可以指向一个对象，但不是这个对象的拥有者<br> <code>weak</code>修饰的指针变量也可以指向对象，但不是这个对象的实际拥有者，也就是说<code>weak</code>修饰的指针变量如果想要释放，需要<code>strong</code>修饰的指针变量设置为<code>nil</code>，<code>weak</code>修饰的指针变量也会是一个<code>nil</code>，它指向的对象已经没有了，还需要设置<code>weak</code>修饰的指针变量为<code>nil</code>。</p>\n</li>\n<li><code>nonnull</code> <code>nullable</code> <code>null_resettable</code></li>\n</ol>\n<p>Xcode 6.3推出的<code>nullability annotations</code>，主要是为了更好的Swift与Objective-C混编，在Swift中有可选型的概念<code>!</code>,<code>?</code>，但是Objective-C中木有这玩意，于是Xcode 6.3中才有了这个，<br>从字面可以看出:<br>    <code>nonnull</code> 表示对象不应该为空，如果是这个修饰符对应的就是Swift中已经解包的对象或者<code>!</code><br>    <code>nullable</code>表示可以为<code>nil</code>或者<code>NULL</code>,对应是Swift中的可选<code>?</code><br>    <code>null_resettable</code>则是表达属性的空属性，该属性<code>setter</code>访问器允许将其设置为<code>nil</code>（设置该属性为默认值），但是它的<code>getter</code>访问器不会提供一个<code>nil</code>值（因为它提供了默认值），有一个这样的属性如UIView’s tintColor，如果没有tint颜色指定时它会提供一个默认的tint颜色值，对应的Swift使用是var tintColor:UIColor!</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><ol>\n<li>使用 <code>weak</code> 关键字，相比 <code>assign</code> 有什么不同<br> 一般情况下使用<code>weak</code>是避免循环引用，因为它不是对象的拥有者。而<code>assign</code>则是用于基本数据类型，或者C类型，而且<code>assign</code>是直接赋值，可能会导致一个问题。比如我想a和b共用一块内存，a是用<code>assign</code>修饰的，<code>a = b</code>，现在a使用的目的已经完成，我想释放这个内存，但是a并不知道b到底用没用完，如果此时a释放内存，而b还在使用，那么会导致应用程序crash，使用<code>weak</code>就能避免这样的问题。</li>\n<li>怎么用 copy 关键字<br> <code>copy</code>拷贝的是内容,<code>retain</code>是拷贝的指针<pre><code>* 以`string`为例,如果`string`的属性为`copy`的话,那么传入参数为`NSString`的话,即为不可变`string`,`retain`,`copy`效果一样.\n* 如果传入参数是`mutable`的话,那么`copy`拷贝内容,源随意变化不影响该属性的值.`retain`拷贝指针,源变化则属性值着变化,因为属性和源指向如何使用呢,通常在需要拷贝内容,但是副本和源不要互相影响的情况下使用.`*` 同一内存地址.\n* 例如`array/dictionary`中,可能会需要一个副本来做一些操作(筛选,排序等),但是并不希望影响原始值,则可以使用`copy`\n</code></pre></li>\n<li>@property (copy) NSMutableArray *array; 这样写有什么问题吗<br> 因为用了<code>copy</code>, 内部会深拷贝一次, 指针实际指向的是<code>NSArray</code>, 所以如果调用<code>removeObject</code>和<code>addObject</code>方法的话, 会<code>unRecognized selector</code></li>\n<li>如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？<br> 当一个对象发生改变时不影响另外一个对象，这里就需要使用<code>copy</code>关键字了，实现<code>NSCopying</code>协议，重写- <code>(id)copyWithZone:(NSZone *)zone</code>方法。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)name</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(_name != name)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _name = [name <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>@protocol 和 category 中如何使用 @property<br> <code>@protocol</code>可以通过关键字:<code>@synthesize</code>或者在继承的类里面重新定义一次该属性(<code>extension</code>里面定义是不行的)<br> <code>category</code>通过关联:<code>objc_setAssociatedObject</code>/<code>objc_getAssociatedObject</code></li>\n<li><code>@property</code> 的本质是什么？<code>ivar</code>、<code>getter</code>、<code>setter</code> 是如何生成并添加到这个类中的<br> <code>@property</code>本质是定义一个<code>objc_property</code>结构体<br><strong>如何生成目前不清楚</strong></li>\n<li><code>weak</code>属性需要在<code>dealloc</code>中置<code>nil</code>么<br> 不需要，因为weak会自动设置nil</li>\n<li><code>@synthesize</code>和@<code>dynamic</code>分别有什么作用<br> 关于@synthesize（现在已经不需要在写这个属性了，它是用来生成getter和setter方法）<br> <code>@dynamic</code> 就是要告诉编译器<code>getter</code>和<code>setter</code>方法会在程序运行或者用到动态绑定的方式，以便让编译器通过编译，这个主要要在<code>NSManagerObject</code>上。</li>\n<li><code>ARC</code>下，不显式指定任何属性关键字时，默认的关键字都有哪些<br> 在默认情况下，所有的实例变量和局部变量都是<code>strong</code>类型的。</li>\n<li>用<code>@property</code>声明的<code>NSString</code>（或<code>NSArray</code>，<code>NSDictionary</code>）经常使用<code>copy</code>关键字，为什么？如果改用strong关键字，可能造成什么问题<br>因为不想改变了其中的值后把原来的值也跟着改变了，用了<code>strong</code>后会出现这样的状况。</li>\n<li>什么是ARC<br>请阅读，然后随便谈谈你的理解即可。<br>ARC是为了解决下面几个问题<ul>\n<li>当我们要释放一个堆内存时，首先要确定指向这个堆空间的指针都被<code>release</code>了。（避免提前释放）</li>\n<li>释放指针指向的堆空间，首先要确定哪些指针指向同一个堆，这些指针只能释放一次。（<code>MRC</code>下即谁创建，谁释放，避免重复释放）</li>\n<li>模块化操作时，对象可能被多个模块创建和使用，不能确定最后由谁去释放。</li>\n<li>多线程操作时，不确定哪个线程最后使用完毕<br><a href=\"http://onevcat.com/2012/06/arc-hand-by-hand/\" target=\"_blank\" rel=\"noopener\">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href=\"http://www.oschina.net/translate/objc-automatic-reference-counting-in-xcode-explained\" target=\"_blank\" rel=\"noopener\">理解 Objective-C 的 ARC</a></li>\n</ul>\n</li>\n<li>请解释以下keywords的区别： <code>assign</code> vs <code>weak</code>, <code>block</code> vs <code>weak</code><br><code>assign</code>适用于基本数据类型，<code>weak</code>是适用于<code>NSObject</code>对象，并且是一个弱引用。<ul>\n<li><code>assign</code>其实也可以用来修饰对象，那么我们为什么不用它呢？<br>因为被<code>assign</code>修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为<code>nil</code>。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。</li>\n<li><code>weak</code>修饰的对象在释放之后，指针地址会被置为<code>nil</code>。所以现在一般弱引用就是用<code>weak</code>。</li>\n<li><code>block</code>是用来修饰一个变量，这个变量就可以在<code>block</code>中被修改，使用<code>block</code>修饰的变量在<code>block</code>代码快中会被<code>retain</code>（<code>ARC</code>下，<code>MRC</code>下不会<code>retain</code>） </li>\n<li><code>weak</code>：使用<code>weak</code>修饰的变量不会在<code>block</code>代码块中被<code>retain</code>同时，在ARC下，要避免<code>block</code>出现循环引用 <code>weak typedof(self)weakSelf = self</code></li>\n</ul>\n</li>\n<li><code>__block</code>在<code>arc</code>和<code>非arc</code>下含义一样吗<br>是不一样的，ARC会retain，非ARC不会。</li>\n<li>描述一个你遇到过的<code>retain</code> cycle例子<br>在<code>viewController</code>中避免循环引用<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ downloadData:^(<span class=\"keyword\">id</span> responseData)&#123;</span><br><span class=\"line\">    _data = responseData;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>  \n解决办法<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"keyword\">weak</span> ViewController *weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[ downloadData:^(<span class=\"keyword\">id</span> responseData)&#123;</span><br><span class=\"line\">    weakSelf.data = responseData;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></li>\n<li><code>+(void)load;</code> <code>+(void)initialize;</code>有什么用处<br>在Objective-C中，<code>runtime</code>会自动调用每个类的两个方法。<code>+load</code>会在类初始加载时调用，<code>+initialize</code>会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。<br>共同点：两个方法都只会被调用一次。</li>\n<li><code>UIView</code>和<code>CALayer</code>有什么关系<ul>\n<li><code>UIView</code>是iOS界面元素的基础，所有的界面元素都继承于它。它本身是由<code>CoreAnimation</code>来实现的，它真正绘图的部分是由一个<code>CALayer</code>的类来管理的，<code>UIView</code>本身更像是一个<code>CALayer</code>的管理器。</li>\n<li><code>UIView</code>都存在一个<code>layer</code>属性，可以访问到<code>CALayer</code>的实例。</li>\n<li><code>UIView</code>的<code>CALayer</code>类也存在一个<code>view</code>树结构，可以像<code>UIView</code>一样进行添加</li>\n<li><code>UIView</code>的<code>layer</code>树在系统内部，由系统来维护，它存在着三棵树，分别是逻辑树，动画树，显示树</li>\n</ul>\n</li>\n<li>如何高性能的给<code>UIImageView</code>加个圆角<ul>\n<li>使用贝塞尔曲线来切割图片</li>\n<li>使用<code>Quartz2D</code>直接绘制图片</li>\n</ul>\n</li>\n<li>使用<code>drawRect</code>有什么影响<br><code>drawRect</code>方法依赖<code>Core Graphics</code>框架来进行自定义的绘制，但这种方法主要的缺点就是它处理<code>touch</code>事件的方式：每次按钮被点击后，都会用<code>setNeddsDisplay</code>进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对<code>CPU</code>和内存来说都是欠佳的。</li>\n<li>SDWebImage里面给UIImageView加载图片的逻辑是什么样的<br>详情看<a href=\"http://www.cnblogs.com/6duxz/p/4159572.html\" target=\"_blank\" rel=\"noopener\">最新版SDWebImage的使用</a></li>\n<li>麻烦你设计个简单的图片内存缓存器<br>图片的内存缓存，可以考虑将图片数据保存到一个数据模型中，所以在程序运行时这个模型都存在内存中，一定要具备移除策略，即释放数据模型。</li>\n<li>讲讲你用<code>Instrument</code>优化动画性能的经历<br><a href=\"http://www.hrchen.com/2013/05/performance-with-instruments/\" target=\"_blank\" rel=\"noopener\">怎么使用instrument</a></li>\n<li><code>loadView</code>是干嘛用的<br>当你访问一个<code>ViewController</code>的<code>view</code>属性时，如果此时<code>view</code>的值是<code>nil</code>，那么，<code>ViewController</code>就会自动调用<code>loadView</code>这个方法。这个方法就会加载或者创建一个<code>view</code>对象，赋值给<code>view</code>属性。<br><code>loadView</code>默认做的事情是：如果此<code>ViewController</code>存在一个对应的<code>nib</code>文件，那么就加载这个<code>nib</code>。否则，就创建一个<code>UIView</code>对象。<br>如果你用<code>Interface Builder</code>来创建界面，那么不应该重载这个方法。<br>如果你想自己创建<code>view</code>对象，那么可以重载这个方法。此时你需要自己给<code>view</code>属性赋值。你自定义的方法不应该调用<code>super</code>。如果你需要对<code>view</code>做一些其他的定制操作，在<code>viewDidLoad</code>里面去做。<br><a href=\"http://www.cnblogs.com/dyllove98/archive/2013/06/06/3123005.html\" target=\"_blank\" rel=\"noopener\">iOS 的loadView 及使用loadView中初始化View注意的问题</a></li>\n<li>用过<code>CoreData</code>或者<code>SQLite</code>吗？读写是分线程的吗？遇到过死锁没？咋解决的<br>参考<a href=\"http://blog.csdn.net/hanangellove/article/details/44966769\" target=\"_blank\" rel=\"noopener\">CoreData与SQLite的线程安全</a></li>\n<li><code>GCD</code>里面有哪几种<code>Queue</code>？你自己建立过串行<code>queue</code>吗？背后的线程模型是什么样的<ul>\n<li>主队列 <code>dispatch_main_queue();</code> 串行 ，更新UI</li>\n<li>全局队列 <code>dispatch_global_queue();</code> 并行，四个优先级：<code>background</code>，<code>low</code>，<code>default</code>，<code>high</code></li>\n<li>自定义队列 <code>dispatch_queue_t queue;</code> 可以自定义是并行：<code>DISPATCH_QUEUE_CONCURRENT</code>或者串行<code>DISPATCH_QUEUE_SERIAL</code></li>\n</ul>\n</li>\n<li>为什么其他语言里叫函数调用， <code>Objective-C</code>里则是给对象发消息（或者谈下对<code>runtime</code>的理解）<br>网上关于<code>runtime</code>的资料非常多，其实这方面在平时的开发中使用非常非常之少，底层的黑魔法。<br><a href=\"http://www.jianshu.com/p/25a319aee33d\" target=\"_blank\" rel=\"noopener\">Objective-C特性：Runtime</a><br><a href=\"http://tech.glowing.com/cn/objective-c-runtime/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime</a></li>\n<li>什么是<code>method swizzling</code><br>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是<code>selector</code>的名字。利用<code>Objective-C</code>的动态特性，可以实现在运行时偷换<code>selector</code>对应的方法实现，达到给方法挂钩的目的。<br><a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/9374411\" target=\"_blank\" rel=\"noopener\">详细的案例</a></li>\n<li>runtime 如何实现 weak 属性 <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_ASSOCIATION_ASSIGN</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY_NONATOMIC</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY</span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;myKey, anObject, OBJC_ASSOCIATION_RETAIN);</span><br></pre></td></tr></table></figure>\n可以自定义<code>weak</code>来实现内存管理，Apple已经为我们准备了常量。<br>参考<br><a href=\"http://nshipster.cn/associated-objects/\" target=\"_blank\" rel=\"noopener\">Associated Objects</a><br><a href=\"http://southpeak.github.io/blog/2014/10/30/objective-c-runtime-yun-xing-shi-zhi-er-:cheng-yuan-bian-liang-yu-shu-xing/\" target=\"_blank\" rel=\"noopener\">Objective-C Runtime 运行时之二：成员变量与属性</a></li>\n<li><code>objc</code>中向一个<code>nil</code>对象发送消息将会发生什么<br><code>objc</code>的特性是允许对一个 <code>nil</code> 对象发送消息不会 Crash，因为会被忽略掉。</li>\n<li>什么时候会报<code>unrecognized selector</code>的异常<br>调用一个不存在的方法</li>\n<li><code>objc</code>中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[obj foo];</span><br><span class=\"line\"><span class=\"comment\">//编译时会变成</span></span><br><span class=\"line\">objc_msgSend(obj,<span class=\"keyword\">@selector</span>(foo));</span><br><span class=\"line\"></span><br><span class=\"line\">[obj foo:parameter];</span><br><span class=\"line\"><span class=\"comment\">//编译时会变成</span></span><br><span class=\"line\">objc_msgSend(obj,<span class=\"keyword\">@selector</span>(foo:),parameter);</span><br></pre></td></tr></table></figure></li>\n<li>一个objc对象如何进行内存布局<br>可参考<a href=\"http://www.cnblogs.com/csutanyu/archive/2011/12/12/objective-c_memory_layout.html\" target=\"_blank\" rel=\"noopener\">Objective-C内存布局</a></li>\n<li>一个objc对象的isa的指针指向什么？有什么作用？<br>isa是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</li>\n<li>下面的代码输出什么<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Son</span> : <span class=\"title\">Father</span></span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, <span class=\"built_in\">NSStringFromClass</span>([<span class=\"keyword\">super</span> <span class=\"keyword\">class</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n输出Son</li>\n<li>runtime如何通过selector找到对应的IMP地址<br>id (*IMP)(id, SEL, …)<br>这个函数使用当前CPU架构实现的标准的C调用约定。第一个参数是指向self的指针(如果是实例方法，则是类实例的内存地址；如果是类方法，则是指向元类的指针)，第二个参数是方法选择器(selector)，接下来是方法的实际参数列表。<br>前面介绍过的SEL就是为了查找方法的最终实现IMP的。由于每个方法对应唯一的SEL，因此我们可以通过SEL方便快速准确地获得它所对应的IMP，查找过程将在下面讨论。取得IMP后，我们就获得了执行这个方法代码的入口点，此时，我们就可以像调用普通的C语言函数一样来使用这个函数指针了。<br>通过取得IMP，我们可以跳过Runtime的消息传递机制，直接执行IMP指向的函数实现，这样省去了Runtime消息传递过程中所做的一系列查找操作，会比直接向对象发送消息高效一些。</li>\n</ol>\n<h2 id=\"Hybrid-混合开发\"><a href=\"#Hybrid-混合开发\" class=\"headerlink\" title=\"Hybrid 混合开发\"></a>Hybrid 混合开发</h2>","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"汇总","path":"api/tags/汇总.json"},{"name":"资源","path":"api/tags/资源.json"},{"name":"面试","path":"api/tags/面试.json"}]},{"title":"迁移SVN库到git库保留branchs和tags","slug":"git/迁移SVN库到git库保留branchs和tags","date":"2017-01-18T12:21:46.000Z","updated":"2017-02-17T16:28:51.000Z","comments":true,"path":"api/articles/git/迁移SVN库到git库保留branchs和tags.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the de facto standard. Having helped many clients migrate from SVN to Git, here are my notes for a pain-free transition that will preserve the tags and branches in your SVN repository.</p>\n<h2 id=\"首先导入一个本地存储库\"><a href=\"#首先导入一个本地存储库\" class=\"headerlink\" title=\"首先导入一个本地存储库\"></a>首先导入一个本地存储库</h2><h3 id=\"在本地创建一个存储库的目录\"><a href=\"#在本地创建一个存储库的目录\" class=\"headerlink\" title=\"在本地创建一个存储库的目录\"></a>在本地创建一个存储库的目录</h3><figure class=\"highlight bash\"><figcaption><span>新建目录</span><a href=\"http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/#import-staging\" target=\"_blank\" rel=\"noopener\">Create a local staging directory</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir staging</span><br><span class=\"line\"><span class=\"built_in\">cd</span> staging</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：staging 可以用任何你喜欢的字符串命名，也可以放在本地的任何目录中。</p>\n</blockquote>\n<h3 id=\"初始化git-svn\"><a href=\"#初始化git-svn\" class=\"headerlink\" title=\"初始化git svn\"></a>初始化git svn</h3><h4 id=\"使用SVN标准库结构初始化\"><a href=\"#使用SVN标准库结构初始化\" class=\"headerlink\" title=\"使用SVN标准库结构初始化\"></a>使用SVN标准库结构初始化</h4><figure class=\"highlight bash\"><figcaption><span>标准初始化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVNRepo_ROOT_URL --stdlayout --prefix=svn/</span><br></pre></td></tr></table></figure>\n<p><code>SVNRepo_ROOT_URL</code>: 这里svn_url是完全限定的URL下的标准目录，其目录下包括三个目录：<code>trunk</code>，<code>branches</code>， <code>tags</code>。<br><code>--prefix</code>: 强烈建议使用<code>svn/</code>作为分支和标签的前缀：设置为 <code>--prefix=svn/</code>. 这样有助于防止Git用户混淆原声的Git分支和标签。</p>\n<h4 id=\"使用SVN自定义库结构初始化\"><a href=\"#使用SVN自定义库结构初始化\" class=\"headerlink\" title=\"使用SVN自定义库结构初始化\"></a>使用SVN自定义库结构初始化</h4><p>使用非标准的svn layout 来新建svn库，即可以根据自己喜好来自定义分支，标签目录：<br><figure class=\"highlight bash\"><figcaption><span>非标准化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn init SVN_URL -T Trunk -b Branches -t Tags --prefix=svn/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><ol>\n<li><code>review</code>命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">review the config</span><br></pre></td></tr></table></figure>\n会有以下信息输出：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn-remote.svn.url=svn://svn.example.com</span><br><span class=\"line\">svn-remote.svn.fetch=some/path/trunk:refs/remotes/svn/trunk</span><br><span class=\"line\">svn-remote.svn.tags=some/path/tags/*:refs/remotes/svn/tags/*</span><br></pre></td></tr></table></figure>\n高级用户可以在执行之前，修改相关配置。</li>\n<li><code>git config</code>命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local --list </span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=true</span><br><span class=\"line\">core.bare=false</span><br><span class=\"line\">core.logallrefupdates=true</span><br><span class=\"line\">core.ignorecase=true</span><br><span class=\"line\">core.precomposeunicode=true</span><br><span class=\"line\">svn-remote.svn.url=https://huoshuguang@192.168.85.6/svn/PBBReader_Mac</span><br><span class=\"line\">svn-remote.svn.fetch=trunk:refs/remotes/origin/trunk</span><br><span class=\"line\">svn-remote.svn.branches=branches/*:refs/remotes/origin/*</span><br><span class=\"line\">svn-remote.svn.tags=tags/*:refs/remotes/origin/tags/*</span><br><span class=\"line\">remote.PBBReader.url=https://git.oschina.net/huosan/PBBReader.git</span><br><span class=\"line\">remote.PBBReader.fetch=+refs/heads/*:refs/remotes/PBBReader/*</span><br><span class=\"line\">branch.master.remote=PBBReader</span><br><span class=\"line\">branch.master.merge=refs/heads/master</span><br><span class=\"line\">remote.server.url=https://server.local/git/PBBReader.git</span><br><span class=\"line\">remote.server.fetch=+refs/heads/*:refs/remotes/server/*</span><br><span class=\"line\">branch.v34.remote=PBBReader</span><br><span class=\"line\">branch.v34.merge=refs/heads/v28</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"从远程SVN服务器拉取代码到新建的本地存储库\"><a href=\"#从远程SVN服务器拉取代码到新建的本地存储库\" class=\"headerlink\" title=\"从远程SVN服务器拉取代码到新建的本地存储库\"></a>从远程SVN服务器拉取代码到新建的本地存储库</h3><figure class=\"highlight bash\"><figcaption><span>拉取</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看本地库状态\"><a href=\"#查看本地库状态\" class=\"headerlink\" title=\"查看本地库状态\"></a>查看本地库状态</h2><h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><figure class=\"highlight bash\"><figcaption><span>status</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight bash\"><figcaption><span>内容</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看分支信息\"><a href=\"#查看分支信息\" class=\"headerlink\" title=\"查看分支信息\"></a>查看分支信息</h3><figure class=\"highlight bash\"><figcaption><span>branch</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>输出:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* master</span><br><span class=\"line\">remotes/svn/tags/0.1.0</span><br><span class=\"line\">remotes/svn/trunk</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：SVN标记和分支（在这种情况下，没有任何分支机构）仅作为远程引用存在。</p>\n</blockquote>\n<h2 id=\"SVN分支和标签转为本地git仓库中的标签和分支\"><a href=\"#SVN分支和标签转为本地git仓库中的标签和分支\" class=\"headerlink\" title=\"SVN分支和标签转为本地git仓库中的标签和分支\"></a>SVN分支和标签转为本地git仓库中的标签和分支</h2><h3 id=\"SVN分支迁移\"><a href=\"#SVN分支迁移\" class=\"headerlink\" title=\"SVN分支迁移\"></a>SVN分支迁移</h3><p>把远程svn分支转换为本地git仓库中的分支：<br><figure class=\"highlight bash\"><figcaption><span>分支转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"branches/\"</span> | sed <span class=\"string\">'s/ branches\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$branch</span> refs/remotes/<span class=\"variable\">$branch</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"SVN标签迁移\"><a href=\"#SVN标签迁移\" class=\"headerlink\" title=\"SVN标签迁移\"></a>SVN标签迁移</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的标签 :<figure class=\"highlight bash\"><figcaption><span>tags转换tags</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git tag -a -m<span class=\"string\">\"Converting SVN tags\"</span> <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"SVN标签转为本地git分支\"><a href=\"#SVN标签转为本地git分支\" class=\"headerlink\" title=\"SVN标签转为本地git分支\"></a>SVN标签转为本地git分支</h3><ol>\n<li>把远程svn标签转换为本地git仓库中的分支:<figure class=\"highlight bash\"><figcaption><span>标签转分支</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> `git branch -r | grep <span class=\"string\">\"tags/\"</span> | sed <span class=\"string\">'s/ tags\\///'</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\">git branch <span class=\"variable\">$tag</span> refs/remotes/<span class=\"variable\">$tag</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"在本地测试git命令push和clone操作\"><a href=\"#在本地测试git命令push和clone操作\" class=\"headerlink\" title=\"在本地测试git命令push和clone操作\"></a>在本地测试git命令push和clone操作</h2><p>在推送到正式远程库之前，可以通过向本地git库中推送和clone操作。</p>\n<h3 id=\"创建一个临时的git库，用于测试push和clone测试\"><a href=\"#创建一个临时的git库，用于测试push和clone测试\" class=\"headerlink\" title=\"创建一个临时的git库，用于测试push和clone测试\"></a>创建一个临时的git库，用于测试push和clone测试</h3><p>在git中的说法，<code>bare</code>库是一个不存在工作空间备份的库。<br><figure class=\"highlight bash\"><figcaption><span>bare创建</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure><br>这样，在<code>~/test</code>就生成了一个<code>bare</code>git库。</p>\n<h3 id=\"push-测试\"><a href=\"#push-测试\" class=\"headerlink\" title=\"push 测试\"></a>push 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add <span class=\"built_in\">test</span> `~/<span class=\"built_in\">test</span>`</span><br><span class=\"line\">git push --all <span class=\"built_in\">test</span></span><br><span class=\"line\">git push --tags <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>把<code>~/test</code>的放在反引号中，反引号在命令行中会<code>~</code>自动补全为一个绝对路径。如果你给一个绝对路径或URL，可以省略反引号。<br>尽管它的名字，<code>--all</code>选项不推送<code>tags</code>，所以需要对标签单独push操作。</p>\n<h3 id=\"clone-测试\"><a href=\"#clone-测试\" class=\"headerlink\" title=\"clone 测试\"></a>clone 测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir aclone</span><br><span class=\"line\"><span class=\"built_in\">cd</span> aclone</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> ~/<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>There should now be a clone with a working copy in ~/aclone/test.<br>在<code>~/aclone/test</code>目录中将会clone出一个工作空间备份，检查确保一切OK，这样就可以向正式服务器上推送。</p>\n<h3 id=\"Push到正式git库中\"><a href=\"#Push到正式git库中\" class=\"headerlink\" title=\"Push到正式git库中\"></a>Push到正式git库中</h3><p>如果你是正式库服务器（github，coding）的管理员，为本地git库设置一个空的git库。<br>以<code>Unfuddle</code>为例,路径如下：<br><code>git@example.unfuddle.com:example/blah.git</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote add unfuddle REAL_HOST_URL</span><br><span class=\"line\">git push --all unfuddle</span><br><span class=\"line\">git push --tags unfuddle</span><br></pre></td></tr></table></figure><br>在上面的例子中，制定了远程名：<code>unfuddle</code>而不是默认的<code>origin</code>。当然，你可以使用任何你喜欢的名字。</p>\n<h2 id=\"清理操作\"><a href=\"#清理操作\" class=\"headerlink\" title=\"清理操作\"></a>清理操作</h2><h3 id=\"删除临时git库\"><a href=\"#删除临时git库\" class=\"headerlink\" title=\"删除临时git库\"></a>删除临时git库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/staging</span><br><span class=\"line\">git remote rm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p><code>staging</code>库忽略<code>test</code>远程仓库.</p>\n<h3 id=\"清除clone生成的库\"><a href=\"#清除clone生成的库\" class=\"headerlink\" title=\"清除clone生成的库\"></a>清除clone生成的库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf aclone</span><br><span class=\"line\">rm -rf <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Either-keep-or-delete-the-staging-repo\"><a href=\"#Either-keep-or-delete-the-staging-repo\" class=\"headerlink\" title=\"Either keep or delete the staging repo\"></a>Either keep or delete the staging repo</h3><ol>\n<li>如果需要Git和SVN之间频繁交互，建议保留<code>staging</code>库这会节省你非常耗时的初始化：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git svn fetch</span><br></pre></td></tr></table></figure></li>\n<li>如果你确信svn是报废的，你可以删除：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">rm -rf staging</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"题外小贴士\"><a href=\"#题外小贴士\" class=\"headerlink\" title=\"题外小贴士\"></a>题外小贴士</h1><p>在局域网内访问server搭建服务器提供的git服务：<br><figure class=\"highlight bash\"><figcaption><span>小贴士</span><a href=\"https://confluence.atlassian.com/fishkb/unable-to-clone-git-repository-due-to-self-signed-certificate-376838977.html\" target=\"_blank\" rel=\"noopener\">SSL证书问题</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://.../git/mupdf.git</span><br><span class=\"line\">错误：fatal: unable to access <span class=\"string\">'https://..../git/mupdf.git/'</span>: SSL certificate problem: Invalid certificate chain</span><br></pre></td></tr></table></figure><br>解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"},{"name":"svn","path":"api/categories/svn.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"git","path":"api/tags/git.json"},{"name":"svn","path":"api/tags/svn.json"},{"name":"git-svn","path":"api/tags/git-svn.json"}]},{"title":"swift错误处理","slug":"swift/错误处理","date":"2017-01-11T17:04:21.000Z","updated":"2017-01-12T11:57:41.000Z","comments":true,"path":"api/articles/swift/错误处理.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.<br>Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.<br>As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.<br>举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。</p>\n<h1 id=\"Representing-and-Throwing-Errors\"><a href=\"#Representing-and-Throwing-Errors\" class=\"headerlink\" title=\"Representing and Throwing Errors\"></a>Representing and Throwing Errors</h1><p>In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.<br>在swift中，错误类型是遵循Error 协议。</p>\n<p>Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:<br>swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：<br>一个在操作一台游戏机时的会出现的错误枚举类：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">VendingMachineError</span>: <span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> invalidSelection</span><br><span class=\"line\"><span class=\"keyword\">case</span> insufficientFunds(coinsNeeded: <span class=\"type\">Int</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> outOfStock</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:<br>抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.insufficientFunds(coinsNeeded: <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Handling-Errors\"><a href=\"#Handling-Errors\" class=\"headerlink\" title=\"Handling Errors\"></a>Handling Errors</h1><p>When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.<br>当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。</p>\n<p>There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.<br>在swift中有四种处理错误机制:</p>\n<pre><code>1. 向调用方法中传递这个错误\n2. 使用do-catch语句处理\n3. 把错误设置为可选型\n4.断言不会出现异常的情况下，使用try!禁止异常抛出\n</code></pre><p>When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.<br>当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字<code>try</code> 要注意 <code>try?</code>或<code>try!</code>之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。</p>\n<h2 id=\"Propagating-Errors-Using-Throwing-Functions\"><a href=\"#Propagating-Errors-Using-Throwing-Functions\" class=\"headerlink\" title=\"Propagating Errors Using Throwing Functions\"></a>Propagating Errors Using Throwing Functions</h2><p>To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&gt;).<br>函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：<code>throws</code>即可，这种方法被称为<code>throws</code>函数，<code>throws</code>关键字位置在参数之后，返回值(-&gt;)之前</p>\n<p>A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.<br>抛出函数会把错误抛给调用它的函数周期中去。</p>\n<a id=\"more\"></a>\n<p>Only throwing functions can propagate errors. Any errors thrown inside a nonthrowing function must be handled inside the function.<br>只有抛出函数能传递错误，如果不是抛出函数，它自己必须处理掉任何抛进来的错误。</p>\n<p>In the example below, the VendingMachine class has a <code>vend(itemNamed:)</code> method that throws an appropriate VendingMachineError if the requested item is not available, is out of stock, or has a cost that exceeds the current deposited amount:<br>在下面的例子中，对某个请求内容不可用时，自动售货机会通过<code>vend(itemNamed:)</code>方法抛出一个对应的<code>VendingMachineError</code>错误，缺货或超过目前的存款金额成本：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> price: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VendingMachine</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inventory = [</span><br><span class=\"line\">        <span class=\"string\">\"Candy Bar\"</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">12</span>, <span class=\"built_in\">count</span>: <span class=\"number\">7</span>),</span><br><span class=\"line\">        <span class=\"string\">\"Chips\"</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">10</span>, <span class=\"built_in\">count</span>: <span class=\"number\">4</span>),</span><br><span class=\"line\">        <span class=\"string\">\"Pretzels\"</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">7</span>, <span class=\"built_in\">count</span>: <span class=\"number\">11</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coinsDeposited = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">vend</span><span class=\"params\">(itemNamed name: String)</span></span> <span class=\"keyword\">throws</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> item = inventory[name] <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.invalidSelection</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> item.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.outOfStock</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> item.price &lt;= coinsDeposited <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.insufficientFunds(coinsNeeded: item.price - coinsDeposited)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        coinsDeposited -= item.price</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newItem = item</span><br><span class=\"line\">        newItem.<span class=\"built_in\">count</span> -= <span class=\"number\">1</span></span><br><span class=\"line\">        inventory[name] = newItem</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Dispensing \\(name)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The implementation of the <code>vend(itemNamed:)</code> method uses guard statements to exit the method early and throw appropriate errors if any of the requirements for purchasing a snack aren’t met. Because a throw statement immediately transfers program control, an item will be vended only if all of these requirements are met.<br><code>vend(itemNamed:)</code>方法的实现中使用 <code>guard语句</code>来判断，当在购买操作不符合相应条件会直接抛出相应的错误，来打断该方法的其他操作。因为<code>throw语句</code>会立即转移程序控制权，保证了机器仅出售满足所有条件的物品。</p>\n<p>Because the <code>vend(itemNamed:)</code> method propagates any errors it throws, any code that calls this method must either handle the errors—using a <code>do-catch</code> statement, <code>try?</code>, or <code>try!</code>—or continue to propagate them. For example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> in the example below is also a throwing function, and any errors that the <code>vend(itemNamed:)</code> method throws will propagate up to the point where the <code>buyFavoriteSnack(person:vendingMachine:)</code>function is called.<br>因为vend(itemNamed:)的方法抛出所有错误，所以调用该方法的函数必须处理错误（ <code>do-catch, try?, or try!</code>处理，或使用<code>try</code>向上抛出）。</p>\n<p>例如，<code>buyFavoriteSnack(person:vendingMachine:)</code>也是一个抛出函数，从<code>vend(itemNamed:)</code>方法接受到的所有错误，都会被会<code>buyFavoriteSnack(person:vendingMachine:)</code>继续抛给调用它的函数中。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> favoriteSnacks = [</span><br><span class=\"line\">    <span class=\"string\">\"Alice\"</span>: <span class=\"string\">\"Chips\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Bob\"</span>: <span class=\"string\">\"Licorice\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Eve\"</span>: <span class=\"string\">\"Pretzels\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buyFavoriteSnack</span><span class=\"params\">(person: String, vendingMachine: VendingMachine)</span></span> <span class=\"keyword\">throws</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snackName = favoriteSnacks[person] ?? <span class=\"string\">\"Candy Bar\"</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> vendingMachine.vend(itemNamed: snackName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this example, the <code>buyFavoriteSnack(person: vendingMachine:)</code> function looks up a given person’s favorite snack and tries to buy it for them by calling the <code>vend(itemNamed:)</code> method. Because the <code>vend(itemNamed:)</code> method can throw an error, it’s called with the trykeyword in front of it.<br><code>buyFavoriteSnack(person: vendingMachine:)</code> 函数查找买家中意的snake，并<code>vend(itemNamed:)</code>调用尝试购买。使用在方法前使用<code>try</code>关键字来抛出异常，并向上传递。</p>\n<p>Throwing initializers can propagate errors in the same way as throwing functions. For example, the initializer for the <code>PurchasedSnackstructure</code> in the listing below calls a throwing function as part of the initialization process, and it handles any errors that it encounters by propagating them to its caller.<br>抛出构造器也能向抛出函数一样传递错误，例如：<code>PurchasedSnackstructure</code>的构造器中调用了抛出函数：<code>vend(itemNamed:)</code>，抛出构造器可以通过向上传递来处理这些错误。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PurchasedSnack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, vendingMachine: <span class=\"type\">VendingMachine</span>) <span class=\"keyword\">throws</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> vendingMachine.vend(itemNamed: name)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Handling-Errors-Using-Do-Catch\"><a href=\"#Handling-Errors-Using-Do-Catch\" class=\"headerlink\" title=\"Handling Errors Using Do-Catch\"></a>Handling Errors Using Do-Catch</h2><p>You use a do-catch statement to handle errors by running a block of code. If an error is thrown by the code in the <code>do</code> clause, it is matched against the <code>catch</code>clauses to determine which one of them can handle the error.<br>使用<code>do-catch</code>语句通过运行代码块来处理错误。在<code>do</code>分句中如果抛出了一个错误，那么就可以在<code>catch</code>分句中进行处理的匹配到错误<br>Here is the general form of a <code>do-catch</code>statement:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> expression</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern <span class=\"number\">2</span> <span class=\"keyword\">where</span> condition &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>You write a pattern after catch to indicate what errors that clause can handle. If a <code>catch</code> clause doesn’t have a pattern, the clause matches any <code>error</code> and binds the <code>error</code> to a local constant named error. For more information about pattern matching, see Patterns.<br>在关键字catch后边跟随匹配模式，这个<code>catch分句</code>就会处理匹配到的错误，如果关键字<code>catch分句</code>没有任何匹配模式，那么这个分句将会匹配到所有错误，并把这些错误信息赋值给系统常量<code>error</code>。</p>\n<p>The <code>catch</code>clauses don’t have to handle every possible error that the code in its <code>do</code> clause can throw. If none of the catch clauses handle the error, the error propagates to the surrounding scope. However, the error must be handled by some surrounding scope—either by an enclosing <code>do-catch</code> clause that handles the error or by being inside a throwing function. For example, the following code handles all three cases of the <code>VendingMachineError</code>enumeration, but all other errors have to be handled by its surrounding scope:<br><code>catch分句</code>不必对<code>do分句</code>中的代码可能抛出每一个的错误，如果某个错误没有被<code>catch分句</code>匹配到处理，这个错误将会传递到调用它的函数周期中，这个错误必须在这个函数周期中处理，或通过<code>do-catch语句</code>来处理，或通过内部的抛出函数处理。</p>\n<p>例如，下面的代码处理<code>VendingMachineError</code>枚举类中的三个错误<code>cases</code>，但其他的错误都是由其周边范围处理：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vendingMachine = <span class=\"type\">VendingMachine</span>()</span><br><span class=\"line\">vendingMachine.coinsDeposited = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> buyFavoriteSnack(person: <span class=\"string\">\"Alice\"</span>, vendingMachine: vendingMachine)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.invalidSelection &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Invalid Selection.\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.outOfStock &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Out of Stock.\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.insufficientFunds(<span class=\"keyword\">let</span> coinsNeeded) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Insufficient funds. Please insert an additional \\(coinsNeeded) coins.\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints \"Insufficient funds. Please insert an additional 2 coins.\"</span></span><br></pre></td></tr></table></figure></p>\n<p>In the above example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> function is called in a try expression, because it can throw an error. If an error is thrown, execution immediately transfers to the <code>catch</code> clauses, which decide whether to allow propagation to continue. If no error is thrown, the remaining statements in the do statement are executed.<br>在上述代码中因为<code>buyFavoriteSnack(person:vendingMachine:)</code>函数会抛出错误异常，所以要在try表达式中调用。如果抛出异常就会立马执行是否继续传递的catch分句，如果没有抛出异常，会保持do分句中的代码正常进行。</p>\n<h2 id=\"Converting-Errors-to-Optional-Values\"><a href=\"#Converting-Errors-to-Optional-Values\" class=\"headerlink\" title=\"Converting Errors to Optional Values\"></a>Converting Errors to Optional Values</h2><p>You use try? to handle an error by converting it to an optional value. If an error is thrown while evaluating the <code>try?</code> expression, the value of the expression is nil. For example, in the following code x and y have the same value and behavior:<br>使用<code>try?表达式</code>处理错误，是通过把错误转换为<code>可选值(?)类型</code>处理。在<code>try?</code>表达式中出现抛出错误时，这个表达式的值<code>=nil</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someThrowingFunction</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"keyword\">try</span>? someThrowingFunction()</span><br><span class=\"line\"><span class=\"keyword\">let</span> y: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    y = <span class=\"keyword\">try</span> someThrowingFunction()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    y = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If someThrowingFunction() throws an error, the value of x and y is nil. Otherwise, the value of x and y is the value that the function returned. Note that x and y are an optional of whatever type someThrowingFunction() returns. Here the function returns an integer, so xand y are optional integers.<br>如果函数<code>someThrowingFunction()</code>抛出异常，<code>x,y = nil</code>，否则:<code>x,y</code>就时函数<code>return</code>的值。</p>\n<blockquote>\n<p>注意：<code>x,y</code>是一个可选的someThrowingFunction()返回类型。在这里函数返回integer，那么x,y是可选的integer类型。</p>\n</blockquote>\n<p>Using <code>try?</code> lets you write concise error handling code when you want to handle all errors in the same way. For example, the following code uses several approaches to fetch data, or returns nil if all of the approaches fail.<br>当用这种方式来处理所有错误时，使用<code>try?</code>表达式能写更简洁的错误处理代码，例如：下面的代码使用几种方法来获取数据，如果这些方法失败就会返回nil。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetchData</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Data</span>? &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data = <span class=\"keyword\">try</span>? fetchDataFromDisk() &#123; <span class=\"keyword\">return</span> data &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data = <span class=\"keyword\">try</span>? fetchDataFromServer() &#123; <span class=\"keyword\">return</span> data &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Disabling-Error-Propagation\"><a href=\"#Disabling-Error-Propagation\" class=\"headerlink\" title=\"Disabling Error Propagation\"></a>Disabling Error Propagation</h2><p>Sometimes you know a throwing function or method won’t, in fact, throw an error at runtime. On those occasions, you can write <code>try!</code> before the expression to disable error propagation and wrap the call in a runtime assertion that no error will be thrown. If an error actually is thrown, you’ll get a runtime error.<br>有时你认为不会出现异常的抛出函数或方法，但事实上，却在运行时抛出异常了。在其他情况下，可以使用<code>try!</code>表达式来禁止错误传递，并且十分肯定断言在运行时不会有异常抛出。如果有异常抛出，就会得到一个运行时错误。</p>\n<p>For example, the following code uses a <code>loadImage(atPath:)</code> function, which loads the image resource at a given path or throws an error if the image can’t be loaded. In this case, because the image is shipped with the application, no error will be thrown at runtime, so it is appropriate to disable error propagation.<br>例如：使用<code>loadImage(atPath:)</code>函数要么通过这个路径加载image，要么image加载失败抛出一个错误。在这种情况下，因为<code>image</code>在app资源目录<code>resources</code>中，所以在运行时肯定不会有异常抛出。因此可以使用<code>try!</code>禁止错误传递。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> photo = <span class=\"keyword\">try</span>! loadImage(atPath: <span class=\"string\">\"./Resources/John Appleseed.jpg\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Specifying-Cleanup-Actions\"><a href=\"#Specifying-Cleanup-Actions\" class=\"headerlink\" title=\"Specifying Cleanup Actions\"></a>Specifying Cleanup Actions</h2><p>You use a defer statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as return or break. For example, you can use a defer statement to ensure that file descriptors are closed and manually allocated memory is freed.<br>在代码执行离开当前代码块之前，使用一个“defer语句”来执行一组语句。defer语句让做一些必要的清理操作，在执行如何离开当前代码块：因为抛出异常或者因为<code>return，break语句</code>导致。例如：使用<code>defer语句</code>执行关闭文件和内存的释放操作，来确保清理操作完成。</p>\n<p>A defer statement defers execution until the current scope is exited. This statement consists of the defer keyword and the statements to be executed later. The deferred statements may not contain any code that would transfer control out of the statements, such as a break or a return statement, or by throwing an error. Deferred actions are executed in reverse order of how they are specified—that is, the code in the first defer statement executes after code in the second, and so on.<br><code>defer语句</code>推迟在直到当前作用域推出时，再执行。<code>defer语句</code>由<code>defer</code>关键字和一些清理操作语句组成。<code>defer语句</code>不包含transfer control out of the statements例如<code>（return，break，throw）</code>等。</p>\n<p><code>defer</code>延迟操作是按照指定的顺序执行的，就是先执行最后一个<code>defer语句</code>中的代码之后，再执行第倒数第二个<code>defer语句</code>的代码，以此类推，倒叙清理退场。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processFile</span><span class=\"params\">(filename: String)</span></span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> exists(filename) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> file = <span class=\"keyword\">open</span>(filename)</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">            close(file)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> line = <span class=\"keyword\">try</span> file.readline() </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Work with the file.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"comment\">// close(file) is called here, at the end of the scope.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The above example uses a defer statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.<br>使用defer语句，确保了在open的同时与之相关的还有close。</p>\n<p>You can use a defer statement even when no error handling code is involved.<br>即使在没有涉及错误处理代码的时候，也可以使用“延迟”语句。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[{"name":"安全","path":"api/tags/安全.json"}]},{"title":"在OC和swift中区分多个targets","slug":"iOS/在OC和swift中区分多个targets","date":"2017-01-11T13:49:33.000Z","updated":"2017-08-17T14:54:01.000Z","comments":true,"path":"api/articles/iOS/在OC和swift中区分多个targets.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"build-setting预编译位置\"><a href=\"#build-setting预编译位置\" class=\"headerlink\" title=\"build setting预编译位置\"></a>build setting预编译位置</h2><ol>\n<li>Preprocessor Macros</li>\n<li>Other Swift Flags</li>\n</ol>\n<p>为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。</p>\n<h3 id=\"Objective-C项目中Preprocessor-Macros\"><a href=\"#Objective-C项目中Preprocessor-Macros\" class=\"headerlink\" title=\"Objective-C项目中Preprocessor Macros\"></a>Objective-C项目中Preprocessor Macros</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>添加位置：选择项目中对应的target名-&gt;在<code>Build Settings</code>下<code>Apple LLVM 7.0 - Preprocessing</code>-&gt;<code>Preprocessor Macros</code>。<br>添加变量：在Rebug和Release区域添加一个变量<code>DEVELOPMENT</code><br>    对应target1: 设<code>DEVELOPMENT=1</code>表示开发版<br>    对应target2: 设<code>DEVELOPMENT=0</code>表示生产版</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>根据已配置的宏DEV_VERSION，我们可以在代码中利用它动态地编译项目。下面是一个简单的例子：<br>Objective-C中使用<code>＃if</code>检查<code>DEVELOPMENT</code>的环境，并相应的设置URLs/ API密钥。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#if DEVELOPMENT</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://dev.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"DI2023409jf90ew\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://prod.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"71a629j0f090232\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Swift中Other-Swift-Flags\"><a href=\"#Swift中Other-Swift-Flags\" class=\"headerlink\" title=\"Swift中Other Swift Flags\"></a>Swift中Other Swift Flags</h3><p>对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。</p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>选中开发target，添加一个标识表示开发版本<br>选中<code>target</code> -&gt; <code>Build Setting</code>-&gt;<code>Swift Compiler - Custom Flags</code>-&gt;将值设为<code>-DDEVELOPMENT</code>表示这个target作为开发版本。</p>\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>Swift中你仍然可以使用<code>#if</code>判定build的参数动态编译。然而，除了使用<code>#define</code>定义基本常量，在swift中我们也可以用<code>let</code>定义一个全局常量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">DEVELOPMENT</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://dev.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"DI2023409jf90ew\"</span></span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://prod.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"71a629j0f090232\"</span></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cocoachina.com/ios/20160331/15832.html\" target=\"_blank\" rel=\"noopener\">参照</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"配置","path":"api/categories/配置.json"}],"tags":[{"name":"targets","path":"api/tags/targets.json"}]},{"title":"Swift 语言指南[转]","slug":"SwiftGuide","date":"2017-01-03T17:05:20.000Z","updated":"2017-01-23T18:33:57.000Z","comments":true,"path":"api/articles/SwiftGuide.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Swift-语言指南\"><a href=\"#Swift-语言指南\" class=\"headerlink\" title=\"Swift 语言指南\"></a>Swift 语言指南</h1><blockquote>\n<p><span style=\"color:lightgray;font-size:12px\"><a href=\"http://weibo.com/swiftlanguage\" target=\"_blank\" rel=\"noopener\">@SwiftLanguage</a> 更新于 2016-6-6，更新内容详见 <a href=\"https://github.com/ipader/SwiftGuide/blob/master/weekly/Issue-55.md\" target=\"_blank\" rel=\"noopener\">Issue 55</a>。往期更新回顾详见《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/weekly/README.md\" target=\"_blank\" rel=\"noopener\">收录周报</a>》</span></p>\n</blockquote>\n<p>　　<a href=\"https://github.com/ipader/SwiftGuide/blob/master/2014%20letter.md\" target=\"_blank\" rel=\"noopener\">这份指南</a>汇集了 Swift 语言主流学习资源，并以开发者的视角整理编排。对于精选项目及文章，可直接访问《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">Swift 项目精选</a>》和《<a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md\" target=\"_blank\" rel=\"noopener\">Swift 文章精选</a>》。还有开发者们自己维护的《<a href=\"https://github.com/ipader/SwiftGuide/wiki/%E5%BC%80%E5%8F%91%E8%80%85%E3%80%81%E9%A1%B9%E7%9B%AE%E3%80%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" target=\"_blank\" rel=\"noopener\">开发者、项目、最佳实践</a>》。当然也不能错过那些活跃、优秀的《<a href=\"https://github.com/ipader/SwiftGuide/wiki/%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E9%A1%B5\" target=\"_blank\" rel=\"noopener\">开发者个人资料页</a>》。</p>\n<h2 id=\"入门指引\"><a href=\"#入门指引\" class=\"headerlink\" title=\"入门指引\"></a>入门指引</h2><p>苹果为 <a href=\"http://www.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift</a>（<a href=\"http://www.apple.com/cn/swift/\" target=\"_blank\" rel=\"noopener\">中文介绍</a>）开发者提供的<a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">官方文档入口</a>，包括 <a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">概述</a>，<a href=\"https://developer.apple.com/swift/blog/\" target=\"_blank\" rel=\"noopener\">博客</a>（<a href=\"https://github.com/ipader/SwiftGuide/tree/master/mirror/Swift%20Blog%20-%20Apple%20Developer\" target=\"_blank\" rel=\"noopener\">中文镜像</a>）及 <a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">开发资源</a>。其中以下几份文档（Swift 2.1）为入门级必备（<a href=\"https://itunes.apple.com/us/book-series/swift-programming-series/id888896989?mt=11\" target=\"_blank\" rel=\"noopener\">iBooks 版</a>）：</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift Programming Language</a>（<a href=\"http://gg.swiftguide.cn\" target=\"_blank\" rel=\"noopener\">中文版</a>｜<a href=\"http://wiki.jikexueyuan.com/download/swift/pdf/\" target=\"_blank\" rel=\"noopener\">PDF 版</a> By <a href=\"http://weibo.com/swiftguide\" target=\"_blank\" rel=\"noopener\">SwiftGG翻译组</a>）</p>\n</li>\n<li><p><a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps</a> </p>\n</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C</a>（<a href=\"https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/UsingSwiftwithCocoaandObjective-C%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C.md\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/cocoachina\" target=\"_blank\" rel=\"noopener\">@CocoaChina</a>）</li>\n</ul>\n<p><em>苹果同时也维护着相应 Beta 版（Swift 2.2）文档：<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\" target=\"_blank\" rel=\"noopener\">Swift Programming Language</a>，<a href=\"https://developer.apple.com/library/prerelease/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html\" target=\"_blank\" rel=\"noopener\">Start Developing iOS Apps</a>，<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html\" target=\"_blank\" rel=\"noopener\">Using Swift with Cocoa and Objective-C</a>。</em></p>\n<p>学习实践的角度，标准库示例代码 <a href=\"https://developer.apple.com/sample-code/swift/downloads/Standard-Library.zip\" target=\"_blank\" rel=\"noopener\">Swift Standard Library.playground</a> 是很棒的学习伴侣。</p>\n<p>教程方面，苹果力荐了斯坦福课程 <a href=\"https://itunes.com/StanfordSwift\" target=\"_blank\" rel=\"noopener\">Stanford University: Developing iOS 8 Apps with Swift</a>（<a href=\"http://open.163.com/special/opencourse/ios8.html\" target=\"_blank\" rel=\"noopener\">中文字幕版</a> By <a href=\"http://weibo.com/163open\" target=\"_blank\" rel=\"noopener\">@网易公开课</a>）</p>\n<p>除以上所涉及入门级文档，<a href=\"https://developer.apple.com/library/ios/navigation/\" target=\"_blank\" rel=\"noopener\">iOS Developer Library</a> 还为开发者提供了更庞大、系统化的开发文档支持。</p>\n<p>以下列举了几份已有第三方中文翻译文档：</p>\n<ul>\n<li><a href=\"https://swift.org/documentation/api-design-guidelines/\" target=\"_blank\" rel=\"noopener\">API Design Guidelines</a>（<a href=\"http://swift.gg/2016/05/18/api-design-guidelines/\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/u/5174822990\" target=\"_blank\" rel=\"noopener\">@SwiftGG翻译组</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/index.html\" target=\"_blank\" rel=\"noopener\">App Extension Programming Guide</a>（<a href=\"https://github.com/ipader/SwiftGuide/tree/master/mirror/App%20Extension%20Programming%20Guide\" target=\"_blank\" rel=\"noopener\">中译镜像</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html\" target=\"_blank\" rel=\"noopener\">iOS Human Interface Guidelines</a>（<a href=\"https://isux.tencent.com/?s=iOS+9+%E4%BA%BA%E6%9C%BA%E7%95%8C%E9%9D%A2%E6%8C%87%E5%8D%97\" target=\"_blank\" rel=\"noopener\">中文版</a>｜<a href=\"http://ixdc.org/2016/files/ISUX[%E8%AF%91]iOS9%20human%20Interface%20Guideline.pdf\" target=\"_blank\" rel=\"noopener\">PDF 版</a> By <a href=\"http://weibo.com/txisux\" target=\"_blank\" rel=\"noopener\">@腾讯ISUX</a>）</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"noopener\">HomeKit Developer Guide</a>（<a href=\"http://www.cocoachina.com/ios/20150324/11411.html\" target=\"_blank\" rel=\"noopener\">中文版</a> By <a href=\"http://weibo.com/cocoachina\" target=\"_blank\" rel=\"noopener\">@CocoaChina</a>）</li>\n</ul>\n<p>值得称道的还有：苹果为 <a href=\"https://developer.apple.com/videos/\" target=\"_blank\" rel=\"noopener\">Apple TV Tech Talks</a> 和 <a href=\"https://developer.apple.com/videos/wwdc2015/\" target=\"_blank\" rel=\"noopener\">WWDC 2015</a> 的视频添加简体中文字幕，从而方便中国开发者观看来自官方的权威技术分享。</p>\n<p>有关于 Swift 开源及跨平台开发，可以关注 <a href=\"https://swift.org/\" target=\"_blank\" rel=\"noopener\">swift.org</a></p>\n<h2 id=\"教程文章\"><a href=\"#教程文章\" class=\"headerlink\" title=\"教程文章\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md\" target=\"_blank\" rel=\"noopener\">教程文章</a></h2><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">开源项目</a></h2><h2 id=\"推荐网站\"><a href=\"#推荐网站\" class=\"headerlink\" title=\"推荐网站\"></a>推荐网站</h2><ul>\n<li><strong>苹果官方</strong></li>\n<li><a href=\"https://developer.apple.com/swift/\" target=\"_blank\" rel=\"noopener\">Swift</a>：Swift 概述、博客以及开发资源。</li>\n<li><a href=\"https://swift.org/\" target=\"_blank\" rel=\"noopener\">swift.org</a>：开源后独立出来的 Swift 开源社区。</li>\n<li><a href=\"https://github.com/apple\" target=\"_blank\" rel=\"noopener\">GitHub:apple</a>：苹果在 GitHub 上的开源项目。</li>\n<li><a href=\"https://github.com/apple/swift\" target=\"_blank\" rel=\"noopener\">GitHub:apple/swift</a>：swift 语言在 GitHub 上的开源项目。</li>\n<li><a href=\"https://github.com/ksm/SwiftInFlux\" target=\"_blank\" rel=\"noopener\">ksm/SwiftInFlux</a>：作者（Karol Mazur）将 Apple Developer Forums 上有关 Swift 特性、缺陷及变更讨论分类汇总并更新到 GitHub，具有很好的可读性。从中可以一窥 Swift 缺陷及未来潜在地变化。最关键地是有 Chris Lattner 及核心团队答疑解惑。</li>\n<li><del><a href=\"https://www.raywenderlich.com/\" target=\"_blank\" rel=\"noopener\">raywenderlich.com</a>(<a href=\"https://www.raywenderlich.com/zh-hans/\" target=\"_blank\" rel=\"noopener\">中文版</a>)：由Ray Wenderlich创建，专注于开发高质量编程指南（近期优质Swift文章及视频教程不断），著名的iOS/OS X博客及开发教程网站，非常适合新手学习。近期第一时间出了<a href=\"https://www.raywenderlich.com/74832/three-new-swift-books\" target=\"_blank\" rel=\"noopener\">三本 Swift 新书</a>。</del></li>\n<li><a href=\"http://www.natashatherobot.com/\" target=\"_blank\" rel=\"noopener\">Natasha The Robot</a>： 时髦码农不容错过的 Swift 开发实战教程类网站。为了简化学习复杂性，每一篇文章涵盖技术点单一又独立，配以开发步骤、运行结果以及代码等标准方式教授。难能可贵的是，它往往出品“追剧式”（最新开发特性或API跟进式）教程，实在是开发者必藏精品网站。</li>\n<li><a href=\"http://nshipster.com/\" target=\"_blank\" rel=\"noopener\">NShipster</a> (<a href=\"http://nshipster.cn/\" target=\"_blank\" rel=\"noopener\">中译版</a>：<a href=\"http://weibo.com/croath\" target=\"_blank\" rel=\"noopener\">@刘镇夫</a>，<a href=\"http://nshipster.cn/translators/april-peng/\" target=\"_blank\" rel=\"noopener\">April Peng</a>，<a href=\"http://weibo.com/leelejia\" target=\"_blank\" rel=\"noopener\">@李乐佳</a>，<a href=\"http://weibo.com/fallhunter\" target=\"_blank\" rel=\"noopener\">@程序员付恒</a> 等翻译)：著名开源作者 <a href=\"https://github.com/mattt\" target=\"_blank\" rel=\"noopener\">Matt Thompson</a> 创建的开发技术博客网站，他开发了 <a href=\"https://github.com/afnetworking/afnetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> 网络库，也是非常多产的开源作者。更多了解参考：<a href=\"http://www.fallhunter.com/p/10709\" target=\"_blank\" rel=\"noopener\">《COCOA 潮人 MATTT THOMPSON》</a> By <a href=\"http://weibo.com/fallhunter\" target=\"_blank\" rel=\"noopener\">@程序员付恒</a></li>\n<li><a href=\"http://jamesonquave.com/blog/\" target=\"_blank\" rel=\"noopener\">jamesonquave.com</a>：移动开发者，优秀个人博客（近期文章同样关注于Swift 语言，写得很优质）。同时他将于8/30发布一本新书<a href=\"http://jamesonquave.com/swiftebook/\" target=\"_blank\" rel=\"noopener\">《Developing iOS 8 Apps in Swift》</a> (Learn To Make Real World iOS 8 Apps)及视频教程。</li>\n<li><a href=\"https://www.objc.io/\" target=\"_blank\" rel=\"noopener\">objc.io</a>(<a href=\"http://objccn.io\" target=\"_blank\" rel=\"noopener\">中译版 By @onevcat 及其朋友们</a>)：”关于 Objective-C 最佳实践和先进技术的期刊。 由 Chris Eidhof, Daniel Eggert 和 Florian Kugler 成立于柏林。我们成立 objc.io 的目的是针对深入的、跟所有 iOS 和 OS X 开发者相关的技术话题创造一个正式的平台。“</li>\n<li><a href=\"http://www.ioscreator.com/\" target=\"_blank\" rel=\"noopener\">iOSCreator</a>：这类开发指引式教程对于初学者来讲，是直接明了的有效学习资源。推荐者<a href=\"http://weibo.com/qq184675420\" target=\"_blank\" rel=\"noopener\">@荧星诉语</a></li>\n<li><a href=\"https://iosdevweekly.com/\" target=\"_blank\" rel=\"noopener\">iOS Dev Weekly</a>：收录一周以来 iOS 开发资讯链接，并于周五发布。由 <a href=\"https://twitter.com/daveverwer\" target=\"_blank\" rel=\"noopener\">Dave Verwer</a> 创办，他是一位 iPhone 和 iPad 开发者以及培训师。</li>\n<li><a href=\"http://www.appcoda.com/\" target=\"_blank\" rel=\"noopener\">Appcoda.com</a>：质量很高的一个 iOS 开发教程站，其中<a href=\"http://www.appcoda.com/ios-programming-course/\" target=\"_blank\" rel=\"noopener\">iOS Programming Course</a>这个专题很适合刚接触 iOS 开发的新手学习。</li>\n<li><a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">中文 iOS/Mac 开发博客列表</a>：By <a href=\"http://weibo.com/tangqiaoboy\" target=\"_blank\" rel=\"noopener\">@唐巧_body</a></li>\n<li><a href=\"http://www.devtalking.com/\" target=\"_blank\" rel=\"noopener\">devtalking.com</a>：高产的中译博客。翻译了官方博客 Swift Blog - Apple Developer,《App Extension Programming Guide》。参与翻译了《Swift Programming Language》等。</li>\n<li><a href=\"http://swift.gg/\" target=\"_blank\" rel=\"noopener\">SwiftGG</a>：一个走心的 Swift 翻译组，由《The Swift Programming Language》中文版翻译团队原班人马组成， 翻译的文章来源于国外的优秀 Swift 网站和博客，且全部获得作者和网站授权。</li>\n<li><a href=\"http://www.jessesquires.com\" target=\"_blank\" rel=\"noopener\">Swift Weekly Brief</a>：“这个博客现在每周会将Swift开源中的重要讨论和提交整理成Open source Swift weekly brief，这对一线开发者尽早了解这门语言的动态情报很有帮助。By <a href=\"http://weibo.com/cuikang82\" target=\"_blank\" rel=\"noopener\">@崔康总编</a> ”。来源：<a href=\"http://www.jessesquires.com\" target=\"_blank\" rel=\"noopener\">Jesse Squires</a></li>\n<li><a href=\"http://swiftdevweekly.co/\" target=\"_blank\" rel=\"noopener\">Swift Developer Weekly</a>:这个网站每周推送最新的技术文章和书本推荐到你的email，由Phil Wright创办。</li>\n<li><p><a href=\"http://iosdevtips.co\" target=\"_blank\" rel=\"noopener\">iosdevtips.co</a>：iOS Development Tips</p>\n</li>\n<li><p><strong>资源合集</strong></p>\n<blockquote>\n<p>以下是其它开发者社区或 Swift 爱好者整理的有关 Swift 语言学习的资源列表。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/SwiftEducation\" target=\"_blank\" rel=\"noopener\">SwiftEducation</a>：“这是建立在 GitHub 上的一个 Swift 学习资料汇集，包括了有关幻灯和多个练手的应用程序源码。By @极客头条”。的确有不少基础实用的好<a href=\"https://github.com/SwiftEducation/presentations\" target=\"_blank\" rel=\"noopener\">教程</a>。这对于基础学起的同学有福了。</p>\n</li>\n<li><a href=\"https://github.com/hsavit1/Awesome-Swift-Education\" target=\"_blank\" rel=\"noopener\">Awesome-Swift-Education</a>：整理地如此美妙的学习资源，实在让人太欢喜了。</li>\n<li><a href=\"http://www.ioscookies.com/\" target=\"_blank\" rel=\"noopener\">iOS Cookies</a>：分类合理、排序靠谱的 Swift 开源类库集合。</li>\n<li><a href=\"https://github.com/matteocrippa/awesome-swift\" target=\"_blank\" rel=\"noopener\">matteocrippa/awesome-swift</a>：这个版本的 Swift 资源集合内容丰富，分类也不错。作者：<a href=\"https://github.com/matteocrippa\" target=\"_blank\" rel=\"noopener\">Matteo Crippa</a></li>\n<li><a href=\"http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites/1\" target=\"_blank\" rel=\"noopener\">适合iOS开发者的 15 大网站推荐</a>：的确很全、很主流的国外 iOS 开发者网站。</li>\n<li><a href=\"http://gold.xitu.io/#/tag/Swift\" target=\"_blank\" rel=\"noopener\">掘金 Swift 版块</a></li>\n<li><a href=\"http://weekly.manong.io/issues/33?ref=swift\" target=\"_blank\" rel=\"noopener\">码农周刊 －《Swift 特刊》</a></li>\n<li><a href=\"http://www.cocoachina.com/bbs/read.php?tid=204512\" target=\"_blank\" rel=\"noopener\">CocoaChina －《Swift 新手入门汇集帖》</a></li>\n<li><a href=\"http://code.csdn.net/news/2820075\" target=\"_blank\" rel=\"noopener\">CSDN_CODE －《Swift 编程语言资料大合集》</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/06/apple-swift-learning-resources\" target=\"_blank\" rel=\"noopener\">InfoQ －《学习苹果 Swift 语言的一些在线资源（英文）》</a></li>\n<li><a href=\"https://github.com/Lax/iOS-Swift-Demos/wiki\" target=\"_blank\" rel=\"noopener\">刘兰涛 －《Swift 学习资源》</a> By <a href=\"http://weibo.com/u/1653644220\" target=\"_blank\" rel=\"noopener\">@懒桃儿吃桃儿</a></li>\n<li><a href=\"http://www.learnswift.tips/\" target=\"_blank\" rel=\"noopener\">learnswift.tips</a>：国外主流 Swift 学习资源集合。</li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">Awesome iOS</a>：一个 iOS 的各类优秀的开源项目集合。真不错！可惜Swift开源项目资源不足。</li>\n<li><a href=\"http://iosdevelopertips.com/\" target=\"_blank\" rel=\"noopener\">iOS Developer Tips</a>：还是有关 iOS 的开发资源及文章合集。</li>\n<li><a href=\"https://github.com/Wolg/awesome-swift\" target=\"_blank\" rel=\"noopener\">Wolg/awesome-swift</a>：一位俄罗斯朋友分类整理的 Swift 资源列表（有持续更新）。</li>\n<li><a href=\"https://github.com/Aufree/trip-to-iOS\" target=\"_blank\" rel=\"noopener\">Aufree/trip-to-iOS</a>：显然作者很用心的做了非常深入的整理。它对于开发者拓展学习范围及开发知识面非常有益。</li>\n<li><a href=\"https://swift.zeef.com/robin.eggenkamp\" target=\"_blank\" rel=\"noopener\">Robin Eggenkamp - Awesome Swift</a>：“一个收集了很多 Swift 开发资源的网站”。</li>\n<li><a href=\"https://github.com/hehonghui/iOS-tech-frontier\" target=\"_blank\" rel=\"noopener\">iOS 开发技术前线</a>：“一个定期翻译、发布国内外iOS优质的技术、开源库、软件架构设计、测试等文章的开源项目”。主要翻译来源 Ray Wenderlich，App Coda，Medium。来源：<a href=\"http://weibo.com/u/5589212242\" target=\"_blank\" rel=\"noopener\">@开发技术前线</a></li>\n<li><a href=\"http://www.cocoachina.com/ios/20150626/11348.html\" target=\"_blank\" rel=\"noopener\">11个超棒的 iOS 开发学习网站</a>：还算比较主流的归纳。不过，缺了raywenderlich.com 和 ioscreator.com 这两个重量级教程网站实在是不应该啊。</li>\n</ul>\n<hr>\n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2><h3 id=\"1-编程工具\"><a href=\"#1-编程工具\" class=\"headerlink\" title=\"1. 编程工具\"></a>1. 编程工具</h3><ul>\n<li><a href=\"https://developer.apple.com/swift/resources/\" target=\"_blank\" rel=\"noopener\">Xcode 下载</a>：苹果应用集成开发环境。支持 C/C++, Objective C, Swift 等。不用购买开发者计划，直接下载。</li>\n<li><a href=\"http://macromates.com/\" target=\"_blank\" rel=\"noopener\">Textmate</a>：Mac OS X 上一个可高度自定义的编辑器，尤其在我想做出一个快速改变但又不想等待 Xcode 加载的时候。该工具目前已经<a href=\"https://github.com/textmate/textmate\" target=\"_blank\" rel=\"noopener\">开源</a></li>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">Mou ($)</a>：OS X 上一款 Markdown 的编辑器。非常适用于编写自述文件、变更日志以及其他方面的内容。作者：<a href=\"http://chenluois.com/\" target=\"_blank\" rel=\"noopener\">罗晨</a></li>\n<li><a href=\"http://www.sublimetext.com/\" target=\"_blank\" rel=\"noopener\">Sublime Text ($)</a>：Mac OS X 上另一款非常受欢迎的轻量级，可高度自定义的编辑器。</li>\n<li><a href=\"http://www.runswiftlang.com/\" target=\"_blank\" rel=\"noopener\">RunSwift</a>:正在犹豫是否入手苹果电脑开始一段 Swift 编程旅程的同学们，或仅仅为了试验一段简单 Swift 代码又懒得打开 Xcode，可以试试这款 Web 版 Swift 编译环境 RunSwift。</li>\n<li><a href=\"http://infinitapps.com/bezel/\" target=\"_blank\" rel=\"noopener\">InfinitApps - Bezel</a>：“嫌 Xcode 6 目前提供的 Watch 模拟器不够直观？Bezel 是一个用于视觉预览 WatchKit 所开发程序效果的小工具，前提是你安装了 xScope 软件（Mac端）或 xScopeMirror（iPhone端）。 By <a href=\"http://weibo.com/twios\" target=\"_blank\" rel=\"noopener\">@WatchKit开发</a>”</li>\n<li><a href=\"https://github.com/jas/playground\" target=\"_blank\" rel=\"noopener\">Markdown -&gt; Playground</a>：该开源项目可将内含有 Swift 代码的 Markdown 自动转换为 Xcode Playgrounds 文件。喜欢用 Markdown 编辑的同学很激动吧。P.S. 这款工具写于 NodeJS，原因作者有交待。</li>\n<li><a href=\"https://autolayoutconstraints.com\" target=\"_blank\" rel=\"noopener\">iOS/Mac Autolayout Constraints</a>：这个工具不错，很直观，布局时可以省不少工夫。推荐者：<a href=\"http://weibo.com/qq184675420\" target=\"_blank\" rel=\"noopener\">@荧星诉语</a></li>\n<li><a href=\"https://appscreens.io/yK7cLuBNij\" target=\"_blank\" rel=\"noopener\">在线生成 AppStore 审核用截图</a>：便捷的生产力工具。免费，易操作，可自定义。</li>\n<li><a href=\"https://swiftlang.ng.bluemix.net/#/repl\" target=\"_blank\" rel=\"noopener\">IBM Swift Sandbox</a>：IBM的在线Swift网站，需要翻墙。</li>\n<li><a href=\"http://swiftstub.com/\" target=\"_blank\" rel=\"noopener\">SwiftStub</a>：另外一个Swift在线练习网站。</li>\n</ul>\n<h3 id=\"2-代码管理\"><a href=\"#2-代码管理\" class=\"headerlink\" title=\"2. 代码管理\"></a>2. 代码管理</h3><ul>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>：声望日盛的资源分享之地。</li>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub for Mac</a>：一个设计的非常美观的 git 客户端，不能取代你从命令行获得的所有功能，但使用起来非常简单。</li>\n<li><a href=\"https://gitcafe.com/\" target=\"_blank\" rel=\"noopener\">GitCafe</a>：GitCafe is a source code hosting service based on version control system Git。国内的代码托管服务，基于 Git，值得一提的是最近也推出了和 GitHub Pages 类似的服务 Gitcafe Pages。因为是在国内，所以相比较 GitHub 有速度优势，在网络环境差的情况下也许可以作为 GitHub 的备用。</li>\n<li><a href=\"https://bitbucket.org/\" target=\"_blank\" rel=\"noopener\">Bitbucket</a>：国外的代码托管服务，不同于 GitHub 的是，Bitbucket 可以免费建立 private 项目。</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>：分布式版本控制系统和源码管理系统，其优点是：快和简单易用。对于新手来说，可在此查看免费电子书籍。</li>\n<li><a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SourceTree</a>：A free Git &amp; Mercurial client for Windows or Mac.免费的Git和Mercurial客户端，当然也可以配合Bitbucket使用。</li>\n</ul>\n<h3 id=\"3-Xcode-插件\"><a href=\"#3-Xcode-插件\" class=\"headerlink\" title=\"3. Xcode 插件\"></a>3. Xcode 插件</h3><ul>\n<li><a href=\"http://beta.cocoapods.org/\" target=\"_blank\" rel=\"noopener\">CocoaPods</a>：第三方库的管理利器，允许你简单地把第三方库整合进自己的应用中。对我个人来说，我基本上每个项目都使用 CocoaPods。</li>\n<li><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">CocoaPods Xcode Plugin</a>：一款 Xcode 插件，允许你直接从 Xcode 管理 CocoaPod 依赖。</li>\n<li><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">onevcat/VVDocumenter-Xcode</a>：快捷注释 Xcode 插件。By <a href=\"http://weibo.com/onevcat\" target=\"_blank\" rel=\"noopener\">@onevcat</a></li>\n<li><a href=\"https://github.com/omz/ColorSense-for-Xcode\" target=\"_blank\" rel=\"noopener\">ColorSense</a>：一款显示颜色数值的插件，还可以直接通过系统的ColorPicker来自动生成对应颜色代码</li>\n<li><a href=\"https://github.com/sopig/DeepIniOS\" target=\"_blank\" rel=\"noopener\">Xcode 优秀插件整理</a>:持续保持整理更新的 Xcode 插件整理 By <a href=\"https://github.com/ddapps\" target=\"_blank\" rel=\"noopener\">@ddapps</a></li>\n<li><a href=\"https://github.com/CodeEagle/SwiftCodeSnippets\" target=\"_blank\" rel=\"noopener\">CodeEagle/SwiftCodeSnippets</a>：自动下载指定 Xcode Snippet 源的 Xcode Plugin。项目缺省提供 Snippet 代码源 <a href=\"https://github.com/burczyk/XcodeSwiftSnippets/tree/master/plist\" target=\"_blank\" rel=\"noopener\">burczyk/XcodeSwiftSnippets</a> 。</li>\n<li><a href=\"https://github.com/realm/SwiftLint\" target=\"_blank\" rel=\"noopener\">realm/SwiftLint</a>：Realm 采用 Swift 编写的基于 GitHub’s Swift Style Guide 规则的检查工具。除了命令行运行方式，也提供集成 Xcode 的方法。对于新团队，这样的工具可以自动约束大家遵循编程规范。</li>\n<li><a href=\"http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/\" target=\"_blank\" rel=\"noopener\">XCode 升级后插件失效的原理与修复办法</a>：由一条命令引发的分析文章。<a href=\"http://weibo.com/u/2068840121\" target=\"_blank\" rel=\"noopener\">@_TongJZ</a></li>\n<li><a href=\"https://github.com/feinstruktur/CoPilot\" target=\"_blank\" rel=\"noopener\">feinstruktur/CoPilot</a>：通过此插件，Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。<a href=\"https://vimeo.com/128713880\" target=\"_blank\" rel=\"noopener\">演示视频</a></li>\n<li><a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a>：新兴起的去中心化的依赖管理器，目标是用最简单的方式来管理Cocoa第三方框架。优势很明显，但是也有不足，看后面的发展吧。</li>\n</ul>\n<h3 id=\"4-管理工具\"><a href=\"#4-管理工具\" class=\"headerlink\" title=\"4. 管理工具\"></a>4. 管理工具</h3><ul>\n<li><a href=\"https://github.com/kylef/swiftenv\" target=\"_blank\" rel=\"noopener\">swiftenv</a>：Swift 版本管理器。类似 rvm（Ruby）, nvm（Node.js）。</li>\n<li><a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">HomeBrew</a>：OS X 上非常出色的包管理工具。</li>\n<li><a href=\"http://panic.com/transmit/\" target=\"_blank\" rel=\"noopener\">Transmit ($)</a>：一个Mac OS X 上 FTP 客户端，有着非常漂亮的用户界面和有用的功能。</li>\n</ul>\n<h3 id=\"5-调试工具\"><a href=\"#5-调试工具\" class=\"headerlink\" title=\"5. 调试工具\"></a>5. 调试工具</h3><ul>\n<li><a href=\"http://fuckingclangwarnings.com/\" target=\"_blank\" rel=\"noopener\">mattt/fuckingclangwarnings.com</a>：警告与语义对照表。以后再也不用为 Xcode 各种警告纠结啦！By <a href=\"http://weibo.com/foogry\" target=\"_blank\" rel=\"noopener\">@foogry</a></li>\n</ul>\n<h3 id=\"6-设计工具\"><a href=\"#6-设计工具\" class=\"headerlink\" title=\"6. 设计工具\"></a>6. 设计工具</h3><ul>\n<li><a href=\"http://www.sketchapp.com/\" target=\"_blank\" rel=\"noopener\">sketch</a>：更适合开发应用的矢量设计工具。通过插件还支持与代码协同工作。推荐书籍：<a href=\"https://designcode.io/sketch\" target=\"_blank\" rel=\"noopener\">Learn Sketch 3</a></li>\n<li><a href=\"http://www.paintcodeapp.com/\" target=\"_blank\" rel=\"noopener\">PaintCode</a><br>:PaintCode是Apple Designer入门APP开发最合适的辅助工具之一，她可以把你绘制的矢量UI自动转化为适用于iOS/OS X的Objective-C代码。</li>\n</ul>\n<h3 id=\"7-发布工具\"><a href=\"#7-发布工具\" class=\"headerlink\" title=\"7. 发布工具\"></a>7. 发布工具</h3><ul>\n<li><a href=\"https://fabric.io\" target=\"_blank\" rel=\"noopener\">Frabic</a></li>\n<li><a href=\"\">fastlane</a></li>\n<li><a href=\"https://support.apple.com/zh-cn/macos/server\" target=\"_blank\" rel=\"noopener\">Xcode Server</a></li>\n</ul>\n<h3 id=\"7-开源项目\"><a href=\"#7-开源项目\" class=\"headerlink\" title=\"7. 开源项目\"></a>7. 开源项目</h3><ul>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a>侧滑布局类库,支持左右滑动，滑动距离;</li>\n<li><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a>易于集成，支持设备的方向，可通过类的方法来启用和禁用键盘管理器；</li>\n<li><a href=\"https://github.com/antoniocasero/ACPDownload\" target=\"_blank\" rel=\"noopener\">ACPDownload</a>实现类似AppStore下载状态样式；</li>\n<li><a href=\"https://github.com/thibaultCha/TCBlobDownload\" target=\"_blank\" rel=\"noopener\">TCBlobDownload</a>支持后台线程执行大文件下载任务，暂停和重新恢复下载；</li>\n<li><a href=\"https://github.com/shingwasix/MobShareSDK\" target=\"_blank\" rel=\"noopener\">MobShareSDK</a>实现微信朋友，朋友圈分享;</li>\n<li><a href=\"https://zwaldowski.github.io/BlocksKit\" target=\"_blank\" rel=\"noopener\">BlocksKit</a>没有创建新的宏，函数，方法和类，仅对Cocoa基础类的一个扩展，是取代了通常的delegate用法;</li>\n<li><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a>图片缓存的框架; </li>\n<li><a href=\"https://github.com/CoderMJLee/MJRefresh\" target=\"_blank\" rel=\"noopener\">MJRefresh</a>下拉刷新上拉加载更多MJRefresh类库;</li>\n<li><a href=\"https://github.com/scalessec/Toast\" target=\"_blank\" rel=\"noopener\">Toast</a>Android风格的Toast控件,用户提示便捷得体；</li>\n<li><a href=\"https://github.com/kcandr/IQLabelView\" target=\"_blank\" rel=\"noopener\">IQLabelView</a>对文本控件覆盖，缩放和旋转；</li>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a></li>\n<li><a href=\"https://github.com/RestKit/RestKit\" target=\"_blank\" rel=\"noopener\">RestKit</a>处理web服务api,解析JSON映射响应对象；</li>\n<li><a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a>一个轻量级的布局框架,拥有自己的描述语法，采用更优雅的链式语法封装自动布局；</li>\n</ul>\n<p>*<a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/README.zh_CN.md\" target=\"_blank\" rel=\"noopener\">Perfect 服务器</a></p>\n<h2 id=\"媒体报道\"><a href=\"#媒体报道\" class=\"headerlink\" title=\"媒体报道\"></a><a href=\"https://github.com/ipader/SwiftGuide/tree/master/archive/news.md\" target=\"_blank\" rel=\"noopener\">媒体报道</a></h2><h2 id=\"开放平台\"><a href=\"#开放平台\" class=\"headerlink\" title=\"开放平台\"></a><a href=\"https://github.com/ipader/SwiftGuide/tree/master/archive/platforms.md\" target=\"_blank\" rel=\"noopener\">开放平台</a></h2><h2 id=\"Apple-Watch-指南\"><a href=\"#Apple-Watch-指南\" class=\"headerlink\" title=\"Apple Watch 指南\"></a><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Apple%20Watch/README.md\" target=\"_blank\" rel=\"noopener\">Apple Watch 指南</a></h2>","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"汇总","path":"api/tags/汇总.json"},{"name":"资源","path":"api/tags/资源.json"},{"name":"swift","path":"api/tags/swift.json"}]},{"title":"Docker安装使用","slug":"Docker使用","date":"2016-12-21T21:25:29.000Z","updated":"2017-02-07T13:47:53.000Z","comments":true,"path":"api/articles/Docker使用.json","excerpt":null,"keywords":null,"cover":"http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"安装Docker-for-Mac\"><a href=\"#安装Docker-for-Mac\" class=\"headerlink\" title=\"安装Docker for Mac\"></a>安装<a href=\"https://www.docker.com/products/docker#/mac\" target=\"_blank\" rel=\"noopener\">Docker for Mac</a></h2><p>在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'下载dmg...'</span></span><br><span class=\"line\">curl -o Docker.dmg <span class=\"symbol\">https:</span>/<span class=\"regexp\">/dn-dao-github-mirror.qbox.me/docker</span><span class=\"regexp\">/install/mac</span><span class=\"regexp\">/Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">#安装Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \\</span></span><br><span class=\"line\"><span class=\"regexp\">| awk '&#123;$1=$2=\"\"; print $0&#125;'` | xargs -0 echo) \\</span></span><br><span class=\"line\"><span class=\"regexp\">&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /</span>Applications/ \\</span><br><span class=\"line\">&amp;&amp; open /Applications/Docker.app</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置-Docker-加速器镜像源\"><a href=\"#配置-Docker-加速器镜像源\" class=\"headerlink\" title=\"配置 Docker 加速器镜像源\"></a>配置 Docker 加速器镜像源</h3><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://142*****.m.daocloud.io</span><br></pre></td></tr></table></figure></p>\n<p>点击 Apply &amp; Restart 按钮使设置生效。</p>\n<h3 id=\"安装主机监控程序加速器\"><a href=\"#安装主机监控程序加速器\" class=\"headerlink\" title=\"安装主机监控程序加速器\"></a>安装主机监控程序加速器</h3><hr>\n<ol>\n<li>登录到 <code>DaoCloud 控制台</code>，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。</li>\n<li>安装<a href=\"https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg\" target=\"_blank\" rel=\"noopener\">DockerToolbox</a>，是一个完整的开发组件，通过安装和配置<code>DaoCloud加速器 v2</code>，提升下载 <code>Docker Hub 镜像</code>的速度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载pkg</span><br><span class=\"line\">curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg</span><br><span class=\"line\">//安装pkg</span><br><span class=\"line\">sudo installer -pkg DockerToolbox.pkg -target /</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>安装Toolbox好了，下一步：<br><img src=\"http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png\" alt=\"\"></li>\n<li><code>$ docker-machine start default</code>启动 Docker.<br>当执行后提示：<code>Host does not exist: &quot;default&quot;</code><figure class=\"highlight plain\"><figcaption><span>docker-machine create</span><a href=\"http://stackoverflow.com/a/38602630\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox default</span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>Docker 主机</code> DaoCloud 加速器的组件包：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL <span class=\"symbol\">https:</span>/<span class=\"regexp\">/get.daocloud.io/daomonit</span><span class=\"regexp\">/install.sh | sh -s d0312f829e9807ee0bf157******</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动组件包,会在「安装主机监控程序」的 DaoCloud 控制台页面下方显示一台已经接入的主机。</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/daoshell.png?imageMogr2/2/w/800\"></li>\n<li>执行<code>Dao Pull</code>命令,高速下载<code>Docker Hub</code>镜像文件<br>这台 Docker 主机已经被接入 DaoCloud 平台，用户可以在 DaoCloud 控制台的「我的集群」页面发现这台主机，可以执行管理和部署应用的操作。</li>\n</ol>\n<h3 id=\"从Docker-Hub-仓库中获取一个镜像\"><a href=\"#从Docker-Hub-仓库中获取一个镜像\" class=\"headerlink\" title=\"从Docker Hub 仓库中获取一个镜像\"></a>从Docker Hub 仓库中获取一个镜像</h3><hr>\n<p>Docker 使用类似 git 的方式管理镜像。通过基本的镜像可以定制创建出来不同种应用的 Docker 镜像。Docker Hub 是 Docker 官方提供的镜像中心。在这里可以很方便地找到各类应用、环境的镜像。由于 Docker 使用联合文件系统，所以镜像就像是夹心饼干一样一层层构成，相同底层的镜像可以共享。所以 Docker 还是相当节约磁盘空间的。要使用一 个镜像，需要先从远程的镜像注册中心拉取，这点非常类似 git。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker-命令创建管理容器\"><a href=\"#Docker-命令创建管理容器\" class=\"headerlink\" title=\"Docker 命令创建管理容器\"></a>Docker 命令创建管理容器</h2><hr>\n<h3 id=\"获取镜像的两种方式\"><a href=\"#获取镜像的两种方式\" class=\"headerlink\" title=\"获取镜像的两种方式\"></a>获取镜像的两种方式</h3><hr>\n<h4 id=\"1-docker-pull命令\"><a href=\"#1-docker-pull命令\" class=\"headerlink\" title=\"1. docker pull命令\"></a>1. <code>docker pull</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search perfectlysoft/ubuntu</span><br><span class=\"line\">docker pull perfectlysoft/ubuntu</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-docker-import命令\"><a href=\"#2-docker-import命令\" class=\"headerlink\" title=\"2. docker import命令\"></a>2. <code>docker import</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过镜像创建容器\"><a href=\"#通过镜像创建容器\" class=\"headerlink\" title=\"通过镜像创建容器\"></a>通过镜像创建容器</h3><hr>\n<p>创建一个容器有两种方式：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create 镜像名</span><br><span class=\"line\">docker run   镜像名   /<span class=\"regexp\">/立即启动容器 等价于：create + start 命令组合</span></span><br></pre></td></tr></table></figure></p>\n<p>进入容器终端控制台如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ec72dc76502e:/# ls</span><br><span class=\"line\">app  boot  etc   lib    media  opt   root  sbin  sys  usr</span><br><span class=\"line\">bin  dev   home  lib64  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"docker-run-images命令\"><a href=\"#docker-run-images命令\" class=\"headerlink\" title=\"docker run images命令\"></a><code>docker run images</code>命令</h4><ol>\n<li><p>样例1<br>执行<code>run images</code>，并将 Ubuntu 的 Shell 作为入口，进入Docker容器环境操作</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样例2<br>执行<code>docker start -i 容器</code>命令进入容器环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i 容器ID/容器名</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"从KitematicGUI进入容器环境\"><a href=\"#从KitematicGUI进入容器环境\" class=\"headerlink\" title=\"从KitematicGUI进入容器环境\"></a>从<code>Kitematic</code>GUI进入容器环境</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -c <span class=\"string\">\"clear &amp;&amp; docker exec -it perfectswift sh\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数<br>-i 表示这是一个交互容器，会把当前标准输入重定向到容器的标准输入中，而不是终止程序运行<br>-t 指为这个容器分配一个终端</p>\n</blockquote>\n<p>这时候我们成功创建了一个 Ubuntu 的容器，并将当前终端连接为这个 Ubuntu 的 bash shell。这时候就可以愉快地使用 Ubuntu 的相关命令了。</p>\n<h3 id=\"ps-查看容器状态\"><a href=\"#ps-查看容器状态\" class=\"headerlink\" title=\"ps 查看容器状态\"></a>ps 查看容器状态</h3><hr>\n<p>在容器运行期间，我们可以通过 <code>docker ps</code> 命令看到所有当前正在运行的容器。<br>添加-a参数可以看到所有创建的容器：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"容器ID标识\"><a href=\"#容器ID标识\" class=\"headerlink\" title=\"容器ID标识\"></a>容器ID标识</h3><hr>\n<p>每个容器都有一个唯一的 ID 标识，通过 ID 可以对这个容器进行管理和操作。在创建容器时，我们可以通过 –name 参数指定一个容器名称，如果没有指定系统将会分配一个，就像这里的「trusting_morse」。</p>\n<h3 id=\"启动-退出-移除容器\"><a href=\"#启动-退出-移除容器\" class=\"headerlink\" title=\"启动/退出/移除容器\"></a>启动/退出/移除容器</h3><hr>\n<p>启动：<code>start</code><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i trusting_morse</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：每次执行 docker run 命令都会创建新的容器，建议一次创建后，使用 docker start/stop 来启动和停用容器。</p>\n</blockquote>\n<p>退出：<br>按 <code>Ctrl+D</code> 退出</p>\n<p>移除：<code>rm</code>ID/name<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm [CONTAINER ID/NAMES]</span><br></pre></td></tr></table></figure></p>\n<p>重命名：<code>rename</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rename 容器ID newName</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建管理镜像\"><a href=\"#创建管理镜像\" class=\"headerlink\" title=\"创建管理镜像\"></a>创建管理镜像</h2><hr>\n<p>Docker 强大的威力在于可以把自己开发的应用随同各种依赖环境一起打包、分发、运行。要创建一个新的 Docker 镜像，通常基于一个已有的 Docker 镜像来创建。<br>Docker 提供了两种方式来创建镜像：</p>\n<ol>\n<li>把容器创建为一个新的镜像</li>\n<li>使用 Dockerfile 创建镜像。</li>\n</ol>\n<h3 id=\"将容器创建为镜像\"><a href=\"#将容器创建为镜像\" class=\"headerlink\" title=\"将容器创建为镜像\"></a>将容器创建为镜像</h3><hr>\n<ol>\n<li><p>为了创建一个新的镜像，我们先创建一个新的容器作为基底：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定制这个容器，例如我们可以配置 PHP 环境、将我们的项目代码部署在里面等：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php</span><br><span class=\"line\"><span class=\"comment\"># some other opreations ...</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当执行完操作之后，我们按 Ctrl+D 退出容器.</p>\n<ol>\n<li><p>获取定制后的容器ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">[root@localhost ~]# docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE                        COMMAND                    CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">cb2b06c83a50        ubuntu:latest                &quot;sh -c /bin/bash&quot;          7 minutes ago       Exited (0) 7 seconds ago                       trusting_morse</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>docker commit</code> 把这个容器变为一个镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit cb2b06c83a50 ubuntu:myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这时候 docker 容器会被创建为一个新的 Ubuntu 镜像，版本名称为 myubuntu。以后我们可以随时使用这个镜像来创建容器了，新的容器将自动包含上面对容器的操作。    </p>\n<ol>\n<li><p>打包/发布镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o myubuntu.tar.gz <span class=\"symbol\">ubuntu:</span>myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入打包镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><hr>\n<h4 id=\"通过Dockerfile创建镜像\"><a href=\"#通过Dockerfile创建镜像\" class=\"headerlink\" title=\"通过Dockerfile创建镜像\"></a>通过<code>Dockerfile</code>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build yourDir/Dockerfile</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>确保Dockerfile文件在一个目录中，否则会提示错误</p>\n</blockquote>\n<p>Docker Hub 提供了类似 GitHub 的镜像存管服务。一个镜像发布到 Docker Hub 不仅可以供更多人使用，而且便于镜像的版本管理。在一个企业内部可以通过自建 Docker Registry 的方式来统一管理和发布镜像。将 Docker Registry 集成到版本管理和上线发布的工作流之中，还有许多工作要做，在我整理出最佳实践后会第一时间分享。<br>使用命令行的方式创建 Docker 镜像通常难以自动化操作。在更多的时候，我们使用 Dockerfile 来创建 Docker 镜像。Dockerfile 是一个纯文本文件，它记载了从一个镜像创建另一个新镜像的步骤。撰写好 Dockerfile 文件之后，我们就可以轻而易举的使用 docker build 命令来创建镜像了。<br>Dockerfile 非常简单，仅有以下命令在 Dockerfile 中常被使用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">命令</th>\n<th style=\"text-align:right\">参数</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">#</td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">注释说明</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">FROM</td>\n<td style=\"text-align:right\"><image>[:<tag>]</tag></image></td>\n<td style=\"text-align:right\">从一个已有镜像创建，例如ubuntu:latest</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">MAINTAINER</td>\n<td style=\"text-align:right\">Author <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#115;&#111;&#109;&#101;&#x2d;&#x6f;&#x6e;&#x65;&#64;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;\">&#115;&#111;&#109;&#101;&#x2d;&#x6f;&#x6e;&#x65;&#64;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></td>\n<td style=\"text-align:right\">镜像作者名字，如Max Liu <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#115;&#111;&#x6d;&#x65;&#45;&#111;&#110;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#109;\">&#115;&#111;&#x6d;&#x65;&#45;&#111;&#110;&#101;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#109;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">RUN</td>\n<td style=\"text-align:right\"><cmd>或者[‘cmd1’, ‘cmd2’…]</cmd></td>\n<td style=\"text-align:right\">在镜像创建用的临时容器里执行单行命令</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ADD</td>\n<td style=\"text-align:right\"><src> <dest></dest></src></td>\n<td style=\"text-align:right\">将本地的<src>添加到镜像容器中的<dest>位置</dest></src></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">VOLUME</td>\n<td style=\"text-align:right\"><path></path>或者[‘/var’, ‘home’]</td>\n<td style=\"text-align:right\">将指定的路径挂载为数据卷</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">EXPOSE</td>\n<td style=\"text-align:right\"><port> [<port>…]</port></port></td>\n<td style=\"text-align:right\">将指定的端口暴露给主机</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENV</td>\n<td style=\"text-align:right\"><key> <value> 或者 <key> = <value></value></key></value></key></td>\n<td style=\"text-align:right\">指定环境变量值</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">CMD</td>\n<td style=\"text-align:right\">[“executable”,”param1”,”param2”]</td>\n<td style=\"text-align:right\">容器启动时默认执行的命令。注意一个Dockerfile中只有最后一个CMD生效。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENTRYPOINT</td>\n<td style=\"text-align:right\">[“executable”, “param1”, “param2”]</td>\n<td style=\"text-align:right\">容器的进入点</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h4><hr>\n<p>下面是一个 Dockerfile 的例子：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a comment</span></span><br><span class=\"line\">FROM <span class=\"symbol\">ubuntu:</span><span class=\"number\">14.04</span></span><br><span class=\"line\">MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</span><br><span class=\"line\">RUN gem install sinatra</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"CMD命令\"><a href=\"#CMD命令\" class=\"headerlink\" title=\"CMD命令\"></a><code>CMD</code>命令</h5><hr>\n<p><code>CMD</code>: 命令可用指定 Docker 容器启动时默认的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it ubuntu:latest sh -c &apos;/bin/bash&apos;</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>sh -c &#39;/bin/bash&#39;</code> 就是手工指定的<code>CMD</code>,否则容器将会使用默认 <code>CMD</code> 指定的命令启动。</p>\n<h5 id=\"ENTRYPOINT命令\"><a href=\"#ENTRYPOINT命令\" class=\"headerlink\" title=\"ENTRYPOINT命令\"></a><code>ENTRYPOINT</code>命令</h5><hr>\n<p>用来指定可执行文件、Shell 脚本，同时会并把启动参数或 CMD 指定的默认值，当作附加参数传递给 执行文件、Shell 脚本。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [<span class=\"string\">'/usr/bin/mysql'</span>]</span><br><span class=\"line\">CMD [<span class=\"string\">'-h 192.168.100.128'</span>, <span class=\"string\">'-p'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>执行mysql启动程序，连接<code>192.168.100.128</code> 主机,也可以通过指定参数，来连接别的主机。</p>\n<p>因此，我们在使用 Dockerfile 创建文件的时候，可以创建一个 entrypoint.sh 脚本，作为系统入口。在这个文件里面，我们可以进行一些基础性的自举操作，比如检查环境变量，根据需要初始化数据库等等。下面两个文件是我在日常工作的项目中添加的 Dockerfile 和 entrypoint.sh，仅供参考：<br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/Dockerfile</a><br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh</a><br>在准备好 Dockerfile 之后，我们就可以创建镜像了：</p>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t starlight36/simpleoa .</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"}]}]}