{"title":"腾讯云docker服务器上部署jira系统","slug":"远程操作mysql数据库","date":"2017-05-24T17:07:47.000Z","updated":"2017-05-24T17:49:46.000Z","comments":true,"path":"api/articles/远程操作mysql数据库.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"腾讯云服务器\"><a href=\"#腾讯云服务器\" class=\"headerlink\" title=\"腾讯云服务器\"></a>腾讯云服务器</h2><ol>\n<li><p>申请账户，体验5天，搭建一个jira服务，还有微信小程序服务</p>\n</li>\n<li><p>需要在服务器上安装docker （腾讯服务器提供了一款支持docker的Ubuntu系统）</p>\n</li>\n<li>想使用daocloud加速器，就要更新docker版本<br>docker run –detach –publish 8080:8080 cptactionhank/atlassian-jira:latest<br><a href=\"http://[dockerhost]:8080\" target=\"_blank\" rel=\"noopener\">http://[dockerhost]:8080</a> and finish the configuration</li>\n</ol>\n<h3 id=\"远程服务器的基本操作\"><a href=\"#远程服务器的基本操作\" class=\"headerlink\" title=\"远程服务器的基本操作\"></a>远程服务器的基本操作</h3><ol>\n<li>登录：<code>ssh -l username 服务ip／域名</code><br> ssh ubuntu@123.<strong><em>.</em>.<em>6   5<em>*</em></em></strong>RtH<br> sudo docker pull cptactionhank/atlassian-jira</li>\n<li>服务器端拷贝文件目录<br> scp -i localDir serveruser@serverip:serverDir</li>\n</ol>\n<h3 id=\"docker下安装mysql数据库镜像\"><a href=\"#docker下安装mysql数据库镜像\" class=\"headerlink\" title=\"docker下安装mysql数据库镜像\"></a>docker下安装mysql数据库镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql </span><br><span class=\"line\">sudo docker run --name jiradb -e MYSQL_ROOT_PASSWORD=jiradb -d mysql/mysql-server:latest</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-name : 容器名<br>MYSQL_ROOT_PASSWORD : 数据库密码<br>-d : 镜像名:tag 版本</p>\n</blockquote>\n<h4 id=\"终端：单行登录mysql\"><a href=\"#终端：单行登录mysql\" class=\"headerlink\" title=\"终端：单行登录mysql\"></a>终端：单行登录mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it jiradb mysql -ujira -pjira</span><br></pre></td></tr></table></figure>\n<h4 id=\"进入mysql终端-访问数据库\"><a href=\"#进入mysql终端-访问数据库\" class=\"headerlink\" title=\"进入mysql终端,访问数据库\"></a>进入mysql终端,访问数据库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it jiradb bash</span><br><span class=\"line\">#登录数据库  默认用户root 密码为空，如果前边设置了MYSQL_ROOT_PASSWORD的值，则需要密码</span><br><span class=\"line\">mysql -uroot -p   #登录本地数据库 可以 省略-h参数 -h 127.0.0.1</span><br><span class=\"line\">回车</span><br><span class=\"line\">输入密码：jiradb  #就是$MYSQL_ROOT_PASSWORD的值</span><br><span class=\"line\">即登录</span><br></pre></td></tr></table></figure>\n<h4 id=\"用户权限控制\"><a href=\"#用户权限控制\" class=\"headerlink\" title=\"用户权限控制\"></a>用户权限控制</h4><ol>\n<li><p>查看sql服务器的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建用户名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user jira identified by &apos;jira&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>赋予权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &apos;jira&apos;@&apos;%&apos; identified by &apos;jira&apos; with grant option;</span><br><span class=\"line\">grant all privileges on *.* to &apos;jira&apos;@&apos;localhost&apos; identified by &apos;jira&apos; with grant option;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">quit;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><ol>\n<li><p>创建数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database jiradb character set &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前数据库名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换指定数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use jiradb;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>创建表</p>\n<h5 id=\"jira和数据库关联结果\"><a href=\"#jira和数据库关联结果\" class=\"headerlink\" title=\"jira和数据库关联结果\"></a>jira和数据库关联结果</h5><p>无法通过 docker 中mysql镜像的盒子来实现jira和数据库关联：<br>从另一个容器中的应用来访问jiradb容器中的mysql服务：没成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connect to MySQL from an application in another Docker container</span><br><span class=\"line\">sudo docker run --name jirad --link jiradb:mysql/mysql-server -d cptactionhank/atlassian-jira:latest</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>最终采用在ubuntu系统中安装mysql：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get -y install mysql-server</span><br></pre></td></tr></table></figure></p>\n<p>##问题：Could not reach any registry endpoint<br>安装Linux加速器：<br>curl -sSL <a href=\"https://get.daocloud.io/daotools/set_mirror.sh\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io/daotools/set_mirror.sh</a> | sh -s <a href=\"http://142900b5.m.daocloud.io\" target=\"_blank\" rel=\"noopener\">http://142900b5.m.daocloud.io</a><br>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/default/docker 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。<br>ubuntu 系统安装daocloud检测工具：<br>curl -sSL <a href=\"https://get.daocloud.io/daomonit/install.sh\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io/daomonit/install.sh</a> | sh -s d0312f829e9807ee0bf157cdc9c9cca42380395c </p>\n<h3 id=\"更新服务器上的docker\"><a href=\"#更新服务器上的docker\" class=\"headerlink\" title=\"更新服务器上的docker\"></a>更新服务器上的docker</h3><p><a href=\"https://docs.docker.com/engine/installation/linux/ubuntulinux/#/prerequisites-by-ubuntu-version\" target=\"_blank\" rel=\"noopener\">官网教程</a></p>\n<h3 id=\"Update-your-apt-sources\"><a href=\"#Update-your-apt-sources\" class=\"headerlink\" title=\"Update your apt sources\"></a>Update your apt sources</h3><p>To set APT to use packages from the Docker repository:</p>\n<ol>\n<li>Log into your machine as a user with sudo or root privileges.</li>\n<li>Open a terminal window.</li>\n<li><p>Update package information, ensure that APT works with the https method, and that CA certificates are installed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Docker资源库<br>|Ubuntu version|    Repository|<br>|—|—-|<br>|Precise 12.04 (LTS)|deb <a href=\"https://apt.dockerproject.org/repo\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo</a> ubuntu-precise main|<br>|Trusty 14.04 (LTS)    |deb <a href=\"https://apt.dockerproject.org/repo\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo</a> ubuntu-trusty main|<br>|Wily 15.10         |deb <a href=\"https://apt.dockerproject.org/repo\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo</a> ubuntu-wily main|<br>|Xenial 16.04 (LTS)    |deb <a href=\"https://apt.dockerproject.org/repo\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo</a> ubuntu-xenial main|</p>\n<blockquote>\n<p>Note: Docker does not provide packages for all architectures. Binary artifacts are built nightly, and you can download them from <a href=\"https://master.dockerproject.org\" target=\"_blank\" rel=\"noopener\">https://master.dockerproject.org</a>. To install docker on a multi-architecture system, add an [arch=…] clause to the entry. Refer to Debian Multiarch wiki for details.</p>\n</blockquote>\n</li>\n<li>导入库<br><repo> = deb <a href=\"https://apt.dockerproject.org/repo\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo</a> ubuntu-precise main<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"&lt;REPO&gt;\"</span> | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>\n</repo></li>\n</ol>\n<p>`<br>6.Update the APT package index.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>7.Verify that APT is pulling from the right repository.<br>When you run the following command, an entry is returned for each version of Docker that is available for you to install. Each entry should have the URL <a href=\"https://apt.dockerproject.org/repo/\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo/</a>. The version currently installed is marked with <em>*</em>.The output below is truncated.</p>\n<p>$ apt-cache policy docker-engine</p>\n<p>docker-engine:<br>Installed: 1.12.2-0~trusty<br>Candidate: 1.12.2-0~trusty<br>Version table:<br><em>*</em> 1.12.2-0~trusty 0<br>500 <a href=\"https://apt.dockerproject.org/repo/\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo/</a> ubuntu-trusty/main amd64 Packages<br>100 /var/lib/dpkg/status<br>1.12.1-0~trusty 0<br>500 <a href=\"https://apt.dockerproject.org/repo/\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo/</a> ubuntu-trusty/main amd64 Packages<br>1.12.0-0~trusty 0<br>500 <a href=\"https://apt.dockerproject.org/repo/\" target=\"_blank\" rel=\"noopener\">https://apt.dockerproject.org/repo/</a> ubuntu-trusty/main amd64 Packages</p>\n<p>From now on when you run apt-get upgrade, APT pulls from the new repository.</p>\n<p>To upgrade your kernel and install the additional packages, do the following:</p>\n<p>Open a terminal on your Ubuntu host.<br>Update your package manager.<br>$ sudo apt-get update<br>Install both the required and optional packages.<br>$ sudo apt-get install linux-image-generic-lts-trusty<br>Repeat this step for other packages you need to install.<br>Reboot your host to use the updated kernel.<br>$ sudo reboot<br>After your system reboots, go ahead and install Docker.</p>\n<p>Install the latest version<br>Make sure you have satisfied all the prerequisites, then follow these steps.</p>\n<p>Note: For production systems, it is recommended that you install a specific version so that you do not accidentally update Docker. You should plan upgrades for production systems carefully.<br>Log into your Ubuntu installation as a user with sudo privileges.<br>Update your APT package index.<br>$ sudo apt-get update<br>Install Docker.<br>$ sudo apt-get install docker-engine<br>Start the docker daemon.<br>$ sudo service docker start<br>Verify that docker is installed correctly by running the hello-world image.<br>$ sudo docker run hello-world<br>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p>\n","categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"}]}