{"title":"整理iOS中几种常用的展示型视图控制器","slug":"iOS中几种常用的展示控制器使用","date":"2017-02-16T17:53:18.000Z","updated":"2017-02-16T21:56:31.000Z","comments":true,"path":"api/articles/iOS中几种常用的展示控制器使用.json","excerpt":null,"covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/iPhoneipadalert.png","http://p27uwfdhv.bkt.clouddn.com/static/images/popover箭头.png","http://p27uwfdhv.bkt.clouddn.com/static/images/UIPopoverArrowDirection.png","http://p27uwfdhv.bkt.clouddn.com/static/images/iPhonemodally.png","http://p27uwfdhv.bkt.clouddn.com/static/images/adaptivePresentationStyleForPresentationController.png"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"https://www.dropbox.com/s/4gj6levvlav2xzc/PresentationsDemoStart.zip?dl=0\" target=\"_blank\" rel=\"noopener\">开始项目</a><br><a href=\"https://github.com/appcoda/Presentation-Controllers-Demo\" target=\"_blank\" rel=\"noopener\">完整项目</a></p>\n<h2 id=\"UIAlertController\"><a href=\"#UIAlertController\" class=\"headerlink\" title=\"UIAlertController\"></a>UIAlertController</h2><p>在iOS8中，提供<code>UIAlertController</code>控制器代替<code>UIAlertView</code>和<code>UIActionSheet</code>两个控件。给用户展示提示信息的新的一种方式。</p>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ol>\n<li>能够自适应的（在iPad上，an <code>action sheet</code> style alert will present itself in a popover），</li>\n<li>显示方式：可以轻松切换<code>Action sheets</code>和<code>alert view</code>两种显示样式<code>alert view</code>被以modal态显示presenting视图控制器上，<code>Action sheets</code>被固定在以屏幕底部。 </li>\n<li>按钮事件实现：使用闭包的方式来处理，相较之前通过实现代理的方式要简单很多。</li>\n<li>子控件支持：<code>Alert view</code>支持按钮和输入框两种，Action sheets仅支持按钮一种控件。</li>\n<li>不同于以往的两类<code>UIAlertController</code>继承自<code>UIViewController</code>。这意味着可以使用视图控制器提供展示信息的功能。</li>\n</ol>\n<h3 id=\"创建使用UIAlertController\"><a href=\"#创建使用UIAlertController\" class=\"headerlink\" title=\"创建使用UIAlertController\"></a>创建使用UIAlertController</h3><p>用<code>title</code>，<code>message</code>参数来实例化<code>alertController</code>实例，然后在实例中添加两个闭包的按钮<br><figure class=\"highlight swift\"><figcaption><span>showAlertWasTapped</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">showAlertWasTapped</span><span class=\"params\">(sender: UIButton)</span></span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> alertController = <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"Appcoda\"</span>, message: <span class=\"string\">\"Message in alert dialog\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deleteAction = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"Delete\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Destructive</span>, handler: &#123;(alert :<span class=\"type\">UIAlertAction</span>!) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Delete button tapped\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    alertController.addAction(deleteAction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> okAction = <span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"OK\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: &#123;(alert :<span class=\"type\">UIAlertAction</span>!) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"OK button tapped\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    alertController.addAction(okAction)</span><br><span class=\"line\"></span><br><span class=\"line\">    presentViewController(alertController, animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>运行效果：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/iPhoneipadalert.png\"></p>\n<h3 id=\"UIAlertControllerStyle枚举：Alert切换ActionSheet\"><a href=\"#UIAlertControllerStyle枚举：Alert切换ActionSheet\" class=\"headerlink\" title=\"UIAlertControllerStyle枚举：Alert切换ActionSheet\"></a>UIAlertControllerStyle枚举：<code>Alert</code>切换<code>ActionSheet</code></h3><p>在<code>UIAlertController</code>之前，切换<code>alert</code>和<code>action sheet</code>需要重写大量的代码，但现在只需要改变一个枚举值<code>UIAlertControllerStyle.Alert</code>为<code>UIAlertControllerStyle.ActionSheet</code>.<br><figure class=\"highlight swift\"><figcaption><span>UIAlertControllerStyle.ActionSheet</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> alertController = <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"Appcoda\"</span>, message: <span class=\"string\">\"Message in alert dialog\"</span>, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">ActionSheet</span>)</span><br></pre></td></tr></table></figure><br>在iPhone上，屏幕底部显示一个<code>action sheet</code>。<br>问题：在iPad上，点击上面的按钮崩溃，需要定义锚点位置。</p>\n<h3 id=\"popoverPresentationController锚点：sourceView-sourceRect\"><a href=\"#popoverPresentationController锚点：sourceView-sourceRect\" class=\"headerlink\" title=\"popoverPresentationController锚点：sourceView/sourceRect\"></a>popoverPresentationController锚点：sourceView/sourceRect</h3><p><code>popover controller</code>在<code>alertController</code>视图内展示，需要一个<code>popover箭头</code>指向<code>alertController</code>视图的某一位置。<br>通过设置<code>sourceView</code>来确定<code>popover箭头</code>位置，这个<code>popover</code>以及<code>popover箭头</code>指向的矩形区域都在这个<code>sourceView</code>上。<br>在调用<code>presentViewController()</code>之前添加代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alertController.popoverPresentationController?.sourceView = view</span><br><span class=\"line\">alertController.popoverPresentationController?.sourceRect = sender.frame</span><br></pre></td></tr></table></figure><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/popover箭头.png\"></p>\n<h2 id=\"UIPopoverPresentationController\"><a href=\"#UIPopoverPresentationController\" class=\"headerlink\" title=\"UIPopoverPresentationController\"></a>UIPopoverPresentationController</h2><p><code>Alert</code>主要用于显示用户的提示信息，当展示的信息很多时，就需要借助<code>popover presentation controller</code>。</p>\n<h3 id=\"在compact和regular两种屏幕中显示模态视图\"><a href=\"#在compact和regular两种屏幕中显示模态视图\" class=\"headerlink\" title=\"在compact和regular两种屏幕中显示模态视图\"></a>在compact和regular两种屏幕中显示模态视图</h3><p>在<code>storyboard</code>文件，设置视图的<code>storyboard ID</code>:<code>PopoverViewController</code>，设置模态视图展示样式，展示在<code>compact-width</code>和<code>regular-width</code>的两种设备屏幕上。<br>实现如下：<br><figure class=\"highlight swift\"><figcaption><span>actionWasTapped</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">actionWasTapped</span><span class=\"params\">(sender: UIBarButtonItem)</span></span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> storyboard : <span class=\"type\">UIStoryboard</span> = <span class=\"type\">UIStoryboard</span>(name: <span class=\"string\">\"Main\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vc = storyboard.instantiateViewControllerWithIdentifier(<span class=\"string\">\"PopoverViewController\"</span>) <span class=\"keyword\">as</span>! <span class=\"type\">UIViewController</span></span><br><span class=\"line\">    vc.modalPresentationStyle = <span class=\"type\">UIModalPresentationStyle</span>.<span class=\"type\">Popover</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> popover: <span class=\"type\">UIPopoverPresentationController</span> = vc.popoverPresentationController!</span><br><span class=\"line\">    popover.barButtonItem = sender  <span class=\"comment\">//`popover箭头`锚的位置</span></span><br><span class=\"line\">    presentViewController(vc, animated: <span class=\"literal\">true</span>, completion:<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设置锚点四种方式\"><a href=\"#设置锚点四种方式\" class=\"headerlink\" title=\"设置锚点四种方式\"></a>设置锚点四种方式</h4><ol>\n<li>barButtonItem<br>先获取该视图控制器的<code>popoverPresentationController</code>控制器，通过<code>popover</code>控制器的<code>barButtonItem</code>属性来设置锚点控件。当弹出时<code>popover箭头</code>就指向这个barButtonItem控件。</li>\n<li>通过指定<code>sourceView</code>和<code>sourceRect</code>两个属性，就像前面例子中一样来指定锚点位置。</li>\n<li>通过其他属性来实现，例如：<code>permittedArrowDirections</code>，也能够指定锚点。</li>\n<li>如果在在展示过程中，无法确定箭头的方向时，就是用默认值：<code>UIPopoverArrowDirection.Any</code>.<br>在iPad显示：</li>\n</ol>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/UIPopoverArrowDirection.png\">\n<p>在iPhone上以模态显示：</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/iPhonemodally.png\">\n<h3 id=\"在iPhone设备上dissmiss模态视图\"><a href=\"#在iPhone设备上dissmiss模态视图\" class=\"headerlink\" title=\"在iPhone设备上dissmiss模态视图\"></a>在iPhone设备上dissmiss模态视图</h3><p>要在iPhone设备上，实现模态视图dissmiss功能，需要借助导航控制器，同时这个模态视图需要遵循<code>UIPopoverPresentationController</code>协议，实现两个代理方法</p>\n<h4 id=\"实现UIPopoverPresentationController协议\"><a href=\"#实现UIPopoverPresentationController协议\" class=\"headerlink\" title=\"实现UIPopoverPresentationController协议\"></a>实现<code>UIPopoverPresentationController</code>协议</h4><ol>\n<li><code>PopoverViewController</code>类定义修改如下:<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PopoverViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">UIPopoverPresentationControllerDelegate</span> </span>&#123;</span><br></pre></td></tr></table></figure></li>\n<li>在actionWasTapped()函数中调用<code>presentViewController()</code>之前添加：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">popover.delegate = <span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"方法一：返回自适应设备的视图展示样式\"><a href=\"#方法一：返回自适应设备的视图展示样式\" class=\"headerlink\" title=\"方法一：返回自适应设备的视图展示样式\"></a>方法一：返回自适应设备的视图展示样式</h4>当APP在<code>compact-width</code>设备上弹出一个视图时调用.这个方法告诉OS系统使用的视图展示样式。<br>这里OS系统被告知在<code>compact-width</code>设备上，使用全屏的样式展示视图。<figure class=\"highlight swift\"><figcaption><span>adaptivePresentationStyleForPresentationController()</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adaptivePresentationStyleForPresentationController</span><span class=\"params\">(controller: UIPresentationController)</span></span> -&gt; <span class=\"type\">UIModalPresentationStyle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">UIModalPresentationStyle</span>.<span class=\"type\">FullScreen</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：返回自定义的视图控制器\"><a href=\"#方法二：返回自定义的视图控制器\" class=\"headerlink\" title=\"方法二：返回自定义的视图控制器\"></a>方法二：返回自定义的视图控制器</h4>当前展现的视图和原来的展示方式不同时调用.我们设置这个视图的<code>Popover presentation</code>展示方式，但是我们指定在<code>compact-width</code>设备上，这样它会以full screen样式展示。在这个函数中，样式切换发生时，会return自定义的视图控制器。<figure class=\"highlight swift\"><figcaption><span>presentationController(_:viewControllerForAdaptivePresentationStyle)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">presentationController</span><span class=\"params\">(controller: UIPresentationController, viewControllerForAdaptivePresentationStyle style: UIModalPresentationStyle)</span></span> -&gt; <span class=\"type\">UIViewController</span>? </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> navigationController = <span class=\"type\">UINavigationController</span>(rootViewController: controller.presentedViewController)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> btnDone = <span class=\"type\">UIBarButtonItem</span>(title: <span class=\"string\">\"Done\"</span>, style: .<span class=\"type\">Done</span>, target: <span class=\"keyword\">self</span>, action: <span class=\"string\">\"dismiss\"</span>)</span><br><span class=\"line\">    navigationController.topViewController.navigationItem.rightBarButtonItem = btnDone</span><br><span class=\"line\">    <span class=\"keyword\">return</span> navigationController</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Done按钮的dismiss事件\"><a href=\"#Done按钮的dismiss事件\" class=\"headerlink\" title=\"Done按钮的dismiss事件\"></a><code>Done</code>按钮的dismiss事件</h4><p>在导航控制器中国封装这个视图，在导航条上添加一个<code>Done</code>按钮，点击<code>Done</code>dismiss这个视图<br><figure class=\"highlight swift\"><figcaption><span>dismiss</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dismiss</span><span class=\"params\">()</span></span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.dismissViewControllerAnimated(<span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在iPhone上，显示修改后的视图控制器，多出带按钮的导航栏。<br>在iPad上，视图控制器显示没有导航控制器，因为它不使用全屏幕显示。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/adaptivePresentationStyleForPresentationController.png\"><br>如果想让iPhone像iPad一样显示一个Popover，只<code>adaptivePresentationStyleForPresentationController</code>返回：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">UIModalPresentationStyle</span>.<span class=\"type\">None</span></span><br></pre></td></tr></table></figure><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/UIModalPresentationStyle.None.png\"></p>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"转场","path":"api/categories/转场.json"}],"tags":[{"name":"动画","path":"api/tags/动画.json"},{"name":"转场","path":"api/tags/转场.json"},{"name":"UI","path":"api/tags/UI.json"}]}