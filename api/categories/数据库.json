{"name":"数据库","postlist":[{"title":"Realm数据库引擎-swift","slug":"swift/Realm数据库引擎-swift","date":"2015-12-16T05:56:15.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/Realm数据库引擎-swift.json","excerpt":null,"keywords":null,"cover":"http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>中心思想：<br>继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。</p>\n<h4 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h4><p><a href=\"http://realm.io/\" target=\"_blank\" rel=\"noopener\">Realm</a> 是一个跨平台的移动数据库引擎，于 2014 年 7 月发布，准确来说，它是专门为移动应用所设计的数据持久化解决方案之一。</p>\n<ul>\n<li>特点：它拥有自己的数据库存储引擎<br>  Realm 并不是对 Core Data 的简单封装，相反地， Realm 并不是基于 Core Data ，也不是基于 SQLite 所构建的。它拥有自己的数据库存储引擎，可以高效且快速地完成数据库的构建操作。</li>\n<li>Realm 支持 Swift 、 Objective-C 以及 Java 语言来编写（ Android 平台和 iOS 平台使用不同的 SDK ）。</li>\n<li>Realm 比使用 SQLite 以及 Core Data 要快很多。</li>\n<li>可视化工具<a href=\"https://itunes.apple.com/cn/app/realm-browser/id1007457278?mt=12\" target=\"_blank\" rel=\"noopener\">Realm Browser</a> ：可以让您轻松地读写 Realm 数据库的逻辑结构以及其中的数据（以 .realm 结尾），虽然 Realm Browser 的功能还十分简陋，真的只能读写而已。</li>\n<li>RealmPlugin：是 Xcode 建模插件，通过 <a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a>安装“RealmPlugin”<h4 id=\"目的：\"><a href=\"#目的：\" class=\"headerlink\" title=\"目的：\"></a>目的：</h4>学习如何导入 Realm 框架、创建数据模型，实现 Swift 执行查询以及插入、更新和删除记录，以及使用既有的数据库。<h4 id=\"实例学习：\"><a href=\"#实例学习：\" class=\"headerlink\" title=\"实例学习：\"></a>实例学习：</h4>测试APP<a href=\"https://github.com/SemperIdem/SISpeciesNotes/tree/master\" target=\"_blank\" rel=\"noopener\">物种监测</a><br>用于记录这个 “ 动植物王国 ” 当中所发现物种的相关信息，包括种群数量、发现区域、年龄结构等等。</li>\n</ul>\n<p>在 Xcode 当中打开我们的起始项目。此时， <a href=\"http://www.raywenderlich.com/81615/www.raywenderlich.com/21365/introduction-to-mapkit-in-ios-6-tutorial\" target=\"_blank\" rel=\"noopener\">MapKit</a><br>已经在项目当中建立好了，而且项目已经拥有了一些简单的创建、更新和删除物种信息的功能.</p>\n<h4 id=\"cocoapods安装（Swift-2-1）：\"><a href=\"#cocoapods安装（Swift-2-1）：\" class=\"headerlink\" title=\"cocoapods安装（Swift 2.1）：\"></a>cocoapods安装（Swift 2.1）：</h4><p>在项目中创建Podfile配置文件，添加RealmSwift支持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use_frameworks!   //</span><br><span class=\"line\">pod &apos;RealmSwift&apos;</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>pod install</code>下载realmSwift框架，生成<strong>.xcworkspace</strong>文件，自动重启原始项目。<br>设置Xcode项目在git版本控制中的忽略配置：详见<a href=\"http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects\" target=\"_blank\" rel=\"noopener\">.gitignore</a></p>\n<p><a href=\"http://blog.csdn.net/remote_roamer/article/details/47835347\" target=\"_blank\" rel=\"noopener\">use_frameworks!</a>   </p>\n<pre><code>如果在cocoapods 里面不使用 use_frameworks!,则是通过static libraries 这个方式来管理pod的代码。这样就需要在app-Bridging-Header.h 文件里面去import相应的.h 文件。而如果使用了use_frameworks!,则cocoapods 使用了frameworks 来取代static libraries 方式。 \n</code></pre><h4 id=\"开始使用：\"><a href=\"#开始使用：\" class=\"headerlink\" title=\"开始使用：\"></a>开始使用：</h4><p>编译并运行这个应用，然后尝试定位到某个您感兴趣的位置（使用模拟器的位置模拟），然后点击右上角的 “+” 按钮创建一个新的标记点。点选地图上的这个标记点，然后点击其弹出来的气泡，接下来会弹出这个标记点的详细信息。随后，点击类别文本框，就可以看到如下图所示的类别列表了:<br><img src=\"http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg\" alt=\"\"></p>\n<ol>\n<li><p>使用Realm数据库将类别列表持久化</p>\n<ul>\n<li><p>打开<strong>CategoriesTableViewController.swift </strong>文件添加方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">populateDefaultCategories</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.results = <span class=\"type\">CategoryModel</span>.allObjects() <span class=\"comment\">// 1 查询数据返回包含类别对象的RLMResults数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> results.<span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 2   通过返回结果的个数，初始化本地realm数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> realm = <span class=\"type\">RLMRealm</span>.defaultRealm() <span class=\"comment\">// 3 访问默认的 realm 单例对象</span></span><br><span class=\"line\">realm.beginWriteTransaction() <span class=\"comment\">// 4   在默认 realm 数据库中启动一个事务</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> defaultCategories = <span class=\"type\">Categories</span>.allValues <span class=\"comment\">// 5 使用Categories 枚举来创建一个含有全部默认类别的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> defaultCategories &#123;</span><br><span class=\"line\"><span class=\"comment\">// 6 初始化类别实例对象，设置其 name 属性，加入realm中</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newCategory = <span class=\"type\">CategoryModel</span>()</span><br><span class=\"line\">newCategory.name = category</span><br><span class=\"line\">realm.addObject(newCategory)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">realm.commitWriteTransaction() <span class=\"comment\">// 7    调用 commitWriteTransaction() 方法来关闭事务，并且向数据库提交数据</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.results = <span class=\"type\">CategoryModel</span>.allObjects()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 viewDidLoad() 方法的底部加入以下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">populateDefaultCategories()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"数据库","path":"api/tags/数据库.json"},{"name":"realm","path":"api/tags/realm.json"}]}]}