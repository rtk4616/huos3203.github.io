{"title":"Framework:实现使用swift开发","slug":"swift/Framework:实现使用swift开发","date":"2018-06-23T16:41:58.000Z","updated":"2018-06-23T16:41:58.000Z","comments":true,"path":"api/articles/swift/Framework:实现使用swift开发.json","excerpt":null,"covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800"],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!--github库卡片-->\n<div id=\"badge-container-huos3203-JHHomeAPP-813e4b\" class=\"hexo-github\" style=\"width: =\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-huos3203-JHHomeAPP-813e4b\", \"huos3203\", \"JHHomeAPP\", \"813e4b\", false);\n</script>\n\n<p>设想：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800\"></p>\n<h3 id=\"创建三个角色\"><a href=\"#创建三个角色\" class=\"headerlink\" title=\"创建三个角色\"></a>创建三个角色</h3><ol>\n<li>主项目：<code>JHHomeAPP</code></li>\n<li>静态库组件：<code>FirstPlug</code> <ul>\n<li><code>SwiftInStaticLib</code>(包含Swift源码实现的静态库)</li>\n</ul>\n</li>\n<li>动态库<code>secondFramework</code></li>\n</ol>\n<h3 id=\"静态库：问题1\"><a href=\"#静态库：问题1\" class=\"headerlink\" title=\"静态库：问题1\"></a>静态库：问题1</h3><p>当静态库组件中存在swift源码时，依赖该组件的主工程会报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftDispatch</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCoreFoundation</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftObjectiveC</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftDarwin</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftFoundation</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCoreGraphics</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCore</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftSwiftOnoneSupport</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>联想方法：<br>设置 <code>Always Embed Swift Standard Libraries</code>: <code>YES</code><br>结果无效。</li>\n<li>适用的解决方法<br>在主工程中新建一个空的swift源文件，不需要自动新建<code>$(SWIFT_MODULE_NAME)-Swift.h</code>映射文件和<code>JHHomeAPP/JHHomeAPP-Bridging-Header.h</code>头文件。<br><strong>使用方法2，问题1就不存在了，证明了在静态库中可以使用swift源码文件进行开发,同样证明了静态库可以封装包含swift源码的静态库。</strong></li>\n</ol>\n<h3 id=\"Framework：问题2\"><a href=\"#Framework：问题2\" class=\"headerlink\" title=\"Framework：问题2\"></a>Framework：问题2</h3><ol>\n<li>在动态库中objc源码方法可以封装到静态库，并在可执行文件中调用。</li>\n<li>当在Framework中新建swift源文件时，第一次编译运行出现崩溃问题：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dyld: Library not loaded: @rpath/libswiftCoreImage.dylib</span><br><span class=\"line\">Referenced from: .../../Debug-iphonesimulator/SecondFramework.framework/SecondFramework</span><br><span class=\"line\">Reason: image not found</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>解决办法：需要在<code>ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES</code>设置为<code>YES</code>.再次编译出现问题3。</p>\n<h3 id=\"Framework-问题3\"><a href=\"#Framework-问题3\" class=\"headerlink\" title=\"Framework: 问题3\"></a>Framework: 问题3</h3><p>当在oc源码文件中用引用<code>-Swift.h</code>头文件时，出现一下问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;SecondFramework-Swift.h&apos; file not found</span><br><span class=\"line\">#import &quot;SecondFramework-Swift.h&quot;</span><br><span class=\"line\">^~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p>\n<p>结果将：<code>Install Objective-C Compatibility Header</code> : <code>NO</code>可以正常调用swift方法了。</p>\n<blockquote>\n<p>验证：framework可以封装到静态库中，当有swift源码实现时需要设置ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=YES</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>Product Module Name: 该项默认为项目名或自定义的名称</li>\n<li>Defines Module: 设置为YES （framework默认为YES，静态库默认为NO）</li>\n<li>Embedded Content Contains Swift: 设置为YES</li>\n<li>Install Objective-C Compatibility Header：设置为YES （如上题说：在framework中设置为NO，才能正常运行，在静态库中似乎不影响）</li>\n<li>Objective-C Bridging Header: 自定义需要桥接到Swift中的OC头文件（EX：$(SRCROOT)/Swift-Bridging-Header.h）</li>\n</ol>\n","categories":[{"name":"swift","path":"api/categories/swift.json"}],"tags":[]}