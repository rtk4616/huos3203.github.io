<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2018-08-24T04:04:01.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;#标题#&gt;</title>
    <link href="https://huos3203.github.io/2018/08/24/%3C#%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5#%3E/"/>
    <id>https://huos3203.github.io/2018/08/24/&lt;#永久链接#&gt;/</id>
    <published>2018-08-24T04:04:01.000Z</published>
    <updated>2018-08-24T04:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-<#库名#>-<#哈希值#>" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-<#库名#>-<#哈希值#>", "huos3203", "<#库名#>", "<#哈希值#>", false);</script><!--音乐欣赏-->         <div id="aplayer-pWUhNhSh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:70%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-pWUhNhSh"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "<#歌曲名#>",              author: "<#歌手名#>",              url: "/images/<#音频文件名#>",              pic: "/images/<#封面图#>.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="&lt;#工具#&gt;" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="&lt;#管理#&gt;" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用Safari浏览器调试WebView</title>
    <link href="https://huos3203.github.io/2018/08/23/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Safari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95WebView/"/>
    <id>https://huos3203.github.io/2018/08/23/调试/使用Safari浏览器调试WebView/</id>
    <published>2018-08-23T13:34:25.000Z</published>
    <updated>2018-08-24T12:01:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-width-=" class="hexo-github" style="width: 100%"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-width-=", "huos3203", "width", "=", false);</script><h3 id="使用RxSwift开发爬虫工具"><a href="#使用RxSwift开发爬虫工具" class="headerlink" title="使用RxSwift开发爬虫工具"></a>使用RxSwift开发爬虫工具</h3><h3 id="设置真机"><a href="#设置真机" class="headerlink" title="设置真机"></a>设置真机</h3><ol><li>首先打开模拟器或者真机设置中”Safari浏览器”→”高级”→”Web检查器”的开关。</li><li>然后我们打开Mac电脑的Safari浏览器,打开系统偏好设置(快捷键 commond + ,)，点击菜单中的”高级”,然后勾选”在菜单栏中显示”开发”菜单”.方便我们进行快速的调试。</li><li>这时候真机连接上数据线.或者开启模拟器就能在菜单栏”开发”选项中找到我们的设备或者是模拟器.</li><li>接下来我们只需要跑起我们的工程进入对应的WebView页面即可进行调试.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="调试" scheme="https://huos3203.github.io/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>RxSwift函数响应式开发</title>
    <link href="https://huos3203.github.io/2018/08/23/swift/RxSwift%E5%87%BD%E6%95%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2018/08/23/swift/RxSwift函数响应式开发/</id>
    <published>2018-08-23T09:56:38.000Z</published>
    <updated>2018-08-24T12:01:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-beeth0ven-RxSwift-Chinese-Documentation-cbbc87e" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-beeth0ven-RxSwift-Chinese-Documentation-cbbc87e", "beeth0ven", "RxSwift-Chinese-Documentation", "cbbc87e", false);</script><h1 id="RxSwift学习"><a href="#RxSwift学习" class="headerlink" title="RxSwift学习"></a>RxSwift学习</h1><p><a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/" target="_blank" rel="noopener">RxSwift 中文文档</a></p><h1 id="更多示例"><a href="#更多示例" class="headerlink" title="更多示例"></a>更多示例</h1><table style="width:100%"><br><tr><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/ImagePicker/ImagePickerFull.gif"></td><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/TableViewSectionedViewController/TableViewSectionedViewControllerFull.png"></td><br><td><img src="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/assets/MoreDemo/Calculator/CalculatorFull.gif"></td><br></tr><br></table><p><a href="https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples" target="_blank" rel="noopener">RxExample</a> 中包含许多具有代表性的示例。它们都是<strong>很好的学习材料</strong>。这里我们取出其中几个示例来展示如何应用 <strong>RxSwift</strong> ：<br>演示RxExample的两种方式</p><ol><li>clone库，在根目录执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open Rx.xcworkspace</span><br></pre></td></tr></table></figure></li></ol><p>然后，选择想要演示的schemes (RxExample-iOS, RxExample-OSX) and hit Run。</p><ol><li>使用pod工具创建RxExample项目<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod try RxSwift</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong><a href="more_demo/image_picker.md">ImagePicker</a> - 图片选择器</strong></p></li><li><p><strong><a href="more_demo/tableView_sectioned_viewController.md">TableViewSectionedViewController</a> - 多层级的列表页</strong></p></li><li><p><strong><a href="more_demo/calculator.md">Calculator</a> - 计算器</strong></p></li></ul><p>有兴趣的同学还可以研究一下 <a href="https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples" target="_blank" rel="noopener">RxExample</a> 中其他的示例。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>GitBook编辑器使用</title>
    <link href="https://huos3203.github.io/2018/08/23/%E5%B7%A5%E5%85%B7/GitBook%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/08/23/工具/GitBook编辑器使用/</id>
    <published>2018-08-22T19:51:19.000Z</published>
    <updated>2018-08-22T20:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-GitbookIO-gitbook-6efbb70" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-GitbookIO-gitbook-6efbb70", "GitbookIO", "gitbook", "6efbb70", false);</script><p><a href="https://legacy.gitbook.com/editor" target="_blank" rel="noopener">GitBook Editor</a><br><a href="https://legacy.gitbook.com/@huosan/dashboard" target="_blank" rel="noopener">个人中心</a></p><h3 id="制作书籍"><a href="#制作书籍" class="headerlink" title="制作书籍"></a>制作书籍</h3><ol><li>在github找到文档库，fork为自己的库</li><li>登录GitBook<code>个人中心</code>，点击<code>+ New</code>新建book</li><li>在建库页面，选择导入<code>git hub</code>现有库<br> Import and sync an existing GitHub repository.</li><li>进入<code>Personal settings</code>，进入github设置面板</li><li>点击<code>Configure</code>按钮，进入github授权gitbook页面<br>GitBook does not have the permissions to access every GitHub repositories linked to your books. Please add them to your configuration to continue editing your  books.</li><li>github中设置 <code>Repository access</code></li><li>All repositories<br> This applies to all current and future repositories.</li><li>Only select repositories</li></ol><h3 id="gitbook终端命令行"><a href="#gitbook终端命令行" class="headerlink" title="gitbook终端命令行"></a>gitbook终端命令行</h3><p><a href="https://toolchain.gitbook.com/ebook.html" target="_blank" rel="noopener">命令行文档</a><br><a href="https://bookfere.com/post/288.html" target="_blank" rel="noopener">GitBook 制作 Kindle 电子书详细教程（命令行版）</a></p><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></li><li><p>创建电子书项目<br>新建一个目录，并进入该目录使用 gitbook 命令初始化电子书项目。举个例子，现在要创建一个名为“MyFirstBook”的空白电子书项目，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir MyFirstBook</span><br><span class="line">$ cd MyFirstBook</span><br><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure></li><li><p>预览电子书内容<br>电子书内容编写完毕后可以使用浏览器预览一下。先输入下面的命令据 .md 文件生成 HTML 文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook build</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Error: Couldn’t locate plugins “jsbin, anchors, video, ga, toggle-chapters, editlink, include-codeblock, splitter, github-buttons, chart, todo, quiz, include-highlight, tonic”, Run ‘gitbook install’ to install plugins from registry.<br>执行安装插件命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure></p></blockquote><p>生成完毕后，会在电子书项目目录中出现一个名为“_book”的文件夹。进入该文件夹，直接用浏览器打开“index.html”，或先输入下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure></p><p>然后在浏览器中输入<code>“http://localhost:4000”</code>即可预览电子书内容，预览完毕后按 Ctrl + C 结束。</p><ol><li>生成电子书文件<br>确定电子书没有问题后，可以通过输入以下命令生成 mobi 电子书：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook mobi ./ ./MyFirstBook.mobi</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>error: error while generating page “introduction.md”: InstallRequiredError:”svgexport” is not installed. Install it using: “npm install svgexport -g”<br>执行安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svgexport -g</span><br></pre></td></tr></table></figure></p></blockquote><p>如果出现以下错误提示，说明您还未安装 Calibre。由于 GitBook 生成 mobi 格式电子书依赖 Calibre 的 ebook-convert，所以请先<a href="https://bookfere.com/tools#calibre" target="_blank" rel="noopener">点击这里</a>下载安装 Calibre。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Need to install ebook-convert from Calibre</span><br></pre></td></tr></table></figure></p><p>Calibre 安装完毕后，对于 Mac OS X 系统，还需要先设置一下软链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin</span><br></pre></td></tr></table></figure></p><p>再次运行转换命令，即可生成 mobi 格式电子书。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="工具" scheme="https://huos3203.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftLint检查代码使用</title>
    <link href="https://huos3203.github.io/2018/08/22/shell/SwiftLint%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/08/22/shell/SwiftLint检查代码使用/</id>
    <published>2018-08-21T17:02:47.000Z</published>
    <updated>2018-08-21T17:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-realm-SwiftLint-8deb453" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-realm-SwiftLint-8deb453", "realm", "SwiftLint", "8deb453", false);</script><h3 id="配置swiftlint语法矫正工具"><a href="#配置swiftlint语法矫正工具" class="headerlink" title="配置swiftlint语法矫正工具"></a>配置swiftlint语法矫正工具</h3><ol><li>安装<br>方式一：<code>brew install swiftlint</code><br>方式二：下载[swiftlint.pkg][<a href="https://github.com/realm/SwiftLint/releases/latest" target="_blank" rel="noopener">https://github.com/realm/SwiftLint/releases/latest</a>]  </li><li>项目中添加支持<br>方法一：<code>pod &#39;SwiftLint&#39;</code>，对单个项目集成swiftlint<br>方法二：手动配置项目build Phase<br>在Xcode build Phase新增一个： “Run Script Phase”:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> swiftlint &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">swiftlint</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="终端插件集成swiftLint"><a href="#终端插件集成swiftLint" class="headerlink" title="终端插件集成swiftLint"></a>终端插件集成swiftLint</h3><p>支持vim编辑器：<br><a href="https://github.com/keith/swift.vim" target="_blank" rel="noopener">keith/swift.vim</a></p><h4 id="安装-syntastic"><a href="#安装-syntastic" class="headerlink" title="安装 syntastic"></a>安装 <a href="https://github.com/scrooloose/syntastic/" target="_blank" rel="noopener">syntastic</a></h4><p>使用<a href="https://github.com/tpope/vim-pathogen.git" target="_blank" rel="noopener">vim-pathogen</a>安装syntastic，</p><ol><li>第一步安装 <code>pathogen.vim</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.vim/<span class="built_in">autoload</span> ~/.vim/bundle &amp;&amp; \</span><br><span class="line">curl -LSso ~/.vim/<span class="built_in">autoload</span>/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure></li></ol><p>设置<code>~/.vimrc</code>配置项：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute pathogen<span class="comment">#infect()</span></span><br></pre></td></tr></table></figure></p><ol><li>第二步将<code>syntastic</code> 作为 <code>Pathogen</code> bundle的资源方式安装<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle &amp;&amp; \</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/vim-syntastic/syntastic.git</span><br></pre></td></tr></table></figure></li></ol><h4 id="终端集成使用"><a href="#终端集成使用" class="headerlink" title="终端集成使用"></a>终端集成使用</h4><p>在<code>vimrc</code>中添加配置，当启动vim即可使用：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:syntastic_swift_checkers = [<span class="string">'swiftpm'</span>, <span class="string">'swiftlint'</span>]</span><br></pre></td></tr></table></figure></p><ol><li>终端支持<code>Package.swift</code><br>当存在<code>Package.swift</code>的swift目录中启动vim，swiftpm将自动可用。</li><li>终端支持<code>.swiftlint.yml</code></li><li>当存在<code>.swiftlint.yml</code>的swift目录中启动vim，且SwiftLint已安装，自动启用swiftlint。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>终端支持swift自动补齐</title>
    <link href="https://huos3203.github.io/2018/08/21/shell/%E7%BB%88%E7%AB%AF%E6%94%AF%E6%8C%81swift%E8%87%AA%E5%8A%A8%E8%A1%A5%E9%BD%90/"/>
    <id>https://huos3203.github.io/2018/08/21/shell/终端支持swift自动补齐/</id>
    <published>2018-08-21T15:48:24.000Z</published>
    <updated>2018-08-21T17:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="终端支持swift自动补齐"><a href="#终端支持swift自动补齐" class="headerlink" title="终端支持swift自动补齐"></a>终端支持swift自动补齐</h3><p>keith/sourcekittendaemon.vim：这个插件提供了Vim集成SourceKittenDaemon。这意味着你可以在vim中开发swift项目<br>需要两步：安装sourcekitten,   </p><h4 id="第一步安装sourcekitten"><a href="#第一步安装sourcekitten" class="headerlink" title="第一步安装sourcekitten"></a>第一步安装sourcekitten</h4><ol><li>安装<br>方式一：<code>brew install sourcekitten</code><br>方式二：clone源码 ,运行<code>swift build</code><br>方式三：clone 源码，运行 <code>make install</code><br>方式三：<a href="https://github.com/jpsim/SourceKitten/releases" target="_blank" rel="noopener">pkg安装包</a>  </li><li>执行<code>sourcekitten help</code>验证安装成功。  </li></ol><h4 id="第二步安装-SourceKittenDaemon"><a href="#第二步安装-SourceKittenDaemon" class="headerlink" title="第二步安装:SourceKittenDaemon"></a>第二步安装:SourceKittenDaemon</h4><ol><li>安装SourceKittenDaemon环境<br>安装并设置<a href="https://github.com/terhechte/SourceKittenDaemon" target="_blank" rel="noopener">SourceKittenDaemon</a><br>方式一：<a href="https://github.com/terhechte/SourceKittenDaemon/releases/" target="_blank" rel="noopener">pkg安装包</a><br>方式二: 1. Clone the repository   2. 安装 <code>make install</code>  </li><li>执行<code>SourceKittenDaemon help</code>验证安装成功。   </li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动后台驻守服务HTTP：<a href="https://github.com/terhechte/SourceKittenDaemon/blob/master/Protocol.org" target="_blank" rel="noopener">参考Protocol.org</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SourceKittenDaemon start --port 44876 --project /private/tmp/abcde/abcde.xcodeproj</span><br></pre></td></tr></table></figure></p><p><code>--port</code>: 服务使用的端口号，默认为<code>8081</code>，vim目前不支持指定SourceKittenDaemon端口，使用默认的8081。<br><code>--project=</code>: 指定服务将要加载的<code>.xcodeproj</code>文件路径，不支持指定<code>.xcworkspaces</code>文件路径</p><p>使用get方法请求后驻服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/complete  # X-Offset|X-Path|X-File</span><br><span class="line">/stop     # 停止后驻服务. 一般用于为其他target提供服务时，重新启动服务。</span><br><span class="line">/ping     # ping后驻服务，运行正常 return OK</span><br><span class="line">/project  # 打印当前加载的project文件路径。</span><br><span class="line">/files    # 打印一个当前加载的project中包含的所有swift文件列表</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown-preview实现md预览</title>
    <link href="https://huos3203.github.io/2018/08/21/shell/markdown-preview%E5%AE%9E%E7%8E%B0md%E9%A2%84%E8%A7%88/"/>
    <id>https://huos3203.github.io/2018/08/21/shell/markdown-preview实现md预览/</id>
    <published>2018-08-21T10:40:31.000Z</published>
    <updated>2018-08-21T10:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-iamcco-markdown-preview.vim-c09a1ca" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-iamcco-markdown-preview.vim-c09a1ca", "iamcco", "markdown-preview.vim", "c09a1ca", false);</script><p>nisha</p><h3 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MarkdownPreview</span><br><span class="line">" open preview window in markdown buffer</span><br><span class="line"></span><br><span class="line">MarkdownPreviewStop</span><br><span class="line">" close the preview window and server</span><br></pre></td></tr></table></figure><h3 id="插件运行效果预览"><a href="#插件运行效果预览" class="headerlink" title="插件运行效果预览"></a>插件运行效果预览</h3><p><img src="https://cloud.githubusercontent.com/assets/5492542/15363504/839753be-1d4b-11e6-9ac8-def4d7122e8d.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>图文组件及多媒体组件类图</title>
    <link href="https://huos3203.github.io/2018/08/18/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%9B%BE%E6%96%87%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%A4%9A%E5%AA%92%E4%BD%93%E7%BB%84%E4%BB%B6%E7%B1%BB%E5%9B%BE/"/>
    <id>https://huos3203.github.io/2018/08/18/个人项目/图文组件及多媒体组件类图/</id>
    <published>2018-08-18T14:36:18.000Z</published>
    <updated>2018-08-22T20:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="http://www.plantuml.com/plantuml/svg/pJjhKnpNbT_xLzoAgy93Z5adjVkXmTGY94Su85Y1vAga4gMPla2lckb9Tm-8mcmX90H88B0jXCnBGfQ4afY7LZRY8SIFoToUcK_-2pddtdvF3w0aczhv8CrqttlkUJyljcRhb3ZV7XHl7x4d-yMjpSBhGxRyNahJZ4rDqayLbPgIy-nDOVukF7SUJHOEx-GFTt7Pn9l26rpyqxiPjhLMUB33Lbw9DMngiRZ-Ah-tAPw7uJjFtx9tSnBDg2vigQfMV0Z2_6x7UVp0URNELXU9-xnAgi8tQ_VbjAvOLftIOzccahRhD4InLqdJEYMJCMp5renC7Sta1c17SUkujBZ5dZoHgrCrXOrRpifqNVL7DVdZLUVUyxhg_wbXCnFUutCrRE9x-5ObyGD8cp9ivEoBcJujGwzfTAZ5oDYceUlK795IAU8ysdVUB00RI2ebfQe73Ksj6TBKFcgt3YXzOeUkfMzyeTdz5nHRaOaqAabP9Nq3tXB186VzhhEsIneRFpDqO49JquZa7jx26Hy_zbodOjgaDgkOy1g_0oBvWvd2mKPXUOiTBJWBEyxibdCmZoXTxchFsKgFJfjDKnckLKmJTrYmXKsjietxREPHP2-d9w3bZpbg3dSF6NmJ4j79J_tCC2yYQbbJisYNFQnJkLfWLIFGak209DvKW1VVNH6xdTBYON43jQ-q_cDfzLcFeGu7qDCcLMnwcGvPLmp3xaeZnv1x0AyqjbGydWm3on-lExUsGL-B3zwokKVvlSFyqJS8p-LVZ1EAgbuS1EGHEiTUhhxSnPaAQ0DRuRdBMN_zYSj69L1JIaojhzycHc-Yh2MV2-pv4llpru1Ww578kj242C9p5OTpSqIgHqEQsYtU6o-CxxUgfBPU-i-iQMIfQGzNPuoCOXi3MhgEf8tiS0svtDLbcrgcZxWVLyDQLGx7UJe7VFkxW0281gc-lZvi-Z-zMx9imwG0FH4QKA7rPIBmQjqD3MX2exuH2N6nWs-IB0XjhaUnQ0SSm7q2MgqpSok_Fn7JBP3qEL9zlgEZhKRBM82EaDwGhwEjgenxdxmeRZyhDpUnFMfjA75TpqPLtGNZeI3a5uOHGW5rpSF0Rhs06ulRXw2iFisd7OuGll00mCcZKfAUaLfmPMMiadqaIIEolB8hvFkJ0CjS4Pi2MOKq82AkKs1_VkayO1Q3pVPkizTZpkEdRESEctZ1vhw3av9MaiOl0KRN0E3IHXKp4uSpDmiG8Ap0zagBE1RyUHSgOPjcsJ4efBJuYXqi2da2f9CMdyelD_QS068ax61JWPlI3KMz2hh3jraHfC9BkjjGCm8KYES4ntozrbHlGpPdzVCDmVgmmxPZBWbqvHJYTTfhfyWL-iTWNHSrmRkwX2UyWR1N3QXO_M14u05ydq72JWDo0IFJLmFgSlLA6m39KGjm9ARurk3H0xz_HMsVIp9_Mltxcf2dhkbNCYfwuCYMJZ_a1dj-dJ66T0eHlrF98d71rj6Jh4syG274zSZrSgGQMVknOQg8fcBdBFBff-JVQjZRbsnxltGqxoOFF8Lg8f5eaY6wbhb1917q6dkQE4nDRQplQN9MNpWpasnh2OAfym2jfavYzvuMZuuYcPcNGmIHfI8fdrzgpgcQSKrJgO7Ybgyr8r-7Mo0Mzy7_oPJyHuqVqvpLOqm3_yyfyBnG7E689n8QsDnPmUJuUUprcZEsWLutJgeRCoCFOLjtnuKEcN3dZ31zt32vNRiFW5murwXfWUU5uEYyFGIQmWInpPVv_QV5usLsyBAml0SPjq331ryu-gfmk28mZ6Sla9263-0n0V23aD2cMFXVsiX16cOPfdr-6EDCZswaRx3bjUBExG1M74eBH9WUOAfSVQtvV5TpP-iLQcNXEGKp0E_34-IbSRRvM83WUM0kgm9VMfHqFyM8KrqZfT0XHHv0EliyV_1rS30HLFWCb5LDxQ8wJTjNZA5ckpMZqfkTYjqF0GwJ3abAajylG5jpsHI9oKnsrkwKnfwokN4G2qGwheQsaVMKK7BVJs-KbkyAJrfOkYEM1xgLUE8_Tc2beogSv9_ZIaTcimjiuhRpz9rGjwIJ_2KHvTgSbeHRgHSx0OU87Ps0G48ImHK0ObhyS0A7x0FqDAnJ9MVv1pHdB-EGkAW3ErdOWJ1tAWOYhbnhRgUgfc0Uq49rFU03S41OTsm56dPzFM5pNq5AuIpkbXP_-BBqU09IBV43DF3aU7ErjKtfeJgfjRK1ohysaF17m7U-tdGUldU-NmTgNFY2uMU73_Li0dYiAJt28fe6GTFFdslJQEvdIzrhYP_wXn0JsDGHVsDeYvUROvuOGSLLnX7VIu6KsRCreTDHmaNAVpBy1ixAUg6kA9s5uoYG4v7iidFgS1TDkr1Ap-xat-quOuSV3EYY1P869WUmmWRqmHY1wrDpEctmYi8UmuQLM1L6kIWLDxvprkR3DGFQ9WyYKCXAREMLi_aSCjdytgOVGDYzPRUR4muQlYabs6pKRNdk92XPjlUBhzT3nfHOP75fiwDl_EGGc0mu-b2Y1iuZ5QzyXamD-1ewc4U6RkF2ULu9yQ25_G586vwyAApSBsxSBJtxghZzqhazuHuXN8bN8eMgAYA2JuIiwYYP4BaoT8W_WOoJxnAREdLb69qEHavuFMpv08AiCH8SauHPnYb9k4U_HuRY53pnXUeME5C1HR0kNl0dnhiH3mNkTNkJ5qdLF0-we5bPeB1xE4l9ptzEUCPczHj3_06aQv_KICZom_NYxflYyRVvlJyxg-lvmrrWkI_XulOBjhMMVty_m2xKxFhy4Z_e2ar39WZABm9gONegadwT45jQser1ZSkXh6oAoz0QJ0WuI41XV9zD7gR1wGT5YuU7yC_isrT2cKhhFqfnriWO9gQUEuys2mzVWPA1k8h7Zvt7syxY1egEGoWip9HMdyKbT1B-8vAV2_lO22ImukSAxYF7vhVPlLTbgH5YY031QqFjWqe9_u5Avamz51rQVgKRggAtAncG2A-fuiz0YNc9rT7ptrBgMdDpMmZfi4Io5TwW3pk9L4-MaKE9LFP4BAjmY4zFXVSZKl8h2wAW-mtTjXkG7somgTrGBGrlmAEpgKbdzXbxFSVs5r8XHlVcTDrAcvHcEioB0prKLQcAxFOyUWtu-tP3fI8kY2DS7G5JlxKIarc7sQdaB2hOLf7RbNXXoM4QhhQ6d7BYSi6OypdmI60b0IdYIODKPaVug-4ap0Q2nmr-ZCyVF8Jo30lKcUdIrzYUkjhg7OfEfOiEqaphG9zth5kaX5-X5sXEeuiyLQC-_hA9LC3l0jG8VU2yvVpXTuNvkwG9SYL_Kd3Q9f4MvlVkvVV6dEN_3GckX_P2DeBxGEJSHpIuQ--NhLLwuRZofL7r-XTerqcUM5GQ7-29-Nx1jmlKLZGztbBpt9dmOg43IA9RBerDE_V_577BpZUp-QELCeqarc0Yy712SnfwRjUY-ulGEjbti613PmGHIyxEi0jLrLyZLdIQXcsa3TrJqKP2pdn-5DBvrjy4L1JVJx1xVyAcPgCK8pMfLeoLf9NAvrF2S5moVeHl8a48EeKoj3hsvA2mFbRMPOcw9O_jgN8saDh1h0h_-puU6EByk8LnS_sky_XzuVc1xw94LWmE598Pj9whhRmVMckX8tA7Hu8xGSpLCXhF0z4IzOGCqXg4JIBL41umTYOK7iMDAQ6uGOycxlv8K4p598Wy4WDBdqUfyXJ8Hnoe5qam7EAX_fcf351vu2G2t9xQensHWGWGVWUPevEyDQW1ooGJwg5v5M2PTDCvq--XUK86a87Vhc118pxEFiAfCo7ikiTWB3lnFPjuBMRRPtM9bwaxlP156uwzVS4cteRYiRyWA8NT6Ve9RRl1VuTYnFel79g69wROiFCgTBTpXoLAjmOYXUFiTWgiicGT35jNR1bWT9WTkehYrdg7-J9CyDlnfqPLx5fyPl31iCoxj3pLjV4VL0-BwZxAWhDk0VfFw3GgLfgVyS_gE8vA5PI3DE88oBMk5YLhvqmgGouDURnlbhwqOki8jxVNXpvQvwhZAshToGJlNI8uCLrsvbV00yPPPFT3W6_Dz1fyXZF9DXVH3qrFilafPse-dDfVRUNN201ysXZ8wlHcDxrfbusEGyebXRKliGmBZutTknNbxM_iZ7LxpTPO1pnKify3hLDuyUkRdglDtbWoR83ja3DX0GpOL80l1dMeXmdZliBXXZDz37LTydknj-9OHUn6VDrkQ9CKcfMNWqDIIvEpCOg4obUcIwg4NErfyzNmXOzozBa2SWeAKtZTfg8GIFHwpIH47LXYP6d6col98fMKhbydVgw5YPT8Fzn6_VNhGli26S4AqCAW0OzRm6V4s-yf7cJ0Qd43KepcBxlJHTmZC9Um7Sgxl-9A1xnaxnVPzZuxU8WTRmYHotTnET2AC5kGEnvOj9pp_1w6p7_oWRex3Nku3KoDE2aUUR4szypgewofz0qeP40nRv0KmPRTn0kt7VlsJV7e-myPDs3EF-iyt2t-iF_JkvdytaDdyQcpUhlqxNpnvItdzRYpk5kNT88uWDx4qUhr0SFk5sc-3nbuhNdVfL4Ikkxm-QNcj6bObcVoWd1nnSbLrKfM7Gb1RXysx0ryvJvxyF6KwbyIX4OhcdvADOOogO10J-FSlXhtnU8IGzGDkcr3Zs5G4TbAfa-d0SymysgsuMimB3Y7gkUdAVX3EjUh1UhkPeMNCOkiuOQ25ae8M_yBcvXm3M0q1BzTkqdLjkOhc5nuymWIZCn-Q-Lmibn-nEya7fHBO-EbYTcmuLzj5NSZ_5C0bn6q-CZblb0x60t-mvleVrUt_1_hZFin3oZYxUxbOoYZ_K5mVcyJBo0-duMmxdOfeztKyh5gf2l-oST4h12_Vtgt9FtYO-B2uxrtwPVURz6vZRVvUDyYexOefWee9XSuFDkivEg9uHQd4QsJOtSi0bUA9NNPSX4CatHBIdg8Pm8cCibgwHQqv4y_yIlro40UQ_LWZMYtHsvvlblA7nq3SzZi0Z1Vf3N1BKztLEhRe5SkLZOzZYaVrWd3y3LQN62vP0pGB80Q2LTwGGiXbdTXHuJ3uh4ZZVSogSgDEUiszsKIDKnSV6gzAgwZIMVTK5Omn4lHKARX2VTCS9CoN0HGKTCGaIWVunMyrqKlKuAWZmxfEiYR_24Io_uWM2_zDinapVAP_piVX7yWrsYkKC4LnrZhEtuNfG99vNeZHqxn1k4nefBkLRe39Pv3H36DwtIKZm4UPn2S71iyL62whzNUQd43Di3XWnGGpJtMz2dd6_T52IjFTtALpZXHSAU3bSDXcpIH_v_QALKbEkH4VqogF7_AfsnIbL2s-jBIV75n3jBVEh_m536fi3bDm4kK7cv1tIZoNN4LFhW1BwwzIrKf-11nYzw_ebyuE6RF9vqth-hOt7R-y0LEQ6yjOHNy_hwp2ZvdFB_tW4tjYDN5upLmH11L8Gz9LKbLdDq_SotaxKlNIBWj-74t-5bstz-DjNSdsDO-fkISL0YouU6vcCK3bI9h-nbHB0Av8m5wFk8V_gS1d0GtRml-L63bBspdlGX0CaSrVpHREDgIYLZ_aVUfIhnxNQwLag0eaLwfiQUf8eLSKeda0M5_7HiFwOhtrnMz1lmyxQyhS9zO-3S0"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;#标题#&gt;</title>
    <link href="https://huos3203.github.io/2018/08/13/%3C#%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5#%3E/"/>
    <id>https://huos3203.github.io/2018/08/13/&lt;#永久链接#&gt;/</id>
    <published>2018-08-13T03:10:22.000Z</published>
    <updated>2018-08-13T03:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="在升级xcode之后，出现playground无法运行的情况，live-view-不显示等问题。"><a href="#在升级xcode之后，出现playground无法运行的情况，live-view-不显示等问题。" class="headerlink" title="在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。"></a>在升级xcode之后，出现playground无法运行的情况，live view 不显示等问题。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="分类" scheme="https://huos3203.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="&lt;#工具#&gt;" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="&lt;#管理#&gt;" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>iCompleteMe支持swift语法提示</title>
    <link href="https://huos3203.github.io/2018/08/11/shell/iCompleteMe%E6%94%AF%E6%8C%81swift%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA/"/>
    <id>https://huos3203.github.io/2018/08/11/shell/iCompleteMe支持swift语法提示/</id>
    <published>2018-08-10T16:40:19.000Z</published>
    <updated>2018-08-10T18:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-iCompleteMe-ad0e1fe" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-iCompleteMe-ad0e1fe", "jerrymarino", "iCompleteMe", "ad0e1fe", false);</script><p>iCompleteMe是基于YouCompleteMe。在花了一年多的时间试图实现对YouCompleteMe的快速支持之后，发现在YCM无法支持swift自动补齐。<br>iCompleteMe实现的行为对于Swift的补齐提示。iCompleteMe的核心子系统只与Swift一起工作。代码基占用的空间要小得多，这使得在CI上更容易安装、更容易理解和更稳定(理论上)。</p><h3 id="在space-vim中添加插件支持"><a href="#在space-vim中添加插件支持" class="headerlink" title="在space-vim中添加插件支持"></a>在space-vim中添加插件支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;jerrymarino/iCompleteMe&apos;</span><br></pre></td></tr></table></figure><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/plugged/iCompleteMe/</span><br><span class="line">brew install cmake</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure></p><p>然后 <code>&lt;Leader&gt; f R</code> 使配置生效，并执行   <code>:PlugInstall</code>进行安装.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftPlayground命令操作</title>
    <link href="https://huos3203.github.io/2018/08/10/shell/SwiftPlayground%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://huos3203.github.io/2018/08/10/shell/SwiftPlayground命令操作/</id>
    <published>2018-08-10T15:50:21.000Z</published>
    <updated>2018-08-10T18:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-SwiftPlayground.vim-f603700" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-SwiftPlayground.vim-f603700", "jerrymarino", "SwiftPlayground.vim", "f603700", false);</script><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p>在playgrounds后缀的目录中执行swift文件</p><h2 id="熟悉vim快捷键用法"><a href="#熟悉vim快捷键用法" class="headerlink" title="熟悉vim快捷键用法"></a>熟悉vim快捷键用法</h2><p>空格 + fs 保存文件：此时插件会自动运行playgrounds，显示效果<br>shift + H ：行头<br>shift + L：行尾<br>:copen : AsyncRun显示运行日志<br>:AsyncRun  shell命令</p><h3 id="支持结构"><a href="#支持结构" class="headerlink" title="支持结构"></a>支持结构</h3><p><code>*.playgroud/Contents.swift</code><br>不支持包含：Pages页面的playground。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>FSCalendar支持自定义的日历开源库</title>
    <link href="https://huos3203.github.io/2018/07/18/%E5%BC%80%E6%BA%90%E5%BA%93/FSCalendar%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%A5%E5%8E%86%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/07/18/开源库/FSCalendar支持自定义的日历开源库/</id>
    <published>2018-07-17T17:59:05.000Z</published>
    <updated>2018-07-17T18:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-FSCalendar-1a026a4c" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-FSCalendar-1a026a4c", "huos3203", "FSCalendar", "1a026a4c", false);</script><p><blockquote class="trello-card"><a href="https://trello.com/c/Tq2jnc1E/33-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%8E%86%E6%8E%A7%E4%BB%B6%EF%BC%8C%E6%97%A5%E6%9C%9F%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener">自定义日历控件，日期图标</a></blockquote><script src="https://p.trellocdn.com/embed.min.js"></script></p><p><a href="https://github.com/huos3203/FSCalendar" target="_blank" rel="noopener">FSCalendar</a><br>FSCalendar是一款开源iOS日历控件，支持横向、纵向滑动模式，全屏模式，带有子标题、事件设置等功能。以下是项目截图：<br><img src="https://cloud.githubusercontent.com/assets/5186464/10262249/4fabae40-69f2-11e5-97ab-afbacd0a3da2.jpg" alt=""><br>Use Interface Builder<br>1、 Drag an UIView object to ViewController Scene 2、 Change the Custom Class to FSCalendar<br>3、 Link dataSource and delegate to the ViewController<br>4、 Finally, implement FSCalendarDataSource and FSCalendarDelegate in your ViewController<br><img src="https://cloud.githubusercontent.com/assets/5186464/9488580/a360297e-4c0d-11e5-8548-ee9274e7c4af.jpg" alt=""></p><h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><img src="http://p27uwfdhv.bkt.clouddn.com/static/images/FScalendardemo.gif?imageMogr2/2/w/800">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="开源库" scheme="https://huos3203.github.io/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>高效人士的七个习惯</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E9%AB%98%E6%95%88%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/高效人士的七个习惯/</id>
    <published>2018-07-03T12:30:31.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://book.douban.com/annotation/18551525/" target="_blank" rel="noopener">豆瓣导图</a><br><a href="https://book.douban.com/annotation/39594570/" target="_blank" rel="noopener">豆瓣总结</a></p><h2 id="前言-如何善用本书"><a href="#前言-如何善用本书" class="headerlink" title="前言 如何善用本书"></a>前言 如何善用本书</h2><h2 id="第一部分-重新探索自我"><a href="#第一部分-重新探索自我" class="headerlink" title="第一部分 重新探索自我"></a>第一部分 重新探索自我</h2><h2 id="第一章-由内而外全面造就自己"><a href="#第一章-由内而外全面造就自己" class="headerlink" title="第一章 由内而外全面造就自己"></a>第一章 由内而外全面造就自己</h2><h2 id="第二章-七个习惯——概论"><a href="#第二章-七个习惯——概论" class="headerlink" title="第二章 七个习惯——概论"></a>第二章 七个习惯——概论</h2><h1 id="第二部分-个人的成功：从依赖到独立"><a href="#第二部分-个人的成功：从依赖到独立" class="headerlink" title="第二部分 个人的成功：从依赖到独立"></a>第二部分 个人的成功：从依赖到独立</h1><h2 id="第三章-习惯一：积极主动——个人愿景的原则"><a href="#第三章-习惯一：积极主动——个人愿景的原则" class="headerlink" title="第三章 习惯一：积极主动——个人愿景的原则"></a>第三章 习惯一：积极主动——个人愿景的原则</h2><h2 id="第四章-习惯二：以终为始——自我领导的原则"><a href="#第四章-习惯二：以终为始——自我领导的原则" class="headerlink" title="第四章 习惯二：以终为始——自我领导的原则"></a>第四章 习惯二：以终为始——自我领导的原则</h2><h3 id="个人使命宣言"><a href="#个人使命宣言" class="headerlink" title="个人使命宣言"></a>个人使命宣言</h3><p>以终为始最有效的方法，就是撰写一份个人使命宣言，即人生哲学或基础信念。<br>宣言：主要说明自己想成为怎样的品行的人。成什么样的事业，及为此奠基的价值观和原则。<br>家庭第一<br>借重宗教的力量<br>在诚信问题上决不妥协<br>念及相关的每个人<br>未听取正反双方的意见，不妄下断语<br>征求他人意见<br>维护不在场的人<br>诚恳但立场坚定<br>每年掌握一种新技能<br>今天计划明天的工作<br>利用等待的空闲时间<br>态度积极<br>保持幽默感<br>生活与工作有条不紊<br>别怕犯错，怕的是不能吸取教训<br>协助属下成功<br>多请教别人<br>专注于当前的工作，不为下一次任务或提升操心</p><p>定期储蓄或利用部分收入做投资</p><p>一个人的应变能力取决于他对自己的本性，人生目标以及价值观的不变的信念。<br>只要心中秉持着恒久不变的真理，就能屹立于动荡的环境中。</p><p>标记疗法的基础原理：许多心智或情感疾病，都是由于失落感或空虚感作祟，而标记疗法可以帮助病人找回生命的意义与使命感，以祛除这些感觉。</p><h2 id="第五章-习惯三：要事第一——自我管理的原则"><a href="#第五章-习惯三：要事第一——自我管理的原则" class="headerlink" title="第五章 习惯三：要事第一——自我管理的原则"></a>第五章 习惯三：要事第一——自我管理的原则</h2><p><a href="https://book.douban.com/people/140683087/annotation/1048007/?start=0" target="_blank" rel="noopener">豆瓣笔记</a></p><h1 id="第三部分-公众的成功：从独立到互赖"><a href="#第三部分-公众的成功：从独立到互赖" class="headerlink" title="第三部分 公众的成功：从独立到互赖"></a>第三部分 公众的成功：从独立到互赖</h1><h2 id="第六章-你不是一座孤岛"><a href="#第六章-你不是一座孤岛" class="headerlink" title="第六章 你不是一座孤岛"></a>第六章 你不是一座孤岛</h2><h2 id="第七章-习惯四：双赢思维——人际领导的原则"><a href="#第七章-习惯四：双赢思维——人际领导的原则" class="headerlink" title="第七章 习惯四：双赢思维——人际领导的原则"></a>第七章 习惯四：双赢思维——人际领导的原则</h2><h2 id="第八章-习惯五：知彼知己——同理心交流的原则"><a href="#第八章-习惯五：知彼知己——同理心交流的原则" class="headerlink" title="第八章 习惯五：知彼知己——同理心交流的原则"></a>第八章 习惯五：知彼知己——同理心交流的原则</h2><h2 id="第九章-习惯六：统合综效——创造性合作的原则"><a href="#第九章-习惯六：统合综效——创造性合作的原则" class="headerlink" title="第九章 习惯六：统合综效——创造性合作的原则"></a>第九章 习惯六：统合综效——创造性合作的原则</h2><h1 id="第四部分-全面观照生命"><a href="#第四部分-全面观照生命" class="headerlink" title="第四部分 全面观照生命"></a>第四部分 全面观照生命</h1><h2 id="第十章-习惯七：不断更新——平衡的自我更新的原则"><a href="#第十章-习惯七：不断更新——平衡的自我更新的原则" class="headerlink" title="第十章 习惯七：不断更新——平衡的自我更新的原则"></a>第十章 习惯七：不断更新——平衡的自我更新的原则</h2><h2 id="第十一章-再次由内而外造就自己"><a href="#第十一章-再次由内而外造就自己" class="headerlink" title="第十一章 再次由内而外造就自己"></a>第十一章 再次由内而外造就自己</h2><p>附录<br>一、你是哪种类型的人？——生活重心面面观<br>二、第四代时间管理——高效能人士的一天</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>程序员跳槽全攻略</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%B3%E6%A7%BD%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/程序员跳槽全攻略/</id>
    <published>2018-07-02T19:52:08.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>书都不会读还想成功</title>
    <link href="https://huos3203.github.io/2018/07/02/%E9%98%85%E8%AF%BB/%E4%B9%A6%E9%83%BD%E4%B8%8D%E4%BC%9A%E8%AF%BB%E8%BF%98%E6%83%B3%E6%88%90%E5%8A%9F/"/>
    <id>https://huos3203.github.io/2018/07/02/阅读/书都不会读还想成功/</id>
    <published>2018-07-02T13:59:35.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="处境"><a href="#处境" class="headerlink" title="处境"></a>处境</h3><p>人到中年，职场受排挤降级，情场被抛弃不如意，怨天尤人，自怨自艾，却不思进取，死扛着压力勉强养家糊口残喘于世。</p><h3 id="心态转折"><a href="#心态转折" class="headerlink" title="心态转折"></a>心态转折</h3><ol><li>红皇后的故事：寓意为什么在现实生活中不进则退的境地，见贤思齐，善于发现同事优点，定位榜样学习实线。<h3 id="读书习惯"><a href="#读书习惯" class="headerlink" title="读书习惯"></a>读书习惯</h3></li><li>100天33本书: 从量到质达到，培养读书习惯的目的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Framework实现使用swift开发</title>
    <link href="https://huos3203.github.io/2018/06/24/swift/Framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2018/06/24/swift/Framework实现使用swift开发/</id>
    <published>2018-06-23T16:41:58.000Z</published>
    <updated>2018-06-25T20:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-JHHomeAPP-813e4b" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-JHHomeAPP-813e4b", "huos3203", "JHHomeAPP", "813e4b", false);</script><h2 id="在静态库组件中使用swift开发"><a href="#在静态库组件中使用swift开发" class="headerlink" title="在静态库组件中使用swift开发"></a>在静态库组件中使用swift开发</h2><p>基于静态库的开发，实现封装静态库/Framework并使用swiftOC混编开发<br><img src="http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800"></p><h3 id="创建三个角色"><a href="#创建三个角色" class="headerlink" title="创建三个角色"></a>创建三个角色</h3><ol><li>主项目：<code>JHHomeAPP</code></li><li>静态库组件：<code>FirstPlug</code> <ul><li><code>SwiftInStaticLib</code>(包含Swift源码实现的静态库)</li></ul></li><li>动态库<code>secondFramework</code></li></ol><h3 id="静态库：问题1"><a href="#静态库：问题1" class="headerlink" title="静态库：问题1"></a>静态库：问题1</h3><p>当静态库组件中存在swift源码时，依赖该组件的主工程会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ld: warning: Auto-Linking library not found for -lswiftDispatch</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCoreFoundation</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftObjectiveC</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftDarwin</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftFoundation</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCoreGraphics</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCore</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftSwiftOnoneSupport</span><br></pre></td></tr></table></figure></p><ol><li>联想方法：<br>设置 <code>Always Embed Swift Standard Libraries</code>: <code>YES</code><br>结果无效。</li><li>适用的解决方法<br>在主工程中新建一个空的swift源文件，不需要自动新建<code>$(SWIFT_MODULE_NAME)-Swift.h</code>映射文件和<code>JHHomeAPP/JHHomeAPP-Bridging-Header.h</code>头文件。<br><strong>使用方法2，问题1就不存在了，证明了在静态库中可以使用swift源码文件进行开发,同样证明了静态库可以封装包含swift源码的静态库。</strong></li></ol><h3 id="Framework：问题2"><a href="#Framework：问题2" class="headerlink" title="Framework：问题2"></a>Framework：问题2</h3><ol><li>在动态库中objc源码方法可以封装到静态库，并在可执行文件中调用。</li><li>当在Framework中新建swift源文件时，第一次编译运行出现崩溃问题：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dyld: Library not loaded: @rpath/libswiftCoreImage.dylib</span><br><span class="line">Referenced from: .../../Debug-iphonesimulator/SecondFramework.framework/SecondFramework</span><br><span class="line">Reason: image not found</span><br></pre></td></tr></table></figure></li></ol><p>解决办法：需要在<code>ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES</code>设置为<code>YES</code>.再次编译出现问题3。</p><h3 id="Framework-问题3"><a href="#Framework-问题3" class="headerlink" title="Framework: 问题3"></a>Framework: 问题3</h3><p>当在oc源码文件中用引用<code>-Swift.h</code>头文件时，出现一下问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;SecondFramework-Swift.h&apos; file not found</span><br><span class="line">#import &quot;SecondFramework-Swift.h&quot;</span><br><span class="line">^~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p><p>结果将：<code>Install Objective-C Compatibility Header</code> : <code>NO</code>可以正常调用swift方法了。</p><blockquote><p>验证：framework可以封装到静态库中，当有swift源码实现时需要设置ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=YES</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Product Module Name: 该项默认为项目名或自定义的名称</li><li>Defines Module: 设置为YES （framework默认为YES，静态库默认为NO）</li><li>Embedded Content Contains Swift: 设置为YES</li><li>Install Objective-C Compatibility Header：设置为YES （如上题说：在framework中设置为NO，才能正常运行，在静态库中似乎不影响）</li><li>Objective-C Bridging Header: 自定义需要桥接到Swift中的OC头文件（EX：$(SRCROOT)/Swift-Bridging-Header.h）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>使用CocoaPods开发静态库</title>
    <link href="https://huos3203.github.io/2018/06/22/%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8CocoaPods%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/06/22/工具/使用CocoaPods开发静态库/</id>
    <published>2018-06-21T21:37:16.000Z</published>
    <updated>2018-06-22T20:27:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发一个用pod管理依赖关系的静态类库给其他人使用，而又不愿意公开源代码，比如一些SDK，那么就需要打包成.a文件。本文将以一个依赖于ASIHTTPRequest的静态类库，来演示如何创建使用了CocoaPods的静态类库以及打包的过程。</p><h2 id="开发静态库（Static-Library）"><a href="#开发静态库（Static-Library）" class="headerlink" title="开发静态库（Static Library）"></a>开发静态库（Static Library）</h2><h3 id="搭建pod静态库项目"><a href="#搭建pod静态库项目" class="headerlink" title="搭建pod静态库项目"></a>搭建pod静态库项目</h3><h4 id="不基于pod手动创建-deprecated"><a href="#不基于pod手动创建-deprecated" class="headerlink" title="不基于pod手动创建(deprecated)"></a>不基于pod手动创建(deprecated)</h4><ol><li>在Xcode中创建一个Cocoa Touch Static Library；</li><li>创建Podfile文件；</li><li>执行pod install完成整个项目的搭建；</li><li>如果需要demo，手动创建示例程序，使用pod添加对私有静态库的依赖，重复执行pod install完成示例项目的搭建。</li></ol><h4 id="基于pod自动创建"><a href="#基于pod自动创建" class="headerlink" title="基于pod自动创建"></a>基于pod自动创建</h4><p>只需要输入<code>pod lib</code>命令即可完成初始项目的搭建，下面详细说明具体步骤，以<code>JHLib</code>作为项目名演示。<br>1.执行命令<code>pod lib create JHLib</code>。在此期间需要确认下面4个问题。</p><h2 id="打包类库"><a href="#打包类库" class="headerlink" title="打包类库"></a>打包类库</h2><p>需要使用一个cocoapods的插件<code>cocoapods-packager</code>来完成类库的打包。当然也可以手动编译打包，但是过程会相当繁琐。</p><ol><li><p>安装打包插件<br>终端执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods-packager</span><br></pre></td></tr></table></figure></li><li><p>打包<br>命令很简单，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod package BZLib.podspec --library --force</span><br></pre></td></tr></table></figure></li></ol><p>其中<code>--library</code>指定打包成.a文件，如果不带上将会打包成.framework文件。<code>--force</code>是指强制覆盖。最终的目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|____BZLib.podspec</span><br><span class="line">|____ios</span><br><span class="line">| |____libBZLib.a</span><br></pre></td></tr></table></figure></p><p>需要特别强调的是，该插件通过对引用的三方库进行重命名很好的解决了类库命名冲突的问题。<br>比如你的类库使用了ASI，然后打包成静态库.a文件。外部调用的项目也使用了ASI，那么不会造成冲突。因为在打包的时候，你的类库里的ASI被重命名为项目+ASI的前缀。</p><p><a href="https://onevcat.com/2016/01/create-framework/" target="_blank" rel="noopener">如何打造一个让人愉快的框架</a><br><a href="http://www.cnblogs.com/brycezhang/p/4117180.html" target="_blank" rel="noopener">使用CocoaPods开发并打包静态库</a><br><a href="https://www.jianshu.com/p/2ea267bf0363" target="_blank" rel="noopener">iOS动态库,静态库以及framework</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="工具" scheme="https://huos3203.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>使用tag管理多个相关组件的版本发布</title>
    <link href="https://huos3203.github.io/2018/06/21/git/%E4%BD%BF%E7%94%A8tag%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/"/>
    <id>https://huos3203.github.io/2018/06/21/git/使用tag管理多个相关组件的版本发布/</id>
    <published>2018-06-20T17:22:37.000Z</published>
    <updated>2018-06-21T21:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="tag标签自增新建脚本"><a href="#tag标签自增新建脚本" class="headerlink" title="tag标签自增新建脚本"></a>tag标签自增新建脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">tag=$(git describe --tags `git rev-list --tags --max-count=1`)</span><br><span class="line">version=<span class="variable">$&#123;tag##*.&#125;</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"version+=1"</span></span><br><span class="line">newTag=<span class="variable">$&#123;tag%.*&#125;</span>.<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Create New Tag '</span><span class="variable">$newTag</span></span><br></pre></td></tr></table></figure><h2 id="修改tag版本号的方法"><a href="#修改tag版本号的方法" class="headerlink" title="修改tag版本号的方法"></a>修改tag版本号的方法</h2><h3 id="方法一：覆盖"><a href="#方法一：覆盖" class="headerlink" title="方法一：覆盖"></a>方法一：覆盖</h3><ol><li><p>已有v1.0.2.8要覆盖该版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -f v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>服务器已有v1.0.2.8，强制推到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin -f v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>同步服务器：获取服务器刚刚的v1.0.2.8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -–tag</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法：删除分支"><a href="#方法：删除分支" class="headerlink" title="方法：删除分支"></a>方法：删除分支</h3><ol><li><p>删除本地版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>删除服务器上的分支(用空版本覆盖)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="symbol">:v1</span>.<span class="number">0</span>.<span class="number">2.8</span></span><br></pre></td></tr></table></figure></li><li><p>服务器获取刚刚的v1.0.2.8</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch –-tag</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>弧形表盘进度仪表</title>
    <link href="https://huos3203.github.io/2018/06/20/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%BC%A7%E5%BD%A2%E8%A1%A8%E7%9B%98%E8%BF%9B%E5%BA%A6%E4%BB%AA%E8%A1%A8/"/>
    <id>https://huos3203.github.io/2018/06/20/个人项目/弧形表盘进度仪表/</id>
    <published>2018-06-20T15:31:52.000Z</published>
    <updated>2018-06-25T20:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-ArcProgressUI-4b9bc85" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-ArcProgressUI-4b9bc85", "huos3203", "ArcProgressUI", "4b9bc85", false);</script><h1 id="ArcProgressUI"><a href="#ArcProgressUI" class="headerlink" title="ArcProgressUI"></a>ArcProgressUI</h1><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>To run the example project, clone the repo, and run <code>pod install</code> from the Example directory first.</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>ArcProgressUI is available through <a href="https://cocoapods.org" target="_blank" rel="noopener">CocoaPods</a>. To install<br>it, simply add the following line to your Podfile:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'ArcProgressUI'</span></span><br></pre></td></tr></table></figure><h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><h3 id="独立进度表盘加载"><a href="#独立进度表盘加载" class="headerlink" title="独立进度表盘加载"></a>独立进度表盘加载</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ArcProgressView.h"</span></span></span><br><span class="line"><span class="built_in">NSArray</span> *viewArr = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"ArcProgressView"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">UIView</span> *arcView = viewArr.lastObject;</span><br><span class="line">arcView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:arcView];</span><br></pre></td></tr></table></figure><h3 id="完整控制器页面"><a href="#完整控制器页面" class="headerlink" title="完整控制器页面"></a>完整控制器页面</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"PatrolScoreViewController.h"</span></span></span><br><span class="line">+(PatrolScoreViewController *)withStoryboard:(PatrolScoreStyle)style&#123;</span><br><span class="line"><span class="built_in">NSBundle</span> *podbundle = [<span class="built_in">NSBundle</span> bundleForClass:[PatrolScoreViewController <span class="keyword">class</span>]];</span><br><span class="line"><span class="built_in">NSURL</span> *bundleURL = [podbundle URLForResource:<span class="string">@"ArcProgressUI"</span> withExtension:<span class="string">@"bundle"</span>];</span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithURL:bundleURL];</span><br><span class="line"><span class="built_in">UIStoryboard</span> *story = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"PatrolScore"</span> bundle:bundle];</span><br><span class="line">PatrolScoreViewController *VC = [story instantiateViewControllerWithIdentifier:<span class="string">@"PatrolScoreViewController"</span>];</span><br><span class="line">VC.scoreViewStyle = style;</span><br><span class="line"><span class="keyword">return</span> VC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态库开发："><a href="#静态库开发：" class="headerlink" title="静态库开发："></a>静态库开发：</h2><p>设想：通过cocoapod管理静态库的依赖关系。在项目调用静态库</p><ol><li>主工程：prj</li><li>一级静态库: first.a ：组件</li><li><p>二级静态库：组件依赖的静态库</p><p> sec.a    : 二级静态库.a<br> pod.a  ：包含二级静态库的集合</p></li></ol><p>其他经验：通过pod来开发一级静态库即组件。会生成组件的工作空间：<code>workspace</code> 将<code>prj主工程</code>拖入工作空间，来协作开发。</p><blockquote><p>坑：当再次切换prj主工程,关联.a组件依赖时，例如：libJHPatrol.a的other linker tag 路径一定要更新。</p></blockquote><p>结果：</p><ol><li>手动配置一级静态库组件，依赖的二级静态库可用<br>资源bundle文件直接添加到主工程资源拷贝列表中，在代码中会正常映射出IBoutlet相应的UI实例。参见 上述使用说明</li><li><code>-ObjC</code>设置<br>在主工程build setting 配置的<code>Other linker</code> ：<code>-ObjC</code>：表示尽可能的加载所有依赖静态库中的objc源码资源。<br>解决的问题：可以解决通过资源（xib/storyboard）初始化实例式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this class is not key value coding-compliant for the key ibReviewLabel</span><br></pre></td></tr></table></figure></li></ol><p>解决在storyboard中使用源码自定义UI控件时，无效果的问题。</p><ol><li><p>在封装静态库中，storyboard/xib中的控件不要设置model属性。</p></li><li><p>使用pod来一级静态库组件，管理依赖的二级静态库libpod.a无效</p></li></ol><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p>huo3203@hotmail.com, 724987481</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>ArcProgressUI is available under the MIT license. See the LICENSE file for more info.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>storyboard的几种方式</title>
    <link href="https://huos3203.github.io/2018/06/20/iOS/UI/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://huos3203.github.io/2018/06/20/iOS/UI/storyboard的几种方式/</id>
    <published>2018-06-20T14:49:37.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="通过IB（xib-storyboard）创建View的周期方法"><a href="#通过IB（xib-storyboard）创建View的周期方法" class="headerlink" title="通过IB（xib/storyboard）创建View的周期方法"></a>通过IB（xib/storyboard）创建View的周期方法</h2><ol><li><code>loadView</code>：加载View方法，UI是通过代码绘制时，初始化控制器的视图时，会调用该方法。优先级高于IB视图，当重载时，会直接覆盖IB中的视图,因为无论nib也好，xib也好，最终在执行UIViewController生命周期函数<code>loadView</code>之前，都会转化成可执行的nib文件。</li><li><code>initWithNibName</code>：是类的构造器方法，通过IB创建的类：简称<code>IB类</code>，<code>IB类</code>需要通过这个构造器来实例化对象。</li><li><code>initWithCoder</code>：当<code>IB类</code>实例化时会调用该方法，即通过<code>initWithNibName</code>构造器实例化对象时，会调用该方法来分配<code>IB对象</code>的内存空间。</li><li><code>awakeFromNib</code>：当实例化<code>IB视图类</code>时执行，即当IB文件被加载的时候，会发送一个<code>awakeFromNib</code>的消息到IB文件中的每个的对象，每个对象都可以定义自己的awakeFromNib函数来响应这个消息，执行一些必要的操作。<blockquote><p>帮助记忆：一开始经过<code>initWithCoder</code>创建出来的控件是死的，然后通过<code>awakeFromNib</code>来唤醒，所以这会有一个先后的调用顺序</p></blockquote></li><li><code>viewDidLoad</code>：当view对象被加载到内存后就会执行viewDidLoad，所以不管通过nib文件还是代码的方式创建对象都会执行viewDidLoad 。</li></ol><h2 id="加载xib方法"><a href="#加载xib方法" class="headerlink" title="加载xib方法"></a>加载xib方法</h2><h3 id="加载视图"><a href="#加载视图" class="headerlink" title="加载视图"></a>加载视图</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">NSArray</span>* nibView =  [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"xibfileName"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line"> <span class="built_in">UIView</span> *xibView = nibView.lastObject;</span><br><span class="line"><span class="comment">//=======</span></span><br><span class="line"> <span class="comment">// 这里的bundle参数是nil,(这里nil默认就是mianBundle)</span></span><br><span class="line"> <span class="built_in">UINib</span> *nib = [<span class="built_in">UINib</span> nibWithNibName:<span class="string">@"xib文件名"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line"> <span class="built_in">NSArray</span> *views = [nib instantiateWithOwner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><code>owner</code>:xib中的fileObject参数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载所有xib文件</span></span><br><span class="line"><span class="built_in">NSArray</span>* objects = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:nibName owner:<span class="keyword">self</span> options:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载指定xib文件</span></span><br><span class="line">ContactsTableViewCell  *cell = [[[<span class="built_in">NSBundle</span> mainBundle]loadNibNamed:<span class="string">@"ContactsTableViewCell"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>] objectAtIndex:<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><h3 id="加载控制器对象"><a href="#加载控制器对象" class="headerlink" title="加载控制器对象"></a>加载控制器对象</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:<span class="string">@"xibName"</span> bundle:nibBundleOrNil];</span><br></pre></td></tr></table></figure><h2 id="加载storyboard"><a href="#加载storyboard" class="headerlink" title="加载storyboard"></a>加载storyboard</h2><h3 id="加载控制器对象-1"><a href="#加载控制器对象-1" class="headerlink" title="加载控制器对象"></a>加载控制器对象</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载storyboard</span></span><br><span class="line"><span class="built_in">UIStoryboard</span> *storyboard = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Two"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建storyboard里面灰色的控制器</span></span><br><span class="line">　　　<span class="comment">//找到shtoryboard里面设置的初始控制器</span></span><br><span class="line">　　　<span class="comment">//    UIViewController *vc = [storyboard instantiateInitialViewController];</span></span><br><span class="line">　　　　　　　　</span><br><span class="line">　　　　　　　<span class="comment">// 从storyboard里面找出绑定标识的控制器</span></span><br><span class="line">　　　　　　　MJTwoViewController *vc = [storyboard instantiateViewControllerWithIdentifier:<span class="string">@"pink"</span>];</span><br><span class="line">　　　　　　　<span class="keyword">self</span>.window.rootViewController = vc;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
  </entry>
  
</feed>
