{"name":"工具","postlist":[{"title":"使用CocoaPods开发静态库","slug":"工具/使用CocoaPods开发静态库","date":"2018-06-21T21:37:16.000Z","updated":"2018-06-22T20:27:12.000Z","comments":true,"path":"api/articles/工具/使用CocoaPods开发静态库.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发一个用pod管理依赖关系的静态类库给其他人使用，而又不愿意公开源代码，比如一些SDK，那么就需要打包成.a文件。本文将以一个依赖于ASIHTTPRequest的静态类库，来演示如何创建使用了CocoaPods的静态类库以及打包的过程。</p>\n<h2 id=\"开发静态库（Static-Library）\"><a href=\"#开发静态库（Static-Library）\" class=\"headerlink\" title=\"开发静态库（Static Library）\"></a>开发静态库（Static Library）</h2><h3 id=\"搭建pod静态库项目\"><a href=\"#搭建pod静态库项目\" class=\"headerlink\" title=\"搭建pod静态库项目\"></a>搭建pod静态库项目</h3><h4 id=\"不基于pod手动创建-deprecated\"><a href=\"#不基于pod手动创建-deprecated\" class=\"headerlink\" title=\"不基于pod手动创建(deprecated)\"></a>不基于pod手动创建(deprecated)</h4><ol>\n<li>在Xcode中创建一个Cocoa Touch Static Library；</li>\n<li>创建Podfile文件；</li>\n<li>执行pod install完成整个项目的搭建；</li>\n<li>如果需要demo，手动创建示例程序，使用pod添加对私有静态库的依赖，重复执行pod install完成示例项目的搭建。</li>\n</ol>\n<h4 id=\"基于pod自动创建\"><a href=\"#基于pod自动创建\" class=\"headerlink\" title=\"基于pod自动创建\"></a>基于pod自动创建</h4><p>只需要输入<code>pod lib</code>命令即可完成初始项目的搭建，下面详细说明具体步骤，以<code>JHLib</code>作为项目名演示。<br>1.执行命令<code>pod lib create JHLib</code>。在此期间需要确认下面4个问题。</p>\n<h2 id=\"打包类库\"><a href=\"#打包类库\" class=\"headerlink\" title=\"打包类库\"></a>打包类库</h2><p>需要使用一个cocoapods的插件<code>cocoapods-packager</code>来完成类库的打包。当然也可以手动编译打包，但是过程会相当繁琐。</p>\n<ol>\n<li><p>安装打包插件<br>终端执行以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods-packager</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包<br>命令很简单，执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod package BZLib.podspec --library --force</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中<code>--library</code>指定打包成.a文件，如果不带上将会打包成.framework文件。<code>--force</code>是指强制覆盖。最终的目录结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|____BZLib.podspec</span><br><span class=\"line\">|____ios</span><br><span class=\"line\">| |____libBZLib.a</span><br></pre></td></tr></table></figure></p>\n<p>需要特别强调的是，该插件通过对引用的三方库进行重命名很好的解决了类库命名冲突的问题。<br>比如你的类库使用了ASI，然后打包成静态库.a文件。外部调用的项目也使用了ASI，那么不会造成冲突。因为在打包的时候，你的类库里的ASI被重命名为项目+ASI的前缀。</p>\n<p><a href=\"https://onevcat.com/2016/01/create-framework/\" target=\"_blank\" rel=\"noopener\">如何打造一个让人愉快的框架</a><br><a href=\"http://www.cnblogs.com/brycezhang/p/4117180.html\" target=\"_blank\" rel=\"noopener\">使用CocoaPods开发并打包静态库</a><br><a href=\"https://www.jianshu.com/p/2ea267bf0363\" target=\"_blank\" rel=\"noopener\">iOS动态库,静态库以及framework</a></p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]},{"title":"在Mac安装Fiddler","slug":"工具/在Mac安装Fiddler","date":"2018-05-31T16:38:52.000Z","updated":"2018-06-01T10:07:54.000Z","comments":true,"path":"api/articles/工具/在Mac安装Fiddler.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装Mono\"><a href=\"#安装Mono\" class=\"headerlink\" title=\"安装Mono\"></a>安装Mono</h3><p>Mac下需要使用.Net编译后的程序，首先需要用到跨平台的方案<code>Mono</code>(现阶段微软已推出跨平台的方案.Net Core，不过暂时只支持控制台程序)。<br><a href=\"http://www.mono-project.com/download/stable/#download-mac\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<h3 id=\"配置Mono环境\"><a href=\"#配置Mono环境\" class=\"headerlink\" title=\"配置Mono环境\"></a>配置Mono环境</h3><ol>\n<li>下载证书<br>从Mozilla LXR上下载所有受信任的root证书，存于Mono的证书库里。root证书能用于请求https地址：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd /Library/Frameworks/Mono.framework/Versions/&lt;mono version&gt;/bin/</span><br><span class=\"line\">$./mozroots --import --sync</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>./mozroots命令失效，./cert-sync新命令，暂时不知道怎么使用</p>\n<ol>\n<li>配置Mono环境变量</li>\n</ol>\n</blockquote>\n<p>在<code>.bash_profile</code>中加入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MONO_HOME=/Library/Frameworks/Mono.framework/Versions/5.0.1</span><br><span class=\"line\">export PATH=$PATH:$MONO_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Fiddler\"><a href=\"#Fiddler\" class=\"headerlink\" title=\"Fiddler\"></a>Fiddler</h2><p><a href=\"http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/InstallFiddler\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>下载<a href=\"https://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler-mac.zip</a>压缩包，解压到非中文字符的路径下。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>打开Terminal，进入到刚才解压的Fiddler路径，执行命令运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mono Fiddler.exe</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.cocoachina.com/apple/20170704/19729.html\" target=\"_blank\" rel=\"noopener\">参看</a></p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]},{"title":"ngrok使用","slug":"工具/ngrok使用","date":"2017-09-06T12:23:24.000Z","updated":"2017-10-02T22:00:43.000Z","comments":true,"path":"api/articles/工具/ngrok使用.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/tcp协议SSH端口22.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>1.注册<a href=\"https://ngrok.com/signup\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/signup</a></p>\n<ol>\n<li>Start by <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"noopener\">downloading ngrok</a>.</li>\n<li><p>Install your authtoken</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok authtoken 2tpoyojTzL5w55Y4na5DY_3shJgaMVzjJ*****</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Create your first secure tunnel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok http 80</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Open the web interface at <a href=\"http://localhost:4040\" target=\"_blank\" rel=\"noopener\">http://localhost:4040</a> to inspect and replay requests</p>\n</li>\n<li>Read the documentation for instructions on advanced features like adding HTTP authentication, setting custom subdomains and more.<h3 id=\"开启TCP协议\"><a href=\"#开启TCP协议\" class=\"headerlink\" title=\"开启TCP协议\"></a>开启TCP协议</h3></li>\n<li>开启TCP实现SSH远程访问. <a href=\"https://ngrok.com/docs#tcp\" target=\"_blank\" rel=\"noopener\">详见</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok tcp 22</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如图：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/tcp协议SSH端口22.png?imageMogr2/2/w/800\"></p>\n<blockquote>\n<p>每当执行开启命令，端口就会随机生成最新的。</p>\n</blockquote>\n<ol>\n<li>配置SSH远程工具<br>自定义SSH名：ngrok<br>SSH域名地址：0.tcp.ngrok.io  (ngrok提供的免费域名，IP地址ping就变新)<br>SSH端口号：16335 （每次重新启动时需更新）<br>用户名称/密码: 电脑管理员账户/密码<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/ssh工具配置.jpg?imageMogr2/2/w/800\"></li>\n<li>手机热点访问远程内网电脑<br>连接前准备：<ol>\n<li>使用“网络实用工具”扫描<code>0.tcp.ngrok.io</code>域名，确保当前网络16335端口开启</li>\n<li>备选方案，使用手机热点分享，来访问内网电脑，进行连通测试。<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/网络实用工具.png?imageMogr2/2/w/800\"></li>\n</ol>\n</li>\n<li>连接成功。<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/SSH连接成功.jpg?imageMogr2/2/w/800\">\n总结：可以使用ngrok客户端，开启tcp协议端口，实现SSH远程控制，在不要求过高的网速和安全，可以不搭建ngrok服务器。</li>\n</ol>\n<h3 id=\"强大的tunnel-隧道-工具部署原理\"><a href=\"#强大的tunnel-隧道-工具部署原理\" class=\"headerlink\" title=\"强大的tunnel(隧道)工具部署原理\"></a>强大的tunnel(隧道)工具部署原理</h3><p><a href=\"http://tonybai.com/2015/05/14/ngrok-source-intro/\" target=\"_blank\" rel=\"noopener\">部署</a><br>ngrok在其github官方页面上的自我诠释是 “introspected tunnels to localhost”，这个诠释有两层含义：<br>1、可以用来建立public到localhost的tunnel，让居于内网主机上的服务可以暴露给public，俗称内网穿透。<br>2、支持对隧道中数据的introspection（内省），支持可视化的观察隧道内数据，并replay（重放）相关请求（诸如http请 求）。<br>因此ngrok可以很便捷的协助进行服务端程序调试，尤其在进行一些Web server开发中。ngrok更强大的一点是它支持tcp层之上的所有应用协议或者说与应用层协议无关。比如：你可以通过ngrok实现ssh登录到内 网主 机，也可以通过ngrok实现远程桌面(VNC)方式访问内网主机。</p>\n<p>一、ngrok tunnel与ngrok部署</p>\n<p>网络tunnel（隧道）对多数人都是很”神秘“的概念，tunnel种类很多，没有标准定义，我了解的也不多（日常工作较少涉及），这里也就不 深入了。在《HTTP权威指南》中有关于HTTP tunnel（http上承载非web流量）和SSL tunnel的说明，但ngrok中的tunnel又与这些有所不同。</p>\n<p>ngrok实现了一个tcp之上的端到端的tunnel，两端的程序在ngrok实现的Tunnel内透明的进行数据交互。<br><img src=\"http://tonybai.com/wp-content/uploads/ngrok-tunnel.png\" alt=\"\"><br>ngrok分为client端(ngrok)和服务端(ngrokd)，实际使用中的部署如下：<br><img src=\"http://tonybai.com/wp-content/uploads/ngrok-deployment.png\" alt=\"\"><br>内网服务程序可以与ngrok client部署在同一主机，也可以部署在内网可达的其他主机上。ngrok和ngrokd会为建立与public client间的专用通道（tunnel）。</p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"},{"name":"网络","path":"api/categories/网络.json"}],"tags":[]},{"title":"在slack上实现实时绘UML图","slug":"工具/在slack上实现实时绘UML图","date":"2017-06-28T15:57:00.000Z","updated":"2017-06-28T15:57:36.000Z","comments":true,"path":"api/articles/工具/在slack上实现实时绘UML图.json","excerpt":null,"keywords":null,"cover":"http://www.plantuml.com/plantuml/svg/NLFFRjem6B_xAImuq2An1-3Gsqxh_cXQJz031KCYWYs5H5KrJGAj3EWWeBQC5T9kRCg4fecYReCj27WPx8Itc1C3exqvNpx__dsVDLbJ45o-xJlJkyMV0cqC9QIIhCvCcrxr5xOTn-pobjMArEpdbKGowtnlqyPNEhXXxP4p-KWh8psdqEuC917Ma0ebb4WX5V3Y4T7esAAbCK0ujIg3c0zo21Dvw9y0I2f4Jy70chPEptgSEV0Qn0I6tokE82Qw_99tND70I2nuWXI571_k-VNeoj761V2gNbj6HGZpBd4n2gdnoJtjCFC7U0Esq4HRP4-8Z4BXzE3fFl0BCBBcSMSNj6H9X6ITopwhZ5bhoEg3E7xr_CdZPolM_p0RFGSlzm48iP_zPVcCzNlqkXq2c6W8gd96qY19hmJ2ACp8cgGVCRlfV2vI-oAEFL0n4_7BwVvYXYKC2n05fNsC1vd2uB4aQuYBdZVTNaqmR0qQBYQ6BzGrnhJnWLCAD_T1HG115QLuogMwCnqGNSiG6MUW5qCSUv6KxQX6iWYBhv8LtNQ-az_rp1iMNwIr-PtT04-3lgi5_BosXqYhTTPeUXtYUxl37Sou017sVPaRE35B3cOMt6z5PpwXNwxYEF12GOayWac2qxAQWoT43wa8SWYOW2hXmJmAF9Z8Xbvu5zJXi4yU3Y-cNXHnl2nqt7bPvUkUGrpsOjPrEgUhRQnLb-UyXLrR_Fqunb10-461zVj94qwg0gSxy7p_Vk_UjkZV4RlhCRCgRebdk5v8ZivQ5NPZUgzCNFu7","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://github.com/huos3203/umlbot\" target=\"_blank\" rel=\"noopener\">umlbot源码库</a><br><img src=\"http://www.plantuml.com/plantuml/svg/NLFFRjem6B_xAImuq2An1-3Gsqxh_cXQJz031KCYWYs5H5KrJGAj3EWWeBQC5T9kRCg4fecYReCj27WPx8Itc1C3exqvNpx__dsVDLbJ45o-xJlJkyMV0cqC9QIIhCvCcrxr5xOTn-pobjMArEpdbKGowtnlqyPNEhXXxP4p-KWh8psdqEuC917Ma0ebb4WX5V3Y4T7esAAbCK0ujIg3c0zo21Dvw9y0I2f4Jy70chPEptgSEV0Qn0I6tokE82Qw_99tND70I2nuWXI571_k-VNeoj761V2gNbj6HGZpBd4n2gdnoJtjCFC7U0Esq4HRP4-8Z4BXzE3fFl0BCBBcSMSNj6H9X6ITopwhZ5bhoEg3E7xr_CdZPolM_p0RFGSlzm48iP_zPVcCzNlqkXq2c6W8gd96qY19hmJ2ACp8cgGVCRlfV2vI-oAEFL0n4_7BwVvYXYKC2n05fNsC1vd2uB4aQuYBdZVTNaqmR0qQBYQ6BzGrnhJnWLCAD_T1HG115QLuogMwCnqGNSiG6MUW5qCSUv6KxQX6iWYBhv8LtNQ-az_rp1iMNwIr-PtT04-3lgi5_BosXqYhTTPeUXtYUxl37Sou017sVPaRE35B3cOMt6z5PpwXNwxYEF12GOayWac2qxAQWoT43wa8SWYOW2hXmJmAF9Z8Xbvu5zJXi4yU3Y-cNXHnl2nqt7bPvUkUGrpsOjPrEgUhRQnLb-UyXLrR_Fqunb10-461zVj94qwg0gSxy7p_Vk_UjkZV4RlhCRCgRebdk5v8ZivQ5NPZUgzCNFu7\"></p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]},{"title":"使用Numbers做导图","slug":"工具/使用Numbers做导图","date":"2017-06-16T17:43:31.000Z","updated":"2017-06-28T15:57:36.000Z","comments":true,"path":"api/articles/工具/使用Numbers做导图.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/基础.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Pages文档、Numbers电子表格 和 Keynote演示文稿无不集思广益， 是创建精彩作品的理想工具。利用实时协作功能，你的团队成员可通过 Mac、iPad 或 iPhone 协作，共同编辑文档、电子表格或演示文稿，而 PC 用户也可通过 iCloud 版 iWork 一起参与。另外，你可以通过 Touch ID 瞬间解锁带有密码保护的文档。</p>\n<h2 id=\"与其他人协作\"><a href=\"#与其他人协作\" class=\"headerlink\" title=\"与其他人协作\"></a>与其他人协作</h2><p>有了 iCloud 版 Pages、Numbers 和 Keynote，你和团队可通过 Mac 或 PC 上的网页浏览器，访问并编辑你的各种文件。只需登录 iCloud.com，打开网页上的 app，就可以开始工作。无论你的团队成员是近在咫尺，还是远在天边，合作起来都是如此高效。<br><a href=\"https://www.icloud.com/\" target=\"_blank\" rel=\"noopener\">登录iCloud版APP</a></p>\n<h2 id=\"图表使用法\"><a href=\"#图表使用法\" class=\"headerlink\" title=\"图表使用法\"></a>图表使用法</h2><h3 id=\"功能一：实用模版任君选择\"><a href=\"#功能一：实用模版任君选择\" class=\"headerlink\" title=\"功能一：实用模版任君选择\"></a>功能一：实用模版任君选择</h3><p>Numbers丰富的模板样式供用户选择，包括核对清单、贷款比较、预算、支出报告、员工日程表等，这些模版可广泛应用于企业员工日常的工作中，而且颜色、字体和图表质感均非常搭调，不仅实用还很美观。</p>\n<ol>\n<li><p>基础<br>空白，核对清单，核对清单总计，制图基础知识</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/基础.png?imageMogr2/2/w/800\">\n</li>\n<li><p>个人财务<br>简单预算，个人预算，个人储蓄，净值，退休储蓄，贷款比较，抵押贷款计算器</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/财务.png?imageMogr2/2/w/800\">\n</li>\n<li><p>个人<br>日历，日程表，跑步记录，家居装饰，球队组织，宝宝计划，旅游计划，聚会计划，膳食计划，食谱</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/个人.png?imageMogr2/2/w/800\">\n</li>\n<li><p>商业<br>员工日程表，发票，投资回报，盈亏平衡分析</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/商业.png?imageMogr2/2/w/800\">\n</li>\n<li><p>教育<br>出勤，成绩簿，概率实验，相关性项目，教育储蓄</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images//images/教育.png?imageMogr2/2/w/800\">\n</li>\n</ol>\n<h3 id=\"功能二：演示效果佳-表格-形状-图片-视频便捷插入\"><a href=\"#功能二：演示效果佳-表格-形状-图片-视频便捷插入\" class=\"headerlink\" title=\"功能二：演示效果佳 表格/形状/图片/视频便捷插入\"></a>功能二：演示效果佳 表格/形状/图片/视频便捷插入</h3><p>（iPad中不存在画笔）</p>\n<h3 id=\"功能三：空白模版很方便-格式随意修改\"><a href=\"#功能三：空白模版很方便-格式随意修改\" class=\"headerlink\" title=\"功能三：空白模版很方便 格式随意修改\"></a>功能三：空白模版很方便 格式随意修改</h3><h3 id=\"功能四：熟练使用250多个函数成为神算手\"><a href=\"#功能四：熟练使用250多个函数成为神算手\" class=\"headerlink\" title=\"功能四：熟练使用250多个函数成为神算手\"></a>功能四：熟练使用250多个函数成为神算手</h3><ol>\n<li>菜单—插入—公式（Formula）— 基本公式算法<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/Formula.png?imageMogr2/2/w/800\">\n</li>\n</ol>\n<h3 id=\"功能五：三维、交互式图表效果更出色\"><a href=\"#功能五：三维、交互式图表效果更出色\" class=\"headerlink\" title=\"功能五：三维、交互式图表效果更出色\"></a>功能五：三维、交互式图表效果更出色</h3><h3 id=\"功能六：可指定数据类型的单元格的技巧\"><a href=\"#功能六：可指定数据类型的单元格的技巧\" class=\"headerlink\" title=\"功能六：可指定数据类型的单元格的技巧\"></a>功能六：可指定数据类型的单元格的技巧</h3><h3 id=\"功能七：数据随时存-iCloud用处大\"><a href=\"#功能七：数据随时存-iCloud用处大\" class=\"headerlink\" title=\"功能七：数据随时存 iCloud用处大\"></a>功能七：数据随时存 iCloud用处大</h3>","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]},{"title":"calibre一站式电子书解决方案","slug":"工具/calibre一站式电子书解决方案","date":"2017-05-25T14:26:15.000Z","updated":"2017-06-28T15:57:36.000Z","comments":true,"path":"api/articles/工具/calibre一站式电子书解决方案.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/calibre.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Calibre，是一个免费的开源的“一站式”的电子书解决方案，它可以全面满足你的电子书需求。Calibre 是免费的，源代码开放，拥有跨平台的设计。它是一个完整的电子图书馆，包括图书管理，格式转换，新闻，将材料转换为电子书，以及电子书阅读器同步功能、整合进电子图书阅读器。当然它也内置了一个 ePub 格式电子书编辑工具以满足修改电子书的需要。   </p>\n<p>感兴趣的几个功能点：</p>\n<ol>\n<li><p>爬虫功能，即可以支持一键抓取新闻，根据指定的feed订阅源，来制作书籍。<br> 这样便可每天爬取最新消息，发到kindle上看新闻</p>\n</li>\n<li><p>支持kindle书籍，相比kindle应用，它能自由复制书本内容，便于笔记整理。</p>\n</li>\n</ol>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/calibre.png?imageMogr2/2/w/800\">\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"}]},{"title":"使用Cocoapods创建私有podspec","slug":"工具/使用Cocoapods创建私有podspec","date":"2017-02-28T15:46:16.000Z","updated":"2018-06-21T21:43:37.000Z","comments":true,"path":"api/articles/工具/使用Cocoapods创建私有podspec.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/repo目录.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"创建一个版本库来托管pod索引-pod-repo-add命令\"><a href=\"#创建一个版本库来托管pod索引-pod-repo-add命令\" class=\"headerlink\" title=\"创建一个版本库来托管pod索引:pod repo add命令\"></a>创建一个版本库来托管pod索引:pod repo add命令</h2><p>第一步：在github登录个人账号，创建一个库作为pod索引托管库。也可根据具体情况可以选择：<code>github</code>、<code>CODING</code>、<code>开源中国</code>、<code>Bitbucket</code>以及<code>CSDN</code>等，代码托管平台。<br>当索引库托管在github私有的仓库时，如果有其他同事共同开发维护，则需要配置Git仓库的权限。<br>第二步：pod化版本库，使其专门用户管理个人的<code>*podspec</code>索引文件<br><figure class=\"highlight ruby\"><figcaption><span>repo add命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span></span><br><span class=\"line\">$ pod repo add PodRepo <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/huos</span>3203/PodRepo.git</span><br><span class=\"line\"><span class=\"comment\">#输出：</span></span><br><span class=\"line\">&gt; Cloning spec repo <span class=\"string\">`PodRepo`</span> from <span class=\"string\">`https://github.com/huos3203/PodRepo.git`</span></span><br></pre></td></tr></table></figure><br>此时在本地会生成<code>~/.cocoapods/repos/PodRepo</code>目录，这个目录就可以用来存储你所有的开源包。<br>每当一个或多个<code>*.podspec</code>文件测试无误时，就可以使用<code>pod repo push</code>命令向私有索引库中提交该文件。<br><figure class=\"highlight ruby\"><figcaption><span>lib create命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod repo push PodRepo LogSwift.podspec  <span class=\"comment\">#PodRepo是本地Repo名字 后面是podspec名字</span></span><br></pre></td></tr></table></figure><br>完成之后这个组件库就添加到私有索引库中，自动生成的<code>pod 库</code>标准结构：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/repo目录.png?imageMogr2/2/w/800\"><br>同时<code>push命令</code>会将新增的索引目录推送至自己的远程仓库中，即索引托管库<code>PodRepo.git</code>中。</p>\n<p>下面详述<code>podspec文件</code>的配置，检测，使用的过程。</p>\n<h2 id=\"使用模板命令创建Pod工程项目-lib-create\"><a href=\"#使用模板命令创建Pod工程项目-lib-create\" class=\"headerlink\" title=\"使用模板命令创建Pod工程项目 lib create\"></a>使用模板命令创建Pod工程项目 lib create</h2><p>初始化Pod模板项目：<br><figure class=\"highlight ruby\"><figcaption><span>lib create命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib create LogSwift</span><br></pre></td></tr></table></figure><br>有以下五步命令行交互：<br><figure class=\"highlight ruby\"><figcaption><span>交互</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What is your email?</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">What language <span class=\"keyword\">do</span> you want to use?? [ Swift / ObjC ]</span><br><span class=\"line\">&gt;Swift</span><br><span class=\"line\">Would you like to <span class=\"keyword\">include</span> a demo application with your library? [ Yes / No ]</span><br><span class=\"line\">&gt;Yes</span><br><span class=\"line\">Which testing frameworks will you use? [ Quick / None ]</span><br><span class=\"line\">&gt;Quick</span><br><span class=\"line\">Would you like to <span class=\"keyword\">do</span> view based testing? [ Yes / No ]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure><br>会自动执行<code>pod install</code>命令创建项目并生成依赖。</p>\n<h3 id=\"添加库文件和资源\"><a href=\"#添加库文件和资源\" class=\"headerlink\" title=\"添加库文件和资源\"></a>添加库文件和资源</h3><p>例如：把一个网络模块的共有组件放入<code>Pod/Classes</code>中，然后进入<code>Example</code>文件夹执行<code>pod update</code>命令，再打开项目工程可以看到，刚刚添加的组件已经在<code>Pods</code>子工程下<code>Development Pods/PodTestLibrary</code>中了，然后编辑demo工程，测试组件。<br>测试无误后需要将该项目添加并推送到远端仓库，并编辑podspec文件。</p>\n<h3 id=\"配置podspec文件及验证命令lib-lint\"><a href=\"#配置podspec文件及验证命令lib-lint\" class=\"headerlink\" title=\"配置podspec文件及验证命令lib lint\"></a>配置podspec文件及验证命令lib lint</h3><h4 id=\"打tag号作为podspec版本号\"><a href=\"#打tag号作为podspec版本号\" class=\"headerlink\" title=\"打tag号作为podspec版本号\"></a>打tag号作为podspec版本号</h4><p>因为<code>podspec文件</code>中获取<code>Git版本控制</code>的项目还需要<code>tag号</code>，所以我们要打上一个<code>tag</code><br><figure class=\"highlight ruby\"><figcaption><span>打标签</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -m <span class=\"string\">\"first release\"</span> <span class=\"number\">0</span>.<span class=\"number\">1.0</span></span><br><span class=\"line\">$ git push --tags     <span class=\"comment\">#推送tag到远端仓库</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"编辑podspec文件\"><a href=\"#编辑podspec文件\" class=\"headerlink\" title=\"编辑podspec文件\"></a>编辑podspec文件</h4><p><code>podspec文件</code>是一个Ruby格式：<br><figure class=\"highlight ruby\"><figcaption><span>podspec文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">s.name             = <span class=\"string\">\"PodTestLibrary\"</span>    <span class=\"comment\">#名称</span></span><br><span class=\"line\">s.version          = <span class=\"string\">\"0.1.0\"</span>             <span class=\"comment\">#版本号</span></span><br><span class=\"line\">s.summary          = <span class=\"string\">\"Just Testing.\"</span>     <span class=\"comment\">#简短介绍，下面是详细介绍</span></span><br><span class=\"line\">s.description      = <span class=\"string\">&lt;&lt;-DESC</span></span><br><span class=\"line\"><span class=\"string\">Testing Private Podspec.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* Markdown format.</span></span><br><span class=\"line\"><span class=\"string\">* Don't worry about the indent, we strip it!</span></span><br><span class=\"line\"><span class=\"string\">DESC</span></span><br><span class=\"line\">s.homepage         = <span class=\"string\">\"https://coding.net/u/boyers/p/podTestLibrary\"</span>                           <span class=\"comment\">#主页,这里要填写可以访问到的地址，不然验证不通过</span></span><br><span class=\"line\"><span class=\"comment\"># s.screenshots     = \"www.example.com/screenshots_1\", \"www.example.com/screenshots_2\"           #截图</span></span><br><span class=\"line\">s.license          = <span class=\"string\">'MIT'</span>              <span class=\"comment\">#开源协议</span></span><br><span class=\"line\">s.author           = &#123; <span class=\"string\">\"boyers\"</span> =&gt; <span class=\"string\">\"boyers@foxmail.com\"</span> &#125;  <span class=\"comment\">#作者信息</span></span><br><span class=\"line\">s.source           = &#123; <span class=\"symbol\">:git</span> =&gt; <span class=\"string\">\"https://coding.net/boyers/podTestLibrary.git\"</span>, <span class=\"symbol\">:tag</span> =&gt; <span class=\"string\">\"0.1.0\"</span> &#125;      <span class=\"comment\">#项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS</span></span><br><span class=\"line\"><span class=\"comment\"># s.social_media_url = 'https://twitter.com/&lt;TWITTER_USERNAME&gt;'                       #多媒体介绍地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.platform     = <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span>            <span class=\"comment\">#支持的平台及版本</span></span><br><span class=\"line\">s.requires_arc = <span class=\"literal\">true</span>                   <span class=\"comment\">#是否使用ARC，如果指定具体文件，则具体的问题使用ARC</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.source_files = <span class=\"string\">'Pod/Classes/**/*'</span>     <span class=\"comment\">#代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</span></span><br><span class=\"line\">s.resource_bundles = &#123;</span><br><span class=\"line\"><span class=\"string\">'PodTestLibrary'</span> =&gt; [<span class=\"string\">'Pod/Assets/*.png'</span>]</span><br><span class=\"line\">&#125;                                       <span class=\"comment\">#资源文件地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.public_header_files = <span class=\"string\">'Pod/Classes/**/*.h'</span>   <span class=\"comment\">#公开头文件地址</span></span><br><span class=\"line\">s.frameworks = <span class=\"string\">'UIKit'</span>                  <span class=\"comment\">#所需的framework，多个用逗号隔开</span></span><br><span class=\"line\">s.dependency <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 2.3'</span>   <span class=\"comment\">#依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"验证podspec文件可用性\"><a href=\"#验证podspec文件可用性\" class=\"headerlink\" title=\"验证podspec文件可用性\"></a>验证podspec文件可用性</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod lib lint</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">-&gt; PodTestLibrary (<span class=\"number\">0</span>.<span class=\"number\">1.0</span>)</span><br><span class=\"line\">PodTestLibrary passed validation.</span><br></pre></td></tr></table></figure>\n<p>说明验证通过了，不过这只是这个<code>podspec文件</code>是合格的，不一定说明这个Pod是可以用的，Pod需要在本地做一下验证。</p>\n<h3 id=\"将源码托管到远程仓库\"><a href=\"#将源码托管到远程仓库\" class=\"headerlink\" title=\"将源码托管到远程仓库\"></a>将源码托管到远程仓库</h3><p>通过<code>Cocoapods</code>创建出来的目录本身就在本地的<code>Git</code>管理下，我们需要做的就是给它添加远端仓库，同样去<code>GitHub</code>或其他的Git服务提供商那里创建一个<code>私有的仓库</code>，拿到<code>SSH地址</code>，然后<code>cd</code>到<code>LogSwift</code>目录<br><figure class=\"highlight ruby\"><figcaption><span>添加到远程仓库</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -s -m <span class=\"string\">\"Initial Commit of Library\"</span></span><br><span class=\"line\">$ git remote add origin <span class=\"symbol\">https:</span>/<span class=\"regexp\">/coding.net/git</span><span class=\"regexp\">/LogSwift.git   #添加远端仓库</span></span><br><span class=\"line\"><span class=\"regexp\">$ git push origin master        #提交到远端仓库</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"手动配置Pod私库项目支持：spec-create\"><a href=\"#手动配置Pod私库项目支持：spec-create\" class=\"headerlink\" title=\"手动配置Pod私库项目支持：spec create\"></a>手动配置Pod私库项目支持：spec create</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod spec create LogSwift git@coding.<span class=\"symbol\">net:</span>boyers/LogSwift.git</span><br></pre></td></tr></table></figure>\n<p>执行完之后，就创建了一个<code>podspec文件</code>，他其中会包含很多内容，可以按照我之前介绍的进行编辑，没用的删掉。编辑完成之后使用验证命令<code>pod lib lint</code>验证一下。</p>\n<h2 id=\"path-gt-在新项目配置检测podspec文件\"><a href=\"#path-gt-在新项目配置检测podspec文件\" class=\"headerlink\" title=\":path =&gt; 在新项目配置检测podspec文件\"></a>:path =&gt; 在新项目配置检测podspec文件</h2><p>在这个项目的<code>Podfile</code>文件中直接指定刚才创建编辑好的<code>podspec文件</code>，看是否可用。</p>\n<ol>\n<li>指定本地依赖的两种方式:<figure class=\"highlight ruby\"><figcaption><span>Podfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'LogSwift'</span>, <span class=\"symbol\">:path</span> =&gt; <span class=\"string\">'~/code/Cocoapods/podTest/LogSwift'</span>      <span class=\"comment\"># 指定路径</span></span><br><span class=\"line\">pod <span class=\"string\">'LogSwift'</span>, <span class=\"symbol\">:podspec</span> =&gt; <span class=\"string\">'~/code/Cocoapods/podTest/LogSwift/LogSwift.podspec'</span>  <span class=\"comment\"># 指定podspec文件</span></span><br></pre></td></tr></table></figure></li>\n<li>指定源码的远程仓库作为依赖<br>前提时索引文件中指定的tag版本的源码必须推送到远程仓库<figure class=\"highlight ruby\"><figcaption><span>Podfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'MusicLrc'</span>, <span class=\"symbol\">:git</span> =&gt; <span class=\"string\">'https://github.com/huos3203/MusicLrcTest.git'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后执行<code>pod install</code>命令安装依赖，打开项目工程，可以看到<code>库文件</code>和<code>资源</code>都被加载到<code>Pods子项目</code>中了，不过它们并没有在<code>Pods目录</code>下，而是跟测试项目一样存在于<code>Development Pods/LogSwift</code>中，这是因为我们是在本地测试，而没有把<code>podspec文件</code>添加到<code>Spec Repo</code>中的缘故。</p>\n<h2 id=\"万事具备，向私有索引库中提交podspec文件：repo-push\"><a href=\"#万事具备，向私有索引库中提交podspec文件：repo-push\" class=\"headerlink\" title=\"万事具备，向私有索引库中提交podspec文件：repo push\"></a>万事具备，向私有索引库中提交podspec文件：repo push</h2><p>每当一个或多个<code>*.podspec</code>文件测试无误时，就可以使用<code>pod repo push</code>命令向私有索引库中提交该文件。<br><figure class=\"highlight ruby\"><figcaption><span>lib create命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod repo push PodRepo LogSwift.podspec  <span class=\"comment\">#PodRepo是本地Repo名字 后面是podspec名字</span></span><br></pre></td></tr></table></figure><br>完成之后这个组件库就添加到私有索引库中，自动生成的<code>pod 库</code>标准结构：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/repo目录.png?imageMogr2/2/w/800\"><br>同时<code>push命令</code>会将新增的索引目录推送至自己的远程仓库中，即索引托管库<code>PodRepo.git</code>中。</p>\n<h2 id=\"trunk-push-添加到Cocoapods的官方索引库\"><a href=\"#trunk-push-添加到Cocoapods的官方索引库\" class=\"headerlink\" title=\"trunk push 添加到Cocoapods的官方索引库\"></a>trunk push 添加到Cocoapods的官方索引库</h2><h3 id=\"注册trunk，邮箱验证\"><a href=\"#注册trunk，邮箱验证\" class=\"headerlink\" title=\"注册trunk，邮箱验证\"></a>注册trunk，邮箱验证</h3><p>在注册trunk之前，我们需要确认当前的CocoaPods版本是否足够新:<br>sudo gem install cocoapods<br>开始注册trunk：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register boyer@163.com <span class=\"string\">'boyers1250'</span>  --verbose</span><br></pre></td></tr></table></figure><br><code>-verbose</code>参数是为了便于输出注册过程中的调试信息。<br>执行上面的语句后，你的邮箱将会受到一封带有验证链接的邮件，如果没有请去垃圾箱找找，有可能被屏蔽了。点击邮件的链接就完成了trunk注册流程。<br>使用下面的命令可以向trunk服务器查询自己的注册信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk me</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"通过trunk推送podspec文件\"><a href=\"#通过trunk推送podspec文件\" class=\"headerlink\" title=\"通过trunk推送podspec文件\"></a>通过trunk推送podspec文件</h3><p>现在我们已经有了自己的podspec文件，但是在推送podspec文件之前你需要确认以下几点：</p>\n<ol>\n<li>确保你的源码已经push到Github上。</li>\n<li>确保你所push的代码已经打上”version tag”版本号标签：<br>只有确保了以上两点，CocoaPods才能更准确地找到你的repo。<br>现在我们开始通过trunk上传你的podspec文件。先cd到podspec文件所在目录，执行：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk push WZLBadge.podspec</span><br></pre></td></tr></table></figure>\n执行上面的push操作，就相当于你把你的源代码提交给CocoaPods团队审核了，CocoaPods审核只需要几秒钟或者几分钟就可以完成。</li>\n</ol>\n<h2 id=\"使用远程的私有Pod库\"><a href=\"#使用远程的私有Pod库\" class=\"headerlink\" title=\"使用远程的私有Pod库\"></a>使用远程的私有Pod库</h2><p>我们的这个组件库就已经制作添加完成了，现在可以<code>pod search</code>命令查到这个库，当使用时配置Podfile依赖文件即可。</p>\n<ol>\n<li>pod search 查找库<figure class=\"highlight ruby\"><figcaption><span>查找库</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pod search PodTestLibrary</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; PodTestLibrary (<span class=\"number\">0</span>.<span class=\"number\">1.0</span>)</span><br><span class=\"line\">Just Testing.</span><br><span class=\"line\">pod <span class=\"string\">'PodTestLibrary'</span>, <span class=\"string\">'~&gt; 0.1.0'</span></span><br><span class=\"line\">- <span class=\"symbol\">Homepage:</span> <span class=\"symbol\">https:</span>/<span class=\"regexp\">/coding.net/u</span><span class=\"regexp\">/boyers/p</span><span class=\"regexp\">/podTestLibrary</span></span><br><span class=\"line\"><span class=\"regexp\">- Source:   https:/</span><span class=\"regexp\">/coding.net/boyers</span><span class=\"regexp\">/podTestLibrary.git</span></span><br><span class=\"line\"><span class=\"regexp\">- Versions: 0.1.0 [WTSpecs repo]</span></span><br></pre></td></tr></table></figure></li>\n<li>在Podfile文件中配置库依赖<figure class=\"highlight ruby\"><figcaption><span>配置库依赖</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">'PodTestLibrary'</span>, <span class=\"string\">'~&gt; 0.1.0'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"更新维护podspec文件配置，升级库版本\"><a href=\"#更新维护podspec文件配置，升级库版本\" class=\"headerlink\" title=\"更新维护podspec文件配置，升级库版本\"></a>更新维护podspec文件配置，升级库版本</h2><p><code>subspec</code>特性，可以在库原有基础上，添加更多的模块，相应创建了多个子目录。现在尝试添加包括<code>工具类</code>，底层<code>Model</code>及<code>UIKit</code>扩展等。</p>\n<h3 id=\"添加模块库文件和资源\"><a href=\"#添加模块库文件和资源\" class=\"headerlink\" title=\"添加模块库文件和资源\"></a>添加模块库文件和资源</h3><p>具体做法是先将源文件添加到<code>Pod/Classes</code>中，然后按照不同的模块对文件目录进行整理，因为我有四个模块，所以在<code>Pod/Classes</code>下有创建了四个子目录</p>\n<h3 id=\"打tag号作为podspec版本号-1\"><a href=\"#打tag号作为podspec版本号-1\" class=\"headerlink\" title=\"打tag号作为podspec版本号\"></a>打tag号作为podspec版本号</h3><p>因为<code>podspec文件</code>中获取<code>Git版本控制</code>的项目还需要<code>tag号</code>，所以我们要打上一个<code>tag</code><br><figure class=\"highlight ruby\"><figcaption><span>打标签</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -m <span class=\"string\">\"first release\"</span> <span class=\"number\">0</span>.<span class=\"number\">1.0</span></span><br><span class=\"line\">$ git push --tags     <span class=\"comment\">#推送tag到远端仓库</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更新podspec配置文件\"><a href=\"#更新podspec配置文件\" class=\"headerlink\" title=\"更新podspec配置文件\"></a>更新podspec配置文件</h3><p>当创建了<code>subspec</code>，之前项目整体的依赖<code>dependency</code>:</p>\n<ol>\n<li>源文件:<code>source_files</code></li>\n<li>头文件:<code>public_header_files</code></li>\n<li>资源文件:<code>resource</code><br>都移动到了各自的<code>subspec</code>中，每个<code>subspec</code>之间也可以有相互的依赖关系，比如<code>UIKitAdditio</code>n就依赖于<code>CommonTools</code>。<figure class=\"highlight ruby\"><figcaption><span>更新podspec配置文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">s.name             = <span class=\"string\">\"PodTestLibrary\"</span></span><br><span class=\"line\">s.version          = <span class=\"string\">\"1.0.0\"</span></span><br><span class=\"line\">s.summary          = <span class=\"string\">\"Just Testing.\"</span></span><br><span class=\"line\">s.description      = <span class=\"string\">&lt;&lt;-DESC</span></span><br><span class=\"line\"><span class=\"string\">                         Testing Private Podspec.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                        * Markdown format.</span></span><br><span class=\"line\"><span class=\"string\">                        * Don't worry about the indent, we strip it!</span></span><br><span class=\"line\"><span class=\"string\">                    DESC</span></span><br><span class=\"line\">s.homepage         = <span class=\"string\">\"https://coding.net/u/boyers/p/podTestLibrary\"</span></span><br><span class=\"line\"><span class=\"comment\"># s.screenshots     = \"www.example.com/screenshots_1\", \"www.example.com/screenshots_2\"</span></span><br><span class=\"line\">s.license          = <span class=\"string\">'MIT'</span></span><br><span class=\"line\">s.author           = &#123; <span class=\"string\">\"boyers\"</span> =&gt; <span class=\"string\">\"boyers@foxmail.com\"</span> &#125;</span><br><span class=\"line\">s.source           = &#123; <span class=\"symbol\">:git</span> =&gt; <span class=\"string\">\"https://coding.net/boyers/podTestLibrary.git\"</span>, <span class=\"symbol\">:tag</span> =&gt; <span class=\"string\">\"1.0.0\"</span> &#125;</span><br><span class=\"line\"><span class=\"comment\"># s.social_media_url = 'https://twitter.com/&lt;TWITTER_USERNAME&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.platform     = <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span></span><br><span class=\"line\">s.requires_arc = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#s.source_files = 'Pod/Classes/**/*'</span></span><br><span class=\"line\"><span class=\"comment\">#s.resource_bundles = &#123; 'PodTestLibrary' =&gt; ['Pod/Assets/*.png'] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#s.public_header_files = 'Pod/Classes/**/*.h'</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.subspec <span class=\"string\">'NetWorkEngine'</span> <span class=\"keyword\">do</span> <span class=\"params\">|networkEngine|</span></span><br><span class=\"line\">    networkEngine.source_files = <span class=\"string\">'Pod/Classes/NetworkEngine/**/*'</span></span><br><span class=\"line\">    networkEngine.public_header_files = <span class=\"string\">'Pod/Classes/NetworkEngine/**/*.h'</span></span><br><span class=\"line\">    networkEngine.dependency <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 2.3'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.subspec <span class=\"string\">'DataModel'</span> <span class=\"keyword\">do</span> <span class=\"params\">|dataModel|</span></span><br><span class=\"line\">    dataModel.source_files = <span class=\"string\">'Pod/Classes/DataModel/**/*'</span></span><br><span class=\"line\">    dataModel.public_header_files = <span class=\"string\">'Pod/Classes/DataModel/**/*.h'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.subspec <span class=\"string\">'CommonTools'</span> <span class=\"keyword\">do</span> <span class=\"params\">|commonTools|</span></span><br><span class=\"line\">    commonTools.source_files = <span class=\"string\">'Pod/Classes/CommonTools/**/*'</span></span><br><span class=\"line\">    commonTools.public_header_files = <span class=\"string\">'Pod/Classes/CommonTools/**/*.h'</span></span><br><span class=\"line\">    commonTools.dependency <span class=\"string\">'OpenUDID'</span>, <span class=\"string\">'~&gt; 1.0.0'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.subspec <span class=\"string\">'UIKitAddition'</span> <span class=\"keyword\">do</span> <span class=\"params\">|ui|</span></span><br><span class=\"line\">    ui.source_files = <span class=\"string\">'Pod/Classes/UIKitAddition/**/*'</span></span><br><span class=\"line\">    ui.public_header_files = <span class=\"string\">'Pod/Classes/UIKitAddition/**/*.h'</span></span><br><span class=\"line\">    ui.resource = <span class=\"string\">\"Pod/Assets/MLSUIKitResource.bundle\"</span></span><br><span class=\"line\">    ui.dependency <span class=\"string\">'PodTestLibrary/CommonTools'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.frameworks = <span class=\"string\">'UIKit'</span></span><br><span class=\"line\">    <span class=\"comment\">#s.dependency 'AFNetworking', '~&gt; 2.3'</span></span><br><span class=\"line\">    <span class=\"comment\">#s.dependency 'OpenUDID', '~&gt; 1.0.0'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n编辑完成之后，在测试项目里<code>pod update</code>一下，几个子项目都被加进项目工程了，写代码验证无误之后，就可以将这个工程push到远端仓库，并打上新的<code>tag-&gt;1.0.0</code>。<blockquote>\n<p>但是如果你的代码版本号没变(podspec里的version自然也没变)就会提示push失败，即使你更改了podspec的其他地方，pod也会认为这两个文件是同一个。 我目前为止找不到trunk的相关update接口，所以只能顺水推舟，更新源代码版本号（如：1.1.1-&gt;1.1.2），重新push version tag，然后再执行pod trunk push操作。</p>\n</blockquote>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"pod","path":"api/tags/pod.json"},{"name":"私库","path":"api/tags/私库.json"}]},{"title":"Kindle之ResilioSync索引","slug":"工具/Kindle之ResilioSync索引","date":"2017-01-23T12:49:49.000Z","updated":"2017-06-28T15:57:36.000Z","comments":true,"path":"api/articles/工具/Kindle之ResilioSync索引.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/sync高级设置.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Kindle伴侣精品书库\"><a href=\"#Kindle伴侣精品书库\" class=\"headerlink\" title=\"Kindle伴侣精品书库\"></a>Kindle伴侣精品书库</h2><p><a href=\"https://kindlefere.com/share\" target=\"_blank\" rel=\"noopener\">Kindle伴原文</a><br>Resilio Sync同步密钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOC3NIGPF2DOKETOF2FAHXJXE2HF24QWC</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"精品书库\"><a href=\"#精品书库\" class=\"headerlink\" title=\"精品书库\"></a>精品书库</h3><p><a href=\"https://kindlefere.github.io/share/ebook/\" target=\"_blank\" rel=\"noopener\">精品库</a><br><iframe src=\"https://kindlefere.github.io/share/ebook/\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"每周一书\"><a href=\"#每周一书\" class=\"headerlink\" title=\"每周一书\"></a>每周一书</h3><p><a href=\"https://kindlefere.github.io/share/weekly/index.html\" target=\"_blank\" rel=\"noopener\">每周一书</a><br><iframe src=\"https://kindlefere.github.io/share/weekly/index.html\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h3 id=\"国外书籍\"><a href=\"#国外书籍\" class=\"headerlink\" title=\"国外书籍\"></a>国外书籍</h3><p><a href=\"https://kindlefere.github.io/share/ebook-en/index.html\" target=\"_blank\" rel=\"noopener\">国外精选</a><br><iframe src=\"https://kindlefere.github.io/share/ebook-en/index.html\" width=\"800\" height=\"400\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h2 id=\"Resilio-Sync\"><a href=\"#Resilio-Sync\" class=\"headerlink\" title=\"Resilio Sync\"></a>Resilio Sync</h2><p><a href=\"https://kindlefere.com/post/347.html\" target=\"_blank\" rel=\"noopener\">原地址详解</a></p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>Resilio Sync 这款软件的优点上面已经说了一些，就是不依赖中心服务器，所有的文件都分布在用密钥连接在一起的电脑上。这里重点说一下小伙伴们关心的缺点。</p>\n<p>缺点一：免费版只能强制同步所有文件，比如书库的大小有 5G，只能将这 5G 的电子书全部同步到你的电脑上，这需要你有一块足够大的硬盘。除非你升级到收费版（每年 100 元）实现选择性同步。</p>\n<p>缺点二：因为没有中心服务器，所以下载的速度依赖于每个电脑的上传速度，和中心服务器的分享方式相反，人越多同步的速度就越快，反之，人越少同步的速度就越慢。</p>\n<h3 id=\"在IgnoreList文件中忽略不想同步的文件\"><a href=\"#在IgnoreList文件中忽略不想同步的文件\" class=\"headerlink\" title=\"在IgnoreList文件中忽略不想同步的文件\"></a>在IgnoreList文件中忽略不想同步的文件</h3><p>BitTorrent Sync还支持文件过滤，如果你有一些文件不想被同步，你可以通过配置<code>IgnoreList</code>实现。<br><code>IgnoreList</code>是一个UTF-8编码的txt文件，里面你可以定义单个文件，路径，以及规则，他支持简单的“？”和“*”匹配。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 同步目录/.sync／</span><br><span class=\"line\">cat IgnoreList</span><br></pre></td></tr></table></figure></p>\n<pre><code>&gt;# IgnoreList is a UTF-8 encoded .txt file that helps you specify single files, paths and rules \n&gt;# for ignoring during the synchronization job. It supports &quot;?&quot; and &quot;*&quot; wildcard symbols.\n#\n#\n# OS generated files #\n.DS_Store\n.Spotlight-V100\n.Trashes\nehthumbs.db\ndesktop.ini\nThumbs.db\n# Temporary files #\n~*\n*~\n.~lock.*\n*.part\n*.crdownload\n@eaDir\n@SynoResource\n.@__thumb\n</code></pre><h3 id=\"高级设置相关说明\"><a href=\"#高级设置相关说明\" class=\"headerlink\" title=\"高级设置相关说明\"></a>高级设置相关说明</h3><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/sync高级设置.png?imageMogr2/2/w/800\">\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disk_low_priority：<span class=\"literal\">true</span>  设置在磁盘上操作文件的优先级，如果设置为<span class=\"literal\">false</span>，在同步文件时读写文件将会采用最高速度和优先级，不过这样会影响其他应用的性能。</span><br><span class=\"line\"></span><br><span class=\"line\">folder_rescan_interval：<span class=\"number\">600</span>  设置扫描目录的时间间隔，单位为秒</span><br><span class=\"line\"></span><br><span class=\"line\">lan_encrypt_data：<span class=\"literal\">true</span>  如果设置为ture，则在本地网络传输时会采用加密传输。</span><br><span class=\"line\"></span><br><span class=\"line\">lan_use_tcp：<span class=\"literal\">false</span>  如果设置为ture，在本地网络同步会采用tcp传输，而不是采用udp传输。注意：在LAN中禁止加密并采用tcp传输，会增加传输速度。</span><br><span class=\"line\"></span><br><span class=\"line\">rate_limit_local_peers：<span class=\"literal\">false</span>  申请在本地网络的peers直接限速传输，默认没有在LAN里面限速</span><br><span class=\"line\"></span><br><span class=\"line\">send_buf_size：<span class=\"number\">5</span>  在发送文件时可以使用的发送缓存，可以设置<span class=\"number\">1</span>~<span class=\"number\">100</span>M</span><br><span class=\"line\"></span><br><span class=\"line\">recv_buf_size：<span class=\"number\">5</span>  在接收文件时可以使用的接收缓存，可以设置<span class=\"number\">1</span>~<span class=\"number\">100</span>M</span><br><span class=\"line\"></span><br><span class=\"line\">sync_max_time_diff：<span class=\"number\">600</span>  同步的设备之间的时间差别</span><br><span class=\"line\"></span><br><span class=\"line\">sync_trash_ttl：<span class=\"number\">30</span>  设置多少天之后自动删除.SyncArchive目录中的文件</span><br><span class=\"line\"></span><br><span class=\"line\">max_file_size_diff_for_patching：<span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">max_file_size_for_versioning：<span class=\"number\">1000</span>  版本控制的一个参数，不了解...</span><br></pre></td></tr></table></figure>\n<h3 id=\"常见问题汇总\"><a href=\"#常见问题汇总\" class=\"headerlink\" title=\"常见问题汇总\"></a>常见问题汇总</h3><h4 id=\"添加同步链接后为什么找不到节点？\"><a href=\"#添加同步链接后为什么找不到节点？\" class=\"headerlink\" title=\"添加同步链接后为什么找不到节点？\"></a>添加同步链接后为什么找不到节点？</h4><p>如果是刚添加同步密钥或链接，请稍等片刻。如果很长时间仍然找不到节点无法同步，请尝试：把已经添加的同步目录删除，在 Sync 界面上谭家的同步断开，然后重新添加同步密钥或同步链接。</p>\n<h4 id=\"提示“与-x-个用户的时间差”怎么办？\"><a href=\"#提示“与-x-个用户的时间差”怎么办？\" class=\"headerlink\" title=\"提示“与 x 个用户的时间差”怎么办？\"></a>提示“与 x 个用户的时间差”怎么办？</h4><p>如果系统的时间严重不准会导致 BT Sync 无法正常工作。如果 Sync 软件提示的事您的电脑有时间差，请确保开启自动时间同步，如果时间同步没问题，请先退出 Sync 软件重新开启。如果提醒其他人有时间差，请忽略。</p>\n<h4 id=\"为什么同步的电子书比目录标示的大？\"><a href=\"#为什么同步的电子书比目录标示的大？\" class=\"headerlink\" title=\"为什么同步的电子书比目录标示的大？\"></a>为什么同步的电子书比目录标示的大？</h4><p>书库在维护的过程中会删除一些质量较差和重复的电子书，如果被删除的电子书已经同步到你的电脑上，就会被 Sync 自动备份下来。备份位置在同步目录下的隐藏文件夹 .sync/Archive 中，在 Sync 软件中右键点击同步文件夹，在弹出的菜单中点击“打开存档文件”即可打开。</p>\n<p>默认情况下，此目录中的文件 30 天后会自动删除。书库中删除的文件没有保留的必要，为了避免备份文件占用空间，可以禁用此功能。先把 Archive 文件夹删除，然后在 Sync 软件中右键点击同步文件夹，在弹出的菜单中点击“首选项”，取消“在文件夹存档中存储已删除的文件”前面的勾选即可。</p>\n<h4 id=\"开启-Sync-后电脑变得很卡怎么办？\"><a href=\"#开启-Sync-后电脑变得很卡怎么办？\" class=\"headerlink\" title=\"开启 Sync 后电脑变得很卡怎么办？\"></a>开启 Sync 后电脑变得很卡怎么办？</h4><p>因为 Sync 传输数据时需要读写硬盘，这可能会导致电脑其它的数据读取变慢，解决方法就是设置限速，让同步细水长流。打开 Sync 的软件的“首选项”，在“高级”选项卡中找到“限制接收速率”和“限制发送速率”，输入一个合适的值即可。另外，如果正在做其他工作，建议暂停或暂时退出 Sync 软件。</p>\n<p>另外，在“高级”界面里，点击底部的“打开高级用户偏好设置”，把“disk_low_priority”这项设置为 true 也可以缓解卡顿的现象。其中“rate_limit_local_peers”是设置在磁盘上操作文件的优先级，默认为 false，在同步文件时读写文件将会采用最高速度和优先级，所以会影响其他应用的性能。</p>\n<h4 id=\"重新添加能继续用之前的同步目录吗？\"><a href=\"#重新添加能继续用之前的同步目录吗？\" class=\"headerlink\" title=\"重新添加能继续用之前的同步目录吗？\"></a>重新添加能继续用之前的同步目录吗？</h4><p>有时因为某种原因，导致添加到 Resilio Sync 的同步丢失，需要重新添加密钥，这种情况下，是可以继续使用之前的同步目录的，只需要在重新添加密钥选择同步目录的时候，选择原来的目录即可。</p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[{"name":"资源","path":"api/tags/资源.json"},{"name":"kindle","path":"api/tags/kindle.json"},{"name":"书籍","path":"api/tags/书籍.json"},{"name":"ResilioSync","path":"api/tags/ResilioSync.json"}]},{"title":"calabash一款跨平台UI测试工具初探","slug":"测试/calabash一款跨平台UI测试工具初探","date":"2015-10-06T08:32:41.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/测试/calabash一款跨平台UI测试工具初探.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>参考：<a href=\"http://blog.csdn.net/zangcw/article/details/25299243\" target=\"_blank\" rel=\"noopener\">使用jenkins+calabash+cocoapods搭建ios持续集成环境</a></p>\n<ol>\n<li>calabash  是一款开源的跨平台UI测试工具，目前支持iOS和Android。它使用Cucumber作为测试核心，Cucumber是一个在敏捷团队十分流行的自动化的功能测试工具，它使用接近于自然语言的特性文档进行用例的书写和测试，支持多语言和多平台。</li>\n<li><p>安装Calabash  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install calabash-cucumber</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Calabash中文支持包  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install calabash-cucumber-cn</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"For-automatic-setup\"><a href=\"#For-automatic-setup\" class=\"headerlink\" title=\"For automatic setup:\"></a>For automatic setup:</h4><ol>\n<li><p>In a terminal, go to your iOS project  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tcd path-to-my-ios-project (i.e. directory containing .xcodeproj file)</span><br><span class=\"line\">\t```  </span><br><span class=\"line\">2. Install calabash-cucumber gem (this make take some time because of dependencies)</span><br></pre></td></tr></table></figure>\n<p> gem install calabash-cucumber</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. Setup your project for Calabash-iOS.</span><br></pre></td></tr></table></figure>\n<p> calabash-ios setup  //Answer the questions and read the output :)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. Generate a skeleton features folder for your tests</span><br></pre></td></tr></table></figure>\n<p> calabash-ios gen</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5. In Xcode, build your project using the -cal scheme</span><br><span class=\"line\"></span><br><span class=\"line\">6. Run the generated test!</span><br></pre></td></tr></table></figure>\n<p> cucumber</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">If all goes well, you are now ready to write your first test. Start by editing the file features/my_first.feature.</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">#### [cucumber官网](https://cukes.info/)   </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t* Feature（功能）  </span><br><span class=\"line\">\t\t* Scenario（情景）  </span><br><span class=\"line\">\t\t*  Given（给定）  </span><br><span class=\"line\">\t\t*  When（当）  </span><br><span class=\"line\">\t\t*  Then（则） </span><br><span class=\"line\">#####[运行原理](http://www.educity.cn/se/619226.html)  </span><br><span class=\"line\">![image](http://img.educity.cn/img_7/262/2013122000/125005907.jpg)  </span><br><span class=\"line\">cucumber是一种BDD测试框架，核心为cucumber的calabash的脚本在运行测试的时候会在虚拟机/真机上预装一个web服务器，这个web服务器就是解释calabash的脚本，将其解释为robotium的脚本，然后这个web服务器会想测试app发送robotium的脚本，测试app拿到robotium脚本后，将其解释为instumentation命令向被测试的app发送这些命令，被测试的app执行这些命令，然后将结果返回给测试app，然后一级一级返得到最后的测试结果。    </span><br><span class=\"line\">#####结构框架</span><br><span class=\"line\">calabash完全采用了cucumber的结构模式，calabash是脚本与TC分离设计，在业务变化的情况下，只要功能存在基本只需要修改TC逻辑，在业务不变，功能变化的情况下，基本只需要修改脚本。   </span><br><span class=\"line\">![image](http://img.educity.cn/img_7/262/2013122000/126005907.jpg)  </span><br><span class=\"line\">feature为主件夹，step_definitions目录内是你封装的脚本，my_first.feature文件就是你的TC逻辑。  </span><br><span class=\"line\">再看一下其中的内容：</span><br><span class=\"line\"></span><br><span class=\"line\">\t　　my_first.feature</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　Feature： 登陆</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　Scenario： 输入正确的用户名密码能够正常登陆</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　When 打开登陆页面</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　And    输入用户名XXX输入密码XXX</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　And   点击登陆</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t　　Then  验证登陆成功</span><br><span class=\"line\"></span><br><span class=\"line\">　　看起来很简单吧，想要验证其他功能也是类似的语言描述即可。  </span><br><span class=\"line\">如果你没有用过cucumber或者calabash那么你肯定现在有一个疑问，计算机怎么能识别汉字来进行测试的呢，  </span><br><span class=\"line\">那么看一下step_definition，以 输入用户名XXX输入密码XXX为例：</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWhen /^ 输入用户名\\&quot;([^\\\\\\&quot;]*)\\&quot; 输入密码\\&quot;([^\\\\\\&quot;]*)\\&quot;  $/ do |username，password|</span><br><span class=\"line\">\t\tperformAction(&apos;enter_text_into_numbered_field&apos;，username，1)</span><br><span class=\"line\">\t\tperformAction(&apos;enter_text_into_numbered_field&apos;，password，2)</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">现在应该能明白为什么你需要写汉字的脚本就可以了吧。  </span><br><span class=\"line\">在这里解释一下为什么如果业务存在功能修改这种情况，自动化脚本的修改量会小。  </span><br><span class=\"line\">还是以这个登录脚本为例：</span><br><span class=\"line\"></span><br><span class=\"line\">\t假如现在输入用户名和密码的输入框顺序变了，在你的页面显示上，可能是从左下角移到中间了，这种变化，那么feature文件你不用改，只需要改step_definition脚本就好了</span><br><span class=\"line\">#####运行报告</span><br><span class=\"line\">alabash-android支持很多报告生成模式，支持html，json，junit等等报告模式，只需要你在run的时候添加-f参数-o参数就可以了。</span><br><span class=\"line\"></span><br><span class=\"line\">　　例如 calabash-android run xxxx.apk -f html -o l，上图展示一下强大html报告  </span><br><span class=\"line\">　　![image](http://img.educity.cn/img_7/262/2013122000/127005907.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\">[【cucumber解析features文件】](http://blog.csdn.net/qs_csu/article/details/9000262) \t\t</span><br><span class=\"line\">1. my_first.feature: 描述在这个条件下需要做什么事情；</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tFeature: Running a test  </span><br><span class=\"line\">\t\t  As an iOS developer  </span><br><span class=\"line\">\t\t  I want to have a sample feature file  </span><br><span class=\"line\">\t\t  So I can begin testing quickly  </span><br><span class=\"line\">\t\t  </span><br><span class=\"line\">\t\tScenario: Example steps1  </span><br><span class=\"line\">\t\t  Given I am on the Welcome Screen  </span><br><span class=\"line\">\t\t  Then I swipe left  </span><br><span class=\"line\">\t\t  And I wait until I don&apos;t see &quot;Please swipe left&quot;  </span><br><span class=\"line\">\t\t  And take picture  </span><br><span class=\"line\">\t\t  </span><br><span class=\"line\">\t\tScenario: Example steps2  </span><br><span class=\"line\">\t\t  Given I am on the Welcome Screen  </span><br><span class=\"line\">\t\t #ASSERTION  </span><br><span class=\"line\">\t\t  Then I should see a &quot;login&quot; button  </span><br><span class=\"line\">\t\t #INPUT TEXT  </span><br><span class=\"line\">\t\t  Then I enter &quot;my_username&quot; into text field number 1  </span><br><span class=\"line\">\t\t#  Then I touch &quot;Return&quot;  </span><br><span class=\"line\">\t\t  </span><br><span class=\"line\">\t\t #TOGGLE SWITCH  </span><br><span class=\"line\">\t\t  Then I toggle the switch  </span><br><span class=\"line\">\t\t  Then I touch &quot;Login&quot;  </span><br><span class=\"line\">\t\t  And I touch &quot;Second&quot;  </span><br><span class=\"line\">\t\t  And take picture  </span><br><span class=\"line\">\t该文件描述了在“on the Welcome Screen”这个Step中需要做的事情，两个场景:steps1 和 steps2. </span><br><span class=\"line\"></span><br><span class=\"line\">2. my_first_step.rb: 解释了Given的具体条件</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tGiven /^I am on the Welcome Screen$/ do  </span><br><span class=\"line\">\t\t  element_exists(&quot;view&quot;)  </span><br><span class=\"line\">\t\t  check_element_exists(&quot;label text:&apos;First View&apos;&quot;)  </span><br><span class=\"line\">\t\t  sleep(STEP_PSEAU)  </span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t这个语句，判定了当前条件&quot;on the Welcome Screen&quot;是否满足，如果element存在，则就在&quot;Welcome Screen&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">[更多的测试框架](http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part2)</span><br><span class=\"line\"></span><br><span class=\"line\">UIAutomation</span><br><span class=\"line\"></span><br><span class=\"line\">UIAutomation是随着iOS SDK 4.0引入，帮助开发者在真实设备和模拟器上执行自动化的UI测试。其本质上是一个Javascript的类库，通过 界面上的标签和值的访问性来获得UI元素，完成相应的交互操作，从而达到测试的目的，类似于Web世界的Selenium。</span><br><span class=\"line\"></span><br><span class=\"line\">通过上面的描述，可以得知，使用UIAutomation做测试时，开发者必须掌握两件事：</span><br><span class=\"line\"></span><br><span class=\"line\">- 如何找到界面上的一个UI元素</span><br><span class=\"line\">- 如何指定针对一个UI元素的操作</span><br><span class=\"line\"></span><br><span class=\"line\">在UIAutomation中，界面就是由一堆UI元素构建的层级结构，所有UI元素都继承对象UIAElement ，该对象提供了每个UI元素必须具备的一些属性：</span><br><span class=\"line\"></span><br><span class=\"line\">- name</span><br><span class=\"line\">- value</span><br><span class=\"line\">- elements</span><br><span class=\"line\">- parent</span><br><span class=\"line\">- …</span><br><span class=\"line\"></span><br><span class=\"line\">而整个界面的层级结构如下：</span><br><span class=\"line\"></span><br><span class=\"line\">\target（设备级别的UI，用于支持晃动，屏幕方向变动等操作）</span><br><span class=\"line\">\t    Application（设备上的应用，比方说Status Bar，keyboard等）</span><br><span class=\"line\">\t      Main window（应用的界面，比方说导航条）</span><br><span class=\"line\">\t        View（界面下的View，比方说UITableView）</span><br><span class=\"line\">\t           Element（View下的一个元素）</span><br><span class=\"line\">\t              Child element(元素下的一个子元素)</span><br><span class=\"line\">下面是一个访问到Child element的例子：</span><br><span class=\"line\"></span><br><span class=\"line\">\tUIATarget.localTarget().HamcrestDemo().tableViews()[0].cells()[0].elements()</span><br><span class=\"line\">开发者还可以通过“UIATarget.localTarget().logElementTree()”在控制台打印出该target下所有的的elements。</span><br><span class=\"line\"></span><br><span class=\"line\">找到UI元素之后，开发者可以基于该UI元素做期望的操作，UIAutomation作为原生的UI测试框架，基本上支持iOS上的所有UI元素和操作，比方说：</span><br><span class=\"line\"></span><br><span class=\"line\">- 点击按钮，例: ***.buttons[“add”].tap()</span><br><span class=\"line\">- 输入文本, 例:***.textfields[0].setValue(“new”)</span><br><span class=\"line\">- 滚动屏幕，例:***.scrollToElementWithPredicate(“name begin with ’test’”)</span><br><span class=\"line\">- ……</span><br><span class=\"line\">关于使用UIAutomation做UI测试，推荐大家一定要看一下2010的WWDC的Session 306：[Automating User Interface Testing with Instruments](https://developer.apple.com/videos/wwdc/2010/?id=306)。 另外，这儿还有一篇很好的博客，详细的讲解了[如何使用UIAutomation做UI自动化测试](http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation)  </span><br><span class=\"line\">Apple通过Instruments为UIAutomation测试用例的命令行运行提供了支持，这样就为UIAutomation和CI服务器的集成提供了便利。开发者可以通过如下的步骤在命令行中运行UIAutomation测试脚本:</span><br><span class=\"line\">1. 指定目标设备，构建被测应用，该应用会被安装到指定的DSTROOT目录下</span><br><span class=\"line\">```ruby</span><br><span class=\"line\">xcodebuild</span><br><span class=\"line\">-project &quot;/Users/twer/Documents/xcodeworkspace/AudioDemo/AudioDemo.xcodeproj&quot; </span><br><span class=\"line\">-schemeAudioDemo</span><br><span class=\"line\">-sdk iphonesimulator6.1 </span><br><span class=\"line\">-configuration Release SYMROOT=&quot;/Users/twer/Documents/xcodeworkspace/</span><br><span class=\"line\">AudioDemo/build&quot; DSTROOT=&quot;/Users/twer/Documents/xcodeworkspace/AudioDemo/</span><br><span class=\"line\">build&quot; TARGETED_DEVICE_FAMILY=&quot;1&quot; </span><br><span class=\"line\">install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Instruments，基于第一步生成的应用运行UIAutomation测试</p>\n<pre><code class=\"ruby\">instruments\n-t  <span class=\"string\">\"/Applications/Xcode.app/Contents/Applications/Instruments.app/</span>\n<span class=\"string\">Contents/PlugIns/AutomationInstrument.bundle/Contents/Resources/</span>\n<span class=\"string\">Automation.tracetemplate\"</span> <span class=\"string\">\"/Users/twer/Documents/xcodeworkspace/AudioDemo</span>\n<span class=\"string\">/build/Applications/TestExample.app\"</span>\n-e UIASCRIPT &lt;absolute_path_to_the_test_file&gt;\n</code></pre>\n<p>为了更好的展示测试效果以及与CI服务器集成，活跃的社区开发者们还尝试把UIAutomation和Jasmine集成: <a href=\"https://github.com/shaune/jasmine-ios-acceptance-tests\" target=\"_blank\" rel=\"noopener\">https://github.com/shaune/jasmine-ios-acceptance-tests</a></p>\n</li>\n</ol>\n<p>UIAutomation因其原生支持，并且通过和Instruments的绝佳配合，开发者可以非常方便的使用录制操作自动生成测试脚本，赢得了很多开发者的支持，但是因苹果公司的基因，其系统非常封闭，导致开发者难以扩展，于是活跃的社区开发者们开始制造自己的轮子，<a href=\"https://gorillalogic.com/fonemonkey-0-7-1-released/\" target=\"_blank\" rel=\"noopener\">Fone Monkey,最新版本更新于2010年，估计过时</a>就是其中的一个优秀成果。</p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"},{"name":"集成","path":"api/categories/集成.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"UI","path":"api/tags/UI.json"},{"name":"测试","path":"api/tags/测试.json"}]},{"title":"Xcode&amp;Jenkins持续集成的几种实现方式","slug":"工具/Xcode和Jenkins持续集成的几种实现方式","date":"2015-09-18T23:52:06.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/工具/Xcode和Jenkins持续集成的几种实现方式.json","excerpt":null,"keywords":null,"cover":"http://img.educity.cn/img_7/262/2013122000/125005907.jpg","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"CI服务器\"><a href=\"#CI服务器\" class=\"headerlink\" title=\"CI服务器\"></a>CI服务器</h2><p>写到这儿，对于iOS开发者来说，需要准备好：</p>\n<ul>\n<li>一个比较容易获取的源代码仓库(包含源代码)</li>\n<li>一套自动化构建脚本</li>\n<li>一系列围绕构建的可执行测试  </li>\n</ul>\n<p>接下来就需要一个CI服务器来根据源代码的变更触发构建，监控测试结果。</p>\n<p>目前，业界比较流行的，支持iOS构建的CI服务器有</p>\n<ul>\n<li><a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"noopener\">Travis CI</a>：是一个免费的云服务平台，基本上支持所有目前主流的语言，Object-C自然也在其中，但是只支持github极大的限制了其应用场景。目前国内无法访问，<a href=\"http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part3\" target=\"_blank\" rel=\"noopener\">详见</a></li>\n<li><strong>Jenkins</strong>：经过多年的发展，其活跃的社区和丰富的插件让其成为了业界最受欢迎的CI服务器。通过使用Xcode插件，可以非常方便在Jenkins中运行iOS项目的构建脚本。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"xcode-持续集成的实现\"><a href=\"#xcode-持续集成的实现\" class=\"headerlink\" title=\"xcode 持续集成的实现\"></a>xcode 持续集成的实现</h2><p><a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/adopt_continuous_integration.html#//apple_ref/doc/uid/TP40013292-CH3-SW1\" target=\"_blank\" rel=\"noopener\">Setting Up Xcode Server</a></p>\n<p>jenkins使用配置：  </p>\n<ol>\n<li>下载：<a href=\"http://mirrors.jenkins-ci.org/war/lastest/jenkins.war\" target=\"_blank\" rel=\"noopener\">http://mirrors.jenkins-ci.org/war/lastest/jenkins.war</a>  </li>\n<li><p>运行命令行：  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t nohup java -jar ~/Downloads/jenkins.war —httpPort=8081 —ajp13Port=8010 &gt; /tmp/jenkins.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">\t```  </span><br><span class=\"line\">3. 写入启动文件中，起别名</span><br></pre></td></tr></table></figure>\n<p> vi /Users/(username)/.bash_profile<br> 输入:alias jenkins=”nohup java -jar ~/Downloads/SVNRepos/jenkins.war –httpPort=8081 –ajp13Port=8010 &gt; /tmp/jenkins.log 2&gt;&amp;1 &amp;”  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. 启动时，在命令行中输入：**`jenkins`** 回车  即可启动</span><br><span class=\"line\">5. 访问：http://127.0.0.1:8081/</span><br><span class=\"line\">6. 重启：http://[jenkins-server]/[command] exit推出，restart重启，reload重载。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 方法二：</span><br><span class=\"line\">安装jenkins还是使用brew</span><br><span class=\"line\"></span><br><span class=\"line\">brew install jenkins</span><br><span class=\"line\">安装好之后，可以通过使用命令行启动</span><br><span class=\"line\"></span><br><span class=\"line\">\tjava -jar /usr/local/opt/jenkins/libexec/jenkins.war</span><br><span class=\"line\">如果想**开机自动启动**，需要先执行以下命令，创建启动项：</span><br><span class=\"line\"></span><br><span class=\"line\">\tln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents</span><br><span class=\"line\">可以编辑一下~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist这个文件</span><br><span class=\"line\"></span><br><span class=\"line\">\topen ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br><span class=\"line\">\t</span><br><span class=\"line\">具体内容：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">\t&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">\t&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">\t  &lt;dict&gt;</span><br><span class=\"line\">\t    &lt;key&gt;Label&lt;/key&gt;</span><br><span class=\"line\">\t    &lt;string&gt;homebrew.mxcl.jenkins&lt;/string&gt;</span><br><span class=\"line\">\t    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class=\"line\">\t    &lt;array&gt;</span><br><span class=\"line\">\t      &lt;string&gt;/usr/bin/java&lt;/string&gt;</span><br><span class=\"line\">\t      &lt;string&gt;-Dmail.smtp.starttls.enable=true&lt;/string&gt;</span><br><span class=\"line\">\t      &lt;string&gt;-jar&lt;/string&gt;</span><br><span class=\"line\">\t      &lt;string&gt;/usr/local/opt/jenkins/libexec/jenkins.war&lt;/string&gt;</span><br><span class=\"line\">\t      &lt;string&gt;--httpListenAddress=127.0.0.1&lt;/string&gt;</span><br><span class=\"line\">\t      &lt;string&gt;--httpPort=8088&lt;/string&gt;</span><br><span class=\"line\">\t    &lt;/array&gt;</span><br><span class=\"line\">\t    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class=\"line\">\t    &lt;true/&gt;</span><br><span class=\"line\">\t  &lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/plist&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">想要让局域网都可以访问或修改端口号，需要把—httpListenAddress=127.0.0.1改成自己的局域网IP  </span><br><span class=\"line\"></span><br><span class=\"line\">手动启动启动项可以执行,制作替身：</span><br><span class=\"line\"></span><br><span class=\"line\">\tlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist  </span><br><span class=\"line\">之后用浏览器就可以访问 **http://localhost:8088/** 来登录jenkins了</span><br><span class=\"line\"></span><br><span class=\"line\">#### 方法三：</span><br><span class=\"line\">使用tomcat</span><br><span class=\"line\">制作替身：</span><br><span class=\"line\"></span><br><span class=\"line\">\tcd ~/Downloads/soft/Tomcat/</span><br><span class=\"line\">\tln -sfv apache-tomcat-8.0.27 tomcat</span><br><span class=\"line\">\t</span><br><span class=\"line\">将jenkins.war拷贝到 $tomcat/webapp下面。  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t $tomcat/bin/start.sh  </span><br><span class=\"line\">用浏览器打开 **localhost:8080/jenkins** tomcat默认端口号为8080，就可以看到 jenkin运行了。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 自动化构建和依赖管理[参考](http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part1/)</span><br><span class=\"line\">作为以GUI和命令行操作结合的完美性著称的苹果公司来说，当然也不会忘记为自己的封闭的iOS系统提供开发环境下命令行编译工具：xcodebuild</span><br><span class=\"line\">在介绍xcodebuild之前，需要先弄清楚一些在XCode环境下的一些概念【4】：</span><br><span class=\"line\"></span><br><span class=\"line\">- **Workspace**：简单来说，Workspace就是一个容器，在该容器中可以存放多个你创建的Xcode Project， 以及其他的项目中需要使用到的文件。使用Workspace的好处有，1),扩展项目的可视域，即可以在多个项目之间跳转，重构，一个项目可以使用另一个项目的输出。Workspace会负责各个Project之间提供各种相互依赖的关系;2),多个项目之间共享Build目录。</span><br><span class=\"line\">- **Project**：指一个项目，该项目会负责管理生成一个或者多个软件产品的全部文件和配置，一个Project可以包含多个Target。</span><br><span class=\"line\">- **Target**：一个Target是指在一个Project中构建的一个产品，它包含了构建该产品的所有文件，以及如何构建该产品的配置。</span><br><span class=\"line\">- **Scheme**：一个定义好构建过程的Target成为一个Scheme。可在Scheme中定义的Target的构建过程有：Build/Run/Test/Profile/Analyze/Archive</span><br><span class=\"line\">- **BuildSetting**：配置产品的Build设置，比方说，使用哪个Architectures？使用哪个版本的SDK？。在Xcode Project中，有Project级别的Build Setting，也有Target级别的Build Setting。Build一个产品时一定是针对某个Target的，因此，XCode中总是优先选择Target的Build Setting，如果Target没有配置，则会使用Project的Build Setting。</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild就是用了构建产品的命令行工具，其用法可以归结为3个部分：</span><br><span class=\"line\"></span><br><span class=\"line\">- 可构建的对象</span><br><span class=\"line\">- 构建行为</span><br><span class=\"line\">- 一些其他的辅助命令</span><br><span class=\"line\"></span><br><span class=\"line\">可以构建的对象有，默认情况下会运行project下的第一个target：</span><br><span class=\"line\"></span><br><span class=\"line\">- workspace：必须和“-scheme”一起使用，构建该workspace下的一个scheme。</span><br><span class=\"line\">- project：当根目录下有多个Project的时候，必须使用“-project”指定project，然后会运行</span><br><span class=\"line\">- target：构建某个Target</span><br><span class=\"line\">- scheme：和“-workspace”一起使用，指定构建的scheme。</span><br><span class=\"line\">- ……</span><br><span class=\"line\"></span><br><span class=\"line\">构建行为包括：</span><br><span class=\"line\"></span><br><span class=\"line\">- clean:清除build目录下的</span><br><span class=\"line\">- build: 构建</span><br><span class=\"line\">- test: 测试某个scheme，必须和&quot;-scheme&quot;一起使用</span><br><span class=\"line\">- archive:打包，必须和“-scheme”一起使用</span><br><span class=\"line\">- ……</span><br><span class=\"line\">辅助命令包括：</span><br><span class=\"line\"></span><br><span class=\"line\">- -sdk：指定构建使用的SDK</span><br><span class=\"line\">- -list：列出当前项目下所有的Target和scheme。</span><br><span class=\"line\">- -version：版本信息</span><br><span class=\"line\">- …...</span><br><span class=\"line\">关于xcodebuild更多详细的命令行请参见：[点击](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html)</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild的主要缺陷：</span><br><span class=\"line\"></span><br><span class=\"line\">- 其脚本输出的可读性极差，</span><br><span class=\"line\">- 只能要么完整的运行一个target或者scheme，要么全部不运行。不能指定运行Target中特定的测试。</span><br><span class=\"line\"></span><br><span class=\"line\">**安装xctool** </span><br><span class=\"line\"></span><br><span class=\"line\">xctool的安装非常简单，只需要clone xctool的repository到项目根目录就可以使用， 如果你的机器上安装有Homebrew，可以通过“brew install xctool”命令直接安装。（**注意：使用xctool前一定要首先确认xcodebuild已安装且能正确工作**）。</span><br><span class=\"line\"></span><br><span class=\"line\">**用法**</span><br><span class=\"line\"></span><br><span class=\"line\">关于xctool的用法就更加人性化了，几乎可以重用所有的xcodebuild的指令，配置。只需要注意一下几点：</span><br><span class=\"line\"></span><br><span class=\"line\">- xctool不支持target构建，只能使用scheme构建。</span><br><span class=\"line\">- 支持“-only”指令运行指定的测试。</span><br><span class=\"line\">- 支持多种格式的build报告。</span><br><span class=\"line\">例子：</span><br><span class=\"line\">```ruby</span><br><span class=\"line\">path/to/xctool.sh </span><br><span class=\"line\">  -workspaceYourWorkspace.xcworkspace</span><br><span class=\"line\">  -schemeYourScheme</span><br><span class=\"line\">test -only SomeTestTarget:SomeTestClass/testSomeMethod</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h4><p>这儿的想谈的“部署”不是传统意义上的直接部署到产品环境的部署，而是指如何把最新版本的应用快速的部署到测试用户的机器上以收集反馈，或者做一些探索性的测试。  </p>\n<p>在我写第一个iOS应用的时候，我想把应用安装到多个机器上测试的时候，需要非常繁琐的步骤：</p>\n<ul>\n<li>需要申请到苹果开发者账号，获得开发者证书。</li>\n<li>需要在苹果的开发者网站上注册我想使用的设备。</li>\n<li>使用开发者证书打包应用，使用Ad-HOC部署模式，生成ipa文件。</li>\n<li>通过ipa文件把应用安装到iTunes上。</li>\n<li>通过iTunes把应用同步到多台测试机器上。</li>\n</ul>\n<p>如果是测试机器在多个地理位置的时候，还需要把ipa文件发送到对应的地点，每个地点都需要重复的做第4，5步。 这样一个繁琐，且低效的过程让开发者非常痛苦，直到TestFlight的出现。</p>\n<h4 id=\"TestFlight\"><a href=\"#TestFlight\" class=\"headerlink\" title=\"TestFlight\"></a>TestFlight</h4><p>TestFlight：就是一个专门解决上面提到的痛点的云服务方案，它可以帮助开发者：</p>\n<ul>\n<li>轻松采集测试用户的UDID和iOS 版本、硬件版本，并发送给开发者。</li>\n<li>实时反馈应用是否成功安装到测试机器</li>\n<li>轻松部署最新版本应用到测试用机上。</li>\n<li>开发者可以灵活选择部署哪个版本到哪部分测试机器上。</li>\n</ul>\n<p>使用使用Test Flight服务非常简单，只需要到Test Flight注册一个账号。然后把链接发送给测试设备，测试设备只要打开该链接，并授权给Test Flight，在Test Flight的设备中心就可以看到这些设备。</p>\n<h4 id=\"使用jenkins-calabash-cocoapods搭建ios持续集成环境\"><a href=\"#使用jenkins-calabash-cocoapods搭建ios持续集成环境\" class=\"headerlink\" title=\"使用jenkins+calabash+cocoapods搭建ios持续集成环境\"></a><a href=\"http://blog.csdn.net/zangcw/article/details/25299243\" target=\"_blank\" rel=\"noopener\">使用jenkins+calabash+cocoapods搭建ios持续集成环境</a></h4><ol>\n<li>calabash  是一款开源的跨平台UI测试工具，目前支持iOS和Android。它使用Cucumber作为测试核心，Cucumber是一个在敏捷团队十分流行的自动化的功能测试工具，它使用接近于自然语言的特性文档进行用例的书写和测试，支持多语言和多平台。</li>\n<li><p>安装Calabash  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install calabash-cucumber</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Calabash中文支持包  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install calabash-cucumber-cn</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"For-automatic-setup\"><a href=\"#For-automatic-setup\" class=\"headerlink\" title=\"For automatic setup:\"></a>For automatic setup:</h4><ol>\n<li><p>In a terminal, go to your iOS project  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tcd path-to-my-ios-project (i.e. directory containing .xcodeproj file)</span><br><span class=\"line\">\t```  </span><br><span class=\"line\">2. Install calabash-cucumber gem (this make take some time because of dependencies)</span><br></pre></td></tr></table></figure>\n<p> gem install calabash-cucumber</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. Setup your project for Calabash-iOS.</span><br></pre></td></tr></table></figure>\n<p> calabash-ios setup  //Answer the questions and read the output :)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. Generate a skeleton features folder for your tests</span><br></pre></td></tr></table></figure>\n<p> calabash-ios gen</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5. In Xcode, build your project using the -cal scheme</span><br><span class=\"line\"></span><br><span class=\"line\">6. Run the generated test!</span><br></pre></td></tr></table></figure>\n<p> cucumber<br> ```</p>\n</li>\n</ol>\n<p>If all goes well, you are now ready to write your first test. Start by editing the file features/my_first.feature.</p>\n<h4 id=\"cucumber官网\"><a href=\"#cucumber官网\" class=\"headerlink\" title=\"cucumber官网\"></a><a href=\"https://cukes.info/\" target=\"_blank\" rel=\"noopener\">cucumber官网</a></h4><pre><code>* Feature（功能）  \n* Scenario（情景）  \n*  Given（给定）  \n*  When（当）  \n*  Then（则） \n</code></pre><h5 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a><a href=\"http://www.educity.cn/se/619226.html\" target=\"_blank\" rel=\"noopener\">运行原理</a></h5><p><img src=\"http://img.educity.cn/img_7/262/2013122000/125005907.jpg\" alt=\"image\"><br>cucumber是一种BDD测试框架，核心为cucumber的calabash的脚本在运行测试的时候会在虚拟机/真机上预装一个web服务器，这个web服务器就是解释calabash的脚本，将其解释为robotium的脚本，然后这个web服务器会想测试app发送robotium的脚本，测试app拿到robotium脚本后，将其解释为instumentation命令向被测试的app发送这些命令，被测试的app执行这些命令，然后将结果返回给测试app，然后一级一级返得到最后的测试结果。    </p>\n<h5 id=\"结构框架\"><a href=\"#结构框架\" class=\"headerlink\" title=\"结构框架\"></a>结构框架</h5><p>calabash完全采用了cucumber的结构模式，calabash是脚本与TC分离设计，在业务变化的情况下，只要功能存在基本只需要修改TC逻辑，在业务不变，功能变化的情况下，基本只需要修改脚本。<br><img src=\"http://img.educity.cn/img_7/262/2013122000/126005907.jpg\" alt=\"image\"><br>feature为主件夹，step_definitions目录内是你封装的脚本，my_first.feature文件就是你的TC逻辑。<br>再看一下其中的内容：</p>\n<pre><code>　　my_first.feature\n\n　　Feature： 登陆\n\n　　Scenario： 输入正确的用户名密码能够正常登陆\n\n　　When 打开登陆页面\n\n　　And    输入用户名XXX输入密码XXX\n\n　　And   点击登陆\n\n　　Then  验证登陆成功\n</code></pre><p>　　看起来很简单吧，想要验证其他功能也是类似的语言描述即可。<br>如果你没有用过cucumber或者calabash那么你肯定现在有一个疑问，计算机怎么能识别汉字来进行测试的呢，<br>那么看一下step_definition，以 输入用户名XXX输入密码XXX为例：</p>\n<pre><code>When /^ 输入用户名\\&quot;([^\\\\\\&quot;]*)\\&quot; 输入密码\\&quot;([^\\\\\\&quot;]*)\\&quot;  $/ do |username，password|\nperformAction(&apos;enter_text_into_numbered_field&apos;，username，1)\nperformAction(&apos;enter_text_into_numbered_field&apos;，password，2)\nend\n</code></pre><p>现在应该能明白为什么你需要写汉字的脚本就可以了吧。<br>在这里解释一下为什么如果业务存在功能修改这种情况，自动化脚本的修改量会小。<br>还是以这个登录脚本为例：</p>\n<pre><code>假如现在输入用户名和密码的输入框顺序变了，在你的页面显示上，可能是从左下角移到中间了，这种变化，那么feature文件你不用改，只需要改step_definition脚本就好了\n</code></pre><h5 id=\"运行报告\"><a href=\"#运行报告\" class=\"headerlink\" title=\"运行报告\"></a>运行报告</h5><p>alabash-android支持很多报告生成模式，支持html，json，junit等等报告模式，只需要你在run的时候添加-f参数-o参数就可以了。</p>\n<p>　　例如 calabash-android run xxxx.apk -f html -o l，上图展示一下强大html报告<br>　　<img src=\"http://img.educity.cn/img_7/262/2013122000/127005907.jpg\" alt=\"image\"></p>\n<p><a href=\"http://blog.csdn.net/qs_csu/article/details/9000262\" target=\"_blank\" rel=\"noopener\">【cucumber解析features文件】</a>         </p>\n<ol>\n<li><p>my_first.feature: 描述在这个条件下需要做什么事情；</p>\n<pre><code>Feature: Running a test  \n  As an iOS developer  \n  I want to have a sample feature file  \n  So I can begin testing quickly  \n\nScenario: Example steps1  \n  Given I am on the Welcome Screen  \n  Then I swipe left  \n  And I wait until I don&apos;t see &quot;Please swipe left&quot;  \n  And take picture  \n\nScenario: Example steps2  \n  Given I am on the Welcome Screen  \n #ASSERTION  \n  Then I should see a &quot;login&quot; button  \n #INPUT TEXT  \n  Then I enter &quot;my_username&quot; into text field number 1  \n#  Then I touch &quot;Return&quot;  \n\n #TOGGLE SWITCH  \n  Then I toggle the switch  \n  Then I touch &quot;Login&quot;  \n  And I touch &quot;Second&quot;  \n  And take picture  \n</code></pre><p> 该文件描述了在“on the Welcome Screen”这个Step中需要做的事情，两个场景:steps1 和 steps2. </p>\n</li>\n<li><p>my_first_step.rb: 解释了Given的具体条件</p>\n<pre><code>Given /^I am on the Welcome Screen$/ do  \n  element_exists(&quot;view&quot;)  \n  check_element_exists(&quot;label text:&apos;First View&apos;&quot;)  \n  sleep(STEP_PSEAU)  \nend\n</code></pre><p> 这个语句，判定了当前条件”on the Welcome Screen”是否满足，如果element存在，则就在”Welcome Screen”；</p>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"},{"name":"集成","path":"api/categories/集成.json"}],"tags":[{"name":"TDD","path":"api/tags/TDD.json"},{"name":"BDD","path":"api/tags/BDD.json"}]},{"title":"快速正确的安装Ruby,Rails运行环境","slug":"工具/快速正确的安装Ruby,Rails运行环境","date":"2015-01-21T23:00:39.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/工具/快速正确的安装Ruby,Rails运行环境.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>安装ruby环境：<br>方法一：下载源码，编译安装：<a href=\"http://fsjoy.blog.51cto.com/318484/115045/\" target=\"_blank\" rel=\"noopener\">配置中制定安装目录</a><br>方法二：使用rvm安装：<a href=\"https://ruby-china.org/wiki/rvm-guide\" target=\"_blank\" rel=\"noopener\">可以提供一个便捷的多版本 Ruby 环境的管理和切换</a><br>方法三：使用macport安装 <code>port install ruby</code></p>\n<p><a href=\"https://ruby-china.org/wiki/install_ruby_guide\" target=\"_blank\" rel=\"noopener\">详细教程</a></p>\n<p>问题：<br><code>ERROR: While executing gem ... (Errno::EPERM) Operation not permitted - /usr/bin/rake</code><br><a href=\"http://stackoverflow.com/questions/30812777/cannot-install-cocoa-pods-after-uninstalling-results-in-error/30851030#30851030\" target=\"_blank\" rel=\"noopener\">stackoverflow方法</a>测试结果没走通。<br>最终通过<a href=\"http://tadaland.com/os-x-rootless.html\" target=\"_blank\" rel=\"noopener\">OS X 10.11中Rootless的实现与解释以及关闭方法</a>解决.</p>\n<h4 id=\"Gem介绍\"><a href=\"#Gem介绍\" class=\"headerlink\" title=\"Gem介绍\"></a>Gem介绍</h4><p>Gem是一个ruby库和程序的标准包，它通过RubyGem来定位、安装、升级和卸载，非常的便捷。</p>\n<p>Ruby 1.9.2版本默认安装RubyGem，如果你使用其它版本，请参考如何安装RubyGem。<br><a id=\"more\"></a></p>\n<h4 id=\"升级RubyGem\"><a href=\"#升级RubyGem\" class=\"headerlink\" title=\"升级RubyGem\"></a>升级RubyGem</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem update --system</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装新的Gem\"><a href=\"#安装新的Gem\" class=\"headerlink\" title=\"安装新的Gem\"></a>安装新的Gem</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem install rai</span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"regexp\">/指定安装某一版本的Gem包</span></span><br><span class=\"line\"><span class=\"regexp\">gem install [gemname] --version=1.3.2</span></span><br></pre></td></tr></table></figure>\n<p>在安装过程中可以看到如下提示，说明它是从rubygems.org内去寻找并安装gem package的。<br>Fetching source index for <a href=\"http://rubygems.org/\" target=\"_blank\" rel=\"noopener\">http://rubygems.org/</a></p>\n<h4 id=\"gem-的安装方式\"><a href=\"#gem-的安装方式\" class=\"headerlink\" title=\"gem 的安装方式\"></a>gem 的安装方式</h4><h4 id=\"MacPorts安装和使用\"><a href=\"#MacPorts安装和使用\" class=\"headerlink\" title=\"MacPorts安装和使用\"></a>MacPorts安装和使用</h4><p><a href=\"http://ccvita.com/434.html\" target=\"_blank\" rel=\"noopener\">http://ccvita.com/434.html</a><br><a href=\"http://guide.macports.org\" target=\"_blank\" rel=\"noopener\">http://guide.macports.org</a><br><a href=\"http://www.fantageek.com/318/install-pkg-config-for-mac-osx/\" target=\"_blank\" rel=\"noopener\">http://www.fantageek.com/318/install-pkg-config-for-mac-osx/</a>  </p>\n<p>Mac下面除了用dmg、pkg来安装软件外，比较方便的还有用MacPorts来帮助你安装其他应用程序，跟BSD中的ports道理一样。MacPorts就像apt-get、yum一样，可以快速安装些软件。</p>\n<p>安装后，配置：</p>\n<pre><code>sudo vi /etc/profile\nexport PATH=/opt/local/bin:$PATH\nexport PATH=/opt/local/sbin:$PATH\n</code></pre><p>MacPorts使用 <a href=\"http://witcheryne.iteye.com/blog/991821\" target=\"_blank\" rel=\"noopener\">http://witcheryne.iteye.com/blog/991821</a></p>\n<ol>\n<li><p>更新ports tree和MacPorts版本，强烈推荐第一次运行的时候使用-v参数，显示详细的更新过程。<br>sudo port -v selfupdate</p>\n</li>\n<li><p>搜索索引中的软件</p>\n<p> port search name</p>\n</li>\n<li><p>安装新软件<br>sudo port install name</p>\n</li>\n<li><p>卸载软件<br>sudo port uninstall name</p>\n</li>\n<li><p>查看有更新的软件以及版本<br>port outdated</p>\n</li>\n<li><p>升级可以更新的软件<br>sudo port upgrade outdated</p>\n</li>\n</ol>\n<p>实例：<br>Eclipse的插件需要subclipse需要JavaHL，下面通过MacPorts来安装</p>\n<pre><code>sudo port install subversion-javahlbindings\n\ninstalled \n</code></pre><p>列出全部或者指定的已经安装的软件：</p>\n<pre><code>port installed\nport -v installed atlas\n</code></pre><p>dependents 查看哪些软件时依赖与这个软件的</p>\n<pre><code>删除一个软件时候，最好先执行一下这个命令.\n    port dependents openssl\n</code></pre>","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"},{"name":"ruby","path":"api/categories/ruby.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"脚本","path":"api/tags/脚本.json"},{"name":"安装","path":"api/tags/安装.json"}]}]}