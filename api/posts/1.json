{"total":157,"pageSize":10,"pageCount":16,"data":[{"title":"Framework:实现使用swift开发","slug":"swift/Framework:实现使用swift开发","date":"2018-06-23T16:41:58.000Z","updated":"2018-06-23T16:41:58.000Z","comments":true,"path":"api/articles/swift/Framework:实现使用swift开发.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!--github库卡片-->\n<div id=\"badge-container-huos3203-JHHomeAPP-813e4b\" class=\"hexo-github\" style=\"width: =\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-huos3203-JHHomeAPP-813e4b\", \"huos3203\", \"JHHomeAPP\", \"813e4b\", false);\n</script>\n\n<p>设想：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800\"></p>\n<h3 id=\"创建三个角色\"><a href=\"#创建三个角色\" class=\"headerlink\" title=\"创建三个角色\"></a>创建三个角色</h3><ol>\n<li>主项目：<code>JHHomeAPP</code></li>\n<li>静态库组件：<code>FirstPlug</code> <ul>\n<li><code>SwiftInStaticLib</code>(包含Swift源码实现的静态库)</li>\n</ul>\n</li>\n<li>动态库<code>secondFramework</code></li>\n</ol>\n<h3 id=\"静态库：问题1\"><a href=\"#静态库：问题1\" class=\"headerlink\" title=\"静态库：问题1\"></a>静态库：问题1</h3><p>当静态库组件中存在swift源码时，依赖该组件的主工程会报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftDispatch</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCoreFoundation</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftObjectiveC</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftDarwin</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftFoundation</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCoreGraphics</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftCore</span><br><span class=\"line\">ld: warning: Auto-Linking library not found for -lswiftSwiftOnoneSupport</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>联想方法：<br>设置 <code>Always Embed Swift Standard Libraries</code>: <code>YES</code><br>结果无效。</li>\n<li>适用的解决方法<br>在主工程中新建一个空的swift源文件，不需要自动新建<code>$(SWIFT_MODULE_NAME)-Swift.h</code>映射文件和<code>JHHomeAPP/JHHomeAPP-Bridging-Header.h</code>头文件。<br><strong>使用方法2，问题1就不存在了，证明了在静态库中可以使用swift源码文件进行开发,同样证明了静态库可以封装包含swift源码的静态库。</strong></li>\n</ol>\n<h3 id=\"Framework：问题2\"><a href=\"#Framework：问题2\" class=\"headerlink\" title=\"Framework：问题2\"></a>Framework：问题2</h3><ol>\n<li>在动态库中objc源码方法可以封装到静态库，并在可执行文件中调用。</li>\n<li>当在Framework中新建swift源文件时，第一次编译运行出现崩溃问题：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dyld: Library not loaded: @rpath/libswiftCoreImage.dylib</span><br><span class=\"line\">Referenced from: .../../Debug-iphonesimulator/SecondFramework.framework/SecondFramework</span><br><span class=\"line\">Reason: image not found</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>解决办法：需要在<code>ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES</code>设置为<code>YES</code>.再次编译出现问题3。</p>\n<h3 id=\"Framework-问题3\"><a href=\"#Framework-问题3\" class=\"headerlink\" title=\"Framework: 问题3\"></a>Framework: 问题3</h3><p>当在oc源码文件中用引用<code>-Swift.h</code>头文件时，出现一下问题:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;SecondFramework-Swift.h&apos; file not found</span><br><span class=\"line\">#import &quot;SecondFramework-Swift.h&quot;</span><br><span class=\"line\">^~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p>\n<p>结果将：<code>Install Objective-C Compatibility Header</code> : <code>NO</code>可以正常调用swift方法了。</p>\n<blockquote>\n<p>验证：framework可以封装到静态库中，当有swift源码实现时需要设置ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=YES</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>Product Module Name: 该项默认为项目名或自定义的名称</li>\n<li>Defines Module: 设置为YES （framework默认为YES，静态库默认为NO）</li>\n<li>Embedded Content Contains Swift: 设置为YES</li>\n<li>Install Objective-C Compatibility Header：设置为YES （如上题说：在framework中设置为NO，才能正常运行，在静态库中似乎不影响）</li>\n<li>Objective-C Bridging Header: 自定义需要桥接到Swift中的OC头文件（EX：$(SRCROOT)/Swift-Bridging-Header.h）</li>\n</ol>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"}],"tags":[]},{"title":"使用CocoaPods开发静态库","slug":"工具/使用CocoaPods开发静态库","date":"2018-06-21T21:37:16.000Z","updated":"2018-06-22T20:27:12.000Z","comments":true,"path":"api/articles/工具/使用CocoaPods开发静态库.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发一个用pod管理依赖关系的静态类库给其他人使用，而又不愿意公开源代码，比如一些SDK，那么就需要打包成.a文件。本文将以一个依赖于ASIHTTPRequest的静态类库，来演示如何创建使用了CocoaPods的静态类库以及打包的过程。</p>\n<h2 id=\"开发静态库（Static-Library）\"><a href=\"#开发静态库（Static-Library）\" class=\"headerlink\" title=\"开发静态库（Static Library）\"></a>开发静态库（Static Library）</h2><h3 id=\"搭建pod静态库项目\"><a href=\"#搭建pod静态库项目\" class=\"headerlink\" title=\"搭建pod静态库项目\"></a>搭建pod静态库项目</h3><h4 id=\"不基于pod手动创建-deprecated\"><a href=\"#不基于pod手动创建-deprecated\" class=\"headerlink\" title=\"不基于pod手动创建(deprecated)\"></a>不基于pod手动创建(deprecated)</h4><ol>\n<li>在Xcode中创建一个Cocoa Touch Static Library；</li>\n<li>创建Podfile文件；</li>\n<li>执行pod install完成整个项目的搭建；</li>\n<li>如果需要demo，手动创建示例程序，使用pod添加对私有静态库的依赖，重复执行pod install完成示例项目的搭建。</li>\n</ol>\n<h4 id=\"基于pod自动创建\"><a href=\"#基于pod自动创建\" class=\"headerlink\" title=\"基于pod自动创建\"></a>基于pod自动创建</h4><p>只需要输入<code>pod lib</code>命令即可完成初始项目的搭建，下面详细说明具体步骤，以<code>JHLib</code>作为项目名演示。<br>1.执行命令<code>pod lib create JHLib</code>。在此期间需要确认下面4个问题。</p>\n<h2 id=\"打包类库\"><a href=\"#打包类库\" class=\"headerlink\" title=\"打包类库\"></a>打包类库</h2><p>需要使用一个cocoapods的插件<code>cocoapods-packager</code>来完成类库的打包。当然也可以手动编译打包，但是过程会相当繁琐。</p>\n<ol>\n<li><p>安装打包插件<br>终端执行以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods-packager</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包<br>命令很简单，执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod package BZLib.podspec --library --force</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中<code>--library</code>指定打包成.a文件，如果不带上将会打包成.framework文件。<code>--force</code>是指强制覆盖。最终的目录结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|____BZLib.podspec</span><br><span class=\"line\">|____ios</span><br><span class=\"line\">| |____libBZLib.a</span><br></pre></td></tr></table></figure></p>\n<p>需要特别强调的是，该插件通过对引用的三方库进行重命名很好的解决了类库命名冲突的问题。<br>比如你的类库使用了ASI，然后打包成静态库.a文件。外部调用的项目也使用了ASI，那么不会造成冲突。因为在打包的时候，你的类库里的ASI被重命名为项目+ASI的前缀。</p>\n<p><a href=\"https://onevcat.com/2016/01/create-framework/\" target=\"_blank\" rel=\"noopener\">如何打造一个让人愉快的框架</a><br><a href=\"http://www.cnblogs.com/brycezhang/p/4117180.html\" target=\"_blank\" rel=\"noopener\">使用CocoaPods开发并打包静态库</a><br><a href=\"https://www.jianshu.com/p/2ea267bf0363\" target=\"_blank\" rel=\"noopener\">iOS动态库,静态库以及framework</a></p>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]},{"title":"使用tag管理多个相关组件的版本发布","slug":"git/使用tag管理多个相关组件的版本发布","date":"2018-06-20T17:22:37.000Z","updated":"2018-06-21T21:43:37.000Z","comments":true,"path":"api/articles/git/使用tag管理多个相关组件的版本发布.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"tag标签自增新建脚本\"><a href=\"#tag标签自增新建脚本\" class=\"headerlink\" title=\"tag标签自增新建脚本\"></a>tag标签自增新建脚本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">tag=$(git describe --tags `git rev-list --tags --max-count=1`)</span><br><span class=\"line\">version=<span class=\"variable\">$&#123;tag##*.&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">let</span> <span class=\"string\">\"version+=1\"</span></span><br><span class=\"line\">newTag=<span class=\"variable\">$&#123;tag%.*&#125;</span>.<span class=\"variable\">$&#123;version&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Create New Tag '</span><span class=\"variable\">$newTag</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改tag版本号的方法\"><a href=\"#修改tag版本号的方法\" class=\"headerlink\" title=\"修改tag版本号的方法\"></a>修改tag版本号的方法</h2><h3 id=\"方法一：覆盖\"><a href=\"#方法一：覆盖\" class=\"headerlink\" title=\"方法一：覆盖\"></a>方法一：覆盖</h3><ol>\n<li><p>已有v1.0.2.8要覆盖该版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -f v1.0.2.8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务器已有v1.0.2.8，强制推到服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -f v1.0.2.8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步服务器：获取服务器刚刚的v1.0.2.8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch -–tag</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"方法：删除分支\"><a href=\"#方法：删除分支\" class=\"headerlink\" title=\"方法：删除分支\"></a>方法：删除分支</h3><ol>\n<li><p>删除本地版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0.2.8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除服务器上的分支(用空版本覆盖)</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"symbol\">:v1</span>.<span class=\"number\">0</span>.<span class=\"number\">2.8</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务器获取刚刚的v1.0.2.8</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch –-tag</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[]},{"title":"弧形表盘进度仪表","slug":"个人项目/弧形表盘进度仪表","date":"2018-06-20T15:31:52.000Z","updated":"2018-06-22T19:58:22.000Z","comments":true,"path":"api/articles/个人项目/弧形表盘进度仪表.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!--github库卡片-->\n<div id=\"badge-container-huos3203-ArcProgressUI-4b9bc85\" class=\"hexo-github\" style=\"width: =\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-huos3203-ArcProgressUI-4b9bc85\", \"huos3203\", \"ArcProgressUI\", \"4b9bc85\", false);\n</script>\n\n<h1 id=\"ArcProgressUI\"><a href=\"#ArcProgressUI\" class=\"headerlink\" title=\"ArcProgressUI\"></a>ArcProgressUI</h1><h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>To run the example project, clone the repo, and run <code>pod install</code> from the Example directory first.</p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>ArcProgressUI is available through <a href=\"https://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a>. To install<br>it, simply add the following line to your Podfile:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">'ArcProgressUI'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ArcProgressView.h\"</span></span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *viewArr = [[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"ArcProgressView\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"><span class=\"built_in\">UIView</span> *arcView = viewArr.lastObject;</span><br><span class=\"line\">arcView.backgroundColor = [<span class=\"built_in\">UIColor</span> redColor];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:arcView];</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态库开发：\"><a href=\"#静态库开发：\" class=\"headerlink\" title=\"静态库开发：\"></a>静态库开发：</h2><p>设想：通过cocoapod管理静态库的依赖关系。在项目调用静态库</p>\n<ol>\n<li>主工程：prj</li>\n<li>一级静态库: first.a ：组件</li>\n<li><p>二级静态库：组件依赖的静态库</p>\n<p> sec.a    : 二级静态库.a<br> pod.a  ：包含二级静态库的集合</p>\n</li>\n</ol>\n<p>其他经验：通过pod来开发一级静态库即组件。会生成组件的工作空间：<code>workspace</code> 将<code>prj主工程</code>拖入工作空间，来协作开发。</p>\n<blockquote>\n<p>坑：当再次切换prj主工程,关联.a组件依赖时，例如：libJHPatrol.a的other linker tag 路径一定要更新。</p>\n</blockquote>\n<p>结果：</p>\n<ol>\n<li>手动配置一级静态库组件，依赖的二级静态库可用<br>资源bundle文件直接添加到主工程资源拷贝列表中，在代码中会正常映射出IBoutlet相应的UI实例。参见 上述使用说明</li>\n<li><code>-ObjC</code>设置<br>在主工程build setting 配置的<code>Other linker</code> ：<code>-ObjC</code>：表示尽可能的加载所有依赖静态库中的objc源码资源。<br>解决的问题：可以解决通过资源（xib/storyboard）初始化实例式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this class is not key value coding-compliant for the key ibReviewLabel</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>解决在storyboard中使用源码自定义UI控件时，无效果的问题。</p>\n<ol>\n<li><p>在封装静态库中，storyboard/xib中的控件不要设置model属性。</p>\n</li>\n<li><p>使用pod来一级静态库组件，管理依赖的二级静态库libpod.a无效</p>\n</li>\n</ol>\n<h2 id=\"Author\"><a href=\"#Author\" class=\"headerlink\" title=\"Author\"></a>Author</h2><p>huo3203@hotmail.com, 724987481</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>ArcProgressUI is available under the MIT license. See the LICENSE file for more info.</p>\n","raw":null,"categories":[{"name":"个人项目","path":"api/categories/个人项目.json"}],"tags":[]},{"title":"storyboard的几种方式","slug":"iOS/storyboard的几种方式","date":"2018-06-20T14:49:37.000Z","updated":"2018-06-20T14:49:37.000Z","comments":true,"path":"api/articles/iOS/storyboard的几种方式.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"通过IB（xib-storyboard）创建View的周期方法\"><a href=\"#通过IB（xib-storyboard）创建View的周期方法\" class=\"headerlink\" title=\"通过IB（xib/storyboard）创建View的周期方法\"></a>通过IB（xib/storyboard）创建View的周期方法</h2><ol>\n<li><code>loadView</code>：加载View方法，UI是通过代码绘制时，初始化控制器的视图时，会调用该方法。优先级高于IB视图，当重载时，会直接覆盖IB中的视图,因为无论nib也好，xib也好，最终在执行UIViewController生命周期函数<code>loadView</code>之前，都会转化成可执行的nib文件。</li>\n<li><code>initWithNibName</code>：是类的构造器方法，通过IB创建的类：简称<code>IB类</code>，<code>IB类</code>需要通过这个构造器来实例化对象。</li>\n<li><code>initWithCoder</code>：当<code>IB类</code>实例化时会调用该方法，即通过<code>initWithNibName</code>构造器实例化对象时，会调用该方法来分配<code>IB对象</code>的内存空间。</li>\n<li><code>awakeFromNib</code>：当实例化<code>IB视图类</code>时执行，即当IB文件被加载的时候，会发送一个<code>awakeFromNib</code>的消息到IB文件中的每个的对象，每个对象都可以定义自己的awakeFromNib函数来响应这个消息，执行一些必要的操作。<blockquote>\n<p>帮助记忆：一开始经过<code>initWithCoder</code>创建出来的控件是死的，然后通过<code>awakeFromNib</code>来唤醒，所以这会有一个先后的调用顺序</p>\n</blockquote>\n</li>\n<li><code>viewDidLoad</code>：当view对象被加载到内存后就会执行viewDidLoad，所以不管通过nib文件还是代码的方式创建对象都会执行viewDidLoad 。</li>\n</ol>\n<h2 id=\"加载xib方法\"><a href=\"#加载xib方法\" class=\"headerlink\" title=\"加载xib方法\"></a>加载xib方法</h2><h3 id=\"加载视图\"><a href=\"#加载视图\" class=\"headerlink\" title=\"加载视图\"></a>加载视图</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">NSArray</span>* nibView =  [[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"xibfileName\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"> <span class=\"built_in\">UIView</span> *xibView = nibView.lastObject;</span><br><span class=\"line\"><span class=\"comment\">//=======</span></span><br><span class=\"line\"> <span class=\"comment\">// 这里的bundle参数是nil,(这里nil默认就是mianBundle)</span></span><br><span class=\"line\"> <span class=\"built_in\">UINib</span> *nib = [<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"xib文件名\"</span> bundle:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"> <span class=\"built_in\">NSArray</span> *views = [nib instantiateWithOwner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p><code>owner</code>:xib中的fileObject参数<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载所有xib文件</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span>* objects = [[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:nibName owner:<span class=\"keyword\">self</span> options:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加载指定xib文件</span></span><br><span class=\"line\">ContactsTableViewCell  *cell = [[[<span class=\"built_in\">NSBundle</span> mainBundle]loadNibNamed:<span class=\"string\">@\"ContactsTableViewCell\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>] objectAtIndex:<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"加载控制器对象\"><a href=\"#加载控制器对象\" class=\"headerlink\" title=\"加载控制器对象\"></a>加载控制器对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithNibName:<span class=\"string\">@\"xibName\"</span> bundle:nibBundleOrNil];</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载storyboard\"><a href=\"#加载storyboard\" class=\"headerlink\" title=\"加载storyboard\"></a>加载storyboard</h2><h3 id=\"加载控制器对象-1\"><a href=\"#加载控制器对象-1\" class=\"headerlink\" title=\"加载控制器对象\"></a>加载控制器对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载storyboard</span></span><br><span class=\"line\"><span class=\"built_in\">UIStoryboard</span> *storyboard = [<span class=\"built_in\">UIStoryboard</span> storyboardWithName:<span class=\"string\">@\"Two\"</span> bundle:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建storyboard里面灰色的控制器</span></span><br><span class=\"line\">　　　<span class=\"comment\">//找到shtoryboard里面设置的初始控制器</span></span><br><span class=\"line\">　　　<span class=\"comment\">//    UIViewController *vc = [storyboard instantiateInitialViewController];</span></span><br><span class=\"line\">　　　　　　　　</span><br><span class=\"line\">　　　　　　　<span class=\"comment\">// 从storyboard里面找出绑定标识的控制器</span></span><br><span class=\"line\">　　　　　　　MJTwoViewController *vc = [storyboard instantiateViewControllerWithIdentifier:<span class=\"string\">@\"pink\"</span>];</span><br><span class=\"line\">　　　　　　　<span class=\"keyword\">self</span>.window.rootViewController = vc;</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"}],"tags":[]},{"title":"使用local命令行新建remote库","slug":"git/使用local命令行新建remote库","date":"2018-06-20T11:14:00.000Z","updated":"2018-06-20T14:49:37.000Z","comments":true,"path":"api/articles/git/使用local命令行新建remote库.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>使用命令行直接生成github中的项目</p>\n<h2 id=\"新建远程仓库\"><a href=\"#新建远程仓库\" class=\"headerlink\" title=\"新建远程仓库\"></a>新建远程仓库</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u username <span class=\"symbol\">https:</span>/<span class=\"regexp\">/api.github.com/user</span><span class=\"regexp\">/repos -d '&#123; \"name\": \"repo-name\" &#125;'</span></span><br></pre></td></tr></table></figure>\n<p>执行打印结果，是json格式：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ArcProgressUI\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"full_name\"</span>: <span class=\"string\">\"huos3203/ArcProgressUI\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"owner\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/users/huos3203\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"repos_url\"</span>: <span class=\"string\">\"https://api.github.com/users/huos3203/repos\"</span>,</span><br><span class=\"line\">    ---</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"git_url\": \"git://github.com/huos3203/ArcProgressUI.git\",</span><br><span class=\"line\">\"ssh_url\": \"git@github.com:huos3203/ArcProgressUI.git\",</span><br><span class=\"line\">\"clone_url\": \"https://github.com/huos3203/ArcProgressUI.git\",</span><br><span class=\"line\">\"svn_url\": \"https://github.com/huos3203/ArcProgressUI\",</span><br><span class=\"line\">\"default_branch\": \"master\",</span><br><span class=\"line\">\"permissions\": &#123;</span><br><span class=\"line\">    \"admin\": true,</span><br><span class=\"line\">    \"push\": true,</span><br><span class=\"line\">    \"pull\": true</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"初始化远程仓库\"><a href=\"#初始化远程仓库\" class=\"headerlink\" title=\"初始化远程仓库\"></a>初始化远程仓库</h2><p>找到仓库路径的字段<code>clone_url</code>或者``<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin clone_url</span><br><span class=\"line\">//或者使用ssh,避免输入密码</span><br><span class=\"line\">//git remote add origin ssh_url</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除远程仓库\"><a href=\"#删除远程仓库\" class=\"headerlink\" title=\"删除远程仓库\"></a>删除远程仓库</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">githubDelRepo()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $# != <span class=\"number\">2</span> ]] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        echo <span class=\"string\">\"Needs username and repo-name as args 1 and 2 respectively.\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        curl -X DELETE -u <span class=\"string\">\"$&#123;1&#125;\"</span> <span class=\"symbol\">https:</span>/<span class=\"regexp\">/api.github.com/repos</span><span class=\"regexp\">/\"$&#123;1&#125;\"/</span><span class=\"string\">\"$&#123;2&#125;\"</span></span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[]},{"title":"MacOS系统下运行exe小程序","slug":"macOS/MacOS系统下运行exe小程序","date":"2018-06-19T18:09:18.000Z","updated":"2018-06-19T19:44:09.000Z","comments":true,"path":"api/articles/macOS/MacOS系统下运行exe小程序.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>例如，当急需在Mac系统上，安装abletonLive，涉及到破解机exe小程序，使用文中提到的两种方法，就解了燃眉之急。</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p><a href=\"http://xiazai.crossoverchina.com/trial/Mac/crossover_mac_17.5.5.zip\" target=\"_blank\" rel=\"noopener\">crossover</a></p>\n<h3 id=\"Wrappe-k-小应用\"><a href=\"#Wrappe-k-小应用\" class=\"headerlink\" title=\"Wrappe[k]小应用\"></a>Wrappe[k]小应用</h3><p>这款软件适用于一些小型exe程序，其他，推荐方法一<br><a href=\"https://pan.baidu.com/s/1ujHKuXNr8G6m8PTPMO9ajQ\" target=\"_blank\" rel=\"noopener\">下载</a> 密码: khqa<br><a href=\"http://www.sdifen.com/mac-exe.html\" target=\"_blank\" rel=\"noopener\">参看</a></p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"}],"tags":[]},{"title":"能否在GarageBand中使用LaunchPad?","slug":"作文作曲/在GarageBand中使用LaunchPad","date":"2018-06-19T15:39:56.000Z","updated":"2018-06-19T19:38:15.000Z","comments":true,"path":"api/articles/作文作曲/在GarageBand中使用LaunchPad.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Garageband不支持控件表面，因此无法使用Launchpad/LaunchKey的全部功能。</p>\n<p>在Garageband中，仅可以使用Launchpad来演奏虚拟乐器。<br>原因：<code>Faders</code>和<code>Knobs</code>将为输出MIDI CC消息(<a href=\"http://global.novationmusic.com/answerbase/what-midi-cc-messages-do-the-controls-on-the-launchkey-send\" target=\"_blank\" rel=\"noopener\">详细介绍</a>)到支持手动操作的MIDI设备的插件。此外，打击垫还将发送固定的Note数据。<br>然而，Garageband本身没有传输、卷或Pan控件，不支持Launchpad的Volume or Pan Control。因此，只能在支持<code>HUI Protocol</code>的<a href=\"http://us.novationmusic.com/sites/default/files/novation/downloads/10606/launchkey-mk2-daw-setup-guide.pdf\" target=\"_blank\" rel=\"noopener\">DAW</a>的DAW，或者选择<code>Ableton Live</code>，Launchpad才能发挥最大的作用。<br><a href=\"https://support.novationmusic.com/hc/en-gb/articles/207556325-Can-I-use-my-Launchkey-in-Garageband-\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n","raw":null,"categories":[{"name":"作文作曲","path":"api/categories/作文作曲.json"}],"tags":[]},{"title":"LaunchPadMini说明书","slug":"作文作曲/LaunchPadMini说明书","date":"2018-06-19T14:23:13.000Z","updated":"2018-06-19T19:44:09.000Z","comments":true,"path":"api/articles/作文作曲/LaunchPadMini说明书.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/9678/launchpad-demo-project-2014.zip\" target=\"_blank\" rel=\"noopener\">工程demo</a><br><a href=\"https://global.novationmusic.com/launch/launchpad-mini/support-downloads\" target=\"_blank\" rel=\"noopener\">官方资源</a></p>\n<p>##<br><a href=\"https://global.novationmusic.com/answerbase/category/launchpad-video-tutorial\" target=\"_blank\" rel=\"noopener\">Launchpad几种模式视频教程</a></p>\n<h3 id=\"硬件设置\"><a href=\"#硬件设置\" class=\"headerlink\" title=\"硬件设置\"></a>硬件设置</h3><ol>\n<li>贴纸：确保标签与相应的按钮对齐。</li>\n<li>使用USB连接线将你的Launchpad Mini连接到你的Mac或PC上的USB端口。Ableton Live支持最多6台同时连接的设备。</li>\n<li>配置设备在Ableton Live中的配置</li>\n</ol>\n<ul>\n<li>打开Live偏好设置,选中<code>MIDI/Sync</code>选项卡，在<code>Input</code>中选择Launchpad Mini所连接的端口<br>以及窗口顶部的<code>Output</code>选择器</li>\n<li>在<code>Control Surface</code>控制面板中选择自己的设备。</li>\n<li>在<code>MIDI Ports</code>下，开启 <code>Track</code>和<code>Remote</code>选项.<h2 id=\"PRODUCT-OVERVIEW-ABLETON-LIVE\"><a href=\"#PRODUCT-OVERVIEW-ABLETON-LIVE\" class=\"headerlink\" title=\"PRODUCT OVERVIEW: ABLETON LIVE\"></a>PRODUCT OVERVIEW: ABLETON LIVE</h2><h3 id=\"Session-模式\"><a href=\"#Session-模式\" class=\"headerlink\" title=\"Session 模式\"></a>Session 模式</h3>当选择Launchpad作为活动控制面时，会话视图上会出现一个圆环，用于指示当前由pad矩阵控制的哪个部分。按下一个剪辑启动板，就会在相应的剪辑插槽中触发该剪辑。在没有武装的轨道上点击一个空的剪辑槽将停止在这个轨道上播放的剪辑。如果跟踪是武装到记录，按下按钮记录一个新的剪辑。<br>方向箭头和会话按钮通过在场景和跟踪中导航会话视图，增加了8×8网格的范围。你也可以使用Launchpad Mini的右手边的按钮来触发水平的剪辑(场景)。<h3 id=\"Session概述\"><a href=\"#Session概述\" class=\"headerlink\" title=\"Session概述\"></a>Session概述</h3>黄色:表示当前选定的剪辑块，它将被软件中的戒指所包围。<br>绿色:在那块剪辑中有一些剪辑在播放(虽然那可能不是被选中的剪辑块)。<br>红色:在这个范围内没有剪辑。<br>未激活色:在这个范围内没有音轨或场景。<h3 id=\"USER-模式\"><a href=\"#USER-模式\" class=\"headerlink\" title=\"USER 模式\"></a>USER 模式</h3>User1模式:说明在Lives中的MIDI音轨中可以使用<code>drum racks</code>鼓架(如果没有分配的话)<br>制造)，或在lives的MIDI可分配参数中自由分配Launchpad Mini的按钮。<br>User2模式:说明可以作为一个方便的地方来访问<code>Max for Live</code>预设配置(如果没有学习任务的话)，或者自由地分配给Live中的任何参数。<h2 id=\"Mixer混合器模式\"><a href=\"#Mixer混合器模式\" class=\"headerlink\" title=\"Mixer混合器模式\"></a>Mixer混合器模式</h2>底部的四行垫子提供了对每个轨道的直接访问控制，包括:停止、跟踪激活器、solo和跟踪臂。右下角的四个按钮为每个轨道提供额外的控制:<br>•<code>stop</code>：停止按钮，将停止当前播放的所有剪辑(可通过重新分配功能来避免)<br>•<code>trk on</code>：音轨激活器按钮，将打开所有轨道(非静音)<br>•<code>solo</code>：“独奏”按钮，将不再独奏所有曲目。<br>•<code>arm</code>: “音轨操作臂”按钮,will un-arm all armed tracks<h3 id=\"THE-VOLUME-PAN-SNDA-SNDB-PAGES\"><a href=\"#THE-VOLUME-PAN-SNDA-SNDB-PAGES\" class=\"headerlink\" title=\"THE VOLUME / PAN / SNDA / SNDB PAGES\"></a>THE VOLUME / PAN / SNDA / SNDB PAGES</h3>当Mixer模式激活时，按VOL/PAN/SNDA或SNDB按钮输入卷、PAN或发送页面，其中列的所有八个焊盘变成各自控制的连续轨迹“FADDER”。<br>VOLUME:音量<br>pan:<br>sndA:<br>sndB:\n\n\t<div class=\"row\">\n    <embed src=\"https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/7376/launchpadminiabletonguide_0.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n</li>\n</ul>\n<h3 id=\"launchPad-APP-for-iOS键盘功能映射\"><a href=\"#launchPad-APP-for-iOS键盘功能映射\" class=\"headerlink\" title=\"launchPad APP for iOS键盘功能映射\"></a>launchPad APP for iOS键盘功能映射</h3><h4 id=\"iPad兼容（Low-Power）vs全功率模式\"><a href=\"#iPad兼容（Low-Power）vs全功率模式\" class=\"headerlink\" title=\"iPad兼容（Low Power）vs全功率模式\"></a>iPad兼容（Low Power）vs全功率模式</h4><p>手机端节能模式设置</p>\n<ol>\n<li>在连接USB过程中，同时按住按钮<code>5</code>, <code>6</code>, <code>7</code>和<code>8</code>,开启设置节能</li>\n<li>选择一种电源模式（左为高，右为低），参考pdf图文</li>\n<li>完成设置后，按下绿色按钮退出<blockquote>\n<p>在全功率模式下，Launchpad mini需要使用单独供电的USB集线器与iPad链接，否则无法正常工作。</p>\n<h4 id=\"键位功能说明\"><a href=\"#键位功能说明\" class=\"headerlink\" title=\"键位功能说明\"></a>键位功能说明</h4></blockquote>\n</li>\n<li>F键位：Filters过滤器，8个垫子的每一列都变成一个滤光片:向上移动以除去低音，向下移动以除去高音。按<code>D</code>或<code>E</code>行的垫子重置Filter过滤器。</li>\n<li>G键位：Volume音量，8个垫子的每一层都变成了一个音量调节器。按下<code>B</code>行垫子重置音量。</li>\n<li>H键位：Trigger Sounds &amp; FX\n\n\t<div class=\"row\">\n    <embed src=\"https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/6959/launchpad-mini-gsg-en_0.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n</li>\n</ol>\n","raw":null,"categories":[{"name":"作文作曲","path":"api/categories/作文作曲.json"}],"tags":[]},{"title":"AbletonLive10安装使用","slug":"作文作曲/AbletonLive10安装使用","date":"2018-06-19T14:23:13.000Z","updated":"2018-06-19T19:44:09.000Z","comments":true,"path":"api/articles/作文作曲/AbletonLive10安装使用.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"launchPad\"><a href=\"#launchPad\" class=\"headerlink\" title=\"launchPad\"></a>launchPad</h2><p><a href=\"https://global.novationmusic.com\" target=\"_blank\" rel=\"noopener\">设备官网</a></p>\n<p><a href=\"https://global.novationmusic.com/launch/launchpad-mini/support-downloads\" target=\"_blank\" rel=\"noopener\">官方教程资源</a><br><a href=\"https://intro.novationmusic.com/join-the-dub-side\" target=\"_blank\" rel=\"noopener\">官方工程试听资源支持下载</a></p>\n<h2 id=\"ableton-live-软件\"><a href=\"#ableton-live-软件\" class=\"headerlink\" title=\"ableton live 软件\"></a>ableton live 软件</h2><p><a href=\"https://www.ableton.com/en/trial/\" target=\"_blank\" rel=\"noopener\">官网下载</a><br><a href=\"http://abletive.com\" target=\"_blank\" rel=\"noopener\">中国社区</a><br><a href=\"https://launchpadxm.com/class/ableton-live-10-0-1-suite-破解版下载.html\" target=\"_blank\" rel=\"noopener\">ABLETON LIVE 10.0.1 SUITE 破解版下载 WINDOWS &amp; MAC</a><br><a href=\"http://p27uwfdhv.bkt.clouddn.com/static/soft/Ableton%2010%20KeyGen%20v1.3.0.zip\" target=\"_blank\" rel=\"noopener\">ABLETON LIVE10.0.1破解机下载</a></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3>\n<h3 id=\"灯光\"><a href=\"#灯光\" class=\"headerlink\" title=\"灯光\"></a>灯光</h3><h3 id=\"工程制作\"><a href=\"#工程制作\" class=\"headerlink\" title=\"工程制作\"></a>工程制作</h3><h4 id=\"MIDI映射\"><a href=\"#MIDI映射\" class=\"headerlink\" title=\"MIDI映射\"></a>MIDI映射</h4><h4 id=\"采样音频\"><a href=\"#采样音频\" class=\"headerlink\" title=\"采样音频\"></a>采样音频</h4><h4 id=\"灯光使用\"><a href=\"#灯光使用\" class=\"headerlink\" title=\"灯光使用\"></a>灯光使用</h4>","raw":null,"categories":[{"name":"作文作曲","path":"api/categories/作文作曲.json"}],"tags":[]}]}