{"title":"MVVM介绍","slug":"iOS/MVVM介绍","date":"2017-09-24T19:26:28.000Z","updated":"2017-10-02T22:00:42.000Z","comments":true,"path":"api/articles/iOS/MVVM介绍.json","excerpt":null,"covers":["https://www.objccn.io/images/issues/issue-13/mvvm1.png","https://www.objccn.io/images/issues/issue-13/intermediate.png","https://www.objccn.io/images/issues/issue-13/mvvm.png"],"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>所以，MVVM 到底是什么？与其专注于说明 MVVM 的来历，不如让我们看一个典型的 iOS 是如何构建的，并从那里了解 MVVM：</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/mvvm1.png\" alt=\"Typical Model-View-Controller setup\"></p>\n<p>我们看到的是一个典型的 MVC 设置。Model 呈现数据，View 呈现用户界面，而 View Controller 调节它两者之间的交互。</p>\n<p>稍微考虑一下，虽然 View 和 View Controller 是技术上不同的组件，但它们几乎总是手牵手在一起，成对的。你什么时候看到一个 View 能够与不同 View Controller 配对？或者反过来？所以，为什么不正规化它们的连接呢？</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/intermediate.png\" alt=\"Intermediate\"></p>\n<p>这更准确地描述了你可能已经编写的 MVC 代码。但它并没有做太多事情来解决 iOS 应用中日益增长的重量级视图控制器的问题。</p>\n<p>在典型的 MVC 应用里，<em>许多</em>逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（presentation logic）”，以 MVVM 属术语来说，就是那些将 Model 数据转换为 View 可以呈现的东西的事情，例如将一个 <code>NSDate</code> 转换为一个格式化过的 <code>NSString</code>。<br>我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View/Controller 与 Model 之间：</p>\n<p><img src=\"https://www.objccn.io/images/issues/issue-13/mvvm.png\" alt=\"Model-View-ViewModel\"></p>\n<p>看起好多了！这个图解准确地描述了什么是 MVVM：一个 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。MVVM 听起来很复杂，但它本质上就是一个精心优化的 MVC 架构，而 MVC 你早已熟悉。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>现在我们知道了<em>什么</em>是 MVVM，但<em>为什么</em>我们会想要去使用它呢？在 iOS 上使用 MVVM 的动机，对我来说，无论如何，就是它能减少 View Controller 的复杂性并使得表示逻辑更易于测试。通过一些例子，我们将看到它如何达到这些目标。</p>\n<p>此处有三个重点是我希望你看完本文能带走的：</p>\n<ul>\n<li>MVVM 可以兼容你当下使用的 MVC 架构。</li>\n<li>MVVM 增加你的应用的可测试性。</li>\n<li>MVVM 配合一个绑定机制效果最好。</li>\n</ul>\n<p>如我们之前所见，MVVM 基本上就是 MVC 的改进版，所以很容易就能看到它如何被整合到现有使用典型 MVC 架构的应用中。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>让我们看一个简单的 <code>Person</code> Model 以及相应的 View Controller：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initwithSalutation:(<span class=\"built_in\">NSString</span> *)salutation firstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName birthdate:(<span class=\"built_in\">NSDate</span> *)birthdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *salutation;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *firstName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *lastName;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *birthdate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们假设我们有一个 <code>PersonViewController</code> ，在 <code>viewDidLoad</code> 里，只需要基于它的 <code>model</code> 属性设置一些 Label 即可。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.model.salutation.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.nameLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@ %@\"</span>, <span class=\"keyword\">self</span>.model.salutation, <span class=\"keyword\">self</span>.model.firstName, <span class=\"keyword\">self</span>.model.lastName];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.nameLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@\"</span>, <span class=\"keyword\">self</span>.model.firstName, <span class=\"keyword\">self</span>.model.lastName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc] init];</span><br><span class=\"line\">    [dateFormatter setDateFormat:<span class=\"string\">@\"EEEE MMMM d, yyyy\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.birthdateLabel.text = [dateFormatter stringFromDate:model.birthdate];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这全都直截了当，标准的 MVC。现在来看看我们如何用一个 View Model 来增强它。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">PersonViewModel</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithPerson:(Person *)person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) Person *person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *nameText;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *birthdateText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure></p>\n<p>我们的 View Model 的实现大概如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation PersonViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithPerson:(Person *)person &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (!self) return nil;</span><br><span class=\"line\"></span><br><span class=\"line\">    _person = person;</span><br><span class=\"line\">    if (person.salutation.length &gt; 0) &#123;</span><br><span class=\"line\">        _nameText = [NSString stringWithFormat:@&quot;%@ %@ %@&quot;, self.person.salutation, self.person.firstName, self.person.lastName];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        _nameText = [NSString stringWithFormat:@&quot;%@ %@&quot;, self.person.firstName, self.person.lastName];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class=\"line\">    [dateFormatter setDateFormat:@&quot;EEEE MMMM d, yyyy&quot;];</span><br><span class=\"line\">    _birthdateText = [dateFormatter stringFromDate:person.birthdate];</span><br><span class=\"line\"></span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>我们已经将 <code>viewDidLoad</code> 中的表示逻辑放入我们的 View Model 里了。此时，我们新的 <code>viewDidLoad</code> 就会非常轻量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.nameLabel.text = <span class=\"keyword\">self</span>.viewModel.nameText;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.birthdateLabel.text = <span class=\"keyword\">self</span>.viewModel.birthdateText;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以，如你所见，并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。它与 MVC 兼容，带来<a href=\"http://objccn.io/issue-1/\" target=\"_blank\" rel=\"noopener\">更轻量的 View Controllers</a>。</p>\n<h3 id=\"可测试\"><a href=\"#可测试\" class=\"headerlink\" title=\"可测试\"></a>可测试</h3><p>View Controller 是出了名的难以测试，因为它们做了太多事情。在 MVVM 里，我们试着尽可能多的将代码移入 View Model 里。测试 View Controller 就变得容易多了，因为它们不再做一大堆事情，并且 View Model 也非常易于测试。让我们来看看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SpecBegin(Person)</span><br><span class=\"line\">NSString *salutation = @&quot;Dr.&quot;;</span><br><span class=\"line\">NSString *firstName = @&quot;first&quot;;</span><br><span class=\"line\">NSString *lastName = @&quot;last&quot;;</span><br><span class=\"line\">NSDate *birthdate = [NSDate dateWithTimeIntervalSince1970:0];</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should use the salutation available. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:salutation firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.nameText).to.equal(@&quot;Dr. first last&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should not use an unavailable salutation. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.nameText).to.equal(@&quot;first last&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it (@&quot;should use the correct date format. &quot;, ^&#123;</span><br><span class=\"line\">    Person *person = [[Person alloc] initWithSalutation:nil firstName:firstName lastName:lastName birthdate:birthdate];</span><br><span class=\"line\">    PersonViewModel *viewModel = [[PersonViewModel alloc] initWithPerson:person];</span><br><span class=\"line\">    expect(viewModel.birthdateText).to.equal(@&quot;Thursday January 1, 1970&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">SpecEnd</span><br></pre></td></tr></table></figure></p>\n<p>如果我们没有将这个逻辑移入 View Model，我们将不得不实例化一个完整的 View Controller 以及伴随的 View，然后去比较我们 View 中 Label 的值。这样做不只是会变成一个麻烦的间接层，而且它只代表了一个十分脆弱的测试。现在，我们可以按意愿自由地修改视图层级而不必担心破坏我们的单元测试。使用 MVVM 带来的对于测试的好处非常清晰，甚至从这个简单的例子来看也可见一斑，而在有更复杂的表示逻辑的情况下，这个好处会更加明显。</p>\n<h3 id=\"响应式同步\"><a href=\"#响应式同步\" class=\"headerlink\" title=\"响应式同步\"></a>响应式同步</h3><p>注意到在这个简单的例子中， Model 是不可变的，所以我们可以只在初始化的时候指定我们 View Model 的属性。对于可变 Model，我们还需要使用一些绑定机制，这样 View Model 就能在背后的 Model 改变时更新自身的属性。此外，一旦 View Model 上的 Model 发生改变，那 View 的属性也需要更新。Model 的改变应该级联向下通过 View Model 进入 View。</p>\n<p>在 OS X 上，我们可以使用 Cocoa 绑定，但在 iOS 上我们并没有这样好的配置可用。我们想到了 KVO（Key-Value Observation），而且它确实做了很伟大的工作。然而，对于一个简单的绑定都需要很大的样板代码，更不用说有许多属性需要绑定了。作为替代，我个人喜欢使用 ReactiveCocoa，但 MVVM 并未强制我们使用 ReactiveCocoa。MVVM 是一个伟大的典范，它自身独立，只是在有一个良好的绑定框架时做得更好。</p>\n<p>我们覆盖了不少内容：从普通的 MVC 派生出 MVVM，看它们是如何相兼容的范式，从一个可测试的例子观察 MVVM，并看到 MVVM 在有一个配对的绑定机制时工作得更好。如果你有兴趣学习更多关于 MVVM 的知识，你可以看看<a href=\"http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/\" target=\"_blank\" rel=\"noopener\">这篇博客</a>，它用更多细节解释了 MVVM 的好处，或者<a href=\"http://www.teehanlax.com/blog/krush-ios-architecture/\" target=\"_blank\" rel=\"noopener\">这一篇</a>关于我们如何在最近的项目里使用 MVVM 获得巨大的成功的文章。我同样还有一个经过完整测试，基于 MVVM 的应用，叫做 <a href=\"https://github.com/AshFurrow/C-41\" target=\"_blank\" rel=\"noopener\">C-41</a> ，它是开源的。去看看吧，如果你有任何疑问，请<a href=\"https://twitter.com/ashfurrow\" target=\"_blank\" rel=\"noopener\">告诉我</a>。</p>\n<hr>\n<p><a href=\"http://objccn.io/issue-13\" target=\"_blank\" rel=\"noopener\">话题 #13 下的更多文章</a></p>\n<p>原文 <a href=\"http://www.objc.io/issue-13/mvvm.html\" target=\"_blank\" rel=\"noopener\">Introduction to MVVM</a></p>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"设计","path":"api/categories/设计.json"}],"tags":[]}