{"title":"使用CocoaPods开发静态库","slug":"工具/使用CocoaPods开发静态库","date":"2018-06-21T21:37:16.000Z","updated":"2018-06-21T21:43:37.000Z","comments":true,"path":"api/articles/工具/使用CocoaPods开发静态库.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!--github库卡片\n<div id=\"badge-container-huos3203-width-=\" class=\"hexo-github\" style=\"width: 100%\"></div>\n<script src=\"/hexo-github/badge.js\"></script>\n<script type=\"text/javascript\">\n  loadStyle(\"/hexo-github/style.css\");\n  loadStyle(\"/hexo-github/octicons/octicons.css\");\n  new Badge(\"#badge-container-huos3203-width-=\", \"huos3203\", \"width\", \"=\", false);\n</script>\n\n<p>–&gt;<br>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发一个用pod管理依赖关系的静态类库给其他人使用，而又不愿意公开源代码，比如一些SDK，那么就需要打包成.a文件。本文将以一个依赖于ASIHTTPRequest的静态类库，来演示如何创建使用了CocoaPods的静态类库以及打包的过程。</p>\n<h2 id=\"开发静态库（Static-Library）\"><a href=\"#开发静态库（Static-Library）\" class=\"headerlink\" title=\"开发静态库（Static Library）\"></a>开发静态库（Static Library）</h2><h3 id=\"搭建pod静态库项目\"><a href=\"#搭建pod静态库项目\" class=\"headerlink\" title=\"搭建pod静态库项目\"></a>搭建pod静态库项目</h3><h4 id=\"不基于pod手动创建-deprecated\"><a href=\"#不基于pod手动创建-deprecated\" class=\"headerlink\" title=\"不基于pod手动创建(deprecated)\"></a>不基于pod手动创建(deprecated)</h4><ol>\n<li>在Xcode中创建一个Cocoa Touch Static Library；</li>\n<li>创建Podfile文件；</li>\n<li>执行pod install完成整个项目的搭建；</li>\n<li>如果需要demo，手动创建示例程序，使用pod添加对私有静态库的依赖，重复执行pod install完成示例项目的搭建。</li>\n</ol>\n<h4 id=\"基于pod自动创建\"><a href=\"#基于pod自动创建\" class=\"headerlink\" title=\"基于pod自动创建\"></a>基于pod自动创建</h4><p>只需要输入<code>pod lib</code>命令即可完成初始项目的搭建，下面详细说明具体步骤，以<code>JHLib</code>作为项目名演示。<br>1.执行命令<code>pod lib create JHLib</code>。在此期间需要确认下面4个问题。</p>\n<h2 id=\"打包类库\"><a href=\"#打包类库\" class=\"headerlink\" title=\"打包类库\"></a>打包类库</h2><p>需要使用一个cocoapods的插件<code>cocoapods-packager</code>来完成类库的打包。当然也可以手动编译打包，但是过程会相当繁琐。</p>\n<ol>\n<li><p>安装打包插件<br>终端执行以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods-packager</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包<br>命令很简单，执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod package BZLib.podspec --library --force</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中<code>--library</code>指定打包成.a文件，如果不带上将会打包成.framework文件。<code>--force</code>是指强制覆盖。最终的目录结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|____BZLib.podspec</span><br><span class=\"line\">|____ios</span><br><span class=\"line\">| |____libBZLib.a</span><br></pre></td></tr></table></figure></p>\n<p>需要特别强调的是，该插件通过对引用的三方库进行重命名很好的解决了类库命名冲突的问题。<br>比如你的类库使用了ASI，然后打包成静态库.a文件。外部调用的项目也使用了ASI，那么不会造成冲突。因为在打包的时候，你的类库里的ASI被重命名为项目+ASI的前缀。</p>\n<p><a href=\"https://onevcat.com/2016/01/create-framework/\">如何打造一个让人愉快的框架</a><br><a href=\"http://www.cnblogs.com/brycezhang/p/4117180.html\">使用CocoaPods开发并打包静态库</a><br><a href=\"https://www.jianshu.com/p/2ea267bf0363\">iOS动态库,静态库以及framework</a></p>\n-->","categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[]}