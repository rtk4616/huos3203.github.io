{"title":"UIImage的渲染模式","slug":"iOS/UIImage的渲染模式","date":"2015-11-26T16:15:11.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/iOS/UIImage的渲染模式.json","excerpt":null,"covers":null,"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>设置UIImage的渲染模式：UIImage.renderingMode<br>在 iOS 7 中 UIImage 添加了一个 <code>renderingMode</code> 属性。我们可以使用 <code>imageWithRenderingMode:</code>并传入一个合适的<code>UIImageRenderingMode</code> 来指定这个 image 要不要以 Template 的方式进行渲染。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAutomatic</span> <span class=\"comment\">// 根据图片的使用环境和所处的绘图上下文自动调整渲染模式。</span></span><br><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span> <span class=\"comment\">// 始终绘制图片原始状态，不使用Tint Color。</span></span><br><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span> <span class=\"comment\">// 始终根据Tint Color绘制图片，忽略图片的颜色信息。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *img = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"myimage\"</span>];</span><br><span class=\"line\">img = [img imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</span><br><span class=\"line\"><span class=\"comment\">//实际效果，效果依旧显示为baritem的Tint Color</span></span><br><span class=\"line\"><span class=\"built_in\">UIBarButtonItem</span> *barButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc] initWithImage:setImage</span><br><span class=\"line\">                                                   style:<span class=\"built_in\">UIBarButtonItemStylePlain</span></span><br><span class=\"line\">                                                  target:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                  action:<span class=\"keyword\">@selector</span>(setAction:)];</span><br><span class=\"line\">```    </span><br><span class=\"line\">在新的 Xcode 中，我们可以直接在 Image Asset 里的 Render As 选项来指定是不是需要作为 template 使用。相应的，在`<span class=\"built_in\">UIApperance</span>`中，Apple 也为我们对于 `Size Classes` 添加了相应的方法。使用 `+appearanceForTraitCollection:` 方法，我们就可以针对不同 trait 下的应用的 apperance 进行很简单的设定。</span><br><span class=\"line\"></span><br><span class=\"line\">```objc</span><br><span class=\"line\"><span class=\"built_in\">UIView</span>.appearanceForTraitCollection(<span class=\"built_in\">UITraitCollection</span>(verticalSizeClass:.Compact)).tintColor = <span class=\"built_in\">UIColor</span>.redColor()  </span><br><span class=\"line\"><span class=\"built_in\">UIView</span>.appearanceForTraitCollection(<span class=\"built_in\">UITraitCollection</span>(verticalSizeClass:.Regular)).tintColor = <span class=\"built_in\">UIColor</span>.greenColor()</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"控件","path":"api/categories/控件.json"}],"tags":[{"name":"UI","path":"api/tags/UI.json"},{"name":"坑","path":"api/tags/坑.json"}]}