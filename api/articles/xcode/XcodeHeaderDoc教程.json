{"title":"Xcode HeaderDoc 教程","slug":"xcode/XcodeHeaderDoc教程","date":"2014-08-28T15:18:41.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/xcode/XcodeHeaderDoc教程.json","excerpt":"HeaderDoc 是在Xcode 5 和 iOS7 发布时，新增的一个命令行工具，功能：可以从代码中自动生成格式良好的HTML文档——当然，必须依赖于特定格式的注释来完成的。另外，Xcode 还会在 quick look 面板中以HeaderDoc风格显示你的注释。通过本教程，将学习如下几点：如何书写 HeaderDoc 风格的注释分如何在 Xcode 中预览文档如何生成 HTML 文档如何使用 VVDocumenter-Xcode(一个易于使用的第3方文档制作工具)准备工作下载本教程中用到的 示例项目这个简单的示例程序只包含了两个类：Car: 包含几个属性及一个 “drive” 方法以及一个 completion 块。MathAPI: 包含了1个方法，用于累加两个数。<br>现在，这两个类还没有任何注释。以便演示如何通过 HeaderDoc 为这两个类创建文档。","covers":["http://p27uwfdhv.bkt.clouddn.com/static/images/car.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/method.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/warning.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/token.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/codesnippet.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/driveCar.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/buildsetting.jpg?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_JumpBar-700x151.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_JumpBarSelect-700x287.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/Screen-Shot-2014-04-05-at-5.58.18-PM.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/Screen-Shot-2014-04-05-at-6.01.35-PM.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_VVDocumentor-700x184.png?imageMogr2/2/w/800","http://p27uwfdhv.bkt.clouddn.com/static/images/VW_Documentation_VVDocPrefs-700x410.png?imageMogr2/2/w/800"],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>HeaderDoc 是在Xcode 5 和 iOS7 发布时，新增的一个命令行工具，功能：可以从代码中自动生成格式良好的HTML文档——当然，必须依赖于特定格式的注释来完成的。</p>\n<p>另外，Xcode 还会在 quick look 面板中以<strong>HeaderDoc</strong>风格显示你的注释。</p>\n<p>通过本教程，将学习如下几点：</p>\n<ul>\n<li>如何书写 HeaderDoc 风格的注释</li>\n<li>分如何在 Xcode 中预览文档</li>\n<li>如何生成 HTML 文档</li>\n<li>如何使用 VVDocumenter-Xcode(一个易于使用的第3方文档制作工具)</li>\n</ul>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>下载本教程中用到的 <a href=\"http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/DocumentationExamples_Starter.zip\" target=\"_blank\" rel=\"noopener\">示例项目</a></p>\n<p>这个简单的示例程序只包含了两个类：</p>\n<ul>\n<li>Car: 包含几个属性及一个 “drive” 方法以及一个 completion 块。</li>\n<li>MathAPI: 包含了1个方法，用于累加两个数。<br>现在，这两个类还没有任何注释。以便演示如何通过 <strong>HeaderDoc</strong> 为这两个类创建文档。<a id=\"more\"></a>\n<h4 id=\"HeaderDoc-注释\"><a href=\"#HeaderDoc-注释\" class=\"headerlink\" title=\"HeaderDoc 注释\"></a>HeaderDoc 注释</h4></li>\n</ul>\n<p><strong>HeaderDoc</strong> 可以从命令行中运行，也可以通过 Xcode 运行。它扫描文件中以某种格式书写的注释,包括这3种形式：<br>这3中语法在 Xcode 中产生同样效果的文档</p>\n<pre><code>注释 1. 一般用于单行注释\n    /// Your documentation comment will go here\n注释 2.\n    /**  * Your documentation comment will go here  */\n注释 3: 一般用于较长的注释块\n    /*!  * Your documentation comment will go here  */\n\n注意：在注释2和注释3中，在每一行开头都会有一个额外的*，直至结尾的 */。这仅仅是为了美观，而不是必须的。\n</code></pre><h4 id=\"HeaderDoc-标签\"><a href=\"#HeaderDoc-标签\" class=\"headerlink\" title=\"HeaderDoc 标签\"></a>HeaderDoc 标签</h4><p>当 <strong>HeaderDoc</strong> 发现上述3种注释，它就开始寻找其中的<strong>HeaderDoc 标签</strong>。<strong>HeaderDoc 标签</strong> 用来修饰<strong>HeaderDoc 注释</strong>。</p>\n<p><strong>HeaderDoc 标签</strong>以 <strong>@</strong> 符号开头，然后是关键字，然后是一个空格，最后才是相应的文本（例如 @param foo）。<br>HeaderDoc 标签可以分为两种：</p>\n<ol>\n<li><p>顶级标签: 这些标签声明所要注释的对象的类型（例如头部声明、类、方法等等）。</p>\n<ul>\n<li>顶级标签，例如 @typedef，用于表示 <strong>typedef</strong> 定义的类型，比如枚举、结构体和函数指针。</li>\n<li><strong>HeaderDoc</strong> 能够根据上下文自动产生顶级标签，因此通常不是必须的。</li>\n</ul>\n</li>\n<li><p>二级标签:这些标签才是具体的注释内容。</p>\n<ul>\n<li>@brief: 简单描述你准备文档化的数据的类型，方法等等。</li>\n<li>@abstract: 等于 @brief。<ul>\n<li>@discussion: 类似 @abstract 和 @brief，但允许多行。它不是必须的，仅仅是为了使描述更清晰。</li>\n<li>@param: 描述方法、回调或函数的参数名称。</li>\n<li>@return: 描述方法或函数的返回值。（等同于 @result）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<!-- More -->\n<h4 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><ul>\n<li><h6 id=\"属性的文档化\"><a href=\"#属性的文档化\" class=\"headerlink\" title=\"属性的文档化\"></a>属性的文档化</h6><p>用 Xcode 打开<strong>DocumentationExamples</strong> 项目, 打开<strong>ViewController.h</strong>,<br>在<strong> car </strong>属性的前面，加入一行注释:</p>\n<pre><code>/*!  * @brief The ViewController class&apos; car object.  */\n\n@property (nonatomic) Car *car;\n</code></pre></li>\n</ul>\n<p>编译项目。编译结束，按住 alt/option 键，点击<strong>car</strong> 变量名。你将看到<strong>pop菜单</strong>中显示了刚才的注释内容。<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/car.jpg?imageMogr2/2/w/800\"><br>另一种方法:切换到Utitlities 面板的<strong>Quick Help</strong> 检查器窗口。点击 <strong>car</strong> 变量名，通过<strong>Quick Help</strong>,你将看到如下效果：<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/carquickhelp.jpg?imageMogr2/2/w/800\"></p>\n<ul>\n<li><h6 id=\"方法的文档化\"><a href=\"#方法的文档化\" class=\"headerlink\" title=\"方法的文档化\"></a>方法的文档化</h6><p><strong>MathAPI</strong>包含一个方法需要文档化。打开<strong>MathAPI.h</strong>,找到<code>addNumber:toNumber:</code>。</p>\n</li>\n</ul>\n<p>这个方法有两个参数及一个返回值。因此需要一个 @description 标签、两个@param标签，以及一个@return 标签，如下面所示：</p>\n<pre><code>/*!  * @discussion A really simple way to calculate the sum of two numbers.\n\n      * @param firstNumber An NSInteger to be used in the summation of two numbers\n\n      * @param secondNumber The second half of the equation.\n\n       * @return The sum of the two numbers passed in.\n\n*/\n\n+ (NSInteger)addNumber:(NSInteger)firstNumber toNumber:(NSInteger)secondNumber;\n</code></pre><p>编译，再 <strong>alt + 左键</strong>：<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/method.jpg?imageMogr2/2/w/800\"></p>\n<p> 问题: 在 Xcode 文本编辑窗口，很多地方都支持 <strong>alt+左键</strong>。请确保你点击在正确的地方。在上面的例子里，你应当在addNumber: 和 toNumber: 两处使用 alt+左键。</p>\n<p>你也许不知道，这个方法的实现真的很恶心。它只能使用非负数作为参数。为了让用户明白这一点，你应当在注释中添加更多的说明。因此，我们可以在 @return 前面加入一个 @warning 标签。</p>\n<pre><code>* @warning Please make note that this method is only good for adding non-negative numbers.\n</code></pre><p>编译项目，然后使用 alt+左键。我们添加的 @warning 标签效果如下：<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/warning.jpg?imageMogr2/2/w/800\"></p>\n<h4 id=\"Code-Snippets，让一切变得更简单\"><a href=\"#Code-Snippets，让一切变得更简单\" class=\"headerlink\" title=\"Code Snippets，让一切变得更简单:\"></a>Code Snippets，让一切变得更简单:</h4><p>一个<strong>snippet</strong> 是一个可以重用的代码块（存储在 snippet 库中）。<strong>Snippets</strong> 甚至可以包含一些需要你去填充的占位符。<br>这意味着, 可以用 <strong>snipppet</strong>来进行文档化。</p>\n<p>在 <strong>MathAPI.h</strong> 中，在原有的注释上面加入以下内容：</p>\n<pre><code>/*!  * @discussion &lt;#description#&gt;\n\n     * @param &lt;#param description#&gt;\n\n     * @return &lt;#return description#&gt;\n*/\n</code></pre><p> 注意，当粘贴上述代码时，“&lt;# #&gt;”之间的内容会变成一个<strong>token</strong>,意味着可以通过 <strong>tab 键</strong>在 <strong>token</strong> 之间来回切换。就像编写代码时的自动完成功能。<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/token.png?imageMogr2/2/w/800\"></p>\n<h6 id=\"学习使用Code-Snippets工具\"><a href=\"#学习使用Code-Snippets工具\" class=\"headerlink\" title=\"学习使用Code Snippets工具\"></a>学习使用Code Snippets工具</h6><p> 打开 <strong>Utilities 面板</strong>中的 <strong>CodeSnippets Library 检查器</strong>窗口，选中上述注释块，将它拖到该检查器窗口中（从某个 token 例如&lt;#description#&gt;开始拖）:<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/codesnippet.jpg?imageMogr2/2/w/800\"><br> 将会弹出一个编辑窗口让输入 snippet 的某些信息，并以此来创建一个<strong>自动完成快捷方式</strong>。要修改某个<strong>snippet</strong>时,直接点击 <strong>Code Snippet Library</strong> 中的 snippet，然后点 Edit 按钮。按照如下形式填写：<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/snippetwindow.jpg?imageMogr2/2/w/800\"></p>\n<p>要想让 <strong>snippet</strong> 生效，首先删除原有注释，然后将鼠标放到addNumber:toNumber: 方法的 + 号前面,输入<strong>doccomment</strong>，然后回车，该<strong>snippet</strong> 将自动生成。然后，通过 Tab 键在3个 token 间移动，并填充它们。最终完成的文档化结果如下:</p>\n<pre><code>/*!  * @discussion A really simple way to calculate the sum of two numbers.\n\n     * @param firstNumber An NSInteger to be used in the summation of two numbers.\n\n     * @param secondNumber The second half of the equation.\n\n     * @warning Please make note that this method is only good for adding non-negative numbers.\n\n     * @return The sum of the two numbers passed in.\n*/\n</code></pre><p><strong>@param 标签</strong>和 <strong>@warning 标签</strong>需要手动书写。</p>\n<h4 id=\"Typedefs的文档化\"><a href=\"#Typedefs的文档化\" class=\"headerlink\" title=\"Typedefs的文档化\"></a>Typedefs的文档化</h4><p> 打开 Car.h，在 class 之,有一个NS_ENUM，即 typedef enum，一个块，几个属性，一个空方法等，需要文档化。</p>\n<p>还记得 @typedef 标签吗？<br>这个顶级标签稍微特殊一点。它可以对<strong>typedef enum</strong> 或者 <strong>typedef struct</strong> 的类型进行注释。<br>根据注释的对象的不同，它会包含与定义的类型相关的二级标签。</p>\n<p>以 enum 为例，它会包含 @constant 标签，用于每个常量（对于struct，则会是 @field 标签）。</p>\n<p>找到 <strong>enum OldCarType</strong>。它包含两个常量，是用于古典汽车的。在<strong>typedef</strong> 声明之上，将原来的注释替换为：</p>\n<pre><code>/*!  * @typedef OldCarType\n\n     * @brief A list of older car types.\n\n     * @constant OldCarTypeModelT A cool old car.\n\n     * @constant OldCarTypeModelA A sophisticated old car.\n*/\n\ntypedef enum {\n        /// A cool, old car.\n\n         OldCarTypeModelT,\n\n        /// A sophisticated older car.\n\n        OldCarTypeModelA\n\n} OldCarType;\n</code></pre><p> 编译，然后在 <strong>OldCarType</strong> 或上<strong>OldCarTypeModelT</strong>使用<strong>alt + 左键</strong>。</p>\n<p>在这个类中只有一个 <strong>NS_ENUM</strong>，因此接下来进行进行文档化。常量已经注释了，只要对整个<strong>NS_ENUM</strong> 进行一个总体的注释就可以了。</p>\n<pre><code>/*!  * @typedefCarType\n\n     * @brief Alist of newer car types.\n\n     * @constantCarTypeHatchback Hatchbacks are fun, but small.\n\n     * @constantCarTypeSedan Sedans should have enough room to put your kids, and your golfclubs\n\n     * @constantCarTypeEstate Estate cars should hold your kids, groceries, sport equipment,etc.\n\n     * @constantCarTypeSport Sport cars should be fast, fun, and hard on the back.\n*/\n</code></pre><p>注意:这个enum 是通过宏来声明的，悲催的 Xcode 不能完全支持和 <strong>typedef enum</strong> 一样的文档特性，虽然<strong>NS_ENUM</strong> 实际上是声明 enums 的推荐的方法。</p>\n<h4 id=\"typedef-block-文档化\"><a href=\"#typedef-block-文档化\" class=\"headerlink\" title=\"typedef block 文档化\"></a>typedef block 文档化</h4><pre><code>/*!  * @brief A block that makes the car drive.\n     * @param distance The distance is equal to a distance driven when the block is ready to execute. It could be miles, or kilometers, but not both. Just pick one and stick with it. ;]\n*/\n\ntypedef void(^driveCompletion)(CGFloat distance);\n</code></pre><p><strong>typedef block</strong> 的文档化和之前的并无多少不同，它包含了：</p>\n<ul>\n<li>一个 @brief 标签，简单说明了一下这个块的作用。</li>\n<li>一个 @param 标签，说明调用块时需要传递的参数。</li>\n</ul>\n<h4 id=\"添加格式化代码到文档中\"><a href=\"#添加格式化代码到文档中\" class=\"headerlink\" title=\"添加格式化代码到文档中\"></a>添加格式化代码到文档中</h4><p>例如，Car 类的 <strong>driveCarWithComplete:</strong> 方法。</p>\n<p>这个方法以块作为参数，因为块对于新手来说一般比较困难，因此最好是告诉程序员如何使用这个方法。</p>\n<p>这需要使用 <strong>@code 标签</strong>。在 <strong>driveCarWithCompletion</strong>方法声明之前添加如下内容：</p>\n<pre><code>/*!  * @brief The car will drive, and then execute the drive block\n\n     * @param completion A driveCompletion block\n\n     * @code [car driveCarWithCompletion:^(CGFloat distance){\n\n                            NSLog(@&quot;Distance driven %f&quot;, distance);\n\n                         }];\n*/\n</code></pre><p>编译，在方法名上使用<strong>alt+左键</strong>。如下图所示：<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/driveCar.jpg?imageMogr2/2/w/800\"></p>\n<h4 id=\"检查文档\"><a href=\"#检查文档\" class=\"headerlink\" title=\"检查文档\"></a>检查文档</h4><p>学会了如何添加注释，如果 <strong>Xcode</strong> 能帮你检查你的工作，就像Xcode会自动检查代码中的语法错误，那岂不是更好？有一个好消息，Clang 有一个标志，叫做“<strong>CLANG_WARN_DOCUMENTATION_COMMENTS</strong>”,可以用于检查 <strong>HeaderDoc</strong> 格式的注释。</p>\n<p>打开 <strong>DocumentationExamples</strong>的项目设置，点击 <strong>Build Settings</strong>，找到 <strong>DocumentationComments</strong>, 将值设置为 <strong>YES</strong>。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/buildsetting.jpg?imageMogr2/2/w/800\"><br>如下，打开 <strong>MathAPI.h</strong>，将第一个 @param 标签的参数名由<strong>firstNumber</strong> 修改为 <strong>thirdNumber</strong>,然后编译。<br>有一个警告发生，甚至提出了修改建议。它不会影响任何事情，但有助于检查文档中的错误。<br> <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_WarningEx.png?imageMogr2/2/w/800\"></p>\n<h4 id=\"特殊注释\"><a href=\"#特殊注释\" class=\"headerlink\" title=\"特殊注释\"></a>特殊注释</h4><p><strong>Xcode</strong> 还支持几种特殊注释，对于你或者使用你代码的人非常有用。</p>\n<p>打开 Car.m，在 <strong>driveCarWithCompletion:</strong> 方法中，在调用<strong>completion</strong> 块之前添加下列注释：</p>\n<pre><code>// FIXME: This is broken\n\n// !!!: Holy cow, it should be checked!\n\n// ???: Perhaps check if the block is not nil first?\n</code></pre><p>这里出现了3中注释：</p>\n<ul>\n<li>FIXME: 某个地方需要修正</li>\n<li>!!!: 某个地方需要注意。</li>\n<li>???: 代码中有问题，或者代码是可疑的。</li>\n</ul>\n<p>这些注释不但有助于浏览代码，而且 Xcode 绘制 <strong>Jump Bar</strong> 中显示它们。点击<strong>Jump Bar</strong>，如下图所示：</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_JumpBar-700x151.png?imageMogr2/2/w/800\">\n<p> 你将看到这3个注释以粗体显示：</p>\n <img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_JumpBarSelect-700x287.png?imageMogr2/2/w/800\">\n<p> 到此，你已经完全掌握了如何对项目进行文档化。花一些时间对项目的其他属性和方法操作一番，并加入一些自己的东西。看看在注释块中改变一些东西或者删除某个标签会发生什么。这将让你明白注释格式如何对文档造成影响的。</p>\n<p>#用headerdoc2html 创建 HTML文档<br>文档化是由一个 <strong>HeaderDoc 工具</strong>完成的。当 Xcode 安装时，它就已经安装好了。<br>它除了解释已添加的注释，显示一个弹出菜单以及将注释在<strong>Quick Help</strong> 中显示之外，还可以在文档化之后创建 HTML、XML 以及联机帮助手册。</p>\n<p>本节介绍 HTML 文件的制作。如果你对用 HeaderDoc 如何创建在线文档感兴趣，请参考<a href=\"https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/usage/usage.html\" target=\"_blank\" rel=\"noopener\">HeaderDoc 用户指南</a>.</p>\n<p>打开终端，转到 DocumentationExamples 项目目录：</p>\n<pre><code>cd /path/to/your/folder\n\n确保该路径下包含了 Xcodeproject  文件(“DocumentationExamples.xcodeproj”)。\n</code></pre><p>然后用下列命令创建 HTML 文档：</p>\n<pre><code>headerdoc2html -o ~/Desktop/documentation DocumentationExamples/\n</code></pre><p>此时终端会有许多输出。当创建完毕，返回桌面，出现一个名为documentation 的目录。双击打开，找到 Car_h 目录，打开 index.html：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/Screen-Shot-2014-04-05-at-5.58.18-PM.png?imageMogr2/2/w/800\"></p>\n<p><strong>headerdoc2html 脚本</strong>有两个参数：</p>\n<p>So what justhappened? Well, you ran the headerdoc2htmlscript with 2 options:</p>\n<ul>\n<li>-o ~/Desktop/documentation – 这个参数指定输出的 Html 文件路径——即桌面的 documentation 目录。</li>\n<li>DocumentationExamples/ – 该参数指定要解析的源文件位于 DocumentationExamples 目录（不包含项目目录下的其他目录，因为它们并不包含源代码）</li>\n</ul>\n<p>问题:</p>\n<ol>\n<li>最新版本<strong>headerdoc2html</strong>有个问题，用 google chrome打开 index.html后，左边的目录显示不正常，但 Safari打开正常。</li>\n<li>最新版本的<strong>headerdoc2html</strong> 不能正确解析 /// 类的注释，可以使用 /*! 类型的注释代替。</li>\n</ol>\n<p>这很酷，但还可以更进一步。除了手动进入到输出目录中进行导航，<strong>HeaderDoc</strong>还会创建一个主目录索引。<br>返回终端，导航至新建的 <strong>documentation</strong> 目录，输入：</p>\n<pre><code>cd ~/Desktop/documentation\n</code></pre><p>然后输入命令，创建内容索引:</p>\n<pre><code>gatherheaderdoc .\n</code></pre><p><strong>gatherheaderdoc</strong>自动查找目录，为 <strong>.</strong> 目录（表示当前目录）创建索引。<br>用 Finder 打开 documentation  目录。你会发现多出一个 <strong>masterTOC.html</strong> 文件。打开它，它将列出所有已文档化的属性、方法、枚举和块的链接。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/Screen-Shot-2014-04-05-at-6.01.35-PM.png?imageMogr2/2/w/800\"><br>你可以将所有 HTML 文件放到 web 服务器上，然后所有人都可以访问你的文档！</p>\n<p>#VVDocumenter-Xcode</p>\n<p>最后的内容是 <strong>VVDocumenter-Xcode</strong>，一个第三方 Xcode插件，它能让你的文档化工作简单至比使用早先介绍的 <strong>Code Snippet</strong> 更容易。</p>\n<p>首先，从 <a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">Github</a> 下载插件。</p>\n<p>你所需要做的全部工作就是打开项目，然后 <strong>Build</strong>。它会将插件自动安装到~/Library/ApplicationSupport/Developer/Shared/Xcode/Plug-ins 目录。</p>\n<p>然后重启 Xcode。再次打开 DocumentationExamples项目。在 MathAPI.h，删除 <strong><code>addNumber:toNumber</code></strong> 方法的注释块，然后在方法声明上面输入：</p>\n<pre><code>///\n</code></pre><p><strong>VVDocumenter-Xcode</strong> 将自动创建注释块，包括所有必要的 <strong>@param</strong> 标签以及自动完成 <strong>token</strong>。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/RW_Documentation_VVDocumentor-700x184.png?imageMogr2/2/w/800\"></p>\n<p>打开 Car.h，删除 <strong>NS_ENUM CarType</strong> 的注释，以及每个常量的注释。在<strong>NS_ENUM</strong> 声明之上，输入：</p>\n<pre><code>///\n</code></pre><p>这回，它会在 enum 之上创建 <strong>discussion</strong> 标签，甚至还每个常量上面放入了必要的注释！</p>\n<p><strong>VVDocumenter-Xcode</strong> 使你的生活更加轻松。如果你想定制<strong>VVDocumenter-Xcode</strong>，在Xcode中，使用 <strong>Window&gt;VVDocumenter菜单</strong>。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/VW_Documentation_VVDocPrefs-700x410.png?imageMogr2/2/w/800\"></p>\n<p>这里，你可以改变自动完成关键字、注释风格以及其他。你想怎样定制 VVDocumenter-Xcode都行。VVDocumenter-Xcode 为我省下了大量的时间！<br>接下来做什么？</p>\n<p>最终完成的示例项目在 这里<a href=\"http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/DocumentationExamples_Final.zip\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n<p>在你自己的代码中进行文档化。尝试自己编写 <strong>code snippet</strong> 并使用<strong>VVDocumentor</strong>。</p>\n","categories":[{"name":"xcode","path":"api/categories/xcode.json"},{"name":"文档","path":"api/categories/文档.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"}]}