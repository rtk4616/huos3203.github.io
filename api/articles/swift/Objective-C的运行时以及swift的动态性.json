{"title":"Objective-C的运行时以及swift的动态性","slug":"swift/Objective-C的运行时以及swift的动态性","date":"2017-09-25T20:01:36.000Z","updated":"2017-10-02T22:00:42.000Z","comments":true,"path":"api/articles/swift/Objective-C的运行时以及swift的动态性.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Objective-C-运行时\"><a href=\"#Objective-C-运行时\" class=\"headerlink\" title=\"Objective-C 运行时\"></a>Objective-C 运行时</h2><p>Objective-C 是一门基于运行时的编程语言，这意味着所有方法、变量、类之间的链接，都会推迟到应用实际运行的最后一刻才会建立。这将给开发人员极高的灵活性，因为我们可以修改这些链接。而不同的是，Swift 绝大多数时候是一门面向编译时的语言。因此在 Swift 当中，灵活性受到了限制，不过您会因此得到更多的安全性。</p>\n<h3 id=\"runtime-h开源库\"><a href=\"#runtime-h开源库\" class=\"headerlink\" title=\"runtime.h开源库\"></a>runtime.h开源库</h3><p>Objective-C 的运行时本质上是一个库。它负责了 “Objective” 这个部分，因此您所知、所爱的面向对象编程，都是在这里实现的。如果您想要访问里面的函数的话，只需要导入这个库即可：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p><code>runtime.h</code>开源库主要由 C 和汇编编写而成，其实现了诸如类、对象、方法调度、协议等面向对象编程这个部分。</p>\n<h4 id=\"构建模块\"><a href=\"#构建模块\" class=\"headerlink\" title=\"构建模块\"></a>构建模块</h4><h5 id=\"对象结构体\"><a href=\"#对象结构体\" class=\"headerlink\" title=\"对象结构体\"></a>对象结构体</h5><p>那么什么是对象呢？对象在 runtime.h 当中是这样定义的：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>isa</strong>:建立<code>对象</code>只与一个类引用关联，也就是这个 isa 的意思所在。这也就是 Objective-C 当中的所有对象都需要实现的。</p>\n<h5 id=\"类结构体\"><a href=\"#类结构体\" class=\"headerlink\" title=\"类结构体\"></a>类结构体</h5><p>那么类又是什么呢？类的定义要稍微复杂一些。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">    Class super_class;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> version;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> info;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> instance_size;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>属性说明：<br><strong>isa</strong>属性：建立自身与 <code>super_class</code> 这个值进行关联。<br><strong>super_class</strong>:除了 NSObject 这个类之外，super_class 的值永远不会为 nil，因为 Objective-C 当中的其余类都是以某种方式继承自 NSObject 的。<br><strong>ivars</strong>：变量列表<br><strong>methodLists</strong>：方法列表<br><strong>protocols</strong>：协议列表<br>其他属性：<code>name</code>、<code>version</code>、<code>info</code> 之类的值，不过这些并不是我们感兴趣的内容。<br>这些就是我们能在运行时修改和读取的。可以看到，对象其实本质上是一个非常简单的结构体，类同样也是。</p>\n<h3 id=\"allocateClassPair函数创建类\"><a href=\"#allocateClassPair函数创建类\" class=\"headerlink\" title=\"allocateClassPair函数创建类\"></a>allocateClassPair函数创建类</h3><p>我们可以借助运行时函数，从而在运行时动态创建类。</p>\n<ol>\n<li>要用的 Objective-C 运行时函数：<code>allocateClassPair</code>。提供三个参数即可：<br><strong>isa</strong>：关联引用，这里提供了NSObject<br>类名：<br>额外字节的定义：通常我们都直接赋值 0 即可</li>\n<li>添加变量、方法以及协议</li>\n<li><code>registerClassPair</code>注册这个 ClassPair,注册之后，我们就无法修改变量列表了，不过其余的内容仍然可以修改。</li>\n<li>初始化类结束~我们所创建的这个类和其余的 Objective-C 类毫无区别。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类函数的构造器</span></span><br><span class=\"line\">Class myClass = objc_allocateClassPair([<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>], <span class=\"string\">\"MyClass\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里添加变量、方法和协议</span></span><br><span class=\"line\"></span><br><span class=\"line\">objc_registerClassPair(myClass);</span><br><span class=\"line\"><span class=\"comment\">// 当类注册之后，变量列表将会被锁定</span></span><br><span class=\"line\"></span><br><span class=\"line\">[[myClass alloc] init];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>我们为什么要这么做呢？因为这个函数被大量运用在库提供者制作的框架当中。如果您无法知道用户将会创建什么样的数据，那么您就需要在运行时进行类的创建了。Core Data 就使用了这个功能。此外，如果您愿意的话，它还可以用在 JSON 解析当中。</p>\n<h3 id=\"在类别中添加存储属性\"><a href=\"#在类别中添加存储属性\" class=\"headerlink\" title=\"在类别中添加存储属性\"></a>在类别中添加存储属性</h3><p>如果您想要扩展一个不是自己创建的类，想要向其中添加函数，有一个便捷的方法便是使用 Objective-C 的类别 (Category) 特性。Swift 的扩展与之非常相似。类别的一个问题便在于，它无法添加存储属性。您可以添加一个计算属性，但是存储属性是无法添加的。</p>\n<p>运行时的另一个特性便是：我们可以借助 <code>setAssociatedObject</code> 和 <code>getAssociatedObject</code> 这两个函数，向既有的类当中添加存储属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation NSObject (AssociatedObject)</span><br><span class=\"line\">@dynamic associatedObject;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setAssociatedObject:(id)object &#123;</span><br><span class=\"line\">    objc_setAssociatedObject(self, @selector(associatedObject), object,</span><br><span class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)associatedObject &#123;</span><br><span class=\"line\">    return objc_getAssociatedObject(self, @selector(associatedObject));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于不是自己创建的类而言，使用这个方法进行扩展无疑是非常好用的。</p>\n<h3 id=\"内省机制\"><a href=\"#内省机制\" class=\"headerlink\" title=\"内省机制\"></a>内省机制</h3><p>「内省 (introspection)」机制是用来判别这个类能执行何种操作。通常，我们所使用的往往是最基础的内省功能。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类成员判断</span></span><br><span class=\"line\">[myObject isMemberOfClass:<span class=\"built_in\">NSObject</span>.class];</span><br><span class=\"line\"><span class=\"comment\">//类方法判断</span></span><br><span class=\"line\">[myObject respondsToSelector:<span class=\"keyword\">@selector</span>(doStuff:)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// isa == class</span></span><br><span class=\"line\">class_respondsToSelector(myObject.class, <span class=\"keyword\">@selector</span>(doStuff:));</span><br></pre></td></tr></table></figure></p>\n<p><code>isMemberOfClass</code>:是 Foundation 当中的一部分，这里我们查看 myObject 是否是 NSObject 的子类。<br><code>respondsToSelector:</code>:当我们使用了一个带有可选方法的协议时，为了避免崩溃发生，可以借助这个函数来判断这个对象是否可以调用此可选方法。<br><strong>在运行时层面</strong><br><code>isMemberOfClass</code>: 对比两者的 <strong>isa</strong> 是否相同。<br><code>respondsToSelector</code>:则封装了一个 Objective-C 运行时函数：<code>respondsToSelector</code>，其接受 <code>Selector</code> 和<code>类</code>为参数。</p>\n<h3 id=\"单元测试：方法列表\"><a href=\"#单元测试：方法列表\" class=\"headerlink\" title=\"单元测试：方法列表\"></a>单元测试：方法列表</h3><p>如果您写过单元测试的话，您就会知道当我们在编写 XCTestCase 的时候，需要完成 setUp 和 tearDown 的设定，随后才能编写相关的 test 函数。当测试运行的时候，系统会自行遍历所有的测试函数，并自动运行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int count;</span><br><span class=\"line\">Method *methods = class_copyMethodList(myObject.class,&amp;count);</span><br><span class=\"line\">//Ivar *list = class_copyIvarList(myObject.class,&amp;count);</span><br><span class=\"line\"></span><br><span class=\"line\">for(unsigned i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">    SEL selector = method_getName(methods[i]);</span><br><span class=\"line\">    NSString *selectorString = NSStringFromSelector(selector);</span><br><span class=\"line\">    if ([selectorString containsString:@&quot;test&quot;]) &#123;</span><br><span class=\"line\">        [myObject performSelector:selector];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">free(methods);</span><br></pre></td></tr></table></figure></p>\n<p>这个功能是借助 Objective-C 的运行时机制实现的,即：借助运行时函数获取可以复制方法列表，还可以复制变量列表。可以获取方法名，然后将其转换为字符串，检查其是否包含有 “test”，如果有便可以运行。现在我们便搭建好了 XCTest 的最简单版本！</p>\n<h3 id=\"方法-变量的结构体成员\"><a href=\"#方法-变量的结构体成员\" class=\"headerlink\" title=\"方法/变量的结构体成员\"></a>方法/变量的结构体成员</h3><ol>\n<li><p>变量结构体：包含了变量类型和变量名称。偏移量 (offset) 则是内存管理方面的内容。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ivar_name;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ivar_type;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ivar_offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法结构体：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</span><br><span class=\"line\">    SEL method_name;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *method_types;</span><br><span class=\"line\">    IMP method_imp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>SEL</strong>： 使用Selector 来表示的Objective-C方法的名称，对应在 performSelector 当中所匹配的内容。<br><strong>方法类型</strong>：使用编码字符串来表示其类型。<br><strong>IMP</strong>：是方法实现的一种特定的表示方式。</p>\n<h4 id=\"给对象添加方法\"><a href=\"#给对象添加方法\" class=\"headerlink\" title=\"给对象添加方法\"></a>给对象添加方法</h4><p>了解方法结构体后，可知我们同样可以在运行时向对象当中添加方法：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">Method doStuff = class_getInstanceMethod(<span class=\"keyword\">self</span>.class, <span class=\"keyword\">@selector</span>(doStuff));</span><br><span class=\"line\"><span class=\"comment\">//获取方法的实现</span></span><br><span class=\"line\">IMP doStuffImplementation = method_getImplementation(doStuff);</span><br><span class=\"line\"><span class=\"comment\">//获取方法的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *types = method_getTypeEncoding(doStuff); <span class=\"comment\">//“v@:@\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">class_addMethod(myClass.class, <span class=\"keyword\">@selector</span>(doStuff:), doStuffImplementation, types);</span><br></pre></td></tr></table></figure></p>\n<p><code>class_addMethod</code>: 向对象当中添加方法的运行时函数。它所需的参数，即上述方法结构体当中的那三个值：Selector、方法实现和方法类型。</p>\n<h4 id=\"调用新加的方法\"><a href=\"#调用新加的方法\" class=\"headerlink\" title=\"调用新加的方法\"></a>调用新加的方法</h4><p>当然，我们添加了方法目的就是要使用它们。我们可以使用 <code>[self doStuff]</code> 或者<code>[self performSelector:@selector(doStuff)]</code>来进行调用，实际上在运行时级别，它们都是借助 <code>objc_msgSend</code> 向对象发送了一个消息。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> doStuff];</span><br><span class=\"line\"><span class=\"comment\">//方式二</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(doStuff)];</span><br><span class=\"line\"><span class=\"comment\">//方式三</span></span><br><span class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(message));</span><br></pre></td></tr></table></figure></p>\n<p>但是如果调用方法所在的对象为 nil 的时候，我们就会得到一个异常，应用便会崩溃。但事实证明，在崩溃之前会预留几个步骤，从而允许我们对某个不存在的函数进行一些操作。</p>\n<h3 id=\"方法转发\"><a href=\"#方法转发\" class=\"headerlink\" title=\"方法转发\"></a>方法转发</h3><p>当我们试图桥接两个不同的框架的时候，可以将方法转发 (forward) 给其余目标。这个功能便非常有用。当我们调用某个未实现的方法时，这便是会发生的操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1</span><br><span class=\"line\">+(BOOL)resolveInstanceMethod:(SEL)sel&#123;</span><br><span class=\"line\">    // 添加实例方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(BOOL)resolveClassMethod:(SEL)sel&#123;</span><br><span class=\"line\">    // 添加类方法并返回 YES 的一次机会，它随后会再次尝试发送消息</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2</span><br><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector&#123;</span><br><span class=\"line\">    // 返回可以处理 Selector 的对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 3</span><br><span class=\"line\">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</span><br><span class=\"line\">    // 您需要实现它来创建 NSInvocation</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)invocation &#123;</span><br><span class=\"line\">    // 在您所选择的目标上调用 Selector</span><br><span class=\"line\">    [invocation invokeWithTarget:target];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当您调用了某个不存在的方法时，运行时有如下处理步骤：</p>\n<ol>\n<li>首先调用两个类方法：一个名为 <code>resolveInstanceMethod</code>类方法，如果所调用的方法是类方法，则调用为调用 <code>resolveClassMethod</code>类方法。这时候我们便有机会来添加方法了，步骤的话我们之前就已经展示过了。如果我们返回了 YES，就意味着原始方法将会再次被调用。</li>\n<li><code>forwardingTargetForSelector</code>：当不要添加新方法时，可以直接返回需要调用方法的目标对象即可，之后这个对象就会调用 Selector。</li>\n<li><code>forwardInvocation</code>方法：实现在您所选择的目标对象上调用 Selector，所有的调用过程都被封装到 <code>NSInvocation</code> 对象当中。如果您需要这么做，那么还需要实现 <code>methodSignatureForSelector</code>。<br>完成以上步骤，便可以可以将方法转发给其他对象。<h3 id=\"方法混淆：替换或交换\"><a href=\"#方法混淆：替换或交换\" class=\"headerlink\" title=\"方法混淆：替换或交换\"></a>方法混淆：替换或交换</h3>您可以使用运行时当中最著名的动态特性：方法混淆 (swizzling),即使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。之所以想要混淆，是因为它可以用于日志记录和 Mock 测试。<br>混淆的基本方法如下所示：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        Class <span class=\"keyword\">class</span> = [<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        SEL originalSelector = <span class=\"keyword\">@selector</span>(doSomething);</span><br><span class=\"line\">        SEL swizzledSelector = <span class=\"keyword\">@selector</span>(mo_doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method originalMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">        originalSelector);</span><br><span class=\"line\">        Method swizzledMethod = class_getInstanceMethod(<span class=\"keyword\">class</span>,</span><br><span class=\"line\">        swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> didAddMethod = class_addMethod(<span class=\"keyword\">class</span>, originalSelector,</span><br><span class=\"line\">                                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (didAddMethod) &#123;</span><br><span class=\"line\">            class_replaceMethod(<span class=\"keyword\">class</span>,swizzledSelector,</span><br><span class=\"line\">                                method_getImplementation(originalMethod),</span><br><span class=\"line\">                                method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当类加载之后，会调用一个名为 <code>load</code> 的类函数。由于我们只打算混淆一次，因此我们需要使用 <code>dispatch_once</code>。接着我们便可以得到该方法，然后使用 <code>class_replaceMethod</code> 或者 <code>method_exchangeImplementations</code> 来替换方法。</p>\n<h2 id=\"Foundation\"><a href=\"#Foundation\" class=\"headerlink\" title=\"Foundation\"></a>Foundation</h2><p>Foundation 框架实现了基于运行时一个特性的两个API：</p>\n<ol>\n<li><code>键值编码 (key-value-coding, KVC)</code></li>\n<li><code>键值观察 (key-value observing, KVO)</code><br>KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基础。<h3 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h3>KVC 的工作方式如下所示：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> *number;</span><br><span class=\"line\"></span><br><span class=\"line\">[myClass valueForKey:<span class=\"string\">@\"number\"</span>];</span><br><span class=\"line\">[myClass setValue:@(<span class=\"number\">4</span>) forKey:<span class=\"string\">@\"number\"</span>];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如，假设我们有这个 number 属性，您可以将属性名称作为键，来获取属性值或者设置属性值。这个功能可以用在此前我们所看到的获取变量列表、协议列表，以及危险的混淆功能当中。</p>\n<h3 id=\"KVO\"><a href=\"#KVO\" class=\"headerlink\" title=\"KVO\"></a>KVO</h3><p>通常所说的 Objective-C 「动态性」，往往都是指 KVO。虽然还有其余的函数，但是这些是最常见、最常用的。这也就是人们所说的，Swift 缺失的部分。</p>\n<ol>\n<li>使用KVO对状态的变化进行注册<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[myClass addObserver:<span class=\"keyword\">self</span></span><br><span class=\"line\">forKeyPath:<span class=\"string\">@\"number\"</span></span><br><span class=\"line\">options:<span class=\"built_in\">NSKeyValueObservingOptionInitial</span> | <span class=\"built_in\">NSKeyValueObservingOptionNew</span></span><br><span class=\"line\">context:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath</span><br><span class=\"line\">ofObject:(<span class=\"keyword\">id</span>)object</span><br><span class=\"line\">change:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSKeyValueChangeKey</span>,<span class=\"keyword\">id</span>&gt; *)change</span><br><span class=\"line\">context:(<span class=\"keyword\">void</span> *)context&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Respond to observation.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在观察的值发生变更之后，KVO 会调用此方法立即通知观察者。通过这个方法，我们便可以按需更新 UI。</p>\n<ol>\n<li>弊端：难以调试<br>KVO这些操作都存有隐患。比方说 KVO，特别是当我们对某个不是自己所创建的类进行观察时，往往会发现有出乎意料的变化发生。通常而言，这些问题是非常难以调试的，也很难去理解为什么出错。在实际产品当中，我并不建议使用它们，尽管它们非常好用。但是在实际产品当中，我会很谨慎地去使用这些功能。</li>\n</ol>\n<p>Apple 也是如此认为的，因此它们在视图控制器当中添加了这个私有方法，可以使用 class-dump 来查看。</p>\n<ul>\n<li>(void)                   attentionClassDumpUser:<br>yesItsUsAgain:<br>althoughSwizzlingAndOverridingPrivateMethodsIsFun:<br>itWasntMuchFunWhenYourAppStoppedWorking:<br>pleaseRefrainFromDoingSoInTheFutureOkayThanksBye:</li>\n</ul>\n<p>的确，很让人抓狂。</p>\n<h2 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h2><p>Swift 是一种强类型语言。即默认类型是安全的静态类型。如果需要的话，不安全类型也是存在的，但是 Swift 仍然是尽力推动我们使用安全的静态类型。Swift 中的动态性可以通过 Objective-C 运行时来获得。</p>\n<p>本来这是很好的，但是 Swift 开源并迁移到 Linux 之后，由于 Linux 上的 Swift 并不提供 Objective-C 运行时，事情就大条了。社区的关键点在于，让 Swift 未来能够自己配备动态性，而不是依赖于 Apple。</p>\n<h3 id=\"Swift中的两个动态修饰符\"><a href=\"#Swift中的两个动态修饰符\" class=\"headerlink\" title=\"Swift中的两个动态修饰符\"></a>Swift中的两个动态修饰符</h3><ol>\n<li><code>@objc</code>: 将Swift API 暴露给 Objective-C 运行时，但是它仍然不能保证编译器会尝试对其进行优化。</li>\n<li><code>@dynamic</code>:动态功能修饰符，它隐含添加了 <code>@objc</code>功能。</li>\n</ol>\n<h3 id=\"Swift中运行时方法\"><a href=\"#Swift中运行时方法\" class=\"headerlink\" title=\"Swift中运行时方法\"></a>Swift中运行时方法</h3><p>回到我们的动态特性当中，让我们来看一看 Swift 当中这些动态特性是什么样的。假设我们需要使用内省机制、转发方法、替换和绑定方法。</p>\n<h4 id=\"方法转发-1\"><a href=\"#方法转发-1\" class=\"headerlink\" title=\"方法转发\"></a>方法转发</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">override <span class=\"keyword\">class</span> func resolveInstanceMethod(_ sel: Selector!)</span><br><span class=\"line\">-&gt; Bool &#123;</span><br><span class=\"line\"><span class=\"comment\">// 添加实例方法并返回 true 的一次机会，它随后会再次尝试发送消息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">override func forwardingTarget(<span class=\"keyword\">for</span> aSelector: Selector!) -&gt;</span><br><span class=\"line\">Any? &#123;</span><br><span class=\"line\"><span class=\"comment\">// 返回可以处理 Selector 的对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 - Swift 不支持 NSInvocation</span></span><br></pre></td></tr></table></figure>\n<p>resolveInstanceMethod 同样会被调用，forwardingTarget 看起来似乎更贴近于 Swift 3 风格的 API。但是 NSInvocation 并不能在 Swift 当中使用。我们同样可以实现方法转发，因此看起来也不算太坏。</p>\n<h4 id=\"方法混淆\"><a href=\"#方法混淆\" class=\"headerlink\" title=\"方法混淆\"></a>方法混淆</h4><p><code>load</code> 在 Swift 不再会被调用，因此我们需要在 <code>initialize</code> 中进行混淆。在 Objective-C 当中使用的 <code>dispatch_once</code>，但是在 Swift 3 中被废弃。事情变得略为复杂。虽然对于特定类型的函数而言，我们仍然可以将其定义为动态函数，但是它会消除大部分混淆的功能。</p>\n<h4 id=\"内省机制-1\"><a href=\"#内省机制-1\" class=\"headerlink\" title=\"内省机制\"></a>内省机制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if self is MyClass &#123;</span><br><span class=\"line\">    // YAY</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myString = &quot;myString&quot;;</span><br><span class=\"line\">let mirror = Mirror(reflecting: myString)</span><br><span class=\"line\">print(mirror.subjectType) // “String&quot;</span><br><span class=\"line\">let string = String(reflecting: type(of:</span><br><span class=\"line\">myString)) // Swift.String</span><br><span class=\"line\"></span><br><span class=\"line\">// No native method introspection</span><br></pre></td></tr></table></figure>\n<p><code>is</code> 替代了 <code>isMemberOfClass</code>，它同样也可以对 Swift 值类型:结构体、枚举以及其他 Swift 当中的新类型使用。此外还有一个新的映射 API，它主要针对于管道 (pipe) 和数据。</p>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><p>目前，我们没有原生的办法来实现内省。这也预示着这个功能未来可能会出现，但是目前我们还无法实现。这很令人沮丧，特别是当您想到我们此前所实现的 XCTestCase。如果您打算为 Linux 编写单元测试的时候，就无法自动遍历所有的函数。您必须实现 static var allTests，然后手动列出所有的测试函数。这很糟糕。</p>\n<h4 id=\"KVC-KVO功能的削弱\"><a href=\"#KVC-KVO功能的削弱\" class=\"headerlink\" title=\"KVC/KVO功能的削弱\"></a>KVC/KVO功能的削弱</h4><p>KVO 的魅力在于，您可以在不是自己所创建的类当中使用它，也可以只对您想要监听变化的类使用。KVO 和 KVC 在 Swift 被极大地削弱了。<br>两点要求：</p>\n<ol>\n<li>被观察的对象必须要继承自 NSObject，并且使用一个 Objective-C 类型。</li>\n<li>被观察的变量必须要声明为 @dynamic。您必须要对想要观察的事务了如指掌。<br>问题是 Swift 并没有很好的替代方案。您可以使用 Rx 或者基于协议来观察对象。但是语言自身是没有原生的解决方案的。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，Objective-C 的动态性无疑是非常强大的、极其有用，虽然也存在危险性。Swift 目前没有足够的替代方案来解决这些问题，但是可以预见在不久的将来 Swift 的动态性将会出现，这是值得我们期待的。</p>\n","categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[]}