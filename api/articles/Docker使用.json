{"title":"Docker安装使用","slug":"Docker使用","date":"2016-12-21T21:25:29.000Z","updated":"2017-02-07T13:47:53.000Z","comments":true,"path":"api/articles/Docker使用.json","excerpt":"安装Docker for Mac在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>echo '下载dmg...'<br>curl -o Docker.dmg https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg<br>#安装Docker.dmg<br>MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \\<br>| awk '&#123;$1=$2=\"\"; print $0&#125;'` | xargs -0 echo) \\<br>&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /Applications/ \\<br>&amp;&amp; open /Applications/Docker.app<br>配置 Docker 加速器镜像源右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br>1<br>http://142*****.m.daocloud.io<br>点击 Apply &amp; Restart 按钮使设置生效。安装主机监控程序加速器登录到 DaoCloud 控制台，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。安装DockerToolbox，是一个完整的开发组件，通过安装和配置DaoCloud加速器 v2，提升下载 Docker Hub 镜像的速度。1<br>2<br>3<br>4<br>//下载pkg<br>curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg<br>//安装pkg<br>sudo installer -pkg DockerToolbox.pkg -target /<br>","covers":["http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png","http://p27uwfdhv.bkt.clouddn.com/static/images/daoshell.png?imageMogr2/2/w/800"],"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"安装Docker-for-Mac\"><a href=\"#安装Docker-for-Mac\" class=\"headerlink\" title=\"安装Docker for Mac\"></a>安装<a href=\"https://www.docker.com/products/docker#/mac\" target=\"_blank\" rel=\"noopener\">Docker for Mac</a></h2><p>在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'下载dmg...'</span></span><br><span class=\"line\">curl -o Docker.dmg <span class=\"symbol\">https:</span>/<span class=\"regexp\">/dn-dao-github-mirror.qbox.me/docker</span><span class=\"regexp\">/install/mac</span><span class=\"regexp\">/Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">#安装Docker.dmg</span></span><br><span class=\"line\"><span class=\"regexp\">MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \\</span></span><br><span class=\"line\"><span class=\"regexp\">| awk '&#123;$1=$2=\"\"; print $0&#125;'` | xargs -0 echo) \\</span></span><br><span class=\"line\"><span class=\"regexp\">&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /</span>Applications/ \\</span><br><span class=\"line\">&amp;&amp; open /Applications/Docker.app</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置-Docker-加速器镜像源\"><a href=\"#配置-Docker-加速器镜像源\" class=\"headerlink\" title=\"配置 Docker 加速器镜像源\"></a>配置 Docker 加速器镜像源</h3><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://142*****.m.daocloud.io</span><br></pre></td></tr></table></figure></p>\n<p>点击 Apply &amp; Restart 按钮使设置生效。</p>\n<h3 id=\"安装主机监控程序加速器\"><a href=\"#安装主机监控程序加速器\" class=\"headerlink\" title=\"安装主机监控程序加速器\"></a>安装主机监控程序加速器</h3><hr>\n<ol>\n<li>登录到 <code>DaoCloud 控制台</code>，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。</li>\n<li>安装<a href=\"https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg\" target=\"_blank\" rel=\"noopener\">DockerToolbox</a>，是一个完整的开发组件，通过安装和配置<code>DaoCloud加速器 v2</code>，提升下载 <code>Docker Hub 镜像</code>的速度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载pkg</span><br><span class=\"line\">curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg</span><br><span class=\"line\">//安装pkg</span><br><span class=\"line\">sudo installer -pkg DockerToolbox.pkg -target /</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>安装Toolbox好了，下一步：<br><img src=\"http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png\" alt=\"\"></li>\n<li><code>$ docker-machine start default</code>启动 Docker.<br>当执行后提示：<code>Host does not exist: &quot;default&quot;</code><figure class=\"highlight plain\"><figcaption><span>docker-machine create</span><a href=\"http://stackoverflow.com/a/38602630\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox default</span><br></pre></td></tr></table></figure></li>\n<li><p>在 <code>Docker 主机</code> DaoCloud 加速器的组件包：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL <span class=\"symbol\">https:</span>/<span class=\"regexp\">/get.daocloud.io/daomonit</span><span class=\"regexp\">/install.sh | sh -s d0312f829e9807ee0bf157******</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动组件包,会在「安装主机监控程序」的 DaoCloud 控制台页面下方显示一台已经接入的主机。</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/daoshell.png?imageMogr2/2/w/800\"></li>\n<li>执行<code>Dao Pull</code>命令,高速下载<code>Docker Hub</code>镜像文件<br>这台 Docker 主机已经被接入 DaoCloud 平台，用户可以在 DaoCloud 控制台的「我的集群」页面发现这台主机，可以执行管理和部署应用的操作。</li>\n</ol>\n<h3 id=\"从Docker-Hub-仓库中获取一个镜像\"><a href=\"#从Docker-Hub-仓库中获取一个镜像\" class=\"headerlink\" title=\"从Docker Hub 仓库中获取一个镜像\"></a>从Docker Hub 仓库中获取一个镜像</h3><hr>\n<p>Docker 使用类似 git 的方式管理镜像。通过基本的镜像可以定制创建出来不同种应用的 Docker 镜像。Docker Hub 是 Docker 官方提供的镜像中心。在这里可以很方便地找到各类应用、环境的镜像。由于 Docker 使用联合文件系统，所以镜像就像是夹心饼干一样一层层构成，相同底层的镜像可以共享。所以 Docker 还是相当节约磁盘空间的。要使用一 个镜像，需要先从远程的镜像注册中心拉取，这点非常类似 git。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker-命令创建管理容器\"><a href=\"#Docker-命令创建管理容器\" class=\"headerlink\" title=\"Docker 命令创建管理容器\"></a>Docker 命令创建管理容器</h2><hr>\n<h3 id=\"获取镜像的两种方式\"><a href=\"#获取镜像的两种方式\" class=\"headerlink\" title=\"获取镜像的两种方式\"></a>获取镜像的两种方式</h3><hr>\n<h4 id=\"1-docker-pull命令\"><a href=\"#1-docker-pull命令\" class=\"headerlink\" title=\"1. docker pull命令\"></a>1. <code>docker pull</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search perfectlysoft/ubuntu</span><br><span class=\"line\">docker pull perfectlysoft/ubuntu</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-docker-import命令\"><a href=\"#2-docker-import命令\" class=\"headerlink\" title=\"2. docker import命令\"></a>2. <code>docker import</code>命令</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过镜像创建容器\"><a href=\"#通过镜像创建容器\" class=\"headerlink\" title=\"通过镜像创建容器\"></a>通过镜像创建容器</h3><hr>\n<p>创建一个容器有两种方式：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create 镜像名</span><br><span class=\"line\">docker run   镜像名   /<span class=\"regexp\">/立即启动容器 等价于：create + start 命令组合</span></span><br></pre></td></tr></table></figure></p>\n<p>进入容器终端控制台如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ec72dc76502e:/# ls</span><br><span class=\"line\">app  boot  etc   lib    media  opt   root  sbin  sys  usr</span><br><span class=\"line\">bin  dev   home  lib64  mnt    proc  run   srv   tmp  var</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"docker-run-images命令\"><a href=\"#docker-run-images命令\" class=\"headerlink\" title=\"docker run images命令\"></a><code>docker run images</code>命令</h4><ol>\n<li><p>样例1<br>执行<code>run images</code>，并将 Ubuntu 的 Shell 作为入口，进入Docker容器环境操作</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样例2<br>执行<code>docker start -i 容器</code>命令进入容器环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i 容器ID/容器名</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"从KitematicGUI进入容器环境\"><a href=\"#从KitematicGUI进入容器环境\" class=\"headerlink\" title=\"从KitematicGUI进入容器环境\"></a>从<code>Kitematic</code>GUI进入容器环境</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -c <span class=\"string\">\"clear &amp;&amp; docker exec -it perfectswift sh\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数<br>-i 表示这是一个交互容器，会把当前标准输入重定向到容器的标准输入中，而不是终止程序运行<br>-t 指为这个容器分配一个终端</p>\n</blockquote>\n<p>这时候我们成功创建了一个 Ubuntu 的容器，并将当前终端连接为这个 Ubuntu 的 bash shell。这时候就可以愉快地使用 Ubuntu 的相关命令了。</p>\n<h3 id=\"ps-查看容器状态\"><a href=\"#ps-查看容器状态\" class=\"headerlink\" title=\"ps 查看容器状态\"></a>ps 查看容器状态</h3><hr>\n<p>在容器运行期间，我们可以通过 <code>docker ps</code> 命令看到所有当前正在运行的容器。<br>添加-a参数可以看到所有创建的容器：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"容器ID标识\"><a href=\"#容器ID标识\" class=\"headerlink\" title=\"容器ID标识\"></a>容器ID标识</h3><hr>\n<p>每个容器都有一个唯一的 ID 标识，通过 ID 可以对这个容器进行管理和操作。在创建容器时，我们可以通过 –name 参数指定一个容器名称，如果没有指定系统将会分配一个，就像这里的「trusting_morse」。</p>\n<h3 id=\"启动-退出-移除容器\"><a href=\"#启动-退出-移除容器\" class=\"headerlink\" title=\"启动/退出/移除容器\"></a>启动/退出/移除容器</h3><hr>\n<p>启动：<code>start</code><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i trusting_morse</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：每次执行 docker run 命令都会创建新的容器，建议一次创建后，使用 docker start/stop 来启动和停用容器。</p>\n</blockquote>\n<p>退出：<br>按 <code>Ctrl+D</code> 退出</p>\n<p>移除：<code>rm</code>ID/name<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm [CONTAINER ID/NAMES]</span><br></pre></td></tr></table></figure></p>\n<p>重命名：<code>rename</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rename 容器ID newName</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建管理镜像\"><a href=\"#创建管理镜像\" class=\"headerlink\" title=\"创建管理镜像\"></a>创建管理镜像</h2><hr>\n<p>Docker 强大的威力在于可以把自己开发的应用随同各种依赖环境一起打包、分发、运行。要创建一个新的 Docker 镜像，通常基于一个已有的 Docker 镜像来创建。<br>Docker 提供了两种方式来创建镜像：</p>\n<ol>\n<li>把容器创建为一个新的镜像</li>\n<li>使用 Dockerfile 创建镜像。</li>\n</ol>\n<h3 id=\"将容器创建为镜像\"><a href=\"#将容器创建为镜像\" class=\"headerlink\" title=\"将容器创建为镜像\"></a>将容器创建为镜像</h3><hr>\n<ol>\n<li><p>为了创建一个新的镜像，我们先创建一个新的容器作为基底：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it <span class=\"symbol\">ubuntu:</span>latest sh -c <span class=\"string\">'/bin/bash'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定制这个容器，例如我们可以配置 PHP 环境、将我们的项目代码部署在里面等：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php</span><br><span class=\"line\"><span class=\"comment\"># some other opreations ...</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当执行完操作之后，我们按 Ctrl+D 退出容器.</p>\n<ol>\n<li><p>获取定制后的容器ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">[root@localhost ~]# docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID        IMAGE                        COMMAND                    CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">cb2b06c83a50        ubuntu:latest                &quot;sh -c /bin/bash&quot;          7 minutes ago       Exited (0) 7 seconds ago                       trusting_morse</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>docker commit</code> 把这个容器变为一个镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit cb2b06c83a50 ubuntu:myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这时候 docker 容器会被创建为一个新的 Ubuntu 镜像，版本名称为 myubuntu。以后我们可以随时使用这个镜像来创建容器了，新的容器将自动包含上面对容器的操作。    </p>\n<ol>\n<li><p>打包/发布镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o myubuntu.tar.gz <span class=\"symbol\">ubuntu:</span>myubuntu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入打包镜像</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import myubuntu.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><hr>\n<h4 id=\"通过Dockerfile创建镜像\"><a href=\"#通过Dockerfile创建镜像\" class=\"headerlink\" title=\"通过Dockerfile创建镜像\"></a>通过<code>Dockerfile</code>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build yourDir/Dockerfile</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>确保Dockerfile文件在一个目录中，否则会提示错误</p>\n</blockquote>\n<p>Docker Hub 提供了类似 GitHub 的镜像存管服务。一个镜像发布到 Docker Hub 不仅可以供更多人使用，而且便于镜像的版本管理。在一个企业内部可以通过自建 Docker Registry 的方式来统一管理和发布镜像。将 Docker Registry 集成到版本管理和上线发布的工作流之中，还有许多工作要做，在我整理出最佳实践后会第一时间分享。<br>使用命令行的方式创建 Docker 镜像通常难以自动化操作。在更多的时候，我们使用 Dockerfile 来创建 Docker 镜像。Dockerfile 是一个纯文本文件，它记载了从一个镜像创建另一个新镜像的步骤。撰写好 Dockerfile 文件之后，我们就可以轻而易举的使用 docker build 命令来创建镜像了。<br>Dockerfile 非常简单，仅有以下命令在 Dockerfile 中常被使用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">命令</th>\n<th style=\"text-align:right\">参数</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">#</td>\n<td style=\"text-align:right\">-</td>\n<td style=\"text-align:right\">注释说明</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">FROM</td>\n<td style=\"text-align:right\"><image>[:<tag>]</tag></image></td>\n<td style=\"text-align:right\">从一个已有镜像创建，例如ubuntu:latest</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">MAINTAINER</td>\n<td style=\"text-align:right\">Author <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x73;&#111;&#x6d;&#101;&#45;&#111;&#x6e;&#x65;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;\">&#x73;&#111;&#x6d;&#101;&#45;&#111;&#x6e;&#x65;&#64;&#101;&#120;&#x61;&#109;&#112;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a></td>\n<td style=\"text-align:right\">镜像作者名字，如Max Liu <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#115;&#111;&#x6d;&#x65;&#45;&#x6f;&#x6e;&#101;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;\">&#115;&#111;&#x6d;&#x65;&#45;&#x6f;&#x6e;&#101;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">RUN</td>\n<td style=\"text-align:right\"><cmd>或者[‘cmd1’, ‘cmd2’…]</cmd></td>\n<td style=\"text-align:right\">在镜像创建用的临时容器里执行单行命令</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ADD</td>\n<td style=\"text-align:right\"><src> <dest></dest></src></td>\n<td style=\"text-align:right\">将本地的<src>添加到镜像容器中的<dest>位置</dest></src></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">VOLUME</td>\n<td style=\"text-align:right\"><path></path>或者[‘/var’, ‘home’]</td>\n<td style=\"text-align:right\">将指定的路径挂载为数据卷</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">EXPOSE</td>\n<td style=\"text-align:right\"><port> [<port>…]</port></port></td>\n<td style=\"text-align:right\">将指定的端口暴露给主机</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENV</td>\n<td style=\"text-align:right\"><key> <value> 或者 <key> = <value></value></key></value></key></td>\n<td style=\"text-align:right\">指定环境变量值</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">CMD</td>\n<td style=\"text-align:right\">[“executable”,”param1”,”param2”]</td>\n<td style=\"text-align:right\">容器启动时默认执行的命令。注意一个Dockerfile中只有最后一个CMD生效。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ENTRYPOINT</td>\n<td style=\"text-align:right\">[“executable”, “param1”, “param2”]</td>\n<td style=\"text-align:right\">容器的进入点</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h4><hr>\n<p>下面是一个 Dockerfile 的例子：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a comment</span></span><br><span class=\"line\">FROM <span class=\"symbol\">ubuntu:</span><span class=\"number\">14.04</span></span><br><span class=\"line\">MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</span><br><span class=\"line\">RUN gem install sinatra</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"CMD命令\"><a href=\"#CMD命令\" class=\"headerlink\" title=\"CMD命令\"></a><code>CMD</code>命令</h5><hr>\n<p><code>CMD</code>: 命令可用指定 Docker 容器启动时默认的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it ubuntu:latest sh -c &apos;/bin/bash&apos;</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>sh -c &#39;/bin/bash&#39;</code> 就是手工指定的<code>CMD</code>,否则容器将会使用默认 <code>CMD</code> 指定的命令启动。</p>\n<h5 id=\"ENTRYPOINT命令\"><a href=\"#ENTRYPOINT命令\" class=\"headerlink\" title=\"ENTRYPOINT命令\"></a><code>ENTRYPOINT</code>命令</h5><hr>\n<p>用来指定可执行文件、Shell 脚本，同时会并把启动参数或 CMD 指定的默认值，当作附加参数传递给 执行文件、Shell 脚本。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [<span class=\"string\">'/usr/bin/mysql'</span>]</span><br><span class=\"line\">CMD [<span class=\"string\">'-h 192.168.100.128'</span>, <span class=\"string\">'-p'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>执行mysql启动程序，连接<code>192.168.100.128</code> 主机,也可以通过指定参数，来连接别的主机。</p>\n<p>因此，我们在使用 Dockerfile 创建文件的时候，可以创建一个 entrypoint.sh 脚本，作为系统入口。在这个文件里面，我们可以进行一些基础性的自举操作，比如检查环境变量，根据需要初始化数据库等等。下面两个文件是我在日常工作的项目中添加的 Dockerfile 和 entrypoint.sh，仅供参考：<br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/Dockerfile</a><br><a href=\"https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh</a><br>在准备好 Dockerfile 之后，我们就可以创建镜像了：</p>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t starlight36/simpleoa .</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"docker","path":"api/categories/docker.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"}]}