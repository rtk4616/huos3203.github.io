{"title":"OC与swift相互调用","slug":"swift/OC与swift相互调用","date":"2015-12-01T11:42:18.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/OC与swift相互调用.json","excerpt":null,"covers":null,"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h4 id=\"Swift中使用OC的类声明-–-实现配置-桥接的头文件\"><a href=\"#Swift中使用OC的类声明-–-实现配置-桥接的头文件\" class=\"headerlink\" title=\"Swift中使用OC的类声明  – 实现配置 桥接的头文件\"></a>Swift中使用OC的类声明  – 实现配置 桥接的头文件</h4><h6 id=\"方式一：自动添加桥接头文件\"><a href=\"#方式一：自动添加桥接头文件\" class=\"headerlink\" title=\"方式一：自动添加桥接头文件\"></a>方式一：自动添加桥接头文件</h6><ol>\n<li>在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。</li>\n<li>点确定这后就会生成一个以<producename-bridging-header.h>的头文件。</producename-bridging-header.h></li>\n<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>\n<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Use this file to import your target's public headers that you would like to expose to Swift.  </span></span><br><span class=\"line\"><span class=\"comment\">//MixDemo/MixDemo-Bridging-Header.h    </span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OCChannel.h\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"方式二：手动添加桥接头文件\"><a href=\"#方式二：手动添加桥接头文件\" class=\"headerlink\" title=\"方式二：手动添加桥接头文件\"></a>方式二：手动添加桥接头文件</h6><p>同样的，当你知道这个swift搜索头文件的关系后，就不需要再理会这个-Bridging-Header.h的文件了。<br>完全可以手工建一个并取自己喜欢的名字：</p>\n<ol>\n<li>新建一个头文件，名为:OCContainerHeader.h</li>\n<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>\n<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Use this file to import your target's public headers that you would like to expose to Swift.  \t</span></span><br><span class=\"line\"><span class=\"comment\">//MixDemo/MixDemo-Bridging-Header.h    </span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OCChannel.h\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"OC如何调用Swift写的类-–-为了在-Objective-C-中可用，-Swift-类必须是-Objective-C-类的子类，或者用-Objective-C-标记；\"><a href=\"#OC如何调用Swift写的类-–-为了在-Objective-C-中可用，-Swift-类必须是-Objective-C-类的子类，或者用-Objective-C-标记；\" class=\"headerlink\" title=\"OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；\"></a>OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；</h4><ol>\n<li>选中targets-&gt;build settings -&gt;packing-&gt;Product Module Name 中设置模块名（可以自定义），这个名称很重要 swift 的头文件就是根据这个来命名的，例如：SwiftModule。</li>\n<li>在OC头文件类中，添加import “SwiftModule-swift.h”但你在整个工程中是找不到这个文件的，但可以使用CMD+ 鼠标点击可看这个头文件中的内容。  </li>\n</ol>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>这样，工程中如查Swift要使用OC,则把需要使用的OC类的头文件，全写在MixDemo-Bridging-Header.h里。同样如果OC中所使用的swift类，只需要Clean一把，再编就可以了，但不要忘了导入SwiftModule-swift.h哦（名称自取，但-swift.h是固定的），另外还有一个需要读者注意的。</p>\n<p>注：<br>    凡是用Swift写的类，如果不继成自NSObject或NSObject 的派生类，哪么编译后将不会生成对应的转换类。从而使得OC 中找不到相应的声明。<br>如我的例子中 class Act 这样不会被编译到SwiftModule-swift.h中，但写为 class Act : NSObject，就可以编译出相应的声明。另外可以使用@objc加以声明，但这个还是一样，类最好继承NSObject下来。</p>\n","categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"OC混编","path":"api/categories/OC混编.json"}],"tags":[{"name":"混编","path":"api/tags/混编.json"}]}