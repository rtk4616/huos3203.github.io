{"title":"开发思想模式总结","slug":"架构/开发思想模式总结","date":"2017-05-15T16:14:07.000Z","updated":"2017-08-17T14:54:01.000Z","comments":true,"path":"api/articles/架构/开发思想模式总结.json","excerpt":null,"covers":null,"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>OOP面向对象编程：1. 封装，2，继承，3. 多态<br>五大原则：<br>SRP单一职责原则：一个类的功能要单一，表现突出的VIPER模式<br>OCP开放封闭原则:模块扩展性为开放的，模块更改性则为封闭的。<br>LSP替换原则，<br>DIP依赖原则，<br>ISP接口分离原则：模块间的功能通过抽象接口隔离</p>\n<p>封装：将抽象事物的特征，行为，转化为代码中的类：属性和方法即为封装，体现2.对属性和方法的访问权限的控制 私有，公有不同级别的保护。<br>继承：广义上也是一种对代码的复用。继承有两种方式：实现继承和接口继承。</p>\n<p>多态：一个类实例的同一个方法，在不同情形有不同的表现形式。类似多个构造器和便利构造器，实现的功能都是初始化类实例的作用</p>\n<h2 id=\"子类场景\"><a href=\"#子类场景\" class=\"headerlink\" title=\"子类场景\"></a>子类场景</h2><p>优点：代码封装，重用组件</p>\n<ol>\n<li>自定义系统控件时： 如：对UITableViewCell等视图，自定义布局。</li>\n<li>针对多平台，多版本来编写代码<br>实现：创建一个基类，创建iPhone子类／iPad子类来继承重写特性方法。</li>\n<li>子类化模型对象，继承isEqual:,hash,copyWithZone:和description等方法，参考开源框架<a href=\"http://southpeak.github.io/2015/01/11/sourcecode-mantle/\" target=\"_blank\" rel=\"noopener\">Mantle</a></li>\n</ol>\n<h2 id=\"子类的场景替代方案\"><a href=\"#子类的场景替代方案\" class=\"headerlink\" title=\"子类的场景替代方案\"></a>子类的场景替代方案</h2><p>深层次的集成的替代方案：</p>\n<ol>\n<li>子类使用相同的接口，协议替代，</li>\n<li>当对象正常运行需要大量配置时，使用代理来完成配置 </li>\n<li>对现有的类增加简单功能时，使用类别来扩展</li>\n<li>重写一堆相同方法子类时，使用配置对象代替</li>\n<li>当重用某些功能时，使用组合多个对象来代替，而不是扩展它们</li>\n</ol>\n<h2 id=\"简明架构：VIPER模式：单一职责，\"><a href=\"#简明架构：VIPER模式：单一职责，\" class=\"headerlink\" title=\"简明架构：VIPER模式：单一职责，\"></a>简明架构：VIPER模式：单一职责，</h2><p>将APP逻辑结构划分为不同的责任层：<br>View视图，Interactor交互器，Presenter展示器，Entity实体，Routing路由</p>\n<ol>\n<li>接口隔离原则：隔离依赖项，</li>\n<li>单一职责原则：利于测试各层间边界处的交互。</li>\n<li>轻量化VC，提高可读性，维护性。</li>\n</ol>\n<h2 id=\"基于用例的应用设计-待办事项清单示例\"><a href=\"#基于用例的应用设计-待办事项清单示例\" class=\"headerlink\" title=\"基于用例的应用设计  待办事项清单示例\"></a>基于用例的应用设计  待办事项清单示例</h2><p>用例别称为验收标准，或行为集，它们用来描述应用的用途。独立于用户界面，主要针对在应用程序中的负责业务逻辑层的测试操作。<br>举例：清单可以根据时间，类型以及名字排序，这就是一个用例。<br>特征：足够小，良好的定义。<br>作用：将复杂的应用分解成较小的用例。</p>\n<p>单一职责原则：便于测试<br>测试用例：<br>模拟网络数据-&gt;拦截HTTP请求-&gt;模拟一个响应对象给请求方<br>目的：<br>模拟数据，激活iResearcher </p>\n<ol>\n<li>多线程下载</li>\n<li>VIPER架构</li>\n</ol>\n<p>LLDB命令和断点的合用<br>变量，对象：p ，po，e 表达式，<br>流程控制：thread<br>断点管理：breakpoint<br>LLDB和Python<br>AppleScript</p>\n<p>Instruments<br>自定义工具–DTrace语法 -&gt;自动化脚本<br>终端成员DTrace<br>使用IB工具来编写DTrace脚本，并可以方便的导出DTrace脚本，可用于脚本自动化时收集APP运行状态的数据，<br>探针 （断言，动作，提供者，全部变量 ，begin，end）<br>DTrace脚本是在内核中运行中的，需要IB工具做缓冲区，来封装内核数据达到ib工具识别</p>\n<p>废除功能：<br>run Browser浏览器功能<br>UI automation功能</p>\n<h1 id=\"view属性的自动布局\"><a href=\"#view属性的自动布局\" class=\"headerlink\" title=\"view属性的自动布局\"></a>view属性的自动布局</h1>","categories":[{"name":"架构","path":"api/categories/架构.json"}],"tags":[]}