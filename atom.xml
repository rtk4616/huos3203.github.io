<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2018-08-10T16:40:19.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iCompleteMe支持swift语法提示</title>
    <link href="https://huos3203.github.io/2018/08/11/shell/iCompleteMe%E6%94%AF%E6%8C%81swift%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA/"/>
    <id>https://huos3203.github.io/2018/08/11/shell/iCompleteMe支持swift语法提示/</id>
    <published>2018-08-10T16:40:19.000Z</published>
    <updated>2018-08-10T16:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-iCompleteMe-ad0e1fe" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-iCompleteMe-ad0e1fe", "jerrymarino", "iCompleteMe", "ad0e1fe", false);</script><p>iCompleteMe是基于YouCompleteMe。在花了一年多的时间试图实现对YouCompleteMe的快速支持之后，发现在YCM无法支持swift自动补齐。<br>iCompleteMe实现的行为对于Swift的补齐提示。iCompleteMe的核心子系统只与Swift一起工作。代码基占用的空间要小得多，这使得在CI上更容易安装、更容易理解和更稳定(理论上)。</p><h3 id="在space-vim中添加插件支持"><a href="#在space-vim中添加插件支持" class="headerlink" title="在space-vim中添加插件支持"></a>在space-vim中添加插件支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;jerrymarino/iCompleteMe&apos;</span><br></pre></td></tr></table></figure><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/plugged/iCompleteMe/</span><br><span class="line">brew install cmake</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure></p><p>然后 <code>&lt;Leader&gt; f R</code> 使配置生效，并执行   <code>:PlugInstall</code>进行安装.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftPlayground</title>
    <link href="https://huos3203.github.io/2018/08/10/shell/SwiftPlayground/"/>
    <id>https://huos3203.github.io/2018/08/10/shell/SwiftPlayground/</id>
    <published>2018-08-10T15:50:21.000Z</published>
    <updated>2018-08-10T16:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-jerrymarino-SwiftPlayground.vim-f603700" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-jerrymarino-SwiftPlayground.vim-f603700", "jerrymarino", "SwiftPlayground.vim", "f603700", false);</script><h2 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h2><p>在playgrounds后缀的目录中执行swift文件</p><h2 id="熟悉vim快捷键用法"><a href="#熟悉vim快捷键用法" class="headerlink" title="熟悉vim快捷键用法"></a>熟悉vim快捷键用法</h2><p>空格 + fs 保存文件：此时插件会自动运行playgrounds，显示效果<br>shift + H ：行头<br>shift + L：行尾</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="shell" scheme="https://huos3203.github.io/categories/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>FSCalendar支持自定义的日历开源库</title>
    <link href="https://huos3203.github.io/2018/07/18/%E5%BC%80%E6%BA%90%E5%BA%93/FSCalendar%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%A5%E5%8E%86%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/07/18/开源库/FSCalendar支持自定义的日历开源库/</id>
    <published>2018-07-17T17:59:05.000Z</published>
    <updated>2018-07-17T18:20:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-FSCalendar-1a026a4c" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-FSCalendar-1a026a4c", "huos3203", "FSCalendar", "1a026a4c", false);</script><p><blockquote class="trello-card"><a href="https://trello.com/c/Tq2jnc1E/33-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%8E%86%E6%8E%A7%E4%BB%B6%EF%BC%8C%E6%97%A5%E6%9C%9F%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener">自定义日历控件，日期图标</a></blockquote><script src="https://p.trellocdn.com/embed.min.js"></script></p><p><a href="https://github.com/huos3203/FSCalendar" target="_blank" rel="noopener">FSCalendar</a><br>FSCalendar是一款开源iOS日历控件，支持横向、纵向滑动模式，全屏模式，带有子标题、事件设置等功能。以下是项目截图：<br><img src="https://cloud.githubusercontent.com/assets/5186464/10262249/4fabae40-69f2-11e5-97ab-afbacd0a3da2.jpg" alt=""><br>Use Interface Builder<br>1、 Drag an UIView object to ViewController Scene 2、 Change the Custom Class to FSCalendar<br>3、 Link dataSource and delegate to the ViewController<br>4、 Finally, implement FSCalendarDataSource and FSCalendarDelegate in your ViewController<br><img src="https://cloud.githubusercontent.com/assets/5186464/9488580/a360297e-4c0d-11e5-8548-ee9274e7c4af.jpg" alt=""></p><h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><img src="http://p27uwfdhv.bkt.clouddn.com/static/images/FScalendardemo.gif?imageMogr2/2/w/800">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="开源库" scheme="https://huos3203.github.io/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>高效人士的七个习惯</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E9%AB%98%E6%95%88%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/高效人士的七个习惯/</id>
    <published>2018-07-03T12:30:31.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://book.douban.com/annotation/18551525/" target="_blank" rel="noopener">豆瓣导图</a><br><a href="https://book.douban.com/annotation/39594570/" target="_blank" rel="noopener">豆瓣总结</a></p><h2 id="前言-如何善用本书"><a href="#前言-如何善用本书" class="headerlink" title="前言 如何善用本书"></a>前言 如何善用本书</h2><h2 id="第一部分-重新探索自我"><a href="#第一部分-重新探索自我" class="headerlink" title="第一部分 重新探索自我"></a>第一部分 重新探索自我</h2><h2 id="第一章-由内而外全面造就自己"><a href="#第一章-由内而外全面造就自己" class="headerlink" title="第一章 由内而外全面造就自己"></a>第一章 由内而外全面造就自己</h2><h2 id="第二章-七个习惯——概论"><a href="#第二章-七个习惯——概论" class="headerlink" title="第二章 七个习惯——概论"></a>第二章 七个习惯——概论</h2><h1 id="第二部分-个人的成功：从依赖到独立"><a href="#第二部分-个人的成功：从依赖到独立" class="headerlink" title="第二部分 个人的成功：从依赖到独立"></a>第二部分 个人的成功：从依赖到独立</h1><h2 id="第三章-习惯一：积极主动——个人愿景的原则"><a href="#第三章-习惯一：积极主动——个人愿景的原则" class="headerlink" title="第三章 习惯一：积极主动——个人愿景的原则"></a>第三章 习惯一：积极主动——个人愿景的原则</h2><h2 id="第四章-习惯二：以终为始——自我领导的原则"><a href="#第四章-习惯二：以终为始——自我领导的原则" class="headerlink" title="第四章 习惯二：以终为始——自我领导的原则"></a>第四章 习惯二：以终为始——自我领导的原则</h2><h3 id="个人使命宣言"><a href="#个人使命宣言" class="headerlink" title="个人使命宣言"></a>个人使命宣言</h3><p>以终为始最有效的方法，就是撰写一份个人使命宣言，即人生哲学或基础信念。<br>宣言：主要说明自己想成为怎样的品行的人。成什么样的事业，及为此奠基的价值观和原则。<br>家庭第一<br>借重宗教的力量<br>在诚信问题上决不妥协<br>念及相关的每个人<br>未听取正反双方的意见，不妄下断语<br>征求他人意见<br>维护不在场的人<br>诚恳但立场坚定<br>每年掌握一种新技能<br>今天计划明天的工作<br>利用等待的空闲时间<br>态度积极<br>保持幽默感<br>生活与工作有条不紊<br>别怕犯错，怕的是不能吸取教训<br>协助属下成功<br>多请教别人<br>专注于当前的工作，不为下一次任务或提升操心</p><p>定期储蓄或利用部分收入做投资</p><p>一个人的应变能力取决于他对自己的本性，人生目标以及价值观的不变的信念。<br>只要心中秉持着恒久不变的真理，就能屹立于动荡的环境中。</p><p>标记疗法的基础原理：许多心智或情感疾病，都是由于失落感或空虚感作祟，而标记疗法可以帮助病人找回生命的意义与使命感，以祛除这些感觉。</p><h2 id="第五章-习惯三：要事第一——自我管理的原则"><a href="#第五章-习惯三：要事第一——自我管理的原则" class="headerlink" title="第五章 习惯三：要事第一——自我管理的原则"></a>第五章 习惯三：要事第一——自我管理的原则</h2><p><a href="https://book.douban.com/people/140683087/annotation/1048007/?start=0" target="_blank" rel="noopener">豆瓣笔记</a></p><h1 id="第三部分-公众的成功：从独立到互赖"><a href="#第三部分-公众的成功：从独立到互赖" class="headerlink" title="第三部分 公众的成功：从独立到互赖"></a>第三部分 公众的成功：从独立到互赖</h1><h2 id="第六章-你不是一座孤岛"><a href="#第六章-你不是一座孤岛" class="headerlink" title="第六章 你不是一座孤岛"></a>第六章 你不是一座孤岛</h2><h2 id="第七章-习惯四：双赢思维——人际领导的原则"><a href="#第七章-习惯四：双赢思维——人际领导的原则" class="headerlink" title="第七章 习惯四：双赢思维——人际领导的原则"></a>第七章 习惯四：双赢思维——人际领导的原则</h2><h2 id="第八章-习惯五：知彼知己——同理心交流的原则"><a href="#第八章-习惯五：知彼知己——同理心交流的原则" class="headerlink" title="第八章 习惯五：知彼知己——同理心交流的原则"></a>第八章 习惯五：知彼知己——同理心交流的原则</h2><h2 id="第九章-习惯六：统合综效——创造性合作的原则"><a href="#第九章-习惯六：统合综效——创造性合作的原则" class="headerlink" title="第九章 习惯六：统合综效——创造性合作的原则"></a>第九章 习惯六：统合综效——创造性合作的原则</h2><h1 id="第四部分-全面观照生命"><a href="#第四部分-全面观照生命" class="headerlink" title="第四部分 全面观照生命"></a>第四部分 全面观照生命</h1><h2 id="第十章-习惯七：不断更新——平衡的自我更新的原则"><a href="#第十章-习惯七：不断更新——平衡的自我更新的原则" class="headerlink" title="第十章 习惯七：不断更新——平衡的自我更新的原则"></a>第十章 习惯七：不断更新——平衡的自我更新的原则</h2><h2 id="第十一章-再次由内而外造就自己"><a href="#第十一章-再次由内而外造就自己" class="headerlink" title="第十一章 再次由内而外造就自己"></a>第十一章 再次由内而外造就自己</h2><p>附录<br>一、你是哪种类型的人？——生活重心面面观<br>二、第四代时间管理——高效能人士的一天</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>程序员跳槽全攻略</title>
    <link href="https://huos3203.github.io/2018/07/03/%E9%98%85%E8%AF%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B7%B3%E6%A7%BD%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://huos3203.github.io/2018/07/03/阅读/程序员跳槽全攻略/</id>
    <published>2018-07-02T19:52:08.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>书都不会读还想成功</title>
    <link href="https://huos3203.github.io/2018/07/02/%E9%98%85%E8%AF%BB/%E4%B9%A6%E9%83%BD%E4%B8%8D%E4%BC%9A%E8%AF%BB%E8%BF%98%E6%83%B3%E6%88%90%E5%8A%9F/"/>
    <id>https://huos3203.github.io/2018/07/02/阅读/书都不会读还想成功/</id>
    <published>2018-07-02T13:59:35.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="处境"><a href="#处境" class="headerlink" title="处境"></a>处境</h3><p>人到中年，职场受排挤降级，情场被抛弃不如意，怨天尤人，自怨自艾，却不思进取，死扛着压力勉强养家糊口残喘于世。</p><h3 id="心态转折"><a href="#心态转折" class="headerlink" title="心态转折"></a>心态转折</h3><ol><li>红皇后的故事：寓意为什么在现实生活中不进则退的境地，见贤思齐，善于发现同事优点，定位榜样学习实线。<h3 id="读书习惯"><a href="#读书习惯" class="headerlink" title="读书习惯"></a>读书习惯</h3></li><li>100天33本书: 从量到质达到，培养读书习惯的目的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Framework实现使用swift开发</title>
    <link href="https://huos3203.github.io/2018/06/24/swift/Framework%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2018/06/24/swift/Framework实现使用swift开发/</id>
    <published>2018-06-23T16:41:58.000Z</published>
    <updated>2018-06-25T20:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-JHHomeAPP-813e4b" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-JHHomeAPP-813e4b", "huos3203", "JHHomeAPP", "813e4b", false);</script><h2 id="在静态库组件中使用swift开发"><a href="#在静态库组件中使用swift开发" class="headerlink" title="在静态库组件中使用swift开发"></a>在静态库组件中使用swift开发</h2><p>基于静态库的开发，实现封装静态库/Framework并使用swiftOC混编开发<br><img src="http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_3714.JPG?imageMogr2/2/w/800"></p><h3 id="创建三个角色"><a href="#创建三个角色" class="headerlink" title="创建三个角色"></a>创建三个角色</h3><ol><li>主项目：<code>JHHomeAPP</code></li><li>静态库组件：<code>FirstPlug</code> <ul><li><code>SwiftInStaticLib</code>(包含Swift源码实现的静态库)</li></ul></li><li>动态库<code>secondFramework</code></li></ol><h3 id="静态库：问题1"><a href="#静态库：问题1" class="headerlink" title="静态库：问题1"></a>静态库：问题1</h3><p>当静态库组件中存在swift源码时，依赖该组件的主工程会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ld: warning: Auto-Linking library not found for -lswiftDispatch</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCoreFoundation</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftObjectiveC</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftDarwin</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftFoundation</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCoreGraphics</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftCore</span><br><span class="line">ld: warning: Auto-Linking library not found for -lswiftSwiftOnoneSupport</span><br></pre></td></tr></table></figure></p><ol><li>联想方法：<br>设置 <code>Always Embed Swift Standard Libraries</code>: <code>YES</code><br>结果无效。</li><li>适用的解决方法<br>在主工程中新建一个空的swift源文件，不需要自动新建<code>$(SWIFT_MODULE_NAME)-Swift.h</code>映射文件和<code>JHHomeAPP/JHHomeAPP-Bridging-Header.h</code>头文件。<br><strong>使用方法2，问题1就不存在了，证明了在静态库中可以使用swift源码文件进行开发,同样证明了静态库可以封装包含swift源码的静态库。</strong></li></ol><h3 id="Framework：问题2"><a href="#Framework：问题2" class="headerlink" title="Framework：问题2"></a>Framework：问题2</h3><ol><li>在动态库中objc源码方法可以封装到静态库，并在可执行文件中调用。</li><li>当在Framework中新建swift源文件时，第一次编译运行出现崩溃问题：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dyld: Library not loaded: @rpath/libswiftCoreImage.dylib</span><br><span class="line">Referenced from: .../../Debug-iphonesimulator/SecondFramework.framework/SecondFramework</span><br><span class="line">Reason: image not found</span><br></pre></td></tr></table></figure></li></ol><p>解决办法：需要在<code>ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES</code>设置为<code>YES</code>.再次编译出现问题3。</p><h3 id="Framework-问题3"><a href="#Framework-问题3" class="headerlink" title="Framework: 问题3"></a>Framework: 问题3</h3><p>当在oc源码文件中用引用<code>-Swift.h</code>头文件时，出现一下问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;SecondFramework-Swift.h&apos; file not found</span><br><span class="line">#import &quot;SecondFramework-Swift.h&quot;</span><br><span class="line">^~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p><p>结果将：<code>Install Objective-C Compatibility Header</code> : <code>NO</code>可以正常调用swift方法了。</p><blockquote><p>验证：framework可以封装到静态库中，当有swift源码实现时需要设置ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=YES</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Product Module Name: 该项默认为项目名或自定义的名称</li><li>Defines Module: 设置为YES （framework默认为YES，静态库默认为NO）</li><li>Embedded Content Contains Swift: 设置为YES</li><li>Install Objective-C Compatibility Header：设置为YES （如上题说：在framework中设置为NO，才能正常运行，在静态库中似乎不影响）</li><li>Objective-C Bridging Header: 自定义需要桥接到Swift中的OC头文件（EX：$(SRCROOT)/Swift-Bridging-Header.h）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>使用CocoaPods开发静态库</title>
    <link href="https://huos3203.github.io/2018/06/22/%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8CocoaPods%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/06/22/工具/使用CocoaPods开发静态库/</id>
    <published>2018-06-21T21:37:16.000Z</published>
    <updated>2018-06-22T20:27:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Cocoapods作为OS X和iOS开发平台的类库管理工具，已经非常完善和强大。通常我们用pod来管理第三方开源类库，但我们也极有可能会开发一个用pod管理依赖关系的静态类库给其他人使用，而又不愿意公开源代码，比如一些SDK，那么就需要打包成.a文件。本文将以一个依赖于ASIHTTPRequest的静态类库，来演示如何创建使用了CocoaPods的静态类库以及打包的过程。</p><h2 id="开发静态库（Static-Library）"><a href="#开发静态库（Static-Library）" class="headerlink" title="开发静态库（Static Library）"></a>开发静态库（Static Library）</h2><h3 id="搭建pod静态库项目"><a href="#搭建pod静态库项目" class="headerlink" title="搭建pod静态库项目"></a>搭建pod静态库项目</h3><h4 id="不基于pod手动创建-deprecated"><a href="#不基于pod手动创建-deprecated" class="headerlink" title="不基于pod手动创建(deprecated)"></a>不基于pod手动创建(deprecated)</h4><ol><li>在Xcode中创建一个Cocoa Touch Static Library；</li><li>创建Podfile文件；</li><li>执行pod install完成整个项目的搭建；</li><li>如果需要demo，手动创建示例程序，使用pod添加对私有静态库的依赖，重复执行pod install完成示例项目的搭建。</li></ol><h4 id="基于pod自动创建"><a href="#基于pod自动创建" class="headerlink" title="基于pod自动创建"></a>基于pod自动创建</h4><p>只需要输入<code>pod lib</code>命令即可完成初始项目的搭建，下面详细说明具体步骤，以<code>JHLib</code>作为项目名演示。<br>1.执行命令<code>pod lib create JHLib</code>。在此期间需要确认下面4个问题。</p><h2 id="打包类库"><a href="#打包类库" class="headerlink" title="打包类库"></a>打包类库</h2><p>需要使用一个cocoapods的插件<code>cocoapods-packager</code>来完成类库的打包。当然也可以手动编译打包，但是过程会相当繁琐。</p><ol><li><p>安装打包插件<br>终端执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods-packager</span><br></pre></td></tr></table></figure></li><li><p>打包<br>命令很简单，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod package BZLib.podspec --library --force</span><br></pre></td></tr></table></figure></li></ol><p>其中<code>--library</code>指定打包成.a文件，如果不带上将会打包成.framework文件。<code>--force</code>是指强制覆盖。最终的目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|____BZLib.podspec</span><br><span class="line">|____ios</span><br><span class="line">| |____libBZLib.a</span><br></pre></td></tr></table></figure></p><p>需要特别强调的是，该插件通过对引用的三方库进行重命名很好的解决了类库命名冲突的问题。<br>比如你的类库使用了ASI，然后打包成静态库.a文件。外部调用的项目也使用了ASI，那么不会造成冲突。因为在打包的时候，你的类库里的ASI被重命名为项目+ASI的前缀。</p><p><a href="https://onevcat.com/2016/01/create-framework/" target="_blank" rel="noopener">如何打造一个让人愉快的框架</a><br><a href="http://www.cnblogs.com/brycezhang/p/4117180.html" target="_blank" rel="noopener">使用CocoaPods开发并打包静态库</a><br><a href="https://www.jianshu.com/p/2ea267bf0363" target="_blank" rel="noopener">iOS动态库,静态库以及framework</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="工具" scheme="https://huos3203.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>使用tag管理多个相关组件的版本发布</title>
    <link href="https://huos3203.github.io/2018/06/21/git/%E4%BD%BF%E7%94%A8tag%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/"/>
    <id>https://huos3203.github.io/2018/06/21/git/使用tag管理多个相关组件的版本发布/</id>
    <published>2018-06-20T17:22:37.000Z</published>
    <updated>2018-06-21T21:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="tag标签自增新建脚本"><a href="#tag标签自增新建脚本" class="headerlink" title="tag标签自增新建脚本"></a>tag标签自增新建脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">tag=$(git describe --tags `git rev-list --tags --max-count=1`)</span><br><span class="line">version=<span class="variable">$&#123;tag##*.&#125;</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">"version+=1"</span></span><br><span class="line">newTag=<span class="variable">$&#123;tag%.*&#125;</span>.<span class="variable">$&#123;version&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Create New Tag '</span><span class="variable">$newTag</span></span><br></pre></td></tr></table></figure><h2 id="修改tag版本号的方法"><a href="#修改tag版本号的方法" class="headerlink" title="修改tag版本号的方法"></a>修改tag版本号的方法</h2><h3 id="方法一：覆盖"><a href="#方法一：覆盖" class="headerlink" title="方法一：覆盖"></a>方法一：覆盖</h3><ol><li><p>已有v1.0.2.8要覆盖该版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -f v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>服务器已有v1.0.2.8，强制推到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin -f v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>同步服务器：获取服务器刚刚的v1.0.2.8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -–tag</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法：删除分支"><a href="#方法：删除分支" class="headerlink" title="方法：删除分支"></a>方法：删除分支</h3><ol><li><p>删除本地版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0.2.8</span><br></pre></td></tr></table></figure></li><li><p>删除服务器上的分支(用空版本覆盖)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="symbol">:v1</span>.<span class="number">0</span>.<span class="number">2.8</span></span><br></pre></td></tr></table></figure></li><li><p>服务器获取刚刚的v1.0.2.8</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch –-tag</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>弧形表盘进度仪表</title>
    <link href="https://huos3203.github.io/2018/06/20/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%BC%A7%E5%BD%A2%E8%A1%A8%E7%9B%98%E8%BF%9B%E5%BA%A6%E4%BB%AA%E8%A1%A8/"/>
    <id>https://huos3203.github.io/2018/06/20/个人项目/弧形表盘进度仪表/</id>
    <published>2018-06-20T15:31:52.000Z</published>
    <updated>2018-06-25T20:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!--github库卡片--><div id="badge-container-huos3203-ArcProgressUI-4b9bc85" class="hexo-github" style="width: ="></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-huos3203-ArcProgressUI-4b9bc85", "huos3203", "ArcProgressUI", "4b9bc85", false);</script><h1 id="ArcProgressUI"><a href="#ArcProgressUI" class="headerlink" title="ArcProgressUI"></a>ArcProgressUI</h1><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>To run the example project, clone the repo, and run <code>pod install</code> from the Example directory first.</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>ArcProgressUI is available through <a href="https://cocoapods.org" target="_blank" rel="noopener">CocoaPods</a>. To install<br>it, simply add the following line to your Podfile:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'ArcProgressUI'</span></span><br></pre></td></tr></table></figure><h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><h3 id="独立进度表盘加载"><a href="#独立进度表盘加载" class="headerlink" title="独立进度表盘加载"></a>独立进度表盘加载</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ArcProgressView.h"</span></span></span><br><span class="line"><span class="built_in">NSArray</span> *viewArr = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"ArcProgressView"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">UIView</span> *arcView = viewArr.lastObject;</span><br><span class="line">arcView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:arcView];</span><br></pre></td></tr></table></figure><h3 id="完整控制器页面"><a href="#完整控制器页面" class="headerlink" title="完整控制器页面"></a>完整控制器页面</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"PatrolScoreViewController.h"</span></span></span><br><span class="line">+(PatrolScoreViewController *)withStoryboard:(PatrolScoreStyle)style&#123;</span><br><span class="line"><span class="built_in">NSBundle</span> *podbundle = [<span class="built_in">NSBundle</span> bundleForClass:[PatrolScoreViewController <span class="keyword">class</span>]];</span><br><span class="line"><span class="built_in">NSURL</span> *bundleURL = [podbundle URLForResource:<span class="string">@"ArcProgressUI"</span> withExtension:<span class="string">@"bundle"</span>];</span><br><span class="line"><span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithURL:bundleURL];</span><br><span class="line"><span class="built_in">UIStoryboard</span> *story = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"PatrolScore"</span> bundle:bundle];</span><br><span class="line">PatrolScoreViewController *VC = [story instantiateViewControllerWithIdentifier:<span class="string">@"PatrolScoreViewController"</span>];</span><br><span class="line">VC.scoreViewStyle = style;</span><br><span class="line"><span class="keyword">return</span> VC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态库开发："><a href="#静态库开发：" class="headerlink" title="静态库开发："></a>静态库开发：</h2><p>设想：通过cocoapod管理静态库的依赖关系。在项目调用静态库</p><ol><li>主工程：prj</li><li>一级静态库: first.a ：组件</li><li><p>二级静态库：组件依赖的静态库</p><p> sec.a    : 二级静态库.a<br> pod.a  ：包含二级静态库的集合</p></li></ol><p>其他经验：通过pod来开发一级静态库即组件。会生成组件的工作空间：<code>workspace</code> 将<code>prj主工程</code>拖入工作空间，来协作开发。</p><blockquote><p>坑：当再次切换prj主工程,关联.a组件依赖时，例如：libJHPatrol.a的other linker tag 路径一定要更新。</p></blockquote><p>结果：</p><ol><li>手动配置一级静态库组件，依赖的二级静态库可用<br>资源bundle文件直接添加到主工程资源拷贝列表中，在代码中会正常映射出IBoutlet相应的UI实例。参见 上述使用说明</li><li><code>-ObjC</code>设置<br>在主工程build setting 配置的<code>Other linker</code> ：<code>-ObjC</code>：表示尽可能的加载所有依赖静态库中的objc源码资源。<br>解决的问题：可以解决通过资源（xib/storyboard）初始化实例式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this class is not key value coding-compliant for the key ibReviewLabel</span><br></pre></td></tr></table></figure></li></ol><p>解决在storyboard中使用源码自定义UI控件时，无效果的问题。</p><ol><li><p>在封装静态库中，storyboard/xib中的控件不要设置model属性。</p></li><li><p>使用pod来一级静态库组件，管理依赖的二级静态库libpod.a无效</p></li></ol><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p>huo3203@hotmail.com, 724987481</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>ArcProgressUI is available under the MIT license. See the LICENSE file for more info.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>storyboard的几种方式</title>
    <link href="https://huos3203.github.io/2018/06/20/iOS/UI/storyboard%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://huos3203.github.io/2018/06/20/iOS/UI/storyboard的几种方式/</id>
    <published>2018-06-20T14:49:37.000Z</published>
    <updated>2018-07-03T12:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="通过IB（xib-storyboard）创建View的周期方法"><a href="#通过IB（xib-storyboard）创建View的周期方法" class="headerlink" title="通过IB（xib/storyboard）创建View的周期方法"></a>通过IB（xib/storyboard）创建View的周期方法</h2><ol><li><code>loadView</code>：加载View方法，UI是通过代码绘制时，初始化控制器的视图时，会调用该方法。优先级高于IB视图，当重载时，会直接覆盖IB中的视图,因为无论nib也好，xib也好，最终在执行UIViewController生命周期函数<code>loadView</code>之前，都会转化成可执行的nib文件。</li><li><code>initWithNibName</code>：是类的构造器方法，通过IB创建的类：简称<code>IB类</code>，<code>IB类</code>需要通过这个构造器来实例化对象。</li><li><code>initWithCoder</code>：当<code>IB类</code>实例化时会调用该方法，即通过<code>initWithNibName</code>构造器实例化对象时，会调用该方法来分配<code>IB对象</code>的内存空间。</li><li><code>awakeFromNib</code>：当实例化<code>IB视图类</code>时执行，即当IB文件被加载的时候，会发送一个<code>awakeFromNib</code>的消息到IB文件中的每个的对象，每个对象都可以定义自己的awakeFromNib函数来响应这个消息，执行一些必要的操作。<blockquote><p>帮助记忆：一开始经过<code>initWithCoder</code>创建出来的控件是死的，然后通过<code>awakeFromNib</code>来唤醒，所以这会有一个先后的调用顺序</p></blockquote></li><li><code>viewDidLoad</code>：当view对象被加载到内存后就会执行viewDidLoad，所以不管通过nib文件还是代码的方式创建对象都会执行viewDidLoad 。</li></ol><h2 id="加载xib方法"><a href="#加载xib方法" class="headerlink" title="加载xib方法"></a>加载xib方法</h2><h3 id="加载视图"><a href="#加载视图" class="headerlink" title="加载视图"></a>加载视图</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">NSArray</span>* nibView =  [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"xibfileName"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line"> <span class="built_in">UIView</span> *xibView = nibView.lastObject;</span><br><span class="line"><span class="comment">//=======</span></span><br><span class="line"> <span class="comment">// 这里的bundle参数是nil,(这里nil默认就是mianBundle)</span></span><br><span class="line"> <span class="built_in">UINib</span> *nib = [<span class="built_in">UINib</span> nibWithNibName:<span class="string">@"xib文件名"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line"> <span class="built_in">NSArray</span> *views = [nib instantiateWithOwner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><code>owner</code>:xib中的fileObject参数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载所有xib文件</span></span><br><span class="line"><span class="built_in">NSArray</span>* objects = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:nibName owner:<span class="keyword">self</span> options:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载指定xib文件</span></span><br><span class="line">ContactsTableViewCell  *cell = [[[<span class="built_in">NSBundle</span> mainBundle]loadNibNamed:<span class="string">@"ContactsTableViewCell"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>] objectAtIndex:<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><h3 id="加载控制器对象"><a href="#加载控制器对象" class="headerlink" title="加载控制器对象"></a>加载控制器对象</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:<span class="string">@"xibName"</span> bundle:nibBundleOrNil];</span><br></pre></td></tr></table></figure><h2 id="加载storyboard"><a href="#加载storyboard" class="headerlink" title="加载storyboard"></a>加载storyboard</h2><h3 id="加载控制器对象-1"><a href="#加载控制器对象-1" class="headerlink" title="加载控制器对象"></a>加载控制器对象</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载storyboard</span></span><br><span class="line"><span class="built_in">UIStoryboard</span> *storyboard = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Two"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建storyboard里面灰色的控制器</span></span><br><span class="line">　　　<span class="comment">//找到shtoryboard里面设置的初始控制器</span></span><br><span class="line">　　　<span class="comment">//    UIViewController *vc = [storyboard instantiateInitialViewController];</span></span><br><span class="line">　　　　　　　　</span><br><span class="line">　　　　　　　<span class="comment">// 从storyboard里面找出绑定标识的控制器</span></span><br><span class="line">　　　　　　　MJTwoViewController *vc = [storyboard instantiateViewControllerWithIdentifier:<span class="string">@"pink"</span>];</span><br><span class="line">　　　　　　　<span class="keyword">self</span>.window.rootViewController = vc;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>使用local命令行新建remote库</title>
    <link href="https://huos3203.github.io/2018/06/20/git/%E4%BD%BF%E7%94%A8local%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B0%E5%BB%BAremote%E5%BA%93/"/>
    <id>https://huos3203.github.io/2018/06/20/git/使用local命令行新建remote库/</id>
    <published>2018-06-20T11:14:00.000Z</published>
    <updated>2018-06-20T14:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用命令行直接生成github中的项目</p><h2 id="新建远程仓库"><a href="#新建远程仓库" class="headerlink" title="新建远程仓库"></a>新建远程仓库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u username <span class="symbol">https:</span>/<span class="regexp">/api.github.com/user</span><span class="regexp">/repos -d '&#123; "name": "repo-name" &#125;'</span></span><br></pre></td></tr></table></figure><p>执行打印结果，是json格式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"ArcProgressUI"</span>,</span><br><span class="line"><span class="attr">"full_name"</span>: <span class="string">"huos3203/ArcProgressUI"</span>,</span><br><span class="line"><span class="attr">"owner"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://api.github.com/users/huos3203"</span>,</span><br><span class="line">    <span class="attr">"repos_url"</span>: <span class="string">"https://api.github.com/users/huos3203/repos"</span>,</span><br><span class="line">    ---</span><br><span class="line">&#125;,</span><br><span class="line">"git_url": "git://github.com/huos3203/ArcProgressUI.git",</span><br><span class="line">"ssh_url": "git@github.com:huos3203/ArcProgressUI.git",</span><br><span class="line">"clone_url": "https://github.com/huos3203/ArcProgressUI.git",</span><br><span class="line">"svn_url": "https://github.com/huos3203/ArcProgressUI",</span><br><span class="line">"default_branch": "master",</span><br><span class="line">"permissions": &#123;</span><br><span class="line">    "admin": true,</span><br><span class="line">    "push": true,</span><br><span class="line">    "pull": true</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="初始化远程仓库"><a href="#初始化远程仓库" class="headerlink" title="初始化远程仓库"></a>初始化远程仓库</h2><p>找到仓库路径的字段<code>clone_url</code>或者``<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin clone_url</span><br><span class="line">//或者使用ssh,避免输入密码</span><br><span class="line">//git remote add origin ssh_url</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">githubDelRepo()&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ $# != <span class="number">2</span> ]] ; <span class="keyword">then</span></span><br><span class="line">        echo <span class="string">"Needs username and repo-name as args 1 and 2 respectively."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        curl -X DELETE -u <span class="string">"$&#123;1&#125;"</span> <span class="symbol">https:</span>/<span class="regexp">/api.github.com/repos</span><span class="regexp">/"$&#123;1&#125;"/</span><span class="string">"$&#123;2&#125;"</span></span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>MacOS系统下运行exe小程序</title>
    <link href="https://huos3203.github.io/2018/06/20/macOS/MacOS%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BF%90%E8%A1%8Cexe%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://huos3203.github.io/2018/06/20/macOS/MacOS系统下运行exe小程序/</id>
    <published>2018-06-19T18:09:18.000Z</published>
    <updated>2018-06-19T19:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>例如，当急需在Mac系统上，安装abletonLive，涉及到破解机exe小程序，使用文中提到的两种方法，就解了燃眉之急。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><a href="http://xiazai.crossoverchina.com/trial/Mac/crossover_mac_17.5.5.zip" target="_blank" rel="noopener">crossover</a></p><h3 id="Wrappe-k-小应用"><a href="#Wrappe-k-小应用" class="headerlink" title="Wrappe[k]小应用"></a>Wrappe[k]小应用</h3><p>这款软件适用于一些小型exe程序，其他，推荐方法一<br><a href="https://pan.baidu.com/s/1ujHKuXNr8G6m8PTPMO9ajQ" target="_blank" rel="noopener">下载</a> 密码: khqa<br><a href="http://www.sdifen.com/mac-exe.html" target="_blank" rel="noopener">参看</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
  </entry>
  
  <entry>
    <title>能否在GarageBand中使用LaunchPad?</title>
    <link href="https://huos3203.github.io/2018/06/19/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/%E5%9C%A8GarageBand%E4%B8%AD%E4%BD%BF%E7%94%A8LaunchPad/"/>
    <id>https://huos3203.github.io/2018/06/19/作文作曲/在GarageBand中使用LaunchPad/</id>
    <published>2018-06-19T15:39:56.000Z</published>
    <updated>2018-06-19T19:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Garageband不支持控件表面，因此无法使用Launchpad/LaunchKey的全部功能。</p><p>在Garageband中，仅可以使用Launchpad来演奏虚拟乐器。<br>原因：<code>Faders</code>和<code>Knobs</code>将为输出MIDI CC消息(<a href="http://global.novationmusic.com/answerbase/what-midi-cc-messages-do-the-controls-on-the-launchkey-send" target="_blank" rel="noopener">详细介绍</a>)到支持手动操作的MIDI设备的插件。此外，打击垫还将发送固定的Note数据。<br>然而，Garageband本身没有传输、卷或Pan控件，不支持Launchpad的Volume or Pan Control。因此，只能在支持<code>HUI Protocol</code>的<a href="http://us.novationmusic.com/sites/default/files/novation/downloads/10606/launchkey-mk2-daw-setup-guide.pdf" target="_blank" rel="noopener">DAW</a>的DAW，或者选择<code>Ableton Live</code>，Launchpad才能发挥最大的作用。<br><a href="https://support.novationmusic.com/hc/en-gb/articles/207556325-Can-I-use-my-Launchkey-in-Garageband-" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="作文作曲" scheme="https://huos3203.github.io/categories/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>LaunchPadMini说明书</title>
    <link href="https://huos3203.github.io/2018/06/19/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/LaunchPadMini%E8%AF%B4%E6%98%8E%E4%B9%A6/"/>
    <id>https://huos3203.github.io/2018/06/19/作文作曲/LaunchPadMini说明书/</id>
    <published>2018-06-19T14:23:13.000Z</published>
    <updated>2018-06-19T19:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/9678/launchpad-demo-project-2014.zip" target="_blank" rel="noopener">工程demo</a><br><a href="https://global.novationmusic.com/launch/launchpad-mini/support-downloads" target="_blank" rel="noopener">官方资源</a></p><p>##<br><a href="https://global.novationmusic.com/answerbase/category/launchpad-video-tutorial" target="_blank" rel="noopener">Launchpad几种模式视频教程</a></p><h3 id="硬件设置"><a href="#硬件设置" class="headerlink" title="硬件设置"></a>硬件设置</h3><ol><li>贴纸：确保标签与相应的按钮对齐。</li><li>使用USB连接线将你的Launchpad Mini连接到你的Mac或PC上的USB端口。Ableton Live支持最多6台同时连接的设备。</li><li>配置设备在Ableton Live中的配置</li></ol><ul><li>打开Live偏好设置,选中<code>MIDI/Sync</code>选项卡，在<code>Input</code>中选择Launchpad Mini所连接的端口<br>以及窗口顶部的<code>Output</code>选择器</li><li>在<code>Control Surface</code>控制面板中选择自己的设备。</li><li>在<code>MIDI Ports</code>下，开启 <code>Track</code>和<code>Remote</code>选项.<h2 id="PRODUCT-OVERVIEW-ABLETON-LIVE"><a href="#PRODUCT-OVERVIEW-ABLETON-LIVE" class="headerlink" title="PRODUCT OVERVIEW: ABLETON LIVE"></a>PRODUCT OVERVIEW: ABLETON LIVE</h2><h3 id="Session-模式"><a href="#Session-模式" class="headerlink" title="Session 模式"></a>Session 模式</h3>当选择Launchpad作为活动控制面时，会话视图上会出现一个圆环，用于指示当前由pad矩阵控制的哪个部分。按下一个剪辑启动板，就会在相应的剪辑插槽中触发该剪辑。在没有武装的轨道上点击一个空的剪辑槽将停止在这个轨道上播放的剪辑。如果跟踪是武装到记录，按下按钮记录一个新的剪辑。<br>方向箭头和会话按钮通过在场景和跟踪中导航会话视图，增加了8×8网格的范围。你也可以使用Launchpad Mini的右手边的按钮来触发水平的剪辑(场景)。<h3 id="Session概述"><a href="#Session概述" class="headerlink" title="Session概述"></a>Session概述</h3>黄色:表示当前选定的剪辑块，它将被软件中的戒指所包围。<br>绿色:在那块剪辑中有一些剪辑在播放(虽然那可能不是被选中的剪辑块)。<br>红色:在这个范围内没有剪辑。<br>未激活色:在这个范围内没有音轨或场景。<h3 id="USER-模式"><a href="#USER-模式" class="headerlink" title="USER 模式"></a>USER 模式</h3>User1模式:说明在Lives中的MIDI音轨中可以使用<code>drum racks</code>鼓架(如果没有分配的话)<br>制造)，或在lives的MIDI可分配参数中自由分配Launchpad Mini的按钮。<br>User2模式:说明可以作为一个方便的地方来访问<code>Max for Live</code>预设配置(如果没有学习任务的话)，或者自由地分配给Live中的任何参数。<h2 id="Mixer混合器模式"><a href="#Mixer混合器模式" class="headerlink" title="Mixer混合器模式"></a>Mixer混合器模式</h2>底部的四行垫子提供了对每个轨道的直接访问控制，包括:停止、跟踪激活器、solo和跟踪臂。右下角的四个按钮为每个轨道提供额外的控制:<br>•<code>stop</code>：停止按钮，将停止当前播放的所有剪辑(可通过重新分配功能来避免)<br>•<code>trk on</code>：音轨激活器按钮，将打开所有轨道(非静音)<br>•<code>solo</code>：“独奏”按钮，将不再独奏所有曲目。<br>•<code>arm</code>: “音轨操作臂”按钮,will un-arm all armed tracks<h3 id="THE-VOLUME-PAN-SNDA-SNDB-PAGES"><a href="#THE-VOLUME-PAN-SNDA-SNDB-PAGES" class="headerlink" title="THE VOLUME / PAN / SNDA / SNDB PAGES"></a>THE VOLUME / PAN / SNDA / SNDB PAGES</h3>当Mixer模式激活时，按VOL/PAN/SNDA或SNDB按钮输入卷、PAN或发送页面，其中列的所有八个焊盘变成各自控制的连续轨迹“FADDER”。<br>VOLUME:音量<br>pan:<br>sndA:<br>sndB:<div class="row">    <embed src="https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/7376/launchpadminiabletonguide_0.pdf" width="100%" height="550" type="application/pdf"></div></li></ul><h3 id="launchPad-APP-for-iOS键盘功能映射"><a href="#launchPad-APP-for-iOS键盘功能映射" class="headerlink" title="launchPad APP for iOS键盘功能映射"></a>launchPad APP for iOS键盘功能映射</h3><h4 id="iPad兼容（Low-Power）vs全功率模式"><a href="#iPad兼容（Low-Power）vs全功率模式" class="headerlink" title="iPad兼容（Low Power）vs全功率模式"></a>iPad兼容（Low Power）vs全功率模式</h4><p>手机端节能模式设置</p><ol><li>在连接USB过程中，同时按住按钮<code>5</code>, <code>6</code>, <code>7</code>和<code>8</code>,开启设置节能</li><li>选择一种电源模式（左为高，右为低），参考pdf图文</li><li>完成设置后，按下绿色按钮退出<blockquote><p>在全功率模式下，Launchpad mini需要使用单独供电的USB集线器与iPad链接，否则无法正常工作。</p><h4 id="键位功能说明"><a href="#键位功能说明" class="headerlink" title="键位功能说明"></a>键位功能说明</h4></blockquote></li><li>F键位：Filters过滤器，8个垫子的每一列都变成一个滤光片:向上移动以除去低音，向下移动以除去高音。按<code>D</code>或<code>E</code>行的垫子重置Filter过滤器。</li><li>G键位：Volume音量，8个垫子的每一层都变成了一个音量调节器。按下<code>B</code>行垫子重置音量。</li><li>H键位：Trigger Sounds &amp; FX<div class="row">    <embed src="https://d2xhy469pqj8rc.cloudfront.net/sites/default/files/novation/downloads/6959/launchpad-mini-gsg-en_0.pdf" width="100%" height="550" type="application/pdf"></div></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="作文作曲" scheme="https://huos3203.github.io/categories/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>AbletonLive10安装使用</title>
    <link href="https://huos3203.github.io/2018/06/19/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/AbletonLive10%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2018/06/19/作文作曲/AbletonLive10安装使用/</id>
    <published>2018-06-19T14:23:13.000Z</published>
    <updated>2018-06-25T20:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="launchPad"><a href="#launchPad" class="headerlink" title="launchPad"></a>launchPad</h2><p><a href="https://global.novationmusic.com" target="_blank" rel="noopener">设备官网</a></p><p><a href="https://global.novationmusic.com/launch/launchpad-mini/support-downloads" target="_blank" rel="noopener">官方教程资源</a><br><a href="https://intro.novationmusic.com/join-the-dub-side" target="_blank" rel="noopener">官方工程试听资源支持下载</a></p><h2 id="ableton-live-软件"><a href="#ableton-live-软件" class="headerlink" title="ableton live 软件"></a>ableton live 软件</h2><p><a href="https://www.ableton.com/en/trial/" target="_blank" rel="noopener">官网下载</a><br><a href="http://abletive.com" target="_blank" rel="noopener">中国社区</a><br><a href="https://launchpadxm.com/class/ableton-live-10-0-1-suite-破解版下载.html" target="_blank" rel="noopener">ABLETON LIVE 10.0.1 SUITE 破解版下载 WINDOWS &amp; MAC</a><br><a href="http://p27uwfdhv.bkt.clouddn.com/static/soft/Ableton%2010%20KeyGen%20v1.3.0.zip" target="_blank" rel="noopener">ABLETON LIVE10.0.1破解机下载</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h2><h3 id="第二期：Chain的选择与设置-页数的映射"><a href="#第二期：Chain的选择与设置-页数的映射" class="headerlink" title="第二期：Chain的选择与设置/页数的映射"></a><a href="http://www.bilibili.com/video/av12189950" target="_blank" rel="noopener">第二期：Chain的选择与设置/页数的映射</a></h3><ol><li><p>音频轨道<br>拖拽音频文件或视频文件到<code>Simple</code>采样轨道中，视频格式会生成<code>asd</code>格式的新文件文件，加载到轨道中。</p></li><li><p>MIDI轨道可以为<code>Lights</code><br>1.1 灯光轨道<br>1.2 鼓点设置</p><h4 id="鼓点音色映射设置，来输出不同的音乐片段"><a href="#鼓点音色映射设置，来输出不同的音乐片段" class="headerlink" title="鼓点音色映射设置，来输出不同的音乐片段"></a>鼓点音色映射设置，来输出不同的音乐片段</h4></li><li>拖动IB控件到MIDI模块</li></ol><h4 id="鼓点灯光映射设置"><a href="#鼓点灯光映射设置" class="headerlink" title="鼓点灯光映射设置"></a>鼓点灯光映射设置</h4><ol><li>拖进MIDI Effects rack控件<br>1.1 点击黄色选项：展开Key:vel:chain:Hide页面<br>1.2 右击蓝色条，选择map selecter<br>1.3 选中右上角的<code>MIDI</code>切换到设置MIDI映射键模式。<br>1.4 选中第一个表盘，选中LauchPad上的 A—B，来映射页数的设置<br>1.5 新建八个chain，错位蓝色条，完成页数映射的设置<br>1.6 逐个选中不同的chain，在每一个chain中嵌套MIDI Effect Rock控件</li></ol><h3 id="第三期：关于分轨和音频采样"><a href="#第三期：关于分轨和音频采样" class="headerlink" title="第三期：关于分轨和音频采样"></a><a href="http://www.bilibili.com/video/av12319673" target="_blank" rel="noopener">第三期：关于分轨和音频采样</a></h3><p><a href="https://www.reddit.com/r/SongStems/" target="_blank" rel="noopener">reddit.com</a><br><a href="https://www.beatport.com/stems" target="_blank" rel="noopener">beatport.com</a><br><a href="https://splice.com/explore/contests" target="_blank" rel="noopener">splice.com</a><br>选中页数1的chain ，展开drum rack模块，点击launchpad上键盘，会高亮显示映射的鼓点位置，这时将采样的音色拖拽到改鼓点位置，再次点击launchpad键垫就可以播放音色片段。</p><h3 id="第四期：基础灯光效果制作"><a href="#第四期：基础灯光效果制作" class="headerlink" title="第四期：基础灯光效果制作"></a><a href="http://www.bilibili.com/video/av12431271" target="_blank" rel="noopener">第四期：基础灯光效果制作</a></h3><h4 id="Arpeggiator-（A效果器）"><a href="#Arpeggiator-（A效果器）" class="headerlink" title="Arpeggiator （A效果器）"></a>Arpeggiator （A效果器）</h4><p>设置纵横方向的属性变化<br>效果：垫子灯光会从左到右，从下向上的走马灯式的移动。通过arpeggiator设置移动速度，范围</p><ol><li>rate速度：1/1一拍移动一下最慢，1/128最快。</li><li>Gate范围：1—200：依据灯光速率的亮度百分率率来看，1%:亮度不高，200%：可以在一个键上激活两个相邻的灯光</li><li>style：纵向变化的方向：up/down/upDown/DownUp…</li><li>Hold激活不用长按，即可厂量</li><li><p>repeats：设置走马灯的循环次数</p></li><li><p>A效果器在灯光效果包中，放置的位置不同起到不同效果，例如一个灯光效果在A效果器之后，则会将A效果器的属性应用到后续其他的灯光效果上。</p></li></ol><h4 id="Chord-（和弦）"><a href="#Chord-（和弦）" class="headerlink" title="Chord （和弦）"></a>Chord （和弦）</h4><ol><li>拖拽到Key列表中的一个垫子的灯光效果包上。</li><li>chord提供六个属性shift1，shift2….shift6，来设置和弦灯光错位，融合等效果<br>第一个旋钮设置1 ：说明灯光向右边移动一个单位。即当点击当前垫子时，右边相邻的垫子的灯光也会一起亮<br>第二个按钮shift2设置+2：灯光向右联动两个单位，右边相邻的两个垫子的灯光都点亮。<br>以此类推<br>一个key上可以添加多个chord：根据偏移量来激活周边的垫子灯光。+4亮起四分之一，+16：亮起半屏，-16：四分之三亮起 -32：整个lPD全亮</li></ol><h4 id="MIDI-Effect-Rack"><a href="#MIDI-Effect-Rack" class="headerlink" title="MIDI Effect Rack"></a>MIDI Effect Rack</h4><p>在主MIDI effect Rack中的chain中映射出的页数中，再嵌套子MIDI effect Rack这样每一页都可以设置自己的灯光效果。<br>设置灯光效果包</p><ol><li>选中嵌套的子MIDIeffect rack，展开chain模块 ，右击新建一个chain，即代表着一个灯光效果</li><li>选中key，点击lauchpad垫子，在钢琴键位为标红显示，即可定位将要设置灯光效果的键。即：绿色区域定位点击的键垫位置</li><li>新建Velocity（力度感应）</li><li>新建chord（和弦）</li><li>新建Arpeggiator（A效果器）</li></ol><h4 id="Note-Length"><a href="#Note-Length" class="headerlink" title="Note Length"></a>Note Length</h4><p>延迟灯光时间<br>Pitch<br>Random<br>Scale</p><h4 id="Velocity：力度感应"><a href="#Velocity：力度感应" class="headerlink" title="Velocity：力度感应"></a>Velocity：力度感应</h4><ol><li>拖到刚才的chain上，即在该键上添加力度感应属性设置。</li><li>设置灯光颜色：<code>Out Hi</code>的表盘参数，参考MIni支持的灯光色值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="作文作曲" scheme="https://huos3203.github.io/categories/%E4%BD%9C%E6%96%87%E4%BD%9C%E6%9B%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Git如何永久删除文件(包括历史记录)</title>
    <link href="https://huos3203.github.io/2018/06/12/git/Git%E5%A6%82%E4%BD%95%E6%B0%B8%E4%B9%85%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6(%E5%8C%85%E6%8B%AC%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95)/"/>
    <id>https://huos3203.github.io/2018/06/12/git/Git如何永久删除文件(包括历史记录)/</id>
    <published>2018-06-11T20:32:02.000Z</published>
    <updated>2018-06-11T20:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>有些时候不小心上传了一些敏感文件(例如密码), 或者不想上传的文件(没及时或忘了加到.gitignore里的),</p><p>而且上传的文件又特别大的时候, 这将导致别人clone你的代码或下载zip包的时候也必须更新或下载这些无用的文件,</p><p>因此, 我们需要一个方法, 永久的删除这些文件(包括该文件的历史记录).</p><p>首先, 可以参考 <a href="https://help.github.com/articles/remove-sensitive-data" target="_blank" rel="noopener">github帮助</a></p><h2 id="步骤一-从资料库中清除文件"><a href="#步骤一-从资料库中清除文件" class="headerlink" title="步骤一: 从资料库中清除文件"></a>步骤一: 从资料库中清除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached --ignore-unmatch path-to-your-remove-file'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>其中, <code>path-to-your-remove-file</code> 是要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可.</p><blockquote><p>这里的文件或文件夹，都不能以 ‘/‘ 开头，否则文件或文件夹会被认为是从 git 的安装目录开始。</p><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><p>在 <code>git rm --cached</code> 命令后面添加 <code>-r</code> 命令，表示递归的删除（子）文件夹和文件夹下的文件，类似于 <code>rm -rf</code> 命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached -r --ignore-unmatch path-to-your-remove-folder'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="支持通配符"><a href="#支持通配符" class="headerlink" title="支持通配符"></a>支持通配符</h3><p>如果当要删除的文件很多, 文件或路径里有中文, 由于MinGW或CygWin对中文路径设置比较麻烦, 你可以使用通配符<em>号, 例如: `sound/music_</em>.mp3<code>, 这样就把</code>sound<code>目录下以</code>music_<code>开头的mp3文件都删除了.使用通配符</code>*`删除目录下的所有文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --force --index-filter <span class="string">'git rm --cached -r --ignore-unmatch path-to-your-remove-folder/*'</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure></p><p>成功的日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ref <span class="string">'refs/heads/master'</span> was rewritten</span><br><span class="line">Ref <span class="string">'refs/remotes/origin/master'</span> was rewritten</span><br><span class="line">WARNING: Ref <span class="string">'refs/remotes/origin/master'</span> is unchanged</span><br><span class="line">WARNING: Ref <span class="string">'refs/tags/v0.9.0'</span> is unchanged</span><br><span class="line">v0.9.0 -&gt; v0.9.0 (2694a7834dada67cf8768ef27e2d7c3d777f5472 -&gt; 2694a7834dada67cf8768ef27e2d7c3d777f5472)</span><br></pre></td></tr></table></figure></p><p><code>Ref &#39;refs/heads/master&#39; was rewritten</code>:表示成功；<br><code>xxxxx unchanged</code>: 说明在当前分支里没有找到该文件.</p><h2 id="步骤二-推送我们修改后的repo"><a href="#步骤二-推送我们修改后的repo" class="headerlink" title="步骤二: 推送我们修改后的repo"></a>步骤二: 推送我们修改后的repo</h2><h3 id="分支同步"><a href="#分支同步" class="headerlink" title="分支同步"></a>分支同步</h3><p>通过步骤一，需要以强制覆盖的方式推送你的repo, 命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --force origin master</span><br></pre></td></tr></table></figure></p><p>这个过程其实是重新上传我们的repo, 比较耗时, 虽然跟删掉重新建一个repo有些类似, 但是好处是保留了原有的更新记录, 所以还是有些不同的. 如果你实在不在意这些更新记录, 也可以删掉重建, 两者也差不太多, 也许后者还更直观些.</p><h3 id="tag同步"><a href="#tag同步" class="headerlink" title="tag同步"></a>tag同步</h3><p>为了能从打了 tag 的版本中也删除你所指定的文件或文件夹，您可以使用这样的命令来强制推送您的 Git tags：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master --force --tags</span><br></pre></td></tr></table></figure></p><h2 id="步骤三-清理和回收空间"><a href="#步骤三-清理和回收空间" class="headerlink" title="步骤三: 清理和回收空间"></a>步骤三: 清理和回收空间</h2><p>虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间.</p><p>执行命令，再查看<code>.git</code>目录空间会明显变小:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf .git/refs/original/</span><br><span class="line"></span><br><span class="line">$ git reflog expire --expire=now --all</span><br><span class="line"></span><br><span class="line">$ git gc --prune=now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Counting objects: 2437, <span class="keyword">done</span>.</span><br><span class="line"><span class="comment"># Delta compression using up to 4 threads.</span></span><br><span class="line"><span class="comment"># Compressing objects: 100% (1378/1378), done.</span></span><br><span class="line"><span class="comment"># Writing objects: 100% (2437/2437), done.</span></span><br><span class="line"><span class="comment"># Total 2437 (delta 1461), reused 1802 (delta 1048)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git gc --aggressive --prune=now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Counting objects: 2437, <span class="keyword">done</span>.</span><br><span class="line"><span class="comment"># Delta compression using up to 4 threads.</span></span><br><span class="line"><span class="comment"># Compressing objects: 100% (2426/2426), done.</span></span><br><span class="line"><span class="comment"># Writing objects: 100% (2437/2437), done.</span></span><br><span class="line"><span class="comment"># Total 2437 (delta 1483), reused 0 (delta 0)</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>5个图表解决工作中的12大难题</title>
    <link href="https://huos3203.github.io/2018/06/12/%E9%98%85%E8%AF%BB/5%E4%B8%AA%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%8412%E5%A4%A7%E9%9A%BE%E9%A2%98/"/>
    <id>https://huos3203.github.io/2018/06/12/阅读/5个图表解决工作中的12大难题/</id>
    <published>2018-06-11T19:43:53.000Z</published>
    <updated>2018-06-11T19:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="http://www.plantuml.com/plantuml/svg/TP7VIW915CRlvoa6OkaYs253h3M291zasnrtb_OVEjQjHKYabK4M5LIRb7jZ4MLWPhrCisDlqOmJsOLU37pd-yxvSGv37E9YI2y_Xb6SlFJPIPmqpsdd7hYuGA2DTHCNmTVWamTfrZvWJtrwLMCNkt82pAimEQmdHn7RVwNLhd3RhUIv2L8yQ5M63p5zxB7EwJXOc381vwOC93V7T73BQyJVzzqxzz0mgjEzCw7OJaz4INURnJMk0FRDtwqriJ2tii0F28RY8303_t1SIw3K4YcrX8hc_rWeCA0KkWu1siGRiZA5kgKxFk-PT4zsX9AKqLv5nx89c5rsF4kp2GarXC9KfhnLCErDTNs3g8ORb4tJLut0GoMY4yT0ZgTRk8JIIZwZh6QKnJKbdrQMSaekhuQ-jJBU5XZO9xW82m6l-4Vs6gnHfTTlBAg89cd_0000"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="阅读" scheme="https://huos3203.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>执法巡查开发状态总结</title>
    <link href="https://huos3203.github.io/2018/06/05/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E6%89%A7%E6%B3%95%E5%B7%A1%E6%9F%A5%E5%BC%80%E5%8F%91%E7%8A%B6%E6%80%81%E6%80%BB%E7%BB%93/"/>
    <id>https://huos3203.github.io/2018/06/05/个人项目/执法巡查开发状态总结/</id>
    <published>2018-06-05T10:18:33.000Z</published>
    <updated>2018-06-08T12:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="UML状态图"><a href="#UML状态图" class="headerlink" title="UML状态图"></a>UML状态图</h2><p>使用状态图，查漏补觉，梳理相关业务流程。<br>建议：优化流程，使用流程图（活动图）/时序图来完善流程<br><img src="http://www.plantuml.com/plantuml/svg/TLFBRjfG4DtVh_2wKcZwI1UMsdqMMLLTLLsWs56GeX21fQf2GI02CU5XIaj9moEuWO1QrL25Gi4yViPpVRtY5thjwo13WhsmP-RCwyoC592EH0w6BMDQ9PeASj6AwMJssRmOu5WSAZE4ZiG3YJiK_O8OGizyN3IAqx-meXZZZA4FuA9ZVjMXUMOMKj4eUkwZiLHytO9f2PAjnIIBqsryLyArXFMzOFtCacwSp2j4TVNeXOypVrUiM1fAAUFV5UabIBVqRXUzN0OQzM5y2tAPg1squ-EiPCwSQZ2w0wLdwcUq12GU2svvuNq_xURLzZRtCI18X-ZzamzRMs-y5Q6mv9T4pbjL17a1IxofVy7rAXyGDfZ_w53Fy2oGsSvHsQgae20l9hBqwKHylREOfD4fycQYpapaGUaQUilbmCLGAwttlkPI2hG1pKEwFv1Nu9d02C6b7ivfD2F8AKlzQsTSmPBvETQRkAPIcYZAEhUvUsgg6cXN3y1MkGFZijkTCtuQSWL2w-BsWe9un1kJXXKhXgLWIDmLN4uVzO-uHiSjWfYt2oNTMvn8hkgOkwEwDtWZCiCfVT6ZwMpcsC8uUhi1ngUBhlRibVOApapOFcTDlMysucXDtjJr6epdw76GzWsk5vOwEqKjHl93KBvjTACtGxIvLTPmlWNA3KDxIsHJtlEVlBL3C0eUHA67H8TgJ7FCa_xOP-9Sfp7AG25lt-Bbp6oElUH3CGlDDZJxLb76ZI5C5BJ6dxkLzDaNZoKnn1q4W_I3xFEeNTktnnJ_0G00"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="个人项目" scheme="https://huos3203.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>uml活动图常用语法</title>
    <link href="https://huos3203.github.io/2018/06/05/hexo/uml%E6%B4%BB%E5%8A%A8%E5%9B%BE%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://huos3203.github.io/2018/06/05/hexo/uml活动图常用语法/</id>
    <published>2018-06-04T21:27:15.000Z</published>
    <updated>2018-06-04T21:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/owl.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">:ClickServlet.handleRequest();</span><br><span class="line">:new page;</span><br><span class="line">if (Page.onSecurityCheck) then (true)</span><br><span class="line">:Page.onInit();</span><br><span class="line">if (isForward?) then (no)</span><br><span class="line">:Process controls;</span><br><span class="line">if (continue processing?) then (no)</span><br><span class="line">stop</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if (isPost?) then (yes)</span><br><span class="line">:Page.onPost();</span><br><span class="line">else (no)</span><br><span class="line">:Page.onGet();</span><br><span class="line">endif</span><br><span class="line">:Page.onRender();</span><br><span class="line">endif</span><br><span class="line">else (false)</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if (do redirect?) then (yes)</span><br><span class="line">:redirect process;</span><br><span class="line">else</span><br><span class="line">if (do forward?) then (yes)</span><br><span class="line">:Forward request;</span><br><span class="line">else (no)</span><br><span class="line">:Render page template;</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line">stop</span><br></pre></td></tr></table></figure><p><img src="http://www.plantuml.com/plantuml/svg/NL6xZiCW4Epv2agxoGSunHMHShekIhu0mJX6uS2tkqwKlpzZJ5uDiBipEwE1nP2eRXUylPn0rm3P32QwW2F-9h0qxLPr4JSzcZEsolUwESolJOeds8cyt7S3xANLCY3gHcX2gxeLyXFziY2pFEyJtGovhugDAICfMJ1hcw9G2bp0kV9nWXxBsCVp6uqbZGhH-Lwjom-9vG6vWvycyYIRG61KqJBvHXaiUshpE9UWPx_GUZDVxQkaIvhWFC5-wjPsDL-aAwd_IA5mrcpcbKlgRswBe-K3jE1t34RmSBUSEOv_"></p><p>title <code>uml模型图题目支持MD</code><br>center header<br><code>在此处添加标头</code><br>endheader<br>start ‘开始’<br>‘&gt;&gt;&gt;&gt;&gt; 活动关系模块 支持嵌套，条件/循环/并行&gt;&gt;&gt;&gt;&gt;&gt;’<br>if(<code>环境条件</code>) then (<code>分流线名</code>)<br>:<code>分支1活动</code>;<br>-[<code>颜色</code>]-&gt; <code>线备注</code>;<br>note left<br><code>活动备注</code><br>end note<br>elseif(<code>分流线名</code>)<br>:<code>分支2活动</code>;<br>else (<code>分流线名</code>)<br>:<code>分支3活动</code>;<br>endif</p><p>repeat<br>:<code>循环活动</code>;<br>repeat while (<code>环境条件</code>)</p><p>while (<code>环境条件</code>)<br>:<code>循环活动</code>;<br>endwhile</p><p>fork<br>:<code>并行活动</code>;<br>fork again<br>:<code>并行活动</code>;<br>end fork</p><p>‘&amp;&amp;&amp;&amp;&amp; 活动图组合模块 &amp;&amp;&amp;&amp;&amp;&amp;’<br>partition <code>活动组名</code>{<br>:<code>单元活动名称</code>;<br>}</p><p>|<code>#颜色</code> | <code>泳道名称</code>|<br>:<code>当前泳道活动</code>;</p><p>stop ‘结束／end关键字’<br>center footer<br><code>在此处添加脚注</code><br>endfooter</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/owl.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;scr
      
    
    </summary>
    
      <category term="uml" scheme="https://huos3203.github.io/categories/uml/"/>
    
    
  </entry>
  
</feed>
