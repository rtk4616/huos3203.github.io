{"total":157,"pageSize":10,"pageCount":16,"data":[{"title":"Fabric对macOS系统的支持","slug":"macOS/Fabric对macOS系统的支持调研","date":"2017-02-14T11:14:35.000Z","updated":"2017-02-14T14:33:17.000Z","comments":true,"path":"api/articles/macOS/Fabric对macOS系统的支持调研.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Fabric\"><a href=\"#Fabric\" class=\"headerlink\" title=\"Fabric\"></a>Fabric</h2><p><code>Fabric</code> 是Twitter的移动应用开发平台，一个模块化、跨平台的移动开发套件，该博文主要研究<code>crashlytics</code>在app中的运用。<br><a href=\"https://try.crashlytics.com/\" target=\"_blank\" rel=\"noopener\">注册新的账户</a>登录，审核通过时间为几个小时或者1到2天不等。然后注册时候输入的邮箱就会收到如下的邀请涵<br><a href=\"https://docs.fabric.io/apple/crashlytics/os-x.html#macos-support\" target=\"_blank\" rel=\"noopener\">浏览官方文档</a></p>\n<h3 id=\"crashlytics支持macOS\"><a href=\"#crashlytics支持macOS\" class=\"headerlink\" title=\"crashlytics支持macOS\"></a>crashlytics支持macOS</h3><p>对<code>macOS</code>的支持中出现的问题<br>问题：<code>NSApplicationCrashOnExceptions</code> is not set. This will result in poor <code>top-level</code> uncaught exception reporting<br>官方解释：<br><blockquote><p>Uncaught Exceptions<br>Intercepting and reporting uncaught exceptions on macOS is more complex than it is on iOS. On macOS, AppKit will catch exceptions thrown on the main thread, preventing the application from crashing, but also preventing Crashlytics from reporting them. To make matters worse, Apple’s frameworks are not exception safe. This means that while AppKit will prevent your app from crashing, it will also likely corrupt your process’s state, often including AppKit itself. Typically, once an exception involving UI interaction is thrown, it will prevent your app from working correctly from that moment on.<br>Thankfully, AppKit has a little-known feature you can turn on to make the behavior much more predictable. We strongly recommend that you do the following in your application, right before you initialize Crashlytics.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] registerDefaults:@&#123; <span class=\"string\">@”NSApplicationCrashOnExceptions”</span>: @YES &#125;];</span><br></pre></td></tr></table></figure>\n\n<p>This will make your application’s behavior much closer to iOS. It will mean that your app will crash on uncaught exceptions, and will also allow Crashlytics to report them with useful stack traces. It will also give you the ability to override this behavior with the user defaults system, even on per-user basis.<br>Of course, this is all optional. Crashlytics will warn about NSApplicationCrashOnExceptions not being set, but will otherwise preserve normal AppKit behavior by default.</p>\n<footer><strong>官方文档</strong><cite><a href=\"https://docs.fabric.io/apple/crashlytics/os-x.html#macos-support\" target=\"_blank\" rel=\"noopener\">macOS Support</a></cite></footer></blockquote><br>拦截和报告未捕获的异常在MacOS比iOS更复杂。在MacOS，AppKit会抓住扔在主线程异常，防止应用程序崩溃，也防止crashlytics报告他们。更糟糕的是，Apple’s frameworks也不例外。这意味着AppKit可以防止你的应用程序崩溃，也可能破坏你的进程的状态，包括AppKit本身。通常情况下，一旦涉及到用户界面交互的异常被抛出，它将阻止您的应用程序从正确的工作从那一刻起。<br>以上情况，可以通过设置：<code>NSApplicationCrashOnExceptions</code> 改变系统默认的值，达到像iOS端一样抓去异常。如果没有设置会提示：NSApplicationCrashOnExceptions not set</p>\n<h3 id=\"Cause-a-Test-Crash教程\"><a href=\"#Cause-a-Test-Crash教程\" class=\"headerlink\" title=\"Cause a Test Crash教程\"></a><a href=\"https://docs.fabric.io/apple/crashlytics/test-crash.html\" target=\"_blank\" rel=\"noopener\">Cause a Test Crash教程</a></h3><p>崩溃日志是在重启APP程序的同时进行的，要确保程序在前台全屏显示。<br>Xcode调试器会阻止我们捕捉崩溃报告，所以在抓取崩溃报告时，要保证在非调试状态下进行。如果你的移动设备连接到Mac机上，Xcode仍然可以进入调试状态。</p>\n<ol>\n<li><code>run</code>在模拟器上安装运行APP</li>\n<li>点击<code>Stop</code>断开Xcode和模拟器，确保在非调试状态</li>\n<li>在模拟器上启动APP，并执行崩溃操作</li>\n<li>在Xcode上点击<code>run</code><br>在Xcode的控制台console中输出显示奔溃报告，以及上传日志的相关提示。<br>macOS系统中的日志目录：<br>运行日志目录：/private/var/log/system.log<br>奔溃日志目录：/Users/pyc/Library/Logs/DiagnosticReports/APPNAME_2016-11-10-165115.crash</li>\n</ol>\n<blockquote><p>It’s possible, but rare, that we are missing a dSYM to symbolicate any crash reports. There will be an alert on your dashboard if this is the case. Click through to upload the missing dSYM. Keep in mind that exceptions are not guaranteed to crash. The full code path, including code in system libraries, matters here. If you aren’t seeing the dSYM alert, you can go to your app’s settings page, and append “/mappings” to the URL to reach it, e.g. <a href=\"https://fabric.io/settings/apps/some_app_id/mappings\" target=\"_blank\" rel=\"noopener\">https://fabric.io/settings/apps/some_app_id/mappings</a></p>\n<footer><strong>官方文档</strong><cite><a href=\"https://docs.fabric.io/apple/crashlytics/test-crash.html\" target=\"_blank\" rel=\"noopener\">Cause a Test Crash教程</a></cite></footer></blockquote>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"调试","path":"api/categories/调试.json"}],"tags":[{"name":"搭建","path":"api/tags/搭建.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"SDK","path":"api/tags/SDK.json"},{"name":"测试","path":"api/tags/测试.json"},{"name":"发布","path":"api/tags/发布.json"},{"name":"macOS","path":"api/tags/macOS.json"}]},{"title":"思维导图之开发实践篇","slug":"导图/思维导图之开发实践篇","date":"2017-02-13T17:11:26.000Z","updated":"2017-06-24T15:32:42.000Z","comments":true,"path":"api/articles/导图/思维导图之开发实践篇.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/需求速记.jpg?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"阅读书籍\"><a href=\"#阅读书籍\" class=\"headerlink\" title=\"阅读书籍\"></a>阅读书籍</h2><ul>\n<li>5种图表解决工作中的12大难题</li>\n<li>你的第一本思维导图操作书</li>\n<li>5分钟手绘彩色圆珠笔涂鸦集</li>\n<li>如果阅读一本书</li>\n</ul>\n<p>使用思维导图的场景无处不在，无论是做产品还是做设计，我们都需要清晰的思路，明确自己需要做些什么，最后需要达到什么效果，这时候，如果有一张清晰的思维导图，就能很快的理清自己的思路。作为互联网公司自称是产品型设计师（也就是既需要帮助老板整理需求梳理产品，也要设计漂亮的界面）的我更是如此。 </p>\n<p>目的：通过学习在该文章中讲到的开发设计案例，站在项目开发角度，了解从速记到思维导图再到实际开发的过程。<br>从产品、设计等方面谈谈我是如何运用思维导图的。</p>\n<h2 id=\"需求分析——完善最初的想法\"><a href=\"#需求分析——完善最初的想法\" class=\"headerlink\" title=\"需求分析——完善最初的想法\"></a>需求分析——完善最初的想法</h2><p>一般老板只会告诉我们大概需要一个什么东西，具体的细节还需要我们去整理。这时候，我会把大概涉及到的基本点写在纸上，想到一条写一条，特别是一些需要注意的地方。</p>\n<h3 id=\"需求速记法\"><a href=\"#需求速记法\" class=\"headerlink\" title=\"需求速记法\"></a>需求速记法</h3><p>先用纸笔速记的方式，把临时能想到的点记录下来<br><img title=\"需求速记\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/需求速记.jpg?imageMogr2/2/w/800\"><br>在纸上列得差不多了，再新建一个 <code>XMind</code> 文档，把之前列的一些点一一转到电脑上，然后整理分类。</p>\n<h3 id=\"功能结构图案例\"><a href=\"#功能结构图案例\" class=\"headerlink\" title=\"功能结构图案例\"></a>功能结构图案例</h3><ol>\n<li>码市逻辑图<br>通过思维导图能够一目了然的看到码市的功能<img src=\"https://dn-coding-net-production-pp.qbox.me/fa34c949-b36d-4c86-a1be-a6f6c5459f3e.png\"></li>\n<li>网站功能逻辑图<br>通过功能主干图直观显示了一个网站或者 APP 整体大功能组成部分，一般在写产品需求文档时需要的功能逻辑图。<img src=\"https://dn-coding-net-production-pp.qbox.me/535567ad-e51f-43b9-aa66-8b98fc719dc6.png\">\n<h2 id=\"产品设计——通过画原型来完善功能结构\"><a href=\"#产品设计——通过画原型来完善功能结构\" class=\"headerlink\" title=\"产品设计——通过画原型来完善功能结构\"></a>产品设计——通过画原型来完善功能结构</h2><code>梳理功能结构和画原型是产品设计中相互迭代的过程</code>，在画原型时会具体到每个元素的交互过程，一旦发现功能结构导图的不合理，就要及时调整思路，做到一边画原型一边更新功能结构。<h3 id=\"悬赏功能结构图\"><a href=\"#悬赏功能结构图\" class=\"headerlink\" title=\"悬赏功能结构图\"></a>悬赏功能结构图</h3>为产品原型图考虑，在梳理整理产品功能结构图时，尽可能包括页面上所有需要展示的内容以及基本的交互流程等。<br>下面这个图是码市功能结构中的发布悬赏功能部分：<img src=\"https://dn-coding-net-production-pp.qbox.me/4b1d61b9-c558-4afc-9aed-54dd47b440be.png\" class=\"码市悬赏功能结构\" title=\"悬赏功能结构\">\n有了功能结构图，就可以一一对照来做原型了。<h3 id=\"原型图\"><a href=\"#原型图\" class=\"headerlink\" title=\"原型图\"></a>原型图</h3>正如前面所说：<code>梳理功能结构和画原型是产品设计中相互迭代的过程</code>，在画原型时会具体到每个元素的交互过程，一旦发现功能导图的不合理，就要及时调整思路，做到一边画原型一边更新功能结构。<br>然后得到下面的原型：<img src=\"https://dn-coding-net-production-pp.qbox.me/eb4feccf-3514-41ac-b4de-222db74ef1d9.png\">\n</li>\n</ol>\n<h2 id=\"写文章时用到的思维导图\"><a href=\"#写文章时用到的思维导图\" class=\"headerlink\" title=\"写文章时用到的思维导图\"></a>写文章时用到的思维导图</h2><p><a href=\"https://blog.coding.net/blog/coding-mindmap\" target=\"_blank\" rel=\"noopener\">原文</a><br>把想到的先列出来，慢慢整理调整，梳理出写作思路。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/QbMJNrM.png!web.png?imageMogr2/2/w/800\"><br>演变过程：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/vIfAjiY.png!web.png?imageMogr2/2/w/800\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"微信推出应用号的处境：\"><a href=\"#微信推出应用号的处境：\" class=\"headerlink\" title=\"微信推出应用号的处境：\"></a>微信推出应用号的处境：</h3><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/QQ20160114-1.png?imageMogr2/2/w/800\">\n","raw":null,"categories":[{"name":"导图","path":"api/categories/导图.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"思维导图","path":"api/tags/思维导图.json"}]},{"title":"使用JavaScript把JSON数据转为对象","slug":"swift/使用JavaScript把JSON数据定义对象","date":"2017-02-12T14:41:35.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/使用JavaScript把JSON数据定义对象.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"将JSON数据序列化为代码实例\"><a href=\"#将JSON数据序列化为代码实例\" class=\"headerlink\" title=\"将JSON数据序列化为代码实例\"></a>将JSON数据序列化为代码实例</h2><ol>\n<li>定义一个继承自 <code>JSExport</code> 子协议 <code>PersonJSExports</code></li>\n<li>定义一个遵守<code>PersonJSExports</code>协议的<code>Person</code>数据模</li>\n<li>使用 <code>JavaScript</code> 把<code>JSON</code>转为<code>类</code>并实例化<code>对象</code><br>都有一个完整的 <code>JVM</code> 在那儿了，谁还需要 <code>NSJSONSerialization</code>？</li>\n</ol>\n<h2 id=\"JSExport语言互通协议\"><a href=\"#JSExport语言互通协议\" class=\"headerlink\" title=\"JSExport语言互通协议\"></a>JSExport语言互通协议</h2><p><code>JavaScript</code>可以脱离<code>prototype继承</code>完全用<code>JSON</code>来定义对象，但是<code>Objective-C</code>编程不能脱离<code>类</code>和<code>继承</code>。所以<code>JavaScriptCore</code>就提供了<code>JSExport</code>作为两种语言的互通协议。<br><code>JSExport</code>中没有预定义任何方法，但是所有继承<code>JSExport</code>的协议中定义的方法即协议方法，都可以在<code>JSContext</code>中被调用。</p>\n<h2 id=\"JSExportAs-宏-指定方法在JS中调用的名称\"><a href=\"#JSExportAs-宏-指定方法在JS中调用的名称\" class=\"headerlink\" title=\"JSExportAs 宏: 指定方法在JS中调用的名称\"></a>JSExportAs 宏: 指定方法在JS中调用的名称</h2><p>对于多参数的方法，<code>JavaScriptCore</code>的转换方式将<code>Objective-C</code>的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">MultiArgs</span> &lt;<span class=\"title\">JSExport</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)doFoo:(<span class=\"keyword\">id</span>)foo withBar:(<span class=\"keyword\">id</span>)bar;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><br>如果希望方法在JavaScript中有一个比较短的名字，就需要用的JSExport.h中提供的宏：<br><figure class=\"highlight objc\"><figcaption><span>JSExport.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(PropertyName, Selector)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight objc\"><figcaption><span>JSExportAs的官方宏定义 xcdoc://?url=developer.apple.com/library/etc/redirect/xcode/ios/1151/documentation/JavaScriptCore/Reference/JSExport_Ref/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define JSExportAs(PropertyName, Selector) \\</span></span><br><span class=\"line\"><span class=\"keyword\">@optional</span> Selector __JS_EXPORT_AS__<span class=\"meta\">##PropertyName:(id)argument; @required Selector</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>如 <code>setX:Y:Z</code>方法，我们可以给他重命名，让 JS 中通过 <code>set3D(x,y,z)</code> 来调用<br><figure class=\"highlight objc\"><figcaption><span>使用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSExportAs(set3D,</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setX:(<span class=\"keyword\">id</span>)x Y:(<span class=\"keyword\">id</span>)y Z:(<span class=\"keyword\">id</span>)z</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">set3D(x,y,z)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义PersonJSExports协议和create协议方法（类方法）\"><a href=\"#定义PersonJSExports协议和create协议方法（类方法）\" class=\"headerlink\" title=\"定义PersonJSExports协议和create协议方法（类方法）\"></a>定义PersonJSExports协议和create协议方法（类方法）</h3><p><code>Person 类</code>实现了<code>PersonJSExports 协议</code>，该协议规定哪些属性可以在 <code>JavaScript</code>中可用。<br>在<code>JavaScript</code>语境中，不能像：<code>var person = new Person()</code>来初始化实例，可以在定义<code>PersonJSExports</code>协议方法时，添加一个协议方法来弥补这一点。见下例<code>create...</code>类方法：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom protocol must be declared with `@objc`</span></span><br><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">PersonJSExports</span> : <span class=\"title\">JSExport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 在JavaScript中调用这个类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">### 定义<span class=\"title\">Person</span>模型</span></span><br><span class=\"line\"><span class=\"class\">定义一个遵守`<span class=\"title\">PersonJSExports</span>`协议的`<span class=\"title\">Person</span>`数据模</span></span><br><span class=\"line\"><span class=\"class\">// <span class=\"title\">Custom</span> <span class=\"title\">class</span> <span class=\"title\">must</span> <span class=\"title\">inherit</span> <span class=\"title\">from</span> `<span class=\"title\">NSObject</span>`</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">objc</span> <span class=\"title\">class</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>, <span class=\"title\">PersonJSExports</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// JS协议属性必须声明为`dynamic`</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> birthYear: <span class=\"type\">NSNumber</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(firstName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>)   </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.firstName = firstName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.lastName = lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议类方法</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">createWithFirstName</span>(<span class=\"title\">firstName</span>: <span class=\"title\">String</span>, <span class=\"title\">lastName</span>: <span class=\"title\">String</span>) -&gt; <span class=\"title\">Person</span> </span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>(firstName: firstName, lastName: lastName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//JS协议方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getFullName</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\\(firstName) \\(lastName)\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JSContext-配置\"><a href=\"#JSContext-配置\" class=\"headerlink\" title=\"JSContext 配置\"></a>JSContext 配置</h3><p>之前，我们可以用我们已经创建的 Person 类，我们需要将其导出到 <code>JavaScript</code> 环境。我们也将借此导入<a href=\"http://mustache.github.io\" target=\"_blank\" rel=\"noopener\">Mustache JS library</a>，我们将应用模板到我们的 Person 对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export Person class，JS中以该`Person标示符`作为类名使用</span></span><br><span class=\"line\">context.setObject(<span class=\"type\">Person</span>.<span class=\"keyword\">self</span>, forKeyedSubscript: <span class=\"string\">\"Person\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load Mustache.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> mustacheJSString = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    context.evaluateScript(mustacheJSString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"JavaScript-数据和进程\"><a href=\"#JavaScript-数据和进程\" class=\"headerlink\" title=\"JavaScript 数据和进程\"></a>JavaScript 数据和进程</h3><p>下面就来看看我们简单的 JSON 例子，这段代码将创建新的 Person 实例。<br>数据：<br><figure class=\"highlight json\"><figcaption><span>Persons.json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Grace\"</span>,     <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hopper\"</span>,   <span class=\"attr\">\"year\"</span>: <span class=\"number\">1906</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Ada\"</span>,       <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Lovelace\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1815</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"first\"</span>: <span class=\"string\">\"Margaret\"</span>,  <span class=\"attr\">\"last\"</span>: <span class=\"string\">\"Hamilton\"</span>, <span class=\"attr\">\"year\"</span>: <span class=\"number\">1936</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>创建新的 Person 实例：<br><figure class=\"highlight js\"><figcaption><span>loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadPeopleFromJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonString</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(jsonString);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; data.length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在swift中的js协议方法：`createWithFirstName:lastName:`</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = Person.createWithFirstNameLastName(data[i].first, data[i].last);</span><br><span class=\"line\">        person.birthYear = data[i].year;</span><br><span class=\"line\">        <span class=\"comment\">//`push:`添加到数组中</span></span><br><span class=\"line\">        people.push(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> people;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><code>JSContext</code>加载装换<code>loadPeople.js</code>脚本<br>加载js脚本之后，<code>loadPeopleFromJSON</code>即可作为下标被<code>context</code>调用该方法:<br><figure class=\"highlight swift\"><figcaption><span>加载loadPeople.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load loadPeople.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> loadPeople = <span class=\"type\">String</span>(contentsOfFile:..., encoding:<span class=\"type\">NSUTF8StringEncoding</span>, error:<span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载js脚本之后，`loadPeopleFromJSON`即可作为下标被context调用该方法</span></span><br><span class=\"line\">    context.evaluateScript(loadPeople)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：JavaScriptCore 转换的 Objective-C / Swift 方法名是 JavaScript 兼容的。由于 JavaScript 没有参数 名称，任何外部参数名称都会被转换为驼峰形式并且附加到函数名后。在这个例子中，Objective-C 的方法 createWithFirstName:lastName: 变成了在JavaScript中的 createWithFirstNameLastName()。</p>\n</blockquote>\n<h3 id=\"使用Mustache-模板-渲染\"><a href=\"#使用Mustache-模板-渲染\" class=\"headerlink\" title=\"使用Mustache 模板 渲染\"></a>使用Mustache 模板 渲染</h3><p>Mustache 是一个很强大的 template 引擎，可以通过解析 json 来绑定并渲染占位符。如果你做过一些前端开发的话，会知道这是一种很常用的 HTML 绑定 Model 的做法，GRMustache.swift 是这个框架的 Swift 实现。<br><a href=\"http://blog.csdn.net/kevin_luan/article/details/46485561\" target=\"_blank\" rel=\"noopener\">mustache模板引擎</a><br><a href=\"https://github.com/BjornRuud/Swiftache\" target=\"_blank\" rel=\"noopener\">Mustache 的 Swift 语言实现版本</a><br>mustache的特点就是很语法很简单，主要语法如下:</p>\n<pre><code>1. {{ name }} 打印变量，默认是escape过的，如果不要escape,用3个分隔符 {{{ name }}}，或者用 {{ &name }}，这个和分隔符无关\n2. {{#person}}…{{/person}} 区块，4种方式\n    person 是真假值，决定是否输出\n    person 是list of array，会循环展开 for x in person:section.render(&apos;xxx)\n    person 是匿名函数/object, 区块包裹的html 会作为参数传递进去\n    person 是dict，直接打印 dict[key]\n3. {{^person}}…{{/person}，反向区块\n    4. {{！name }} 注释\n5. {{> box }} 载入子模块\n</code></pre><p>加载 <code>JSON 数据</code>，调用 <code>JSContext</code> 将数据解析成 <code>Person 对象</code>的数组，并用 <code>Mustache 模板</code>呈现每个<code>Person</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件`Persons.json`中加载json数据</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> peopleJSON = <span class=\"type\">NSString</span>(contentsOfFile:..., encoding: <span class=\"type\">NSUTF8StringEncoding</span>, error: <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取js中定义的`loadPeopleFromJSON`的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> load = context.objectForKeyedSubscript(<span class=\"string\">\"loadPeopleFromJSON\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 通过调用load方法将`JSON 数据`解析成`Person 对象`的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> people = load.callWithArguments([peopleJSON]).toArray() <span class=\"keyword\">as</span>? [<span class=\"type\">Person</span>] </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get rendering function and create template</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> mustacheRender = context.objectForKeyedSubscript(<span class=\"string\">\"Mustache\"</span>).objectForKeyedSubscript(<span class=\"string\">\"render\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> template = <span class=\"string\">\", born \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop through people and render Person object as string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> people </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println</span>(mustacheRender.callWithArguments([template, person]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Grace Hopper, born 1906</span></span><br><span class=\"line\"><span class=\"comment\">// Ada Lovelace, born 1815</span></span><br><span class=\"line\"><span class=\"comment\">// Margaret Hamilton, born 1936</span></span><br></pre></td></tr></table></figure><br>JavaScript 代码段可能是附带应用一起发布的基本的用户定义的插件。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"},{"name":"json","path":"api/tags/json.json"}]},{"title":"Java​Script​Core实现swift混编","slug":"swift/Java​Script​Core实现swift混编","date":"2017-02-12T13:34:06.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/swift/Java​Script​Core实现swift混编.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>OS X Mavericks 和 iOS 7 引入了 <code>JavaScriptCore</code> 库，它把 <code>WebKit 的 JavaScript</code> 引擎用 <code>Objective-C</code> 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，<code>JavaScript</code> 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。</p>\n<ol>\n<li>如何从 <code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</li>\n<li>那么反向呢？怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？</li>\n</ol>\n<h2 id=\"swift通过JSContext调用JavaScript\"><a href=\"#swift通过JSContext调用JavaScript\" class=\"headerlink\" title=\"swift通过JSContext调用JavaScript\"></a>swift通过JSContext调用JavaScript</h2><p>如何从<code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</p>\n<h3 id=\"全局实例JSContext：运行JavaScript代码的环境\"><a href=\"#全局实例JSContext：运行JavaScript代码的环境\" class=\"headerlink\" title=\"全局实例JSContext：运行JavaScript代码的环境\"></a>全局实例JSContext：运行JavaScript代码的环境</h3><p>全局实例<code>JSContext</code>作用就像在浏览器内运行的一个<code>JavaScript</code>脚本，<code>JSContext</code> 类似于 <code>window</code>。<br>通过<code>JSContext</code>实例运行<code>JavaScript</code>代码<code>创建变量</code>，<code>做计算</code>，<code>定义方法</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"type\">JSContext</span>()    <span class=\"comment\">//创建全局环境</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var num = 5 + 5\"</span>) <span class=\"comment\">//计算</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var names = ['Grace', 'Ada', 'Margaret']\"</span>) <span class=\"comment\">//定义变量</span></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"var triple = function(value) &#123; return value * 3 &#125;\"</span>) <span class=\"comment\">//定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleNum: <span class=\"type\">JSValue</span> = context.evaluateScript(<span class=\"string\">\"triple(num)\"</span>)  </span><br></pre></td></tr></table></figure></p>\n<h3 id=\"动态类型JSValue-包裹JSContext环境下每一个可能的JS值\"><a href=\"#动态类型JSValue-包裹JSContext环境下每一个可能的JS值\" class=\"headerlink\" title=\"动态类型JSValue:包裹JSContext环境下每一个可能的JS值\"></a>动态类型JSValue:包裹JSContext环境下每一个可能的JS值</h3><p><code>JavaScript</code> 是动态语言，所以动态类型<code>JSValue</code>包裹JSContext环境中任何可能的JS值，字符串和数字；数组、对象和方法；甚至错误和特殊的 JavaScript 值诸如 <code>null</code> 和 <code>undefined</code>。<br>获取<code>tripleNum</code>值：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tripled: \\(tripleNum.toInt32())\"</span>)</span><br></pre></td></tr></table></figure><br><code>JSValue</code> 包括一系列方法用于访问其可能的值以保证有正确的 <code>Foundation 基本类型</code><br>包括：<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/JSValueType.png?imageMogr2/2/w/800\"></p>\n<h3 id=\"下标取值：访问JSContext环境下的任何值\"><a href=\"#下标取值：访问JSContext环境下的任何值\" class=\"headerlink\" title=\"下标取值：访问JSContext环境下的任何值\"></a>下标取值：访问JSContext环境下的任何值</h3><p><code>JSContext</code> 和 <code>JSValue</code> 实例可以使用下标的方式访问之前创建的 <code>context</code> 的任何值。</p>\n<ul>\n<li><code>JSContext</code>：需要一个字符串下标</li>\n<li><code>JSValue</code>：允许使用<code>字符串</code>或<code>整数</code>标来得到里面的对象和数组</li>\n</ul>\n<h4 id=\"JSContext下标取值\"><a href=\"#JSContext下标取值\" class=\"headerlink\" title=\"JSContext下标取值\"></a>JSContext下标取值</h4><ol>\n<li><code>swift</code>语法<figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = context.objectForKeyedSubscript(<span class=\"string\">\"names\"</span>)  <span class=\"comment\">//JSContext字符串下标原始方法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"JSValue整数下标原始方法\"><a href=\"#JSValue整数下标原始方法\" class=\"headerlink\" title=\"JSValue整数下标原始方法\"></a>JSValue整数下标原始方法</h4><figure class=\"highlight swift\"><figcaption><span>未映射成[]的原始方法</span><a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> initialName = names.objectAtIndexedSubscript(<span class=\"number\">0</span>)   <span class=\"comment\">//JSValue整数下标原始方法</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The first name: \\(initialName.toString())\"</span>)  <span class=\"comment\">//JSValue method</span></span><br><span class=\"line\"><span class=\"comment\">// The first name: Grace</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这里，Objective-C 代码可以利用下标表示法，如下例：context[@”names”]，names[0]，[initialName toString]，Swift 目前只公开<a href=\"http://nshipster.cn/object-subscripting/\" target=\"_blank\" rel=\"noopener\">原始方法</a>:<code>objectAtKeyedSubscript()</code> 和 <code>objectAtIndexedSubscript()</code>来让下标成为可能。</p>\n</blockquote>\n<h3 id=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"><a href=\"#callWithArguments调用JS方法：只需传入Foundation基本类型参数\" class=\"headerlink\" title=\"callWithArguments调用JS方法：只需传入Foundation基本类型参数\"></a>callWithArguments调用JS方法：只需传入Foundation基本类型参数</h3><p>上述<code>JavaScript</code>代码中，<code>JSValue</code>包装了一个<code>triple函数</code>，在<code>Objective-C / Swift</code> 代码中可以使用 <code>Foundation基本类型</code>作为参数来直接调用该函数。再次，<code>JavaScriptCore</code> 很轻松的处理了这个桥接：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> tripleFunction = context.objectForKeyedSubscript(<span class=\"string\">\"triple\"</span>) <span class=\"comment\">//下标取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = tripleFunction.callWithArguments([<span class=\"number\">5</span>]) <span class=\"comment\">//传入基本类型参数直接调用</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Five tripled: \\(result.toInt32())\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"exceptionHandler错误处理\"><a href=\"#exceptionHandler错误处理\" class=\"headerlink\" title=\"exceptionHandler错误处理\"></a><code>exceptionHandler</code>错误处理</h3><p><code>exceptionHandler</code> 是一个接收<code>JSContext 引用</code>和<code>异常本身</code>的回调处理的闭包。<br>通过设置上下文的 <code>exceptionHandler</code> 属性，可以观察和记录<code>语法</code>，<code>类型</code>以及<code>运行时错误</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = &#123; context, exception <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"JS Error: \\(exception)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">context.evaluateScript(<span class=\"string\">\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>)</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"JS Error: %@\"</span>, exception);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[context evaluateScript:<span class=\"string\">@\"function multiply(value1, value2) &#123; return value1 * value2 \"</span>];</span><br><span class=\"line\"><span class=\"comment\">// JS Error: SyntaxError: Unexpected end of script</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"JavaScript-通过JSContext调用-swift／OC\"><a href=\"#JavaScript-通过JSContext调用-swift／OC\" class=\"headerlink\" title=\"JavaScript 通过JSContext调用 swift／OC\"></a>JavaScript 通过JSContext调用 swift／OC</h2><p>怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？<br>让 <code>JSContext</code> 访问我们的本地客户端代码的方式主要有两种：</p>\n<ol>\n<li><code>block块</code>键值对：把OC中的<code>block块</code>赋值给<code>JSContext</code>的一个标示键，该标识键的<code>JSValue</code>可以通过<code>callWithArguments</code>调用.</li>\n<li><code>JSExport 协议</code>。</li>\n</ol>\n<h3 id=\"block块-键值对-该block键的JSValue通过callWithArguments调用\"><a href=\"#block块-键值对-该block键的JSValue通过callWithArguments调用\" class=\"headerlink\" title=\"block块 键值对:该block键的JSValue通过callWithArguments调用\"></a>block块 键值对:该block键的<code>JSValue</code>通过<code>callWithArguments</code>调用</h3><p>当一个 <code>Objective-C block</code> 被赋给 <code>JSContext</code> 里的一个标识符，<code>JavaScriptCore</code> 会自动的把 <code>block</code> 封装在 <code>JavaScript 函数</code>里，并以该标示符作为函数名来调用该block的实现。这使得在 <code>JavaScript</code> 中可以简单的使用 <code>Foundation</code> 和 <code>Cocoa</code>类，所有的桥接都为你做好了。<br><a href=\"http://nshipster.cn/cfstringtransform/\" target=\"_blank\" rel=\"noopener\">CFStringTransform</a>处理语言的强大威力</p>\n<p>在 <code>JSContext</code> 中使用 <code>Swift 闭包</code>需要注意两点:</p>\n<ol>\n<li>与 <code>@objc_block</code> 属性一起声明</li>\n<li>使用Swift中的<code>unsafeBitCast()</code>函数，把对象转换为<code>AnyObject</code></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> simplifyString: <span class=\"meta\">@objc</span>_block <span class=\"type\">String</span> -&gt; <span class=\"type\">String</span> = &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mutableString = <span class=\"type\">NSMutableString</span>(string: input) <span class=\"keyword\">as</span> <span class=\"type\">CFMutableStringRef</span></span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformToLatin, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"type\">CFStringTransform</span>(mutableString, <span class=\"literal\">nil</span>, kCFStringTransformStripCombiningMarks, <span class=\"type\">Boolean</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mutableString</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.setObject(<span class=\"built_in\">unsafeBitCast</span>(simplifyString, <span class=\"type\">AnyObject</span>.<span class=\"keyword\">self</span>), forKeyedSubscript: <span class=\"string\">\"simplifyString\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(context.evaluateScript(<span class=\"string\">\"simplifyString('안녕하새요!')\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// annyeonghasaeyo!</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给标示符赋值一个oc-block，该标示符会被自动装换为JavaScript函数</span></span><br><span class=\"line\">context[<span class=\"string\">@\"simplifyString\"</span>] = ^(<span class=\"built_in\">NSString</span> *input) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSMutableString</span> *mutableString = [input mutableCopy];</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformToLatin, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"built_in\">CFStringTransform</span>((__bridge <span class=\"built_in\">CFMutableStringRef</span>)mutableString, <span class=\"literal\">NULL</span>, kCFStringTransformStripCombiningMarks, <span class=\"literal\">NO</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> mutableString;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过simplifyString标示符来调用block的实现</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, [context evaluateScript:<span class=\"string\">@\"simplifyString('안녕하새요!')\"</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>由于 <code>block</code> 可以保有变量引用，而且 <code>JSContext</code> 也强引用它所有的变量，为了避免强引用循环需要特别小心。<br>避免保有<code>JSContext</code> 或<code>一个 block</code> 里的任何 <code>JSValue</code>。相反，使用 <code>[JSContext currentContext]</code> 得到当前上下文，并把你需要的任何值用参数传递。</p>\n<h3 id=\"JSExport-协议\"><a href=\"#JSExport-协议\" class=\"headerlink\" title=\"JSExport 协议\"></a>JSExport 协议</h3><p>在继承<code>JSExport 协议</code>的子协议里声明的属性，实例方法还是类方法，都会自动暴漏给<code>JavaScript</code>代码来调用。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"JS混编","path":"api/categories/JS混编.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"iOS","path":"api/tags/iOS.json"},{"name":"swift","path":"api/tags/swift.json"},{"name":"macOS","path":"api/tags/macOS.json"},{"name":"混编","path":"api/tags/混编.json"},{"name":"Java​Script​Core","path":"api/tags/Java​Script​Core.json"}]},{"title":"用Git将代码恢复到一个历史的版本","slug":"git/用Git将代码恢复到一个历史的版本","date":"2017-02-10T18:19:48.000Z","updated":"2017-02-10T18:29:19.000Z","comments":true,"path":"api/articles/git/用Git将代码恢复到一个历史的版本.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>经历：将代码全提交到默认的head分支中，切换分支后，无法找到分支的严重后果：<br>目的：在当前分支上，将代码恢复到一个历史的提交版本上。</p>\n<h2 id=\"暴力的方式\"><a href=\"#暴力的方式\" class=\"headerlink\" title=\"暴力的方式\"></a>暴力的方式</h2><p>如果仓库是自己在用（不影响别人），那么可以使用<code>git reset --hard &lt;target_commit_id&gt;</code> 来恢复到指定的提交，再用 git push -f 来强制更新远程的分支指针。为了保证万一需要找回历史提交，我们可以先打一个 tag 来备份。</p>\n<ol>\n<li>第一步：查看本地的索引的提交日志：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog \t\t</span></span><br><span class=\"line\">a1d09fd HEAD@&#123;0&#125;: checkout: moving from all to master</span><br><span class=\"line\">a1d09fd HEAD@&#123;1&#125;: checkout: moving from master to all</span><br><span class=\"line\">a1d09fd HEAD@&#123;2&#125;: checkout: moving from HEAD to master</span><br><span class=\"line\">a1d09fd HEAD@&#123;3&#125;: checkout: moving from all to HEAD</span><br></pre></td></tr></table></figure></li>\n<li>第二步：根据上面的sh2值，回滚：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset  —hard  a1d09fd</span><br></pre></td></tr></table></figure>\n这样就可以找回代码.</li>\n</ol>\n<h2 id=\"温柔的方式\"><a href=\"#温柔的方式\" class=\"headerlink\" title=\"温柔的方式\"></a>温柔的方式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">回滚</span></span><br><span class=\"line\">git reset  —hard  a1d09fd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">将当前代码切换回最新的提交</span></span><br><span class=\"line\">git reset --soft origin/source</span><br></pre></td></tr></table></figure>\n<p>此时工作区变成了历史的提交内容，这个时候用 <code>git add</code> 和 <code>git commit</code> 即可.</p>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"},{"name":"恢复","path":"api/categories/恢复.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"git","path":"api/tags/git.json"}]},{"title":"bilibiliForMac版之mpv依赖编译","slug":"编译/bilibili之Mac版ffmpeg依赖编译","date":"2017-02-10T10:45:03.000Z","updated":"2017-05-26T18:13:12.000Z","comments":true,"path":"api/articles/编译/bilibili之Mac版ffmpeg依赖编译.json","excerpt":null,"keywords":null,"cover":"https://cloud.githubusercontent.com/assets/4022953/16513398/fba07b2a-3f96-11e6-8358-b93275ed0a09.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Bilibili-Mac-Client\"><a href=\"#Bilibili-Mac-Client\" class=\"headerlink\" title=\"Bilibili Mac Client\"></a><a href=\"https://github.com/typcn/bilibili-mac-client\" target=\"_blank\" rel=\"noopener\">Bilibili Mac Client</a></h2><p>一款基于mpv和ffmpeg底层库实现的播放器.</p>\n<h2 id=\"项目依赖库\"><a href=\"#项目依赖库\" class=\"headerlink\" title=\"项目依赖库\"></a>项目依赖库</h2><p>编译在项目中所需的相关依赖库</p>\n<h3 id=\"下载资源\"><a href=\"#下载资源\" class=\"headerlink\" title=\"下载资源\"></a>下载资源</h3><ol>\n<li><p>下载mpv-build</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/mpv-player/mpv-build.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行下载<code>ffmpeg</code>, <code>libass</code> 和<code>mpv资源</code>，同时完成编译的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mpv-build/ </span><br><span class=\"line\">./rebuild -j4  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用参数 “–enable-shared ” 可以开启 ffmpeg 的动态版本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ffmpeg/</span><br><span class=\"line\">./configure --<span class=\"built_in\">enable</span>-shared    </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装ffmpeg</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在ffmpeg目录下执行：</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"开始编译mpv动态依赖库：\"><a href=\"#开始编译mpv动态依赖库：\" class=\"headerlink\" title=\"开始编译mpv动态依赖库：\"></a>开始编译mpv动态依赖库：</h3><ol>\n<li>开启libmpv动态库的支持：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../mpv/</span><br><span class=\"line\">./waf configure --<span class=\"built_in\">enable</span>-libmpv-shared  --<span class=\"built_in\">disable</span>-libass</span><br><span class=\"line\">./waf build</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>变更去除static参数：./waf configure –enable-static-build –enable-libmpv-shared  –disable-libass</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"集成到项目中\"><a href=\"#集成到项目中\" class=\"headerlink\" title=\"集成到项目中\"></a>集成到项目中</h2><h3 id=\"指定libmpv-dylib相对路径\"><a href=\"#指定libmpv-dylib相对路径\" class=\"headerlink\" title=\"指定libmpv.dylib相对路径\"></a>指定libmpv.dylib相对路径</h3><p>直接编译出来的库会是绝对路径，需要先通过install_name_tool 修改 相对路径：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build/</span><br><span class=\"line\">install_name_tool -id \"@executable_path/lib/libmpv.dylib\" libmpv.dylib</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"聚合ffmpeg相关依赖包\"><a href=\"#聚合ffmpeg相关依赖包\" class=\"headerlink\" title=\"聚合ffmpeg相关依赖包\"></a>聚合ffmpeg相关依赖包</h3><p>执行 mpv<code>tools/dylib-unhell</code> ，目标是 <code>libmpv.dylib</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TOOLS/dylib-unhell.py libmpv.dylib</span><br></pre></td></tr></table></figure><br>这样会多出一个 <code>lib文件夹</code>，里面会出现变为相对路径的文件，复制导入到项目即可。</p>\n<h2 id=\"相对路径脚本学习\"><a href=\"#相对路径脚本学习\" class=\"headerlink\" title=\"相对路径脚本学习\"></a>相对路径脚本学习</h2><p>使用otool -L 和install_name_tool完成了一系列操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install_name_tool -change</span><br><span class=\"line\">install_name_tool -id </span><br></pre></td></tr></table></figure><br><img src=\"https://cloud.githubusercontent.com/assets/4022953/16513398/fba07b2a-3f96-11e6-8358-b93275ed0a09.png\" alt=\"编译后的资源目录位置\"></p>\n<h3 id=\"扩展一：\"><a href=\"#扩展一：\" class=\"headerlink\" title=\"扩展一：\"></a>扩展一：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!bin/sh</span></span><br><span class=\"line\">mkdir \"$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/dylib\"</span><br><span class=\"line\">cp -f /your/path/to/xcode_project_name/dylib/*.dylib \"$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/dylib/\"</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"--------$(pwd)----------------\"</span><br><span class=\"line\">cur_dir=\"$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/lib\"</span><br><span class=\"line\">cd $&#123;cur_dir&#125;</span><br><span class=\"line\">echo \"--进入$(pwd)--\"</span><br><span class=\"line\"></span><br><span class=\"line\">for dirlist in $(ls $&#123;cur_dir&#125;)</span><br><span class=\"line\">    #查看它们的 rpath</span><br><span class=\"line\">    otool -L $&#123;dirlist&#125;</span><br><span class=\"line\">    #制作相对路径</span><br><span class=\"line\">    #方法一</span><br><span class=\"line\">    install_name_tool -change /usr/local/lib/$&#123;dirlist&#125; @executable_path/lib/$&#123;dirlist&#125; \"$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/$PRODUCT_NAME\"</span><br><span class=\"line\">    #方法二</span><br><span class=\"line\">    install_name_tool -id \"@executable_path/lib/$&#123;dirlist&#125;\" $&#123;dirlist&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展二\"><a href=\"#扩展二\" class=\"headerlink\" title=\"扩展二\"></a>扩展二</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"--------$(pwd)----------------\"</span><br><span class=\"line\">cur_dir=\"$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/lib\"</span><br><span class=\"line\">cd $&#123;cur_dir&#125;</span><br><span class=\"line\">echo \"--进入$(pwd)--\"</span><br><span class=\"line\">lib=\"libmediainfo.0.dylib\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-f 参数判断 <span class=\"variable\">$file</span> 是否存在</span></span><br><span class=\"line\">if [ -f \"$lib\" ]; then</span><br><span class=\"line\">    otool -L $&#123;lib&#125;</span><br><span class=\"line\">    install_name_tool -id \"@executable_path/lib/$&#123;lib&#125;\" $&#123;lib&#125;</span><br><span class=\"line\">    otool -L $&#123;lib&#125;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"视频","path":"api/categories/视频.json"}],"tags":[{"name":"shell","path":"api/tags/shell.json"},{"name":"编译","path":"api/tags/编译.json"},{"name":"ffmpeg","path":"api/tags/ffmpeg.json"},{"name":"mpv","path":"api/tags/mpv.json"}]},{"title":"Crash文件分析方法","slug":"调试/Crash文件分析方法","date":"2017-02-07T12:38:58.000Z","updated":"2017-05-26T11:03:05.000Z","comments":true,"path":"api/articles/调试/Crash文件分析方法.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>第一步：在任意目录创建调试crash的目录</p>\n<p>第二步：将之前Archive的文件copy到crash目录里面,其中包括两个文件.app和.app.dSYM</p>\n<p>第三步：将symbolicatecrash工具copy到crash目录<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /Applications/Xcode.app -name symbolicatecrash -type f</span><br></pre></td></tr></table></figure></p>\n<p>2.用命令将symbolicatecrash拷贝到桌面的crash文件夹里面，与.app和.app.dSYM放一起<br>拷贝到crash目录：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /Applications/Xcode.app/.../symbolicatecrash /Users/Desktop/crash</span><br></pre></td></tr></table></figure></p>\n<p>第四步：执行symbolicatecrash<br>1.打开终端用命令切换到桌面的crash目录下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/你的电脑名称/Desktop/crash</span><br></pre></td></tr></table></figure></p>\n<p>2.执行命令<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./symbolicatecrash /Users/Desktop/crash/PBB.crash /Users/Desktop/crash/Control.app.dSYM &gt; Control_symbol.crash</span><br></pre></td></tr></table></figure></p>\n<p>这时候终端有可能会出现：<code>Error: &quot;DEVELOPER_DIR&quot; is not defined at ./symbolicatecrash line 60.</code></p>\n<p>3.输入命令：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DEVELOPER_DIR=<span class=\"string\">\"/Applications/XCode.app/Contents/Developer\"</span></span><br></pre></td></tr></table></figure></p>\n<p>4.再执行 2.的命令行</p>\n<p>5.将终端完成以后，在crash文件夹里面会多出一个文件Control_symbol.crash。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unsupported crash <span class=\"built_in\">log</span> version: 12 at ./symbolicatecrash line 614.</span><br></pre></td></tr></table></figure></p>\n<p>第五步：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dwarfdump --lookup 0x000cf358 --arch armv7 appname.app.dSYM/</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"xcode","path":"api/categories/xcode.json"},{"name":"调试","path":"api/categories/调试.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"测试","path":"api/tags/测试.json"}]},{"title":"OSX 应用插件","slug":"macOS/OSX应用插件开发","date":"2017-02-07T12:38:58.000Z","updated":"2017-02-07T13:47:53.000Z","comments":true,"path":"api/articles/macOS/OSX应用插件开发.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/xcode8.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在以前的 OS X 系统中，给你的 App 在运行时动态载入可执行代码比较困难。现在可以通过<code>NSBundle</code>和 <code>plug-ins</code>插件,可以很方便的向原有APP中添加新功能点。</p>\n<p>目的：在一个修改过的 TextEdit 里面加入加载 bundle 的功能</p>\n<h2 id=\"包-Bundles-和接口-Interfaces\"><a href=\"#包-Bundles-和接口-Interfaces\" class=\"headerlink\" title=\"包 (Bundles) 和接口 (Interfaces)\"></a>包 (Bundles) 和接口 (Interfaces)</h2><p>如果你打开 Xcode8 创建一个新项目，会看见 OS X 所有可以编写APP插件的模版，例如： <code>Screen Savers</code> 到 <code>Image Units</code>等。<br>在<code>Framework &amp; Library</code>中的 <code>Bundle</code> 条目。我会在今天探索一个非常简单的的项目，那就是在一个修改过的 TextEdit 里面加入加载 bundle 的功能。<br><img title=\"项目模版\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcode8.png?imageMogr2/2/w/800\"><br><code>bundle 模版</code>项目与APP项目比较：</p>\n<ol>\n<li>一个 <code>Contents</code> 目录，里面包含了 <code>Info.plist</code> 和 <code>Resource</code> 目录。</li>\n<li>如果你在你的项目下加入了新的类，你可以看见包含一个可执行文件的 <code>MacOS</code> 目录。</li>\n<li><code>Bundle</code> 工程里缺少的一个东西是 <code>main()</code> 函数。它是被宿主<code>App</code> 调用执行的。</li>\n</ol>\n<h2 id=\"为-TextEdit-加入-Plugin-支持\"><a href=\"#为-TextEdit-加入-Plugin-支持\" class=\"headerlink\" title=\"为 TextEdit 加入 Plugin 支持\"></a>为 TextEdit 加入 Plugin 支持</h2><p>两种插件的方式:<br>    第一个:用最少的工作来为你的 app 加入插件支持，希望让你知道实现这个有多简单。<br>    第二个:技术有点复杂，它展现来一个为你的 app 加入插件的合理的方式，这可以使你不会在未来陷入到被锁死在某一种实现的窘境中。<br>本文章的项目文件仍然会放在 <a href=\"https://github.com/objcio/issue-14-plugins\" target=\"_blank\" rel=\"noopener\">GitHub</a> 供大家参考。</p>\n<h3 id=\"在-TextEdit-中扫描-Bundle\"><a href=\"#在-TextEdit-中扫描-Bundle\" class=\"headerlink\" title=\"在 TextEdit 中扫描 Bundle\"></a>在 TextEdit 中扫描 Bundle</h3><p>请打开 “01 TextEdit” 目录下面的 <code>TextEdit.xcodeproj</code> 工程，同时浏览它里面包含的代码。<br><code>TextEdit</code> 里面有三个简单的组成部分：扫描 <code>bundle</code>，加载 <code>bundle</code>，调用 <code>bundle 的 UI</code><br><code>loadPlugins</code> 方法：<br>打开 <code>Controller.m</code>，你可以看见 <code>-(void)loadPlugins</code> 方法 (它在 <code>applicationDidFinishLaunching:</code> 中被调用)。</p>\n<ol>\n<li>扩展插件菜单：在界面菜单右侧加入了一个新的 <code>NSMenuItem</code>，为调用插件提供一个入口（通常你会在 <code>MainMenu.xib</code> 做这件事情并且链接 <code>outlets</code>，但是我们这次偷下懒）。</li>\n<li>扫描插件目录：获得插件目录（在 <code>~/Library/Application Support/Text Edit/Plug-Ins/</code> ）下，并且扫描这个目录。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *pluginsFolder = [<span class=\"keyword\">self</span> pluginsFolder];</span><br><span class=\"line\"><span class=\"built_in\">NSFileManager</span> *fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\"><span class=\"built_in\">NSError</span> *outErr;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *item <span class=\"keyword\">in</span> [fm contentsOfDirectoryAtPath:pluginsFolder error:&amp;outErr]) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![item hasSuffix:<span class=\"string\">@\".bundle\"</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *bundlePath = [pluginsFolder stringByAppendingPathComponent:item];</span><br><span class=\"line\">    <span class=\"built_in\">NSBundle</span> *b = [<span class=\"built_in\">NSBundle</span> bundleWithPath:bundlePath];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Could not make a bundle from %@\"</span>, bundlePath);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取实现插件代理协议方法的类</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt;TextEditPlugin&gt; plugin = [[b principalClass] new];</span><br><span class=\"line\">    <span class=\"built_in\">NSMenuItem</span> *item = [pluginsMenu addItemWithTitle:[plugin menuItemTitle] action:<span class=\"keyword\">@selector</span>(pluginMenuItemCalledAction:) keyEquivalent:<span class=\"string\">@\"\"</span>];</span><br><span class=\"line\">    [item setRepresentedObject:plugin];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：扫描插件目录，确保得到的是一个 <code>.bundle</code> 文件，然后用 <code>NSBundle</code> 载入你找到的 <code>bundle</code> 并且实例化里面的类。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"插件代理\"><a href=\"#插件代理\" class=\"headerlink\" title=\"插件代理\"></a>插件代理</h3><p>你会注意到一个 <code>TextEditPlugin</code> 的 <code>protocol</code> 的引用。在 <code>TextEditMisc.h</code> 能找它的定义:<br><figure class=\"highlight objc\"><figcaption><span>声明代理协议</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">TextEditPlugin</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span>*)menuItemTitle;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)actionCalledWithTextView:(<span class=\"built_in\">NSTextView</span>*)textView inDocument:(<span class=\"keyword\">id</span>)document;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><br>这说明你实例化的类需要响应这两个方法。你可以验证这个类是否响应这两个方法。</p>\n<h3 id=\"NSPrincipalClass键-值–实现插件代理协议方法的类名称\"><a href=\"#NSPrincipalClass键-值–实现插件代理协议方法的类名称\" class=\"headerlink\" title=\"NSPrincipalClass键:值–实现插件代理协议方法的类名称\"></a>NSPrincipalClass键:值–实现插件代理协议方法的类名称</h3><p>在 <code>bundle</code> 里面调用的 <code>principalClass</code> 方法是什么呢？<br>当你创建一个 <code>Bundle</code> 的时候，你可以在里面创建一个或者多个类，同时你需要让 <code>TextEdit</code> 知道哪一个类需要被实例化。为了帮助宿主 App 调用，你可以在 <code>Info.plist</code> 文件加入一个 <code>NSPrincipalClass</code> 的键，同时设置它的值为实现插件方法的类的名字。你可以用 <code>[NSBundle principalClass]</code> 方便地从 <code>NSPrincipalClass</code> 的值里面寻找并创建这个类。</p>\n<h3 id=\"添加扩展插件菜单的响应事件\"><a href=\"#添加扩展插件菜单的响应事件\" class=\"headerlink\" title=\"添加扩展插件菜单的响应事件\"></a>添加扩展插件菜单的响应事件</h3><p>在 <code>Plug-Ins</code> 菜单加入一个新的按钮，设置 <code>action</code> 为 <code>pluginMenuItemCalledAction:</code>，并且设置它表示你已经实例化的对象。</p>\n<blockquote>\n<p>如果在 <code>menu item</code> 里面没有设置一个<code>target</code>，即目标是<code>nil</code>，那么它会寻找响应链，来寻找第一个实现 <code>pluginMenuItemCalledAction:</code> 方法的对象。如果它找不到，那么这个菜单选项将会不能用。<br>举一个例子，实现 <code>pluginMenuItemCalledAction</code> 的最好的地方是在 <code>Document</code> 的 <code>window controller</code> 类中。打开 <code>DocumentWindowController.m</code>，然后定位到<code>pluginMenuItemCalledAction</code><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)pluginMenuItemCalledAction:(<span class=\"keyword\">id</span>)sender </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt;TextEditPlugin&gt;plugin = [sender representedObject];</span><br><span class=\"line\">    [plugin actionCalledWithTextView:[<span class=\"keyword\">self</span> firstTextView] inDocument:[<span class=\"keyword\">self</span> document]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>代码本身很清晰，搜集插件实例，调用 <code>actionCalledWithTextView:inDocument:</code> 方法（被定义在 <code>protocol</code> 里面的），运行你插件里面的代码。</p>\n<h2 id=\"制作插件\"><a href=\"#制作插件\" class=\"headerlink\" title=\"制作插件\"></a>制作插件</h2><ol>\n<li>新建模版项目<br>打开 “01 MarkYellow” 工程看一下。这是一个 Xcode (通过<code>OS X ▸ Framework &amp; Library ▸ Bundle template</code> 建立) 的标准工程，里面只添加了一个类：<code>TEMarkYellow</code>。</li>\n<li>设置NSPrincipalClass键值<br>如果你打开<code>MarkYellow-Info.plist</code>，你可以看到 <code>NSPrincipalClass</code> 的值设置成了上面提到的 <code>TEMarkYellow</code>。</li>\n<li>实现协议代理<br>接着，打开 <code>TEMarkYellow.m</code>，你将会看见定义在协议里面的方法。<ul>\n<li>第一个方法（<code>menuItemTitle</code>）返回插件的名字，最为入口名显示在 <code>menu</code> 里面。</li>\n<li>第二个方法 (<code>actionCalledWithTextView:inDocument:</code>)，把所有选中的文字变成黄色的背景。<figure class=\"highlight objc\"><figcaption><span>改变字体颜色</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)actionCalledWithTextView:(<span class=\"built_in\">NSTextView</span>*)textView inDocument:(<span class=\"keyword\">id</span>)document </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([textView selectedRange].length) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSMutableAttributedString</span> *ats = [[[textView textStorage] attributedSubstringFromRange:[textView selectedRange]] mutableCopy];</span><br><span class=\"line\">        [ats addAttribute:<span class=\"built_in\">NSBackgroundColorAttributeName</span> value:[<span class=\"built_in\">NSColor</span> yellowColor] range:<span class=\"built_in\">NSMakeRange</span>(<span class=\"number\">0</span>, [ats length])];</span><br><span class=\"line\">        <span class=\"comment\">//  先测试text view是否能改变文字内容，这样可以自动做正确的撤销操作。</span></span><br><span class=\"line\">        By asking the text view <span class=\"keyword\">if</span> you can change the text first, it will automatically <span class=\"keyword\">do</span> the right thing to enable undoing of attribute changes</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([textView shouldChangeTextInRange:[textView selectedRange] replacementString:[ats string]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            [[textView textStorage] replaceCharactersInRange:[textView selectedRange] withAttributedString:ats];</span><br><span class=\"line\">            [textView didChangeText];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"集成插件\"><a href=\"#集成插件\" class=\"headerlink\" title=\"集成插件\"></a>集成插件</h2><p>运行 <code>TextEdit</code> （它会创建<code>Plug-Ins</code>目录），然后构建 <code>MarkYellow</code> 工程。把 <code>MarkYellow.bundle</code> 丢到你的 <code>~/Library/Application Support/Text Edit/Plug-Ins/</code> 目录下面，重启你的 <code>TextEdit</code> 应用。<br>一切看起来都很好，扫描，加载，插入一个菜单，然后，当你使用菜单项的时候，传递到参数到插件里面。试一试，点击 <code>Plug-Ins ▸ Mark Selected Text Yellow</code>，选择的文字的背景颜色就变成黄色的了。</p>\n<h2 id=\"XCode8版本问题\"><a href=\"#XCode8版本问题\" class=\"headerlink\" title=\"XCode8版本问题\"></a>XCode8版本问题</h2><p>Xcode8 不再支持<code>Application Plug-in</code>插件<br><img title=\"项目创建模版\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/xcode6.jpg?imageMogr2/2/w/800\"><br><a href=\"http://www.jianshu.com/p/39443429f71d\" target=\"_blank\" rel=\"noopener\">XCode8.2.1继续使用xcode插件</a><br>这个是因为苹果解决xcode ghost，把插件屏蔽了。<br>解决方法<br><code>sudo /usr/libexec/xpccachectl</code><br>然后必须重启电脑后生效.</p>\n","raw":null,"categories":[{"name":"macOS","path":"api/categories/macOS.json"}],"tags":[{"name":"macOS","path":"api/tags/macOS.json"},{"name":"插件","path":"api/tags/插件.json"},{"name":"objc","path":"api/tags/objc.json"}]},{"title":"Hexo标签插件","slug":"hexo/Hexo标签插件","date":"2017-01-23T15:17:33.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/hexo/Hexo标签插件.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/gistflag.jpg?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<h2 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h2><hr>\n<p>在文章中插入引言，可包含作者、来源和标题。</p>\n<h3 id=\"别号：-quote\"><a href=\"#别号：-quote\" class=\"headerlink\" title=\"别号： quote\"></a>别号： quote</h3><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h4><hr>\n<h5 id=\"无参普通blockquote\"><a href=\"#无参普通blockquote\" class=\"headerlink\" title=\"无参普通blockquote\"></a>无参普通blockquote</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote %&#125;</span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h5 id=\"引用书上的句子\"><a href=\"#引用书上的句子\" class=\"headerlink\" title=\"引用书上的句子\"></a>引用书上的句子</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class=\"line\">Do not just seek happiness <span class=\"keyword\">for</span> yourself. Seek happiness <span class=\"keyword\">for</span> all. Through kindness. Through mercy.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>boyer huo </strong><cite>Wide Awake</cite></footer></blockquote>\n<h5 id=\"引用-Twitter\"><a href=\"#引用-Twitter\" class=\"headerlink\" title=\"引用 Twitter\"></a>引用 Twitter</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote @DevDocs https:<span class=\"comment\">//twitter.com/devdocs/status/356095192085962752 %&#125;</span></span><br><span class=\"line\">NEW: DevDocs now comes <span class=\"keyword\">with</span> syntax highlighting. http:<span class=\"comment\">//devdocs.io</span></span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href=\"http://devdocs.io\" target=\"_blank\" rel=\"noopener\">http://devdocs.io</a></p>\n<footer><strong>@DevDocs</strong><cite><a href=\"https://twitter.com/devdocs/status/356095192085962752\" target=\"_blank\" rel=\"noopener\">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>\n<h5 id=\"引用网络上的文章\"><a href=\"#引用网络上的文章\" class=\"headerlink\" title=\"引用网络上的文章\"></a>引用网络上的文章</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote Seth Godin http:<span class=\"comment\">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></span><br><span class=\"line\">Every interaction is both precious and an opportunity to delight.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>\n<footer><strong>Seth Godin</strong><cite><a href=\"http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html\" target=\"_blank\" rel=\"noopener\">Welcome to Island Marketing</a></cite></footer></blockquote>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><hr>\n<p>在文章中插入代码。</p>\n<h3 id=\"别名-code\"><a href=\"#别名-code\" class=\"headerlink\" title=\"别名:code\"></a>别名:code</h3><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例\"></a>样例</h4><hr>\n<h5 id=\"普通的代码块\"><a href=\"#普通的代码块\" class=\"headerlink\" title=\"普通的代码块\"></a>普通的代码块</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock %&#125;</span><br><span class=\"line\">alert(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"指定语言\"><a href=\"#指定语言\" class=\"headerlink\" title=\"指定语言\"></a>指定语言</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock lang:objc %&#125;</span><br><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure>\n<h5 id=\"附加说明\"><a href=\"#附加说明\" class=\"headerlink\" title=\"附加说明\"></a>附加说明</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock <span class=\"built_in\">Array</span>.map %&#125;</span><br><span class=\"line\">array.map(callback[, thisArg])</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>Array.map</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.map</span><br><span class=\"line\">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure>\n<h5 id=\"附加说明和网址\"><a href=\"#附加说明和网址\" class=\"headerlink\" title=\"附加说明和网址\"></a>附加说明和网址</h5><hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock _.compact http:<span class=\"comment\">//underscorejs.org/#compact Underscore.js %&#125;</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">=&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>_.compact</span><a href=\"http://underscorejs.org/#compact\" target=\"_blank\" rel=\"noopener\">Underscore.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compactUnderscore.js</span><br><span class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class=\"line\">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h2 id=\"反引号代码块-MD语法\"><a href=\"#反引号代码块-MD语法\" class=\"headerlink\" title=\"反引号代码块 (MD语法)\"></a>反引号代码块 (MD语法)</h2><hr>\n<h3 id=\"样例-2\"><a href=\"#样例-2\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"行内代码块\"><a href=\"#行内代码块\" class=\"headerlink\" title=\"行内代码块\"></a>行内代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行内 <span class=\"code\">`code 块 `</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"缩进代码块\"><a href=\"#缩进代码块\" class=\"headerlink\" title=\"缩进代码块\"></a>缩进代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Some comments</span><br><span class=\"line\">line 1 of code</span><br><span class=\"line\">line 2 of code</span><br><span class=\"line\">line 3 of code</span><br></pre></td></tr></table></figure>\n<h4 id=\"多行代码块\"><a href=\"#多行代码块\" class=\"headerlink\" title=\"多行代码块\"></a>多行代码块</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">``` [language] [title] [url] [link text] </span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    代码块</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"> `` `</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><hr>\n<h3 id=\"样例-3\"><a href=\"#样例-3\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"默认左对齐\"><a href=\"#默认左对齐\" class=\"headerlink\" title=\"默认左对齐\"></a>默认左对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|-------|-------|----------|</span><br><span class=\"line\">|文本内容 |文本内容| 文本内容  |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>categories</td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"向右对齐\"><a href=\"#向右对齐\" class=\"headerlink\" title=\"向右对齐\"></a>向右对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|-------:|-------:|-------:|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">三种布局</th>\n<th style=\"text-align:right\">路径:(储存到路径文件夹)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">post</td>\n<td style=\"text-align:right\">source/_posts</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">page</td>\n<td style=\"text-align:right\">source</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">draft</td>\n<td style=\"text-align:right\">source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"向左对齐\"><a href=\"#向左对齐\" class=\"headerlink\" title=\"向左对齐\"></a>向左对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|:------|:------|:------|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">日期变量</th>\n<th style=\"text-align:left\">描述:（可以通过日期来管理文章）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:title</td>\n<td style=\"text-align:left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:year</td>\n<td style=\"text-align:left\">建立的年份，比如， 2015</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:month</td>\n<td style=\"text-align:left\">建立的月份（有前导零），比如， 04</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:i_month</td>\n<td style=\"text-align:left\">建立的月份（无前导零），比如， 4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:day</td>\n<td style=\"text-align:left\">建立的日期（有前导零），比如， 07</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:i_day</td>\n<td style=\"text-align:left\">建立的日期（无前导零），比如， 7</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"居中对齐\"><a href=\"#居中对齐\" class=\"headerlink\" title=\"居中对齐\"></a>居中对齐</h4><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|参数|描述|默认值|</span><br><span class=\"line\">|:------:|:------:|:------:|</span><br><span class=\"line\">| 文本内容 | 文本内容 | 文本内容|</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">变量</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局当:false不加任何布局样式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Pull-Quote\"><a href=\"#Pull-Quote\" class=\"headerlink\" title=\"Pull Quote\"></a>Pull Quote</h2><hr>\n<p>在文章中插入 Pull quote。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% pullquote [class] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"jsFiddle\"><a href=\"#jsFiddle\" class=\"headerlink\" title=\"jsFiddle\"></a>jsFiddle</h2><hr>\n<p><a href=\"https://jsfiddle.net\" target=\"_blank\" rel=\"noopener\">官网</a><br>在文章中嵌入 <code>jsFiddle</code> 在线的shell编辑器,可以供我们在线测试html、js、和css代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h2><hr>\n<p>在文章中嵌入 Gist<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>filename</code>: 可选，当不指定文件名时，嵌入显示<code>gist_id</code>下所有文件。</p>\n<p>一个gist可能存在多个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gist.github.com/dergachev/4627207#file-gif-screencast-osx-md</span><br></pre></td></tr></table></figure></p>\n<p><code>4627207</code>：表示gist_id ，<code>#file-</code>后边内容：表示Gist中某个文件名</p>\n<p>如下:指定文章中嵌入<code>ecba275d5e4404678354</code>中的<code>NSAttributeString相关方法.m</code>内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist ecba275d5e4404678354 NSAttributeString相关方法.m %&#125;</span><br></pre></td></tr></table></figure></p>\n<img title=\"gist需要翻墙\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/gistflag.jpg?imageMogr2/2/w/800\">\n<h2 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h2><hr>\n<p>在文章中插入 iframe。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><hr>\n<h3 id=\"样例-4\"><a href=\"#样例-4\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"Hexo语法\"><a href=\"#Hexo语法\" class=\"headerlink\" title=\"Hexo语法\"></a>Hexo语法</h4><hr>\n<p>在文章中插入指定大小的图片。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MD语法\"><a href=\"#MD语法\" class=\"headerlink\" title=\"MD语法\"></a>MD语法</h4><hr>\n<h5 id=\"原图-toolTip\"><a href=\"#原图-toolTip\" class=\"headerlink\" title=\"原图+toolTip\"></a>原图+toolTip</h5><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo](http://boyers.coding.me/img/logo.png &quot;这是我的logo图片&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://boyers.coding.me/img/logo.png\" alt=\"boyer logo\" title=\"这是我的logo图片\"></p>\n<h5 id=\"注脚语法\"><a href=\"#注脚语法\" class=\"headerlink\" title=\"注脚语法\"></a>注脚语法</h5><hr>\n<p>可以在稍後的文件中再定义图片地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo][logo]</span><br><span class=\"line\">[logo]: http://boyers.coding.me/img/logo.png  &quot;这是我的logo图片&quot;</span><br></pre></td></tr></table></figure></p>\n<p>![boyer logo][logo]<br>[logo]: <a href=\"http://boyers.coding.me/img/logo.png\" target=\"_blank\" rel=\"noopener\">http://boyers.coding.me/img/logo.png</a>  “这是我的logo图片”</p>\n<h5 id=\"指定图片大小\"><a href=\"#指定图片大小\" class=\"headerlink\" title=\"指定图片大小\"></a>指定图片大小</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![boyer logo](http://boyers.coding.me/img/logo.png [200] [200] &quot;这是我的logo图片&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://boyers.coding.me/img/logo.png [200] [200]\" alt=\"boyer logo\" title=\"这是我的logo图片\"></p>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><hr>\n<h3 id=\"样例-5\"><a href=\"#样例-5\" class=\"headerlink\" title=\"样例\"></a>样例</h3><hr>\n<h4 id=\"Hexo语法-1\"><a href=\"#Hexo语法-1\" class=\"headerlink\" title=\"Hexo语法\"></a>Hexo语法</h4><hr>\n<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MD语法-1\"><a href=\"#MD语法-1\" class=\"headerlink\" title=\"MD语法\"></a>MD语法</h4><hr>\n<h5 id=\"智能识别超链接\"><a href=\"#智能识别超链接\" class=\"headerlink\" title=\"智能识别超链接\"></a>智能识别超链接</h5><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://boyers.coding.me</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" target=\"_blank\" rel=\"noopener\">http://boyers.coding.me</a></p>\n<h5 id=\"文本式\"><a href=\"#文本式\" class=\"headerlink\" title=\"文本式\"></a>文本式</h5><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">boyer Blog</span>](<span class=\"link\">http://boyers.coding.me</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" target=\"_blank\" rel=\"noopener\">boyer Blog</a></p>\n<h5 id=\"toolTip式\"><a href=\"#toolTip式\" class=\"headerlink\" title=\"toolTip式\"></a>toolTip式</h5><hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">boyer Blog</span>](<span class=\"link\">http://boyers.coding.me \"这是我的博客首页\"</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://boyers.coding.me\" title=\"这是我的博客首页\" target=\"_blank\" rel=\"noopener\">boyer Blog</a></p>\n<h2 id=\"Include-Code\"><a href=\"#Include-Code\" class=\"headerlink\" title=\"Include Code\"></a>Include Code</h2><hr>\n<p>插入 source 文件夹内的代码文件(.m/json/xml等)。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include_code [title] [lang:language] path/to/file %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h2><hr>\n<p>在文章中插入 Youtube 视频。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Vimeo\"><a href=\"#Vimeo\" class=\"headerlink\" title=\"Vimeo\"></a>Vimeo</h2><hr>\n<p>在文章中插入 Vimeo 视频。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"引用文章\"><a href=\"#引用文章\" class=\"headerlink\" title=\"引用文章\"></a>引用文章</h2><hr>\n<p>根据服务器根目录分为两种方式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path slug %&#125;</span><br><span class=\"line\">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以<code>Docker使用</code>博客为例</p>\n<ol>\n<li><p>相对路径</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path Docker使用 %&#125;</span><br></pre></td></tr></table></figure>\n<p> 相对于服务器根目录的位置：</p>\n /2016/12/22/Docker使用/</li>\n<li><p>绝对路径</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_link Docker使用 Docker使用 %&#125;</span><br></pre></td></tr></table></figure>\n<p> 本博中其他文章的超链接：</p>\n <a href=\"/2016/12/22/Docker使用/\" title=\"Docker使用\">Docker使用</a>\n</li>\n</ol>\n<h2 id=\"引用资源\"><a href=\"#引用资源\" class=\"headerlink\" title=\"引用资源\"></a>引用资源</h2><hr>\n<p>引用文章的资源。<br>Assets指的是那些不在source目录下的资源，比如图片、CSS文件或者Javascript文件。Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改 post_asset_folder 字段的设置，将其值改为 true 。<br>当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。<br>使用方法就是上面介绍过的标签插件。<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Raw\"><a href=\"#Raw\" class=\"headerlink\" title=\"Raw\"></a>Raw</h2><hr>\n<p>一些内容不想被主题渲染，可以使用该插件呈现原始状态。<br>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"Kindle114 资源集[转]","slug":"Kindle资源","date":"2017-01-23T12:49:49.000Z","updated":"2017-01-23T17:34:23.000Z","comments":true,"path":"api/articles/Kindle资源.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h2><ul>\n<li><a href=\"http://www.hi-pda.com/forum/viewthread.php?tid=1815180\" target=\"_blank\" rel=\"noopener\">hi-pda dtgc</a></li>\n<li><a href=\"http://kindle115.com\" target=\"_blank\" rel=\"noopener\">Kindle115</a></li>\n</ul>\n<h2 id=\"综合类\"><a href=\"#综合类\" class=\"headerlink\" title=\"综合类\"></a>综合类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2050031688#category/type=0\" target=\"_blank\" rel=\"noopener\">青风乘翼 最近出版的译著</a> 更新中</li>\n<li><a href=\"http://pan.baidu.com/s/1qWRYl1i\" target=\"_blank\" rel=\"noopener\">周旋久 按字母排列的书籍</a> 提取码：djhp</li>\n</ol>\n<ul>\n<li><a href=\"http://f92a01.l45.yunpan.cn/lk/cxvBQv5ymqCMY\" target=\"_blank\" rel=\"noopener\">F、H、J、R字母</a> 提取码 39bd  </li>\n<li><a href=\"http://f93be8.l45.yunpan.cn/lk/cxvB6neaCmfGL\" target=\"_blank\" rel=\"noopener\">S、T、Y字母</a> 提取码 42b1</li>\n</ul>\n<ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1848670581&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">烫伤关东煮</a> 约1t以上 20160302更新</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2724752809#category/type=0\" target=\"_blank\" rel=\"noopener\">18810815415 精排版书籍</a> （可能是豆瓣读书编辑）</li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=1194297961&amp;shareid=256546\" target=\"_blank\" rel=\"noopener\">liantingv70657</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3728907970&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">炜博happy</a> 更新中</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1365179281&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">guyuemuziye6@gmail.com 旅游原版书</a> （微博号逼影共享，解压密码bygx）</li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=4029256032&amp;shareid=139939577\" target=\"_blank\" rel=\"noopener\">枫729882492</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=439872812&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">电子书资源外链发布站</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1293124599#category/type=0\" target=\"_blank\" rel=\"noopener\">赤霓</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=4278581020#category/type=0\" target=\"_blank\" rel=\"noopener\">nnuuij11111</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1282872761&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">风扒皮1503</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=4211477728&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">zphstar</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1261210236#category/type=0\" target=\"_blank\" rel=\"noopener\">skmjtptwr</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1093619523&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">327995970ou</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1057298937&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">xunys</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1946547680#category/type=0\" target=\"_blank\" rel=\"noopener\">ohhe</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=490155926#category/type=0\" target=\"_blank\" rel=\"noopener\">没我找不到的电子书</a> （此人吹牛居多，书籍不全）</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1426398717&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">搜珍玉鏡</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=959117889&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">菜是菜菜</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=775816440&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">13805758171</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=842217715&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">yun360419811</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1512823434&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">虚昧斋</a> 分享新书 可私信求书</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3324179911#category/type=0\" target=\"_blank\" rel=\"noopener\">唯我君行 中医、VB</a></li>\n<li><a href=\"https://pan.baidu.com/share/home?uk=2603616653\" target=\"_blank\" rel=\"noopener\">haoyou43 mobi epub 格式书籍 350+</a> 更新中</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2063855134#category/type=0\" target=\"_blank\" rel=\"noopener\">liguobing55 txt合集</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=4097060373&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">青辰VOW  部分全站打包等</a></li>\n<li>苏菇莨百度盘书（BTSync） 约56G 至20160222关闭前 感谢：maldiniymx</li>\n</ol>\n<ul>\n<li>B3EWLQK7C6O6RK3CU5CG3PZUYDUJLMYCP</li>\n<li>B25G263OSC7ZAXPLCZESSL3DFJOHK6UQ3</li>\n</ul>\n<ol>\n<li><a href=\"https://mega.nz/#F!nJ8GFJAQ!K5Nw2HF1cMXMGNbYQ7RggQ\" target=\"_blank\" rel=\"noopener\">wizardforcel 杂项书籍</a></li>\n<li><a href=\"http://pan.baidu.com/s/1lKIiq\" target=\"_blank\" rel=\"noopener\">豆瓣图书top250</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=1459936824&amp;shareid=3702424259\" target=\"_blank\" rel=\"noopener\">当当epub7000本</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?shareid=1080906058&amp;uk=1412470983\" target=\"_blank\" rel=\"noopener\">卡夫卡全集和哈佛管理</a></li>\n<li><a href=\"http://pan.baidu.com/s/1sjLkZ97\" target=\"_blank\" rel=\"noopener\">知乎话题、专栏、收藏</a></li>\n<li><a href=\"http://pan.baidu.com/s/1kT85Zp1\" target=\"_blank\" rel=\"noopener\">知日系列</a></li>\n<li><a href=\"http://pan.baidu.com/s/1eQAereE\" target=\"_blank\" rel=\"noopener\">知乎盐系列</a></li>\n<li><a href=\"http://pan.baidu.com/s/1pJDjOJx\" target=\"_blank\" rel=\"noopener\">图说天下系列</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=754986678&amp;shareid=237392098\" target=\"_blank\" rel=\"noopener\">kindle人资源打包</a> 精品区11G+自购区31G+自制区10G+66G</li>\n<li><a href=\"https://onedrive.live.com/?id=F5B0090663FEEADA%21828&amp;cid=F5B0090663FEEADA\" target=\"_blank\" rel=\"noopener\">programthink</a></li>\n</ol>\n<h2 id=\"文学历史类、社科类\"><a href=\"#文学历史类、社科类\" class=\"headerlink\" title=\"文学历史类、社科类\"></a>文学历史类、社科类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1259438467&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">零度小然 稀有现代书历史籍</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2704770694&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">youngharrylg 中华人民共和国前三十年历史</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1460307841&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">南阳高卧 近现代大家</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3946745677&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">doppel88 各国文学</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=152128425&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">坊書流元 语言学</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1728233671&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">高贵的容克领主 历史</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=3943501741&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">dfdean 文学 名家文集</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2905885322#category/type=0\" target=\"_blank\" rel=\"noopener\">rainthounder 文史高清pdg版图书</a></li>\n<li><a href=\"http://pan.baidu.com/s/1eQqW062\" target=\"_blank\" rel=\"noopener\">翟子昂 中国古文字学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2987157500&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">longhuarenn 历史</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=4111094503#category/type=0\" target=\"_blank\" rel=\"noopener\">Lyra1900</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=805574156&amp;third=0#category/type=0\" target=\"_blank\" rel=\"noopener\">iilikes</a></li>\n</ol>\n<h2 id=\"古籍类\"><a href=\"#古籍类\" class=\"headerlink\" title=\"古籍类\"></a>古籍类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2670973685&amp;view=share\" target=\"_blank\" rel=\"noopener\">Ac_heron 古典文学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=4029740943&amp;view=share\" target=\"_blank\" rel=\"noopener\">dadssfree 大批量文史书籍</a> (约1.3t)</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1896826771&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">qq312145694 古文史资料</a> （大约1t以上）</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=272017959&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">洋风汉魂 日本文史资料原版</a> （大约1t以上）</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=2533729796#category/type=0\" target=\"_blank\" rel=\"noopener\">久舞而凄 精选精美古籍</a> （大约500G以上,更新中）</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=3405888410&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">逍遥449824194 古籍</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=2118390434&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">事无所成只因懒 古籍</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=4211484048&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">钱建文 古籍</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=4066113708#category/type=0\" target=\"_blank\" rel=\"noopener\">风家纪录片3</a></li>\n<li><a href=\"http://pan.baidu.com/s/1os4MQ\" target=\"_blank\" rel=\"noopener\">子乌书简全站打包 20130507</a> 密码：qjq8</li>\n</ol>\n<h2 id=\"小说\"><a href=\"#小说\" class=\"headerlink\" title=\"小说\"></a>小说</h2><ol>\n<li><a href=\"https://mega.nz/#F!jVsinZIT!1Oiz9bkHwNBABc7NU5sSAg\" target=\"_blank\" rel=\"noopener\">wizardforcel 小说</a></li>\n<li><a href=\"http://pan.baidu.com/s/1sjNSRtr\" target=\"_blank\" rel=\"noopener\">莫迪亚诺作品集</a></li>\n<li><a href=\"http://pan.baidu.com/s/1i3uzhbB\" target=\"_blank\" rel=\"noopener\">王小波全集</a></li>\n<li><a href=\"http://pan.baidu.com/s/1qW0q3Kg\" target=\"_blank\" rel=\"noopener\">阿加莎·克里斯蒂作品集</a></li>\n<li><a href=\"http://pan.baidu.com/s/1sjqLbzB\" target=\"_blank\" rel=\"noopener\">周浩晖作品集</a></li>\n</ol>\n<h2 id=\"医学类、心理学类\"><a href=\"#医学类、心理学类\" class=\"headerlink\" title=\"医学类、心理学类\"></a>医学类、心理学类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3711822837&amp;view=share\" target=\"_blank\" rel=\"noopener\">于柏清二 中医</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3527489425&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">bdywuxinghua 中医丛书</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2818809037&amp;view=share\" target=\"_blank\" rel=\"noopener\">yyzsm99 心理学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1225533335&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">异硫氰酸烯丙酯 医学</a></li>\n<li><a href=\"http://pan.baidu.com/s/1pJju6dd#path=%252F%25E4%25BC%259F%25E5%25BA%25B7\" target=\"_blank\" rel=\"noopener\">一蹀盐 呼吸医学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1630489195&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">cnchenlian 康复医学</a></li>\n<li><a href=\"http://pan.baidu.com/s/1gdFHavh#path=%252F%25E4%25B9%25A6\" target=\"_blank\" rel=\"noopener\">Zita 解剖学 图谱</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3221391314#category/type=0\" target=\"_blank\" rel=\"noopener\">LV终结者 制药技术</a> （物化资料夹里）</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=405421905&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">136603yin 性科学为特色 偏综合</a></li>\n<li><a href=\"http://pan.baidu.com/s/17mp8P\" target=\"_blank\" rel=\"noopener\">心理学交际学电子书合集13本</a></li>\n<li><a href=\"http://vdisk.weibo.com/u/1778220897\" target=\"_blank\" rel=\"noopener\">hhhzihao 心理学</a></li>\n</ol>\n<h2 id=\"佛学类\"><a href=\"#佛学类\" class=\"headerlink\" title=\"佛学类\"></a>佛学类</h2><ol>\n<li><a href=\"http://yun.baidu.com/share/home?uk=289392363&amp;third=1&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">CBETA_TW 中華電子佛典協會分享佛教书籍</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=1913113259&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">dufojing 佛教书籍</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=925845574&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">senmy08 佛教书籍</a></li>\n</ol>\n<h2 id=\"数理学科类\"><a href=\"#数理学科类\" class=\"headerlink\" title=\"数理学科类\"></a>数理学科类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1244439600&amp;;view=share\" target=\"_blank\" rel=\"noopener\">小兆一凡 数学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3409070258&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">我就叫混沌</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=1766755481&amp;shareid=2684679400\" target=\"_blank\" rel=\"noopener\">华章数学译丛 百度云</a></li>\n<li><a href=\"http://vdisk.weibo.com/s/B-1mTXGOXIRvY?category_id=0&amp;parents_ref=B-1mTXGOXIRaF\" target=\"_blank\" rel=\"noopener\">华章数学译丛 微盘</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?uk=3191333230&amp;shareid=870418565\" target=\"_blank\" rel=\"noopener\">图灵数学·统计学丛书 百度云</a></li>\n<li><a href=\"http://vdisk.weibo.com/s/B-1mTXGOXIQZJ?category_id=0&amp;parents_ref=B-1mTXGOXIRaF\" target=\"_blank\" rel=\"noopener\">图灵数学·统计学丛书 微盘</a></li>\n</ol>\n<h2 id=\"生物学类（动物、植物、野外生存等）\"><a href=\"#生物学类（动物、植物、野外生存等）\" class=\"headerlink\" title=\"生物学类（动物、植物、野外生存等）\"></a>生物学类（动物、植物、野外生存等）</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2855048701&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">ChentaoTony1 昆虫学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3959509661&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">jkdpgh 野外生存 动物志</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2734991257&amp;third=0#category/type=0\" target=\"_blank\" rel=\"noopener\">麦子 生物学 动物学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3020331843&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">xiayang405 精神病学、细胞生物学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=86518920&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">li__cheng__ 中国植物志、各地区植物志</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=420129823#category/type=0\" target=\"_blank\" rel=\"noopener\">山刺玫 植物学</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=523517449&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">绿色营上海小组 植物学</a></li>\n</ol>\n<h2 id=\"计算机技术类\"><a href=\"#计算机技术类\" class=\"headerlink\" title=\"计算机技术类\"></a>计算机技术类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3339153721&amp;view=share\" target=\"_blank\" rel=\"noopener\">lxghost IT</a> （xiaoshuwu.net）</li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1074173238&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">wintelsui IT</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=3809969834&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">明月无风</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1832385835#category/type=0\" target=\"_blank\" rel=\"noopener\">耍大刀xyz PS书籍</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1176304088#category/type=0\" target=\"_blank\" rel=\"noopener\">hcbbt IT</a></li>\n<li><a href=\"http://pan.baidu.com/share/link?shareid=2981703177&amp;uk=2214641459\" target=\"_blank\" rel=\"noopener\">salttiger IT</a></li>\n<li><a href=\"https://mega.nz/#F!qQUwUTKR!okYrzPOauVIaFj4GNSRZfA\" target=\"_blank\" rel=\"noopener\">wizardforcel IT</a></li>\n</ol>\n<h2 id=\"非IT工业技术类\"><a href=\"#非IT工业技术类\" class=\"headerlink\" title=\"非IT工业技术类\"></a>非IT工业技术类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2437672157#category/type=0\" target=\"_blank\" rel=\"noopener\">南航飞动研学群 航空航天</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2702990868&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">星河舰队司令 武器</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=35826880&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">wxjoldgoat 武器</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2349638677#category/type=0\" target=\"_blank\" rel=\"noopener\">cfhcjg 军事资料</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1611109307#category/type=0\" target=\"_blank\" rel=\"noopener\">以逸待劳hk 航天资料</a></li>\n</ol>\n<h2 id=\"语言学习类\"><a href=\"#语言学习类\" class=\"headerlink\" title=\"语言学习类\"></a>语言学习类</h2><ol>\n<li><a href=\"https://pan.baidu.com/share/home?uk=3394258028&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">学派英语团队 英语学习</a></li>\n<li><a href=\"http://pan.baidu.com/s/1sjugDQ1\" target=\"_blank\" rel=\"noopener\">英语学习资料</a></li>\n</ol>\n<h2 id=\"经管\"><a href=\"#经管\" class=\"headerlink\" title=\"经管\"></a>经管</h2><ol>\n<li><a href=\"http://vdisk.weibo.com/u/5340187825\" target=\"_blank\" rel=\"noopener\">商业类电子书</a></li>\n</ol>\n<h2 id=\"艺术类-（摄影、音乐、绘画等）\"><a href=\"#艺术类-（摄影、音乐、绘画等）\" class=\"headerlink\" title=\"艺术类 （摄影、音乐、绘画等）\"></a>艺术类 （摄影、音乐、绘画等）</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2755480552&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">吸血鬼123牛仔 音乐</a></li>\n<li><a href=\"http://pan.baidu.com/share/home?uk=674298946#category/type=0\" target=\"_blank\" rel=\"noopener\">xslp2004 摄影</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=2738239597&amp;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">yu鈥唋ei 中国绘画</a> 新浪微博@于双子鱼 分享私密文件</li>\n</ol>\n<h2 id=\"杂志类\"><a href=\"#杂志类\" class=\"headerlink\" title=\"杂志类\"></a>杂志类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=2332146839&amp;view=share\" target=\"_blank\" rel=\"noopener\">qingge16 杂志</a> （含部分最新书）</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=2737417622#category/type=0\" target=\"_blank\" rel=\"noopener\">yanxishe 杂志</a></li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=3156696063&amp;;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">liuafenliu 台湾地区优质财经杂志（天下雜誌/遠見雜誌/商業周刊/經理人月刊）</a> 更新中</li>\n<li><a href=\"http://yun.baidu.com/share/home?uk=3859261705&amp;;view=share#category/type=0\" target=\"_blank\" rel=\"noopener\">foodservice 台湾地区优质财经杂志（天下雜誌/遠見雜誌/商業周刊/經理人月刊）</a> 似乎是台湾地区人 更新到201410</li>\n</ol>\n<h2 id=\"原版书类\"><a href=\"#原版书类\" class=\"headerlink\" title=\"原版书类\"></a>原版书类</h2><ol>\n<li><a href=\"http://pan.baidu.com/share/home?uk=1563658231&amp;view=share\" target=\"_blank\" rel=\"noopener\">好想一次过 原版外文书</a></li>\n<li><a href=\"http://pan.baidu.com/s/1i39TawH\" target=\"_blank\" rel=\"noopener\">12879本Kindle英文原版电子书</a></li>\n<li><a href=\"http://pan.baidu.com/s/1gdELWgN\" target=\"_blank\" rel=\"noopener\">经典、畅销英文原著100本</a></li>\n</ol>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li><a href=\"http://bestcbooks.com/\" target=\"_blank\" rel=\"noopener\">计算机书籍控</a></li>\n<li><a href=\"http://www.jb51.net/books/\" target=\"_blank\" rel=\"noopener\">脚本之家电子书</a></li>\n<li><a href=\"http://www.xiaoshuwu.net/\" target=\"_blank\" rel=\"noopener\">小书屋</a></li>\n<li><a href=\"http://www.ckook.com/\" target=\"_blank\" rel=\"noopener\">稀酷客</a></li>\n<li><a href=\"http://readcolor.com/books?tag=%E8%AE%A1%E7%AE%97%E6%9C%BA\" target=\"_blank\" rel=\"noopener\">读远</a></li>\n<li><a href=\"http://www.salttiger.com/\" target=\"_blank\" rel=\"noopener\">SaltTiger</a></li>\n<li><a href=\"http://it-ebooks.cn/\" target=\"_blank\" rel=\"noopener\">it-ebooks.cn</a></li>\n<li><a href=\"http://it-ebooks.info/\" target=\"_blank\" rel=\"noopener\">it-ebooks.info</a></li>\n<li><a href=\"http://it-ebooks.org/\" target=\"_blank\" rel=\"noopener\">it-ebooks.org</a></li>\n<li><a href=\"http://it-ebooks.com/\" target=\"_blank\" rel=\"noopener\">it-ebooks.com</a></li>\n<li><a href=\"http://ebooks-it.net/\" target=\"_blank\" rel=\"noopener\">ebooks-it.net</a></li>\n<li><a href=\"http://wowebook.org/\" target=\"_blank\" rel=\"noopener\">wowebook.org</a></li>\n<li><a href=\"http://bookdl.com/\" target=\"_blank\" rel=\"noopener\">bookdl.com</a></li>\n<li><a href=\"http://bookzz.org/\" target=\"_blank\" rel=\"noopener\">bookzz.org</a></li>\n<li><a href=\"http://www.allitebooks.com/\" target=\"_blank\" rel=\"noopener\">allitebooks.com</a></li>\n</ol>\n","raw":null,"categories":[{"name":"资源","path":"api/categories/资源.json"}],"tags":[{"name":"资源","path":"api/tags/资源.json"},{"name":"kindle","path":"api/tags/kindle.json"},{"name":"书籍","path":"api/tags/书籍.json"}]}]}