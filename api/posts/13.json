{"total":157,"pageSize":10,"pageCount":16,"data":[{"title":"hackmd使用","slug":"hexo/hackmd使用","date":"2016-12-21T10:49:32.000Z","updated":"2017-09-23T17:28:44.000Z","comments":true,"path":"api/articles/hexo/hackmd使用.json","excerpt":null,"keywords":null,"cover":"https://octodex.github.com/images/minion.png","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"編輯\"><a href=\"#編輯\" class=\"headerlink\" title=\"編輯\"></a>編輯</h1><h2 id=\"快速鍵\"><a href=\"#快速鍵\" class=\"headerlink\" title=\"快速鍵\"></a>快速鍵</h2><p>跟又快又方便的Sublime text很像</p>\n<blockquote>\n<p>更多訊息請至 <a href=\"https://codemirror.net/demo/sublime.html\" target=\"_blank\" rel=\"noopener\">這裡</a></p>\n</blockquote>\n<h2 id=\"自動完成\"><a href=\"#自動完成\" class=\"headerlink\" title=\"自動完成\"></a>自動完成</h2><p>提供完整的 Markdown 自動完成與提示</p>\n<ul>\n<li>表情符號：輸入 <code>:</code> 顯示提示</li>\n<li>程式碼區塊：輸入 <code>3个</code> ` 加上一個字元 顯示提示 </li>\n<li>標頭：輸入 <code>#</code> 顯示提示</li>\n<li>參考：輸入 <code>[]</code> 顯示提示</li>\n<li>外部：輸入 <code>{}</code> 顯示提示</li>\n<li>圖片：輸入 <code>!</code> 顯示提示</li>\n</ul>\n<h2 id=\"標題\"><a href=\"#標題\" class=\"headerlink\" title=\"標題\"></a>標題</h2><p>會使用 <strong>第一個第一級標頭</strong> 作為筆記標題</p>\n<h2 id=\"標籤\"><a href=\"#標籤\" class=\"headerlink\" title=\"標籤\"></a>標籤</h2><p>如同以下方式來使用標籤，它們會顯示在您的 <strong>歷史紀錄</strong></p>\n<h6 id=\"tags-功能-酷-更新\"><a href=\"#tags-功能-酷-更新\" class=\"headerlink\" title=\"tags: 功能 酷 更新\"></a>tags: <code>功能</code> <code>酷</code> <code>更新</code></h6><h2 id=\"YAML-metadata\"><a href=\"#YAML-metadata\" class=\"headerlink\" title=\"YAML metadata\"></a><a href=\"./yaml-metadata\">YAML metadata</a></h2><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結</p>\n<ul>\n<li>robots: 設定網路機器人 meta</li>\n<li>lang: 設定瀏覽器顯示語言</li>\n<li>dir: 設定文字方向</li>\n<li>breaks: 設定是否使用分行</li>\n<li>mathjax: 設定是否使用 mathjax</li>\n</ul>\n<h2 id=\"表情符號\"><a href=\"#表情符號\" class=\"headerlink\" title=\"表情符號\"></a>表情符號</h2><p>您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:</p>\n<blockquote>\n<p>完整的表情符號列表 <a href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"noopener\">在這裡</a></p>\n</blockquote>\n<h2 id=\"待辦清單\"><a href=\"#待辦清單\" class=\"headerlink\" title=\"待辦清單\"></a>待辦清單</h2><ul>\n<li>[ ] 待辦<ul>\n<li>[x] 買些沙拉</li>\n<li>[x] 刷牙</li>\n<li>[ ] 喝水<a id=\"more\"></a>\n<h2 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h2>我們支援非常多程式語言，使用自動完成來看看有些什麼<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$initHighlight</span>(<span class=\"params\">block, cls</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls.search(<span class=\"regexp\">/\\bno\\-highlight\\b/</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> process(block, <span class=\"literal\">true</span>, <span class=\"number\">0x0F</span>) + </span><br><span class=\"line\">             <span class=\"string\">' class=\"\"'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* handle exception */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> / <span class=\"number\">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkCondition(classes[i]) === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/\\d+[\\s/]/g</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果想要 <strong>行號</strong>，在表明程式語言之後輸入 <code>=</code><br>您也可以指定開始行號，如下所示，行號從101開始</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$initHighlight</span>(<span class=\"params\">block, cls</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls.search(<span class=\"regexp\">/\\bno\\-highlight\\b/</span>) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> process(block, <span class=\"literal\">true</span>, <span class=\"number\">0x0F</span>) + </span><br><span class=\"line\">             <span class=\"string\">' class=\"\"'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* handle exception */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> / <span class=\"number\">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checkCondition(classes[i]) === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/\\d+[\\s/]/g</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"JavaScript syntax highlighting\"</span>;</span><br><span class=\"line\">alert(s);</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用區塊標籤\"><a href=\"#引用區塊標籤\" class=\"headerlink\" title=\"引用區塊標籤\"></a>引用區塊標籤</h2><blockquote>\n<p>您可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7]</p>\n<blockquote>\n<p>也支援巢狀引用區塊喔！<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red]</p>\n</blockquote>\n</blockquote>\n<h2 id=\"外部\"><a href=\"#外部\" class=\"headerlink\" title=\"外部\"></a>外部</h2><h3 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h3><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/1G4isv_Fylg\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Vimeo\"><a href=\"#Vimeo\" class=\"headerlink\" title=\"Vimeo\"></a>Vimeo</h3><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/124148255\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Gist\"><a href=\"#Gist\" class=\"headerlink\" title=\"Gist\"></a>Gist</h3><script src=\"//gist.github.com/schacon/4277.js\"></script>\n<h3 id=\"SlideShare\"><a href=\"#SlideShare\" class=\"headerlink\" title=\"SlideShare\"></a>SlideShare</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%slideshare briansolis/<span class=\"number\">26</span>-disruptive-technology-trends<span class=\"number\">-2016</span><span class=\"number\">-2018</span><span class=\"number\">-56796196</span> %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Speakerdeck\"><a href=\"#Speakerdeck\" class=\"headerlink\" title=\"Speakerdeck\"></a>Speakerdeck</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h3><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%pdf https:<span class=\"comment\">//papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf %&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"MathJax\"><a href=\"#MathJax\" class=\"headerlink\" title=\"MathJax\"></a>MathJax</h2><p>您可以使用 <strong>MathJax</strong> 語法 來產生 <em>LaTeX</em> 數學表達式，如同 <a href=\"http://math.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">math.stackexchange.com</a>：</p>\n<p>The <em>Gamma function</em> satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral</p>\n<p>$$<br>x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.<br>$$</p>\n<p>$$<br>\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.<br>$$</p>\n<blockquote>\n<p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">請至這裡</a></p>\n</blockquote>\n<h2 id=\"UML-圖表\"><a href=\"#UML-圖表\" class=\"headerlink\" title=\"UML 圖表\"></a>UML 圖表</h2><h3 id=\"循序圖\"><a href=\"#循序圖\" class=\"headerlink\" title=\"循序圖\"></a>循序圖</h3><p>您可以像是以下使用循序圖：</p>\n<div id=\"sequence-0\"></div>\n\n<h3 id=\"流程圖\"><a href=\"#流程圖\" class=\"headerlink\" title=\"流程圖\"></a>流程圖</h3><p>您可以像是以下使用流程圖：</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<h3 id=\"Graphviz\"><a href=\"#Graphviz\" class=\"headerlink\" title=\"Graphviz\"></a>Graphviz</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125;</span><br><span class=\"line\">                Deputy1-&gt;&#123;Teacher1 Teacher2&#125;</span><br><span class=\"line\">                BusinessManager-&gt;ITManager</span><br><span class=\"line\">                &#123;rank=same;ITManager Teacher1 Teacher2&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mermaid\"><a href=\"#Mermaid\" class=\"headerlink\" title=\"Mermaid\"></a>Mermaid</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">    title A Gantt Diagram</span><br><span class=\"line\"></span><br><span class=\"line\">    section Section</span><br><span class=\"line\">    A task           :a1, 2014-01-01, 30d</span><br><span class=\"line\">    Another task     :after a1  , 20d</span><br><span class=\"line\">    section Another</span><br><span class=\"line\">    Task in sec      :2014-01-12  , 12d</span><br><span class=\"line\">    anther task      : 24d</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多關於 <strong>循序圖</strong> 語法 <a href=\"http://bramp.github.io/js-sequence-diagrams/\" target=\"_blank\" rel=\"noopener\">在這裡</a>.<br>更多關於 <strong>流程圖</strong> 語法 <a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"noopener\">在這裡</a>.<br>更多關於 <strong>Graphviz</strong> 語法 <a href=\"http://www.tonyballantyne.com/graphs.html\" target=\"_blank\" rel=\"noopener\">在這裡</a><br>更多關於 <strong>Mermaid</strong> 語法 <a href=\"http://knsv.github.io/mermaid\" target=\"_blank\" rel=\"noopener\">在這裡</a></p>\n</blockquote>\n<h2 id=\"警告區塊\"><a href=\"#警告區塊\" class=\"headerlink\" title=\"警告區塊\"></a>警告區塊</h2><p>:::success<br>耶 :tada:<br>:::</p>\n<p>:::info<br>這是訊息 :mega:<br>:::</p>\n<p>:::warning<br>注意 :zap:<br>:::</p>\n<p>:::danger<br>喔不 :fire:<br>:::</p>\n<h2 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h2><h3 id=\"標頭\"><a href=\"#標頭\" class=\"headerlink\" title=\"標頭\"></a>標頭</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># h1 標頭</span><br><span class=\"line\">## h2 標頭</span><br><span class=\"line\">### h3 標頭</span><br><span class=\"line\">#### h4 標頭</span><br><span class=\"line\">##### h5 標頭</span><br><span class=\"line\">###### h6 標頭</span><br></pre></td></tr></table></figure>\n<h3 id=\"水平分隔線\"><a href=\"#水平分隔線\" class=\"headerlink\" title=\"水平分隔線\"></a>水平分隔線</h3><hr>\n<hr>\n<hr>\n<h3 id=\"字形替換\"><a href=\"#字形替換\" class=\"headerlink\" title=\"字形替換\"></a>字形替換</h3><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>\n<p>測試.. 測試… 測試….. 測試?….. 測試!….</p>\n<p>!!!!!! ???? ,,</p>\n<p>Remarkable – awesome</p>\n<p>“Smartypants, 雙引號”</p>\n<p>‘Smartypants, 單引號’</p>\n<h3 id=\"強調\"><a href=\"#強調\" class=\"headerlink\" title=\"強調\"></a>強調</h3><p><strong>這是粗體文字</strong></p>\n<p><strong>這是粗體文字</strong></p>\n<p><em>這是斜體文字</em></p>\n<p><em>這是斜體文字</em></p>\n<p><del>這是刪除文字</del></p>\n<p>上標： 19^th^</p>\n<p>下標： H~2~O</p>\n<p>++這是底線文字++</p>\n<p>==這是標記文字==</p>\n<h3 id=\"引用區塊\"><a href=\"#引用區塊\" class=\"headerlink\" title=\"引用區塊\"></a>引用區塊</h3><blockquote>\n<p>引用區塊也可以是巢狀的喔…</p>\n<blockquote>\n<p>…可以多層次的使用…</p>\n<blockquote>\n<p>…或是用空白隔開 </p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"清單\"><a href=\"#清單\" class=\"headerlink\" title=\"清單\"></a>清單</h3><h4 id=\"項目\"><a href=\"#項目\" class=\"headerlink\" title=\"項目\"></a>項目</h4><ul>\n<li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li>\n<li>空兩個空白就可以產生子清單<ul>\n<li>當清單標記使用的字元不同，會強制建立新的清單<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非常簡單！</li>\n</ul>\n<h4 id=\"編號\"><a href=\"#編號\" class=\"headerlink\" title=\"編號\"></a>編號</h4><ol>\n<li>Lorem ipsum dolor sit amet</li>\n<li>Consectetur adipiscing elit</li>\n<li>Integer molestie lorem at massa</li>\n</ol>\n<ol>\n<li>您可以逐次增加項目數字…</li>\n<li>…或是全部都使用 <code>1.</code></li>\n<li>feafw</li>\n<li>332</li>\n<li>242</li>\n<li>2552</li>\n<li>e2</li>\n</ol>\n<p>從其他範圍開始編號清單</p>\n<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p>行內 <code>程式碼</code></p>\n<p>縮排程式碼</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre><p>程式碼區塊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sample text here...</span><br></pre></td></tr></table></figure>\n<p>語法標色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar++;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th>選項</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>向右對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">選項</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>向左對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">選項</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">engine</td>\n<td style=\"text-align:left\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ext</td>\n<td style=\"text-align:left\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>置中對齊</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">選項</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">data</td>\n<td style=\"text-align:center\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">engine</td>\n<td style=\"text-align:center\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ext</td>\n<td style=\"text-align:center\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"連結\"><a href=\"#連結\" class=\"headerlink\" title=\"連結\"></a>連結</h3><p><a href=\"http://dev.nodeca.com\" target=\"_blank\" rel=\"noopener\">連結文字</a><br><a href=\"http://nodeca.github.io/pica/demo/\" title=\"標題文字！\" target=\"_blank\" rel=\"noopener\">加上標題的連結文字</a><br>自動轉換連結 <a href=\"https://github.com/nodeca/pica\" target=\"_blank\" rel=\"noopener\">https://github.com/nodeca/pica</a></p>\n<h3 id=\"圖片\"><a href=\"#圖片\" class=\"headerlink\" title=\"圖片\"></a>圖片</h3><p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\"><br><img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"><br>如同連結一般，圖片也可以用註腳語法<br><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"><br>使用參考，可以在稍後的文件中再定義圖片網址</p>\n<p><img src=\"https://octodex.github.com/images/minion.png =200x200\" alt=\"Minion\"><br>使用指定的大小顯示圖片</p>\n<h3 id=\"註腳\"><a href=\"#註腳\" class=\"headerlink\" title=\"註腳\"></a>註腳</h3><p>註腳 1 連結[^first].<br>註腳 2 連結[^second].<br>行內註腳^[行內註腳的文字] 定義<br>重複的註腳參考[^second].</p>\n<p>[^first]: 註腳 <strong>也可以標記</strong><br>    還可以有很多段落<br>[^second]: 註腳 文字</p>\n<h3 id=\"定義清單\"><a href=\"#定義清單\" class=\"headerlink\" title=\"定義清單\"></a>定義清單</h3><p>名詞 1</p>\n<p>:   定義 1 快速連續項目</p>\n<p>名詞 2 加上 <em>行內標記</em></p>\n<p>:   定義 2</p>\n<pre><code>    { 這些程式碼屬於 定義 2 的一部分 }\n\n定義 2 的第三段落\n</code></pre><p><em>緊密樣式：</em></p>\n<p>名詞 1<br>  ~ 定義 1</p>\n<p>名詞 2<br>  ~ 定義 2a<br>  ~ 定義 2b</p>\n<h3 id=\"縮寫\"><a href=\"#縮寫\" class=\"headerlink\" title=\"縮寫\"></a>縮寫</h3><p>這是 HTML 的縮寫範例<br>它會轉換 “HTML”，但是縮寫旁邊其他的部分，例如：”xxxHTMLyyy”，不受影響</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: 開始\ne=>end: 結束\nop=>operation: 我的操作\nop2=>operation: 啦啦啦\ncond=>condition: 是或否？\n\nst->op->op2->cond\ncond(yes)->e\ncond(no)->op2</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">艾莉絲->包柏: 哈摟，你好嗎？\nNote right of 包柏: 包柏思考中\n包柏-->艾莉絲: 我很好，謝謝！\nNote left of 艾莉絲: 艾莉絲回應\n艾莉絲->包柏: 最近過得怎樣？</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"Hexo-hello-world","slug":"hexo/Hexo-hello-world","date":"2016-12-20T18:02:13.000Z","updated":"2017-09-23T17:28:44.000Z","comments":true,"path":"api/articles/hexo/Hexo-hello-world.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>安装 <code>Node.js</code> 的最佳方式是使用 <code>nvm</code>,或者您也可以下载 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">node.js安装包</a>来安装。</p>\n<ol>\n<li>安装<code>nvm</code><br>方式一：cURL命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>方式二：Wget命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install stable</span><br></pre></td></tr></table></figure>\n<ol>\n<li>更新npm命令工具至最新版本<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>为了便于在多台电脑上部署博客，可以使用使用git版本库来管理个人博客的内容：<br>具体部署过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://xxxxx/boyer.git boyer</span><br><span class=\"line\">cd boyer</span><br><span class=\"line\">npm install  #安装package.json是插件包，使用git管理更加便于管理安装的完整性。</span><br></pre></td></tr></table></figure></p>\n<p>新建完成后，指定文件夹的目录如下：<br>    .<br>    ├── _config.yml     # 网站的 配置 信息，您可以在此配置大部分的参数。<br>    ├── package.json    # 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装。<br>    ├── scaffolds       # 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>    ├── source<br>    |   ├── _drafts<br>    |   └── _posts<br>    └── themes</p>\n<ol>\n<li><p>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n</li>\n<li><p>source<br>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>\n</li>\n<li>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</li>\n</ol>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new draft <span class=\"string\">\"草稿名\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish <span class=\"string\">\"草稿名\"</span>  <span class=\"comment\">#Moves a draft post from _drafts to _posts folder.</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>在我们开始之前,你必须在 <code>_config.yml</code> 修改设置。一个有效的部署设置必须有 <code>type</code> 字段。例如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br></pre></td></tr></table></figure></p>\n<p>你可用同时部署到多个type，Hexo将依次执行每个部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    - <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">      repo:</span><br><span class=\"line\">    - <span class=\"built_in\">type</span>: heroku</span><br><span class=\"line\">      repo:</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><h4 id=\"安装同步到git-插件\"><a href=\"#安装同步到git-插件\" class=\"headerlink\" title=\"安装同步到git 插件\"></a>安装同步到git 插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>编辑<code>_config.yml</code>设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装生成RSS支持插件\"><a href=\"#安装生成RSS支持插件\" class=\"headerlink\" title=\"安装生成RSS支持插件\"></a>安装生成RSS支持插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install  hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>编辑<code>_config.yml</code>设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">    path: atom.xml</span><br><span class=\"line\">    <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\">    hub:</span><br></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","raw":null,"categories":[{"name":"hexo","path":"api/categories/hexo.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"微信小程序开发(一)","slug":"微信小程序开发-一","date":"2016-12-19T22:59:10.000Z","updated":"2017-05-26T18:13:13.000Z","comments":true,"path":"api/articles/微信小程序开发-一.json","excerpt":null,"keywords":null,"cover":"https://mp.weixin.qq.com/debug/wxadoc/dev/image/start_result.png?t=20161122","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>我们需要通过<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=20161122\" target=\"_blank\" rel=\"noopener\">开发者工具</a>，来完成小程序创建和代码编辑。</p>\n<p>开发者工具安装完成后，打开并使用微信扫码登录。选择创建“项目”，填入上文获取到的 AppID ，设置一个本地项目的名称（非小程序名称），比如“我的第一个项目”，并选择一个本地的文件夹作为代码存储的目录，点击“新建项目”就可以了。</p>\n<p>为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择“是”，开发者工具会帮助我们在开发目录里生成一个简单的 demo。</p>\n<p>项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在“编辑”里可以查看和编辑我们的代码，在“调试”里可以测试代码并模拟小程序在微信客户端效果，在“项目”里可以发送到手机里预览实际效果。</p>\n<h3 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h3><p>点击开发者工具左侧导航的“编辑”，看到这个项目文件结构。</p>\n<p>三个必不可少的<code>app.js、app.json、app.wxss</code>:</p>\n<ul>\n<li><code>.js</code>后缀的是脚本文件</li>\n<li><code>.json</code>后缀的文件是配置文件</li>\n<li><code>.wxss</code>后缀的是样式表文件</li>\n</ul>\n<p>微信小程序会读取这些文件，并生成小程序实例。<br><a id=\"more\"></a></p>\n<h4 id=\"app-js脚本代码\"><a href=\"#app-js脚本代码\" class=\"headerlink\" title=\"app.js脚本代码\"></a>app.js脚本代码</h4><p>app.json 是对整个小程序的全局配置。 可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。</p>\n<blockquote>\n<p>调用框架提供的丰富的 API，如本例的同步存储及同步读取本地数据。想了解更多可用 API，可参考 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/?t=20161122\" target=\"_blank\" rel=\"noopener\">API 文档</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app.js</span></span><br><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用API从本地缓存中获取数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> logs = wx.getStorageSync(<span class=\"string\">'logs'</span>) || []</span><br><span class=\"line\">    logs.unshift(<span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">    wx.setStorageSync(<span class=\"string\">'logs'</span>, logs)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getUserInfo:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.globalData.userInfo)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(<span class=\"keyword\">this</span>.globalData.userInfo)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//调用登录接口</span></span><br><span class=\"line\">      wx.login(&#123;</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          wx.getUserInfo(&#123;</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">              that.globalData.userInfo = res.userInfo;</span><br><span class=\"line\">              <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(that.globalData.userInfo)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  globalData:&#123;</span><br><span class=\"line\">    userInfo:<span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"app-json-全局配置\"><a href=\"#app-json-全局配置\" class=\"headerlink\" title=\"app.json 全局配置\"></a>app.json 全局配置</h4><p>可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口\b背景色，配置导航条样式，配置默认标题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">    <span class=\"string\">\"pages/index/index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pages/logs/logs\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"window\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"backgroundTextStyle\"</span>:<span class=\"string\">\"light\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#fff\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"WeChat\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>:<span class=\"string\">\"black\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意该文件不可添加任何注释。更多配置可参考<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=20161122\" target=\"_blank\" rel=\"noopener\">配置详解</a></p>\n</blockquote>\n<h4 id=\"app-wxss-公共样式表\"><a href=\"#app-wxss-公共样式表\" class=\"headerlink\" title=\"app.wxss 公共样式表\"></a>app.wxss 公共样式表</h4><p>我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**app.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">200</span>rpx <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h3><p>在这个教程里，我们有两个页面，index 欢迎页和 logs 小程序启动日志的展示页，他们都在 pages 目录下。</p>\n<p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页。</p>\n<p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成:</p>\n<ul>\n<li>.js后缀的文件是脚本文件</li>\n<li>.json后缀的文件是配置文件（非必须）</li>\n<li>.wxss后缀的是样式表文件（非必须）</li>\n<li>.wxml后缀的文件是页面结构文件  </li>\n</ul>\n<h4 id=\"index-wxml页面结构：\"><a href=\"#index-wxml页面结构：\" class=\"headerlink\" title=\"index.wxml页面结构：\"></a>index.wxml页面结构：</h4><p>使用了<code>&lt;view/&gt;、&lt;image/&gt;、&lt;text/&gt;</code>来搭建页面结构(container)，绑定数据(userInfo)和交互处理函数(bindViewTap)。<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--index.wxml--&gt;</span><br><span class=\"line\">&lt;view class=\"container\"&gt;</span><br><span class=\"line\">  &lt;view  bindtap=\"bindViewTap\" class=\"userinfo\"&gt;</span><br><span class=\"line\"><span class=\"code\">    &lt;image class=\"userinfo-avatar\" src=\"&#123;&#123;userInfo.avatarUrl&#125;&#125;\" background-size=\"cover\"&gt;&lt;/image&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;text class=\"userinfo-nickname\"&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span></span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">  &lt;view class=\"usermotto\"&gt;</span><br><span class=\"line\"><span class=\"code\">    &lt;text class=\"user-motto\"&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</span></span><br><span class=\"line\">  &lt;/view&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"index-js脚本文件\"><a href=\"#index-js脚本文件\" class=\"headerlink\" title=\"index.js脚本文件\"></a>index.js脚本文件</h4><p>在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"comment\">//获取应用实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = getApp()</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    motto: <span class=\"string\">'Hello World'</span>,</span><br><span class=\"line\">    userInfo: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//事件处理函数</span></span><br><span class=\"line\">  bindViewTap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    wx.navigateTo(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'../logs/logs'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'onLoad'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">//调用应用实例的方法获取全局数据</span></span><br><span class=\"line\">    app.getUserInfo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">userInfo</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//更新数据</span></span><br><span class=\"line\">      that.setData(&#123;</span><br><span class=\"line\">        userInfo:userInfo</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"index-wxss样式表\"><a href=\"#index-wxss样式表\" class=\"headerlink\" title=\"index.wxss样式表\"></a>index.wxss样式表</h4><ol>\n<li>页面的样式表是非必要的,该样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。</li>\n<li>页面的结构文件中可以直接使用 app.wxss 中指定的样式规则。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"><span class=\"selector-class\">.userinfo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.userinfo-avatar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">128</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">128</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.userinfo-nickname</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.usermotto</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"index-json配置文件\"><a href=\"#index-json配置文件\" class=\"headerlink\" title=\"index.json配置文件\"></a>index.json配置文件</h4><p>页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json 中的默认配置。</p>\n<h3 id=\"logs-的页面\"><a href=\"#logs-的页面\" class=\"headerlink\" title=\"logs 的页面\"></a>logs 的页面</h3><h4 id=\"logs-wxml页面结构\"><a href=\"#logs-wxml页面结构\" class=\"headerlink\" title=\"logs.wxml页面结构\"></a>logs.wxml页面结构</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--logs.wxml--&gt;</span><br><span class=\"line\">&lt;view class=\"container log-list\"&gt;</span><br><span class=\"line\">  &lt;block wx:for=\"&#123;&#123;logs&#125;&#125;\" wx:for-item=\"log\"&gt;</span><br><span class=\"line\"><span class=\"code\">    &lt;text class=\"log-item\"&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;log&#125;&#125;&lt;/text&gt;</span></span><br><span class=\"line\">  &lt;/block&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"logs-js脚本文件\"><a href=\"#logs-js脚本文件\" class=\"headerlink\" title=\"logs.js脚本文件\"></a>logs.js脚本文件</h4><p>logs 页面使用 <code>&lt;block/&gt;</code> 控制标签来组织代码，在 <code>&lt;block/&gt;</code> 上使用 <code>wx:for</code> 绑定 logs 数据，并将 logs 数据循环展开节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//logs.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'../../utils/util.js'</span>)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    logs: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">      logs: (wx.getStorageSync(<span class=\"string\">'logs'</span>) || []).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">log</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> util.formatTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(log))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">运行结果如下：</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行结果如下：\"><a href=\"#运行结果如下：\" class=\"headerlink\" title=\"运行结果如下：\"></a>运行结果如下：</h3><p><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/start_result.png?t=20161122\" alt=\"\"></p>\n","raw":null,"categories":[{"name":"其他","path":"api/categories/其他.json"},{"name":"小程序","path":"api/categories/小程序.json"}],"tags":[{"name":"小程序","path":"api/tags/小程序.json"}]},{"title":"GTD任务清单整理技巧","slug":"导图/GTD任务清单整理技巧","date":"2016-01-07T16:00:53.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/导图/GTD任务清单整理技巧.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/6w1h.jpg?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>什么是GTD？<br>GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样，大脑便会不被多余的事情打搅而集中于现在所需完成的事情上面。</p>\n<h2 id=\"GTD守则：\"><a href=\"#GTD守则：\" class=\"headerlink\" title=\"GTD守则：\"></a>GTD守则：</h2><pre><code>收集任务  设置每天最重要的任务  \n（把所有你需要做的和需要完成的事情全部记录下来，放在一个“收集箱”里）  \n↓  \n过程  \n（每次按照顺序，一次只做一件事）  \n↓  \n管理任务  \n（列出有详细内容的to-do列表）  \n↓  \n复习任务   \n（复习你所有完成的任务，计划方案和等待完成的事情。确保每一件新进入的任务都有很好的安排）  \n↓  \n开始行动！  \n</code></pre><h3 id=\"建立有强行动性的任务清单\"><a href=\"#建立有强行动性的任务清单\" class=\"headerlink\" title=\"建立有强行动性的任务清单\"></a>建立有强行动性的任务清单</h3><p>任务清单（To-do List）的重要性毋庸置疑，建立有强行动性的任务清单可以让你更清楚地明白自己需要完成的任务，同时还保持了你去完成任务的激情和动力。</p>\n<ol>\n<li>分解任务：就像走远路时，以每一段路程为目标，让人更有动力去追求一样。如果你要阅读一本书，便可以将任务分成“读完第一章”，“读完第二章”等等。</li>\n<li>使用有力的动词：比如说联系某个人，就要写上“给某某打电话”或者“发邮件给某某”而不是写“联系某某”。</li>\n<li>有限的清单：谁都不希望有一张写满几大页的任务清单，你需要找出那些有强动力的行动。</li>\n<li>清理已完成的任务：已完成的任务要及时清理，否者会阻碍你的下一步行动任务。<!--nore-->\n</li>\n</ol>\n<h2 id=\"7W3H\"><a href=\"#7W3H\" class=\"headerlink\" title=\"7W3H\"></a>7W3H</h2><p>7W3H是一个用于项目规划和管理的专业术语。公司管理者邀请相关员工一起进行分析讨论，按照7W3H进行各述己见，收集、归纳、再收集、再归纳，这样一种互动、发散性思维的工作方法极大调动下属员工的积极性、责任感。否则，公司管理者单方面出台项目计划，对下属员工解释耗费时力不说，项目计划的有效性、完善性、可行性也都可能存在质疑。</p>\n<h3 id=\"7W\"><a href=\"#7W\" class=\"headerlink\" title=\"7W\"></a>7W</h3><pre><code>what 指目标与内容，包括主体，目标，机能，性能等\nwhy 指原因，包括任务，期望，背景，技术等\nwho 指人员，包括制造，行销，流通，负责的主体等\nwhere 指地点类，包括 环境，市场，区域，渠道等\nwhen 指时间，包括期限，时机，预期等\nwhom 买家，消费者，接收者\nwhich 附属品\n</code></pre><h3 id=\"3H\"><a href=\"#3H\" class=\"headerlink\" title=\"3H\"></a>3H</h3><pre><code>how to 如何做，指方式和手段，包括集体方案，详实计划，战略方针\nhow much 价格成本，投入产出，综效成果\nhow many 负面效益，各种量（问题，业务，工作）\n</code></pre><h3 id=\"案例6W1H\"><a href=\"#案例6W1H\" class=\"headerlink\" title=\"案例6W1H\"></a>案例6W1H</h3><p>截自《5个图表解决12大难题》<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/6w1h.jpg?imageMogr2/2/w/800\"></p>\n<h2 id=\"十二个赛博学习问题\"><a href=\"#十二个赛博学习问题\" class=\"headerlink\" title=\"十二个赛博学习问题\"></a><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA3OTM0MA==&amp;mid=403475231&amp;idx=1&amp;sn=bbf21f2e37e91fc10d1a48285e8abefd&amp;scene=23&amp;srcid=0115194ziliaGGBscdYC3N0d#rd\" target=\"_blank\" rel=\"noopener\">十二个赛博学习问题</a></h2><p>赛博学习法是一种动态的学习过程，在这个过程中你（不是你的老师，也不是某些教科书的作者）会掌握控制权，成为你自己教育的“引航员”。<br>这种方法的第一步是对话：你会针对正在学习的材料，提出一系列具体的问题。慢慢地，通过信息的整理和再整理，以及在新材料与你学过的知识之间建立新的联系，你将真正理解材料。<br>用这种方法改进你的笔记，只要回答12个问题就能掌握科教书的要点：<br><img title=\"用更短的时间达到更佳效果和更好成绩用更短的时间达到更佳效果和更好成绩\" src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/IMG_0028.JPG?imageMogr2/2/w/800\"></p>\n<h2 id=\"个人常用的工具类\"><a href=\"#个人常用的工具类\" class=\"headerlink\" title=\"个人常用的工具类\"></a>个人常用的工具类</h2><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/IFTTT.jpg?imageMogr2/2/w/800\">\n","raw":null,"categories":[{"name":"导图","path":"api/categories/导图.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"管理","path":"api/tags/管理.json"},{"name":"逻辑思维","path":"api/tags/逻辑思维.json"}]},{"title":"git svn桥接命令的基础","slug":"git/gitsvn桥接命令的基础","date":"2016-01-05T14:18:00.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/git/gitsvn桥接命令的基础.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"http://git-scm.com/book/zh/v1/Git-与其他系统-Git-与-Subversion#git-svn\" target=\"_blank\" rel=\"noopener\">git svn</a></p>\n<p>通过几个简单的工作流程了解到<code>git svn</code>常见命令：<br>值得警戒的是，在使用 git svn 的时候，你实际是在与 Subversion 交互，Git 比它要高级复杂的多。尽管可以在本地随意的进行分支和合并，最好还是通过衍合保持线性的提交历史，</p>\n<ol>\n<li>尽量避免类似与远程 Git 仓库动态交互这样的操作。</li>\n<li>避免修改历史再重新推送的做法，也不要同时推送到并行的 Git 仓库来试图与其他 Git 用户合作。</li>\n<li>Subersion 只能保存单一的线性提交历史，一不小心就会被搞糊涂。</li>\n<li>合作团队中同时有人用 SVN 和 Git，一定要确保所有人都使用 SVN 服务来协作——这会让生活轻松很多。</li>\n</ol>\n","raw":null,"categories":[{"name":"git","path":"api/categories/git.json"},{"name":"svn","path":"api/categories/svn.json"}],"tags":[{"name":"命令","path":"api/tags/命令.json"}]},{"title":"Realm数据库引擎-swift","slug":"swift/Realm数据库引擎-swift","date":"2015-12-16T05:56:15.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/Realm数据库引擎-swift.json","excerpt":null,"keywords":null,"cover":"http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>中心思想：<br>继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。</p>\n<h4 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h4><p><a href=\"http://realm.io/\" target=\"_blank\" rel=\"noopener\">Realm</a> 是一个跨平台的移动数据库引擎，于 2014 年 7 月发布，准确来说，它是专门为移动应用所设计的数据持久化解决方案之一。</p>\n<ul>\n<li>特点：它拥有自己的数据库存储引擎<br>  Realm 并不是对 Core Data 的简单封装，相反地， Realm 并不是基于 Core Data ，也不是基于 SQLite 所构建的。它拥有自己的数据库存储引擎，可以高效且快速地完成数据库的构建操作。</li>\n<li>Realm 支持 Swift 、 Objective-C 以及 Java 语言来编写（ Android 平台和 iOS 平台使用不同的 SDK ）。</li>\n<li>Realm 比使用 SQLite 以及 Core Data 要快很多。</li>\n<li>可视化工具<a href=\"https://itunes.apple.com/cn/app/realm-browser/id1007457278?mt=12\" target=\"_blank\" rel=\"noopener\">Realm Browser</a> ：可以让您轻松地读写 Realm 数据库的逻辑结构以及其中的数据（以 .realm 结尾），虽然 Realm Browser 的功能还十分简陋，真的只能读写而已。</li>\n<li>RealmPlugin：是 Xcode 建模插件，通过 <a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a>安装“RealmPlugin”<h4 id=\"目的：\"><a href=\"#目的：\" class=\"headerlink\" title=\"目的：\"></a>目的：</h4>学习如何导入 Realm 框架、创建数据模型，实现 Swift 执行查询以及插入、更新和删除记录，以及使用既有的数据库。<h4 id=\"实例学习：\"><a href=\"#实例学习：\" class=\"headerlink\" title=\"实例学习：\"></a>实例学习：</h4>测试APP<a href=\"https://github.com/SemperIdem/SISpeciesNotes/tree/master\" target=\"_blank\" rel=\"noopener\">物种监测</a><br>用于记录这个 “ 动植物王国 ” 当中所发现物种的相关信息，包括种群数量、发现区域、年龄结构等等。</li>\n</ul>\n<p>在 Xcode 当中打开我们的起始项目。此时， <a href=\"http://www.raywenderlich.com/81615/www.raywenderlich.com/21365/introduction-to-mapkit-in-ios-6-tutorial\" target=\"_blank\" rel=\"noopener\">MapKit</a><br>已经在项目当中建立好了，而且项目已经拥有了一些简单的创建、更新和删除物种信息的功能.</p>\n<h4 id=\"cocoapods安装（Swift-2-1）：\"><a href=\"#cocoapods安装（Swift-2-1）：\" class=\"headerlink\" title=\"cocoapods安装（Swift 2.1）：\"></a>cocoapods安装（Swift 2.1）：</h4><p>在项目中创建Podfile配置文件，添加RealmSwift支持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use_frameworks!   //</span><br><span class=\"line\">pod &apos;RealmSwift&apos;</span><br></pre></td></tr></table></figure></p>\n<p>执行 <code>pod install</code>下载realmSwift框架，生成<strong>.xcworkspace</strong>文件，自动重启原始项目。<br>设置Xcode项目在git版本控制中的忽略配置：详见<a href=\"http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects\" target=\"_blank\" rel=\"noopener\">.gitignore</a></p>\n<p><a href=\"http://blog.csdn.net/remote_roamer/article/details/47835347\" target=\"_blank\" rel=\"noopener\">use_frameworks!</a>   </p>\n<pre><code>如果在cocoapods 里面不使用 use_frameworks!,则是通过static libraries 这个方式来管理pod的代码。这样就需要在app-Bridging-Header.h 文件里面去import相应的.h 文件。而如果使用了use_frameworks!,则cocoapods 使用了frameworks 来取代static libraries 方式。 \n</code></pre><h4 id=\"开始使用：\"><a href=\"#开始使用：\" class=\"headerlink\" title=\"开始使用：\"></a>开始使用：</h4><p>编译并运行这个应用，然后尝试定位到某个您感兴趣的位置（使用模拟器的位置模拟），然后点击右上角的 “+” 按钮创建一个新的标记点。点选地图上的这个标记点，然后点击其弹出来的气泡，接下来会弹出这个标记点的详细信息。随后，点击类别文本框，就可以看到如下图所示的类别列表了:<br><img src=\"http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg\" alt=\"\"></p>\n<ol>\n<li><p>使用Realm数据库将类别列表持久化</p>\n<ul>\n<li><p>打开<strong>CategoriesTableViewController.swift </strong>文件添加方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">populateDefaultCategories</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.results = <span class=\"type\">CategoryModel</span>.allObjects() <span class=\"comment\">// 1 查询数据返回包含类别对象的RLMResults数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> results.<span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 2   通过返回结果的个数，初始化本地realm数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> realm = <span class=\"type\">RLMRealm</span>.defaultRealm() <span class=\"comment\">// 3 访问默认的 realm 单例对象</span></span><br><span class=\"line\">realm.beginWriteTransaction() <span class=\"comment\">// 4   在默认 realm 数据库中启动一个事务</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> defaultCategories = <span class=\"type\">Categories</span>.allValues <span class=\"comment\">// 5 使用Categories 枚举来创建一个含有全部默认类别的数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> defaultCategories &#123;</span><br><span class=\"line\"><span class=\"comment\">// 6 初始化类别实例对象，设置其 name 属性，加入realm中</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newCategory = <span class=\"type\">CategoryModel</span>()</span><br><span class=\"line\">newCategory.name = category</span><br><span class=\"line\">realm.addObject(newCategory)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">realm.commitWriteTransaction() <span class=\"comment\">// 7    调用 commitWriteTransaction() 方法来关闭事务，并且向数据库提交数据</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.results = <span class=\"type\">CategoryModel</span>.allObjects()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 viewDidLoad() 方法的底部加入以下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">populateDefaultCategories()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"数据库","path":"api/tags/数据库.json"},{"name":"realm","path":"api/tags/realm.json"}]},{"title":"OC与swift相互调用","slug":"swift/OC与swift相互调用","date":"2015-12-01T11:42:18.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/OC与swift相互调用.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"Swift中使用OC的类声明-–-实现配置-桥接的头文件\"><a href=\"#Swift中使用OC的类声明-–-实现配置-桥接的头文件\" class=\"headerlink\" title=\"Swift中使用OC的类声明  – 实现配置 桥接的头文件\"></a>Swift中使用OC的类声明  – 实现配置 桥接的头文件</h4><h6 id=\"方式一：自动添加桥接头文件\"><a href=\"#方式一：自动添加桥接头文件\" class=\"headerlink\" title=\"方式一：自动添加桥接头文件\"></a>方式一：自动添加桥接头文件</h6><ol>\n<li>在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。</li>\n<li>点确定这后就会生成一个以<producename-bridging-header.h>的头文件。</producename-bridging-header.h></li>\n<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>\n<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Use this file to import your target's public headers that you would like to expose to Swift.  </span></span><br><span class=\"line\"><span class=\"comment\">//MixDemo/MixDemo-Bridging-Header.h    </span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OCChannel.h\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"方式二：手动添加桥接头文件\"><a href=\"#方式二：手动添加桥接头文件\" class=\"headerlink\" title=\"方式二：手动添加桥接头文件\"></a>方式二：手动添加桥接头文件</h6><p>同样的，当你知道这个swift搜索头文件的关系后，就不需要再理会这个-Bridging-Header.h的文件了。<br>完全可以手工建一个并取自己喜欢的名字：</p>\n<ol>\n<li>新建一个头文件，名为:OCContainerHeader.h</li>\n<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>\n<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Use this file to import your target's public headers that you would like to expose to Swift.  \t</span></span><br><span class=\"line\"><span class=\"comment\">//MixDemo/MixDemo-Bridging-Header.h    </span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"OCChannel.h\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"OC如何调用Swift写的类-–-为了在-Objective-C-中可用，-Swift-类必须是-Objective-C-类的子类，或者用-Objective-C-标记；\"><a href=\"#OC如何调用Swift写的类-–-为了在-Objective-C-中可用，-Swift-类必须是-Objective-C-类的子类，或者用-Objective-C-标记；\" class=\"headerlink\" title=\"OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；\"></a>OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；</h4><ol>\n<li>选中targets-&gt;build settings -&gt;packing-&gt;Product Module Name 中设置模块名（可以自定义），这个名称很重要 swift 的头文件就是根据这个来命名的，例如：SwiftModule。</li>\n<li>在OC头文件类中，添加import “SwiftModule-swift.h”但你在整个工程中是找不到这个文件的，但可以使用CMD+ 鼠标点击可看这个头文件中的内容。  </li>\n</ol>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>这样，工程中如查Swift要使用OC,则把需要使用的OC类的头文件，全写在MixDemo-Bridging-Header.h里。同样如果OC中所使用的swift类，只需要Clean一把，再编就可以了，但不要忘了导入SwiftModule-swift.h哦（名称自取，但-swift.h是固定的），另外还有一个需要读者注意的。</p>\n<p>注：<br>    凡是用Swift写的类，如果不继成自NSObject或NSObject 的派生类，哪么编译后将不会生成对应的转换类。从而使得OC 中找不到相应的声明。<br>如我的例子中 class Act 这样不会被编译到SwiftModule-swift.h中，但写为 class Act : NSObject，就可以编译出相应的声明。另外可以使用@objc加以声明，但这个还是一样，类最好继承NSObject下来。</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"OC混编","path":"api/categories/OC混编.json"}],"tags":[{"name":"混编","path":"api/tags/混编.json"}]},{"title":"Swift入门","slug":"swift/Swift入门","date":"2015-11-27T17:18:21.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/swift/Swift入门.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><ul>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1\" target=\"_blank\" rel=\"noopener\">苹果官方</a>  </li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">中文版</a><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4>Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来简化内存管理。我们的框架栈则一直基于Cocoa，且Objective-C进化支持了块、collection literal和模块，允许现代语言的框架无需深入即可使用。<br>(by gashero)感谢这些基础工作，才使得可以在Apple软件开发中引入新的编程语言Swift。</li>\n</ul>\n<h4 id=\"swift有点\"><a href=\"#swift有点\" class=\"headerlink\" title=\"swift有点\"></a>swift有点</h4><p>编译器是按照性能优化的，而语言是为开发优化的</p>\n<p>Swift采用了Objective-C的命名参数和动态对象模型。提供了对Cocoa框架和mix-and-match的互操作性。基于这些基础，Swift引入了很多新功能和结合面向过程和面向对象的功能。<br>Swift对新的程序员也是友好的：</p>\n<ol>\n<li>它是工业级品质的系统编程语言，却又像脚本语言一样的友好。</li>\n<li>它支持playground，允许程序员实验一段Swift代码功能并立即看到结果，而无需麻烦的构建和运行一个应用。<br>Swift集成了现代编程语言思想，以及Apple工程文化的智慧，编译器是按照性能优化的，而语言是为开发优化的，无需互相折中。</li>\n</ol>\n<h4 id=\"swift语法\"><a href=\"#swift语法\" class=\"headerlink\" title=\"swift语法\"></a>swift语法</h4><p>Playground允许你编辑代码并立即看到结果,可以从”Hello, world”开始学起并过渡到整个系统。<br>在Xcode的playground中打开:<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">\"Hello, world\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在Swift，这就是完整的程序:</p>\n<ol>\n<li>无需导入(import)输入输出和字符串处理的系统库。</li>\n<li>全局范围的代码就是用于程序的入口，所以你无需编写一个 main() 函数。也无需在每个语句后写分号。</li>\n</ol>\n<p>所有这些使得Swift成为Apple软件开发者创新的源泉。</p>\n<h4 id=\"简单值-–-使用-let-来定义常量，-var-定义变量\"><a href=\"#简单值-–-使用-let-来定义常量，-var-定义变量\" class=\"headerlink\" title=\"简单值  – 使用 let 来定义常量， var 定义变量\"></a>简单值  – 使用 let 来定义常量， var 定义变量</h4><p>提供一个值就可以创建常量或变量，并让编译器推断其类型,一个常量或变量必须与赋值时拥有相同的类型。因此你不用严格定义类型。<br>常量定义类似于函数式编程语言中的变量,常量的值无需在编译时指定，但是至少要赋值一次,赋值后就无法修改。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myVariable = <span class=\"number\">42</span></span><br><span class=\"line\">myVariable = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myConstant = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面例子中，编译其会推断myVariable是一个整数类型，因为其初始化值就是个整数。</p>\n<h6 id=\"1-显示-隐式-初始化数据类型-—-类型与变量名绑定，属于静态类型语言\"><a href=\"#1-显示-隐式-初始化数据类型-—-类型与变量名绑定，属于静态类型语言\" class=\"headerlink\" title=\"1. 显示/隐式 初始化数据类型 —   类型与变量名绑定，属于静态类型语言\"></a>1. 显示/隐式 初始化数据类型 —   类型与变量名绑定，属于静态类型语言</h6><p>类型与变量名绑定，属于静态类型语言。有助于静态优化。与Python、JavaScript等有所区别。<br>例如：初始化值没有提供足够的信息(或没有初始化值)，可以在变量名后写类型，以冒号分隔。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> imlicitInteger = <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imlicitDouble = <span class=\"number\">70.0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">70</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-变量-拼接到字符串-–-变量值永远不会隐含转换到其他类型\"><a href=\"#2-变量-拼接到字符串-–-变量值永远不会隐含转换到其他类型\" class=\"headerlink\" title=\"2. 变量  拼接到字符串  – 变量值永远不会隐含转换到其他类型\"></a>2. 变量  拼接到字符串  – 变量值永远不会隐含转换到其他类型</h6><ul>\n<li><p>String(变量名)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> label = <span class=\"string\">\"The width is \"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> width = <span class=\"number\">94</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> widthLabel = label + <span class=\"type\">String</span>(width)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以小括号来写值，并用反斜线(“”)放在小括号之前</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> apples = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oranges = <span class=\"number\">5</span>     <span class=\"comment\">//by gashero</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> appleSummary = <span class=\"string\">\"I have \\(apples) apples.\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fruitSummary = <span class=\"string\">\"I have \\(apples + oranges) pieces of fruit.\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"数组和字典的用法\"><a href=\"#数组和字典的用法\" class=\"headerlink\" title=\"数组和字典的用法\"></a>数组和字典的用法</h4><ol>\n<li>声明并初始化<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> emptyArray = <span class=\"type\">String</span>[]()</span><br><span class=\"line\"><span class=\"keyword\">let</span> emptyDictionary = <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Float</span>&gt;()</span><br><span class=\"line\">shoppingList = [] <span class=\"comment\">//去购物并买些东西</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果数组类型无法推断，你可以写空的数组为 “[]” 和空的字典为 “[:]“。</p>\n<ol>\n<li>访问<br>创建一个数组和字典使用方括号 “[]”，访问其元素则是通过方括号中的索引或键。                      <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"catfish\"</span>, <span class=\"string\">\"water\"</span>, <span class=\"string\">\"tulips\"</span>, <span class=\"string\">\"blue paint\"</span>]</span><br><span class=\"line\">shoppingList[<span class=\"number\">1</span>] = <span class=\"string\">\"bottle of water\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> occupations = [</span><br><span class=\"line\">   <span class=\"string\">\"Malcolm\"</span>: <span class=\"string\">\"Captain\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"Kaylee\"</span>: <span class=\"string\">\"Mechanic\"</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\">occupations[<span class=\"string\">\"Jayne\"</span>] = <span class=\"string\">\"Public Relations\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"控制流-–-条件控制，循环控制\"><a href=\"#控制流-–-条件控制，循环控制\" class=\"headerlink\" title=\"控制流  –  条件控制，循环控制\"></a>控制流  –  条件控制，循环控制</h4><h6 id=\"1-条件控制\"><a href=\"#1-条件控制\" class=\"headerlink\" title=\"1. 条件控制\"></a>1. 条件控制</h6><ul>\n<li><p>if  条件必须是布尔表达式<br>在 if 语句中，条件必须是布尔表达式，这意味着 if score { … } 是错误的，不能隐含的与0比较。<br>你可以一起使用 if 和 let 来防止值的丢失。这些值是可选的。<br>可选值可以包含一个值或包含一个 nil 来指定值还不存在。写一个问号 “?” 在类型后表示值是可选的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalString: <span class=\"type\">String</span>? = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">optionalString == <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> optionalName: <span class=\"type\">String</span>? = <span class=\"string\">\"John Appleseed\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">\"Hello!\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name = optionalName &#123;</span><br><span class=\"line\">    greeting = <span class=\"string\">\"Hello, \\(name)\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch 支持多种数据以及多种比较，不限制必须是整数和测试相等  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vegetable = <span class=\"string\">\"red pepper\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> vegetable &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"celery\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Add some raisins and make ants on a log.\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"cucumber\"</span>, <span class=\"string\">\"watercress\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"That would make a good tea sandwich.\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x.hasSuffix(<span class=\"string\">\"pepper\"</span>):</span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Is it a spicy \\(x)?\"</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:    <span class=\"comment\">//by gashero</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vegetableComment = <span class=\"string\">\"Everything tastes good in soup.\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在执行匹配的情况后，程序会从 switch 跳出，而不是继续执行下一个情况。所以不再需要 break 跳出 switch 。</p>\n<h6 id=\"2-循环控制\"><a href=\"#2-循环控制\" class=\"headerlink\" title=\"2. 循环控制\"></a>2. 循环控制</h6><ul>\n<li>for-in 来迭代字典中的每个元素<br>可使用 for-in 来迭代字典中的每个元素，提供一对名字来使用每个键值对。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> interestingNumbers = [</span><br><span class=\"line\">    <span class=\"string\">\"Prime\"</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">    <span class=\"string\">\"Fibonacci\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">    <span class=\"string\">\"Square\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (kind, numbers) <span class=\"keyword\">in</span> interestingNumbers &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &gt; largest &#123;</span><br><span class=\"line\">            largest = number</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\">你可以在循环中保持一个索引，通过“..”来表示索引范围或明确声明一个初始值、条件、增量。   </span><br><span class=\"line\">这两个循环做相同的事情:  </span><br><span class=\"line\">```swift</span><br><span class=\"line\"><span class=\"keyword\">var</span> firstForLoop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    firstForLoop += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">firstForLoop</span><br><span class=\"line\"><span class=\"keyword\">var</span> secondForLoop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i &#123;</span><br><span class=\"line\">    secondForLoop += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用 .. 构造范围忽略最高值，而用 … 构造的范围则包含两个值。</p>\n<ul>\n<li>while 来重复执行代码块直到条件改变<br>使用 while 来重复执行代码块直到条件改变。循环的条件可以放在末尾来确保循环至少执行一次。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    n = n * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    m = m * <span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> m &lt; <span class=\"number\">100</span></span><br><span class=\"line\">m</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数与闭包-–-函数是闭包的特殊情况\"><a href=\"#函数与闭包-–-函数是闭包的特殊情况\" class=\"headerlink\" title=\"函数与闭包  – 函数是闭包的特殊情况\"></a>函数与闭包  – 函数是闭包的特殊情况</h4><h6 id=\"1-闭包-无需名字，只需要放在大括号中即可\"><a href=\"#1-闭包-无需名字，只需要放在大括号中即可\" class=\"headerlink\" title=\"1. 闭包 无需名字，只需要放在大括号中即可\"></a>1. 闭包 无需名字，只需要放在大括号中即可</h6><p>编写闭包时有多种选项:</p>\n<ol>\n<li><p>使用 in 到特定参数和主体的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;</span><br><span class=\"line\">    (number: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">3</span> * number</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单一语句的闭包可以直接返回值<br>例如：当一个闭包的类型是已知时，例如代表回调，你可以忽略其参数和返回值，或两者</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;number <span class=\"keyword\">in</span> <span class=\"number\">3</span> * number&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过数字而不是名字来引用一个参数，这对于很短的闭包很有用。<br>例如：一个闭包传递其最后一个参数到函数作为返回值。  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>]) &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2. 函数\"></a>2. 函数</h6><ul>\n<li><p>函数的声明   –  使用func 声明一个函数  使用 -&gt;分隔参数的名字和返回值类型,<br>调用函数使用他的名字加上小括号中的参数列表</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(name: String, day: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(name), today is \\(day).\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Tuesday\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数的嵌套<br>内嵌函数可以访问其定义所在函数的变量。<br>你可以使用内嵌函数来组织代码，避免过长和过于复杂：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnFifteen</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        y += <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    add()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数接收的参数</p>\n<ol>\n<li><p>可变参数的个数  sumOf(numbers: Int…) -&gt; Int{}<br>函数可以接受可变参数个数，收集到一个数组中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumOf</span><span class=\"params\">(numbers: Int...)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        sum += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//例子</span></span><br><span class=\"line\">sumOf(<span class=\"number\">42</span>, <span class=\"number\">597</span>, <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他函数作为参数  func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool{}</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasAnyMatches</span><span class=\"params\">(list: Int[], condition: Int -&gt; Bool)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lessThanTen</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number &lt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">hasAnyMatches(numbers, lessThanTen)</span><br></pre></td></tr></table></figure>\n<p>函数实际是闭包的特殊情况。你可以写一个闭包而无需名字，只需要放在大括号中即可。使用 in 到特定参数和主体的返回值。</p>\n</li>\n</ol>\n</li>\n<li><p>函数的返回值</p>\n<ol>\n<li><p>返回多个值 ： getGasPrices() -&gt; (Double, Double, Double)<br>使用元组(tuple)来返回多个值                           </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getGasPrices</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Double</span>, <span class=\"type\">Double</span>, <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">3.59</span>, <span class=\"number\">3.69</span>, <span class=\"number\">3.79</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回另一个函数  ： makeIncrementer() -&gt; (Int -&gt; Int)<br>函数是第一类型的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addOne</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> increment = makeIncrementer()</span><br><span class=\"line\">increment(<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"对象与类\"><a href=\"#对象与类\" class=\"headerlink\" title=\"对象与类\"></a>对象与类</h4><h6 id=\"1-类的创建-：class-类名\"><a href=\"#1-类的创建-：class-类名\" class=\"headerlink\" title=\"1. 类的创建  ：class 类名 {}\"></a>1. 类的创建  ：class 类名 {}</h6><ol>\n<li><p>使用 class 可以创建一个类。<br>一个属性的声明则是在类里作为常量或变量声明的，除了是在类的上下文中。方法和函数也是这么写的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类的构造器  ： 构造器来在创建实例时设置类，使用 init 来创建</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NamedShape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">    &#125;   <span class=\"comment\">//by gashero</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A Shape with \\(numberOfSides) sides.\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>self 用来区分 name 属性和 name 参数。<br>构造器的声明跟函数一样，除了会创建类的实例。每个属性都需要赋值，无论在声明里还是在构造器里。</p>\n<ol>\n<li>类的析构器，来执行对象销毁时的清理工作，使用 deinit 来创建<br>使用 deinit 来创建一个析构器，来执行对象销毁时的清理工作。</li>\n<li>超类的继承    <ul>\n<li>子类包括其超类的名字，以冒号分隔。在继承标准根类时无需声明，所以你可以忽略超类。  </li>\n<li>子类的方法可以通过标记 override 重载超类中的实现，而没有 override 的会被编译器看作是错误,编译器也会检查那些没有被重载的方法。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">NamedShape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">        numberOfSides = <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sideLength * sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A square with sides of length \\(sideLength).\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">\"my test square\"</span>)</span><br><span class=\"line\">test.area()</span><br><span class=\"line\">test.simpleDescription()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"2-类的实例创建-类名-点语法来访问实例的属性和方法\"><a href=\"#2-类的实例创建-类名-点语法来访问实例的属性和方法\" class=\"headerlink\" title=\"2. 类的实例创建   :  类名()  ,点语法来访问实例的属性和方法\"></a>2. 类的实例创建   :  类名()  ,点语法来访问实例的属性和方法</h6><p>通过在类名后加小括号来创建类的实例。使用点语法来访问实例的属性和方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shape = <span class=\"type\">Shape</span>()</span><br><span class=\"line\">shape.numberOfSides = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shapeDescription = shape.simpleDescription()</span><br></pre></td></tr></table></figure></p>\n<p>可选类型 Int?<br>可选绑定 if while</p>\n<p>强制取值表达式 expression!<br>可选链表达式   expression?</p>\n<p>类型转换运算符 is , as, is?, as!</p>\n<p>标示符模式<br>值绑定模式<br>可选模式<br>类型转换模式</p>\n<p>实例方法  func<br>类型方法 class func</p>\n","raw":null,"categories":[{"name":"swift","path":"api/categories/swift.json"},{"name":"语法","path":"api/categories/语法.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"}]},{"title":"产品领导者的五种特质","slug":"管理/产品领导者的五种特质","date":"2015-11-27T10:24:44.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/管理/产品领导者的五种特质.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"1-善于观察\"><a href=\"#1-善于观察\" class=\"headerlink\" title=\"1.善于观察\"></a>1.善于观察</h4><p>他们一直在观察用户，不仅仅是借助指标和仪表盘。他们对每件小事情感到好奇：</p>\n<ul>\n<li>用户正尝试完成什么？  </li>\n<li>为什么用户选择这款产品而非其它产品？  </li>\n<li>他们在和这款产品交互之前、之中和之后，做了什么。  </li>\n</ul>\n<p>他们查看收到的每一条反馈，对每个客户问题做出响应。他们创建让人愉悦的调查，知道该问什么，什么时候该倾听或无视。他们在 Facebook 上和用户交朋友——他们能叫得出用户名字。他们深知，核心用户会成为产品本身的一部分。</p>\n<p>他们痴迷于研究。他们知道市场的运作方式、未来走向以及竞争要做什么。他们密切注视着一切，除了没有创建一个显而易见的版本。</p>\n<a id=\"more\"></a>\n<h4 id=\"2-技术\"><a href=\"#2-技术\" class=\"headerlink\" title=\"2.技术\"></a>2.技术</h4><p>他们或许没有计算机科学学位，但是凭借其悟性，足以解释事物运作的方式。他们理解软件开发的过程（和复杂度），打造增量改变的文化，还能借助可用的数据点清晰明了地交流。他们对优先级毫不留情。</p>\n<p>他们是脚本瘾君子——他们能够不依赖工程师而自动化很多工作。为了检查产品，他们创造工具，最终成为每个人手头最重要的工具。</p>\n<p>他们在工程师圈子里保持良好联系——知道从哪儿得到某些工程师的快速帮助、或雇佣到全职的明星工程师。</p>\n<p>他们明白，写代码除了开发产品——还能节约大量时间。</p>\n<h4 id=\"3-分析\"><a href=\"#3-分析\" class=\"headerlink\" title=\"3.分析\"></a>3.分析</h4><p>他们或许不是正式的数据科学家，但他们是数据狂热者。他们理解大数据和不良数据的差异。他们对各种分析工具一点儿也不陌生，为了捕捉到有意义的数据，他们知道该增加什么或何时增加。</p>\n<p>他们熟悉足够多的数据工具和框架，能够快速分析，并找到见解。他们总是寻找盲点。他们做出数据启迪、而非数据驱动的决定。</p>\n<p>他们和数据科学社区保持良好联系——他们知道从哪儿能得到快速的数据科学方面的帮助，以及雇佣到明星数据科学家。</p>\n<p>他们明白，大量的数据分析只用 web 浏览器就能快速搞定。</p>\n<h4 id=\"4-聚焦设计\"><a href=\"#4-聚焦设计\" class=\"headerlink\" title=\"4.聚焦设计\"></a>4.聚焦设计</h4><p>他们可能不是视觉设计师，但是理解设计的真谛及其重要性。他们知道，好的设计不单单取决于优秀的设计师，而要在团队内部打造一种强烈的设计文化。他们理解，好的设计花费时间，也知道良好、完美与完成之间的区别。</p>\n<p>他们熟悉快速设计的工具，除了编写产品说明，还能够清晰地为振奋人心的想法和概念添加插图。他们不断地寻找设计灵感，他们激发着设计师。</p>\n<p>他们和设计社区保持良好联系——他们知道从哪儿能得到快速的兼职设计方面的帮助，以及雇佣到优秀的全职设计师。</p>\n<p>他们明白，设计不单单是设计师的工作——它是团队每个人的心态和文化。</p>\n<h4 id=\"5-企业家精神\"><a href=\"#5-企业家精神\" class=\"headerlink\" title=\"5.企业家精神\"></a>5.企业家精神</h4><p>他们或许还没有打造过十亿美元的业务，但是已经上线了、并使得至少一款产品取得了增长（他们自己出钱），并以此为荣，即使没有上线亦如此。他们乐于介绍过程——为什么世界需要他们的产品、他们怎样获取用户、效果不佳的问题在哪儿。</p>\n<p>他们相信，世界真的是平的，渴望成功。他们以之前的作品为荣，但是在内心深处藏着更大的欲望，那就是为十亿用户开发产品，让世界变得更美好。</p>\n<p>他们明白，在拥有的全部技能中，勇气和坚持不懈才是最重要的两个特点。</p>\n","raw":null,"categories":[{"name":"管理","path":"api/categories/管理.json"}],"tags":[{"name":"管理","path":"api/tags/管理.json"}]},{"title":"UIImage的渲染模式","slug":"iOS/UIImage的渲染模式","date":"2015-11-26T16:15:11.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/iOS/UIImage的渲染模式.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>设置UIImage的渲染模式：UIImage.renderingMode<br>在 iOS 7 中 UIImage 添加了一个 <code>renderingMode</code> 属性。我们可以使用 <code>imageWithRenderingMode:</code>并传入一个合适的<code>UIImageRenderingMode</code> 来指定这个 image 要不要以 Template 的方式进行渲染。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAutomatic</span> <span class=\"comment\">// 根据图片的使用环境和所处的绘图上下文自动调整渲染模式。</span></span><br><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span> <span class=\"comment\">// 始终绘制图片原始状态，不使用Tint Color。</span></span><br><span class=\"line\"><span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span> <span class=\"comment\">// 始终根据Tint Color绘制图片，忽略图片的颜色信息。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *img = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"myimage\"</span>];</span><br><span class=\"line\">img = [img imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</span><br><span class=\"line\"><span class=\"comment\">//实际效果，效果依旧显示为baritem的Tint Color</span></span><br><span class=\"line\"><span class=\"built_in\">UIBarButtonItem</span> *barButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc] initWithImage:setImage</span><br><span class=\"line\">                                                   style:<span class=\"built_in\">UIBarButtonItemStylePlain</span></span><br><span class=\"line\">                                                  target:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                                  action:<span class=\"keyword\">@selector</span>(setAction:)];</span><br><span class=\"line\">```    </span><br><span class=\"line\">在新的 Xcode 中，我们可以直接在 Image Asset 里的 Render As 选项来指定是不是需要作为 template 使用。相应的，在`<span class=\"built_in\">UIApperance</span>`中，Apple 也为我们对于 `Size Classes` 添加了相应的方法。使用 `+appearanceForTraitCollection:` 方法，我们就可以针对不同 trait 下的应用的 apperance 进行很简单的设定。</span><br><span class=\"line\"></span><br><span class=\"line\">```objc</span><br><span class=\"line\"><span class=\"built_in\">UIView</span>.appearanceForTraitCollection(<span class=\"built_in\">UITraitCollection</span>(verticalSizeClass:.Compact)).tintColor = <span class=\"built_in\">UIColor</span>.redColor()  </span><br><span class=\"line\"><span class=\"built_in\">UIView</span>.appearanceForTraitCollection(<span class=\"built_in\">UITraitCollection</span>(verticalSizeClass:.Regular)).tintColor = <span class=\"built_in\">UIColor</span>.greenColor()</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"控件","path":"api/categories/控件.json"}],"tags":[{"name":"UI","path":"api/tags/UI.json"},{"name":"坑","path":"api/tags/坑.json"}]}]}