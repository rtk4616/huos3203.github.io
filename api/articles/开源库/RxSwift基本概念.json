{"title":"RxSwift基本概念","slug":"开源库/RxSwift基本概念","date":"2017-03-03T13:01:41.000Z","updated":"2017-09-24T09:18:26.000Z","comments":true,"path":"api/articles/开源库/RxSwift基本概念.json","excerpt":null,"covers":null,"content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"FRP函数式反应型编程\"><a href=\"#FRP函数式反应型编程\" class=\"headerlink\" title=\"FRP函数式反应型编程\"></a>FRP函数式反应型编程</h2><p>Functional Reactive Programming ， 缩写为 FRP</p>\n<h2 id=\"函数编程\"><a href=\"#函数编程\" class=\"headerlink\" title=\"函数编程\"></a>函数编程</h2><h3 id=\"函数是第一等公民\"><a href=\"#函数是第一等公民\" class=\"headerlink\" title=\"函数是第一等公民\"></a>函数是第一等公民</h3><p>所谓 第一等公民 (first class) ，指的是函数与其他数据类型一样，处于平等地位。既可以赋值给其他变量，也可以作为参数传入另一个函数，或者作为别的函数的返回值。<br>将数组通过指定的函数映射成另一个数组，例如将<code>increment函数</code>作为参数传入数组的<code>map函数</code>:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> increment = &#123; <span class=\"keyword\">return</span> $<span class=\"number\">0</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"built_in\">map</span>(increment)  <span class=\"comment\">// [2,3,4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数式的函数\"><a href=\"#函数式的函数\" class=\"headerlink\" title=\"函数式的函数\"></a>函数式的函数</h3><h4 id=\"map-映射函数\"><a href=\"#map-映射函数\" class=\"headerlink\" title=\"map 映射函数\"></a>map 映射函数</h4><p><code>map</code> 可以把一个数组按照一定的规则转换成另一个数组，定义如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(transform: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span>[]</span><br><span class=\"line\"><span class=\"comment\">//效果</span></span><br><span class=\"line\">[ x1, x2, ... , xn].<span class=\"built_in\">map</span>(f) -&gt; [f(x1), f(x2), ... , f(xn)]</span><br></pre></td></tr></table></figure><br><code>map</code>接受一个把 <code>T</code> 类型的转换成 <code>U</code> 类型的<code>transform</code>函数，最终返回的是 <code>U 类型的集合</code>。</p>\n<h4 id=\"filter-筛选函数\"><a href=\"#filter-筛选函数\" class=\"headerlink\" title=\"filter 筛选函数\"></a>filter 筛选函数</h4><p><code>filter</code>通过在闭包中对每个元素进行逻辑运算，来排除为<code>false</code>的元素<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">filter</span><span class=\"params\">(includeElement: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">Bool</span>) -&gt; [<span class=\"type\">T</span>]</span><br><span class=\"line\"><span class=\"comment\">//实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">32</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> filteredArray  = oldArray.<span class=\"built_in\">filter</span>(&#123; <span class=\"keyword\">return</span> $<span class=\"number\">0</span> &gt; <span class=\"number\">30</span> &#125;)</span><br><span class=\"line\"><span class=\"built_in\">println</span>(filteredArray) <span class=\"comment\">// [45, 32]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"reduce-迭代函数\"><a href=\"#reduce-迭代函数\" class=\"headerlink\" title=\"reduce 迭代函数\"></a>reduce 迭代函数</h4><p><code>reduce</code>函数把<code>U</code>类型集合中的所有元素，以<code>initial</code>为初始值，按照<code>combine</code>规则，逐个迭代并返回一个U类型的对象。<br>定义如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reduce</span>&lt;U&gt;<span class=\"params\">(initial: U, combine: <span class=\"params\">(U, T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span></span><br></pre></td></tr></table></figure><br>reduce 有两个参数，<code>initial</code>是初始值，<code>combine</code>定义规则闭包，闭包有两个输入的参数，一个是原始值，一个是新进来的值，闭包返回的新值作为下一轮循环中的<code>initial</code>值。<br>写几个小例子试一下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">32</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>,&#123;$<span class=\"number\">0</span> + $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 0+10+20+45+32 = 107</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">1</span>,&#123;$<span class=\"number\">0</span> + $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 1+10+20+45+32 = 108</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">5</span>,&#123;$<span class=\"number\">0</span> * $<span class=\"number\">1</span>&#125;) <span class=\"comment\">// 5*10*20*45*32 = 1440000</span></span><br><span class=\"line\">sum = oldArray.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>,+) <span class=\"comment\">// 0+10+20+45+32 = 107</span></span><br><span class=\"line\"><span class=\"built_in\">println</span>(sum)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数式和指令式的比较\"><a href=\"#函数式和指令式的比较\" class=\"headerlink\" title=\"函数式和指令式的比较\"></a>函数式和指令式的比较</h3><h2 id=\"响应式编程-Reactive\"><a href=\"#响应式编程-Reactive\" class=\"headerlink\" title=\"响应式编程 - Reactive\"></a>响应式编程 - Reactive</h2><p>在日常开发中，我们经常需要监听某个属性，并且针对该属性的变化做一些处理。比如以下几个场景：</p>\n<ol>\n<li>用户在输入邮箱的时候，监测输入的内容并在界面上提示是否符合邮箱规范。</li>\n<li>用户在修改用户名之后，所有显示用户名的界面都要改为新的用户名。<br>外部输入信号的变化、事件的发生，这些都是典型的外部环境变化。根据外部环境的变化进行响应处理，直观上来讲像是一种自然地反应。我们可以将这种自动对变化作出响应的能力称为反应能力 (Reactive) 。</li>\n</ol>\n<p>那么什么是反应型编程呢？</p>\n<pre><code>Reactive programming is programming with asynchronous data streams.\n反应型编程是异步数据流的编程。\n</code></pre><p>对于移动端来说，异步数据流的概念并不陌生，变量、点击事件、属性、缓存，这些就可以成为数据流。<br>我们可以通过一些简单的 ASCII 字符来演示如何将事件转换成数据流：<br>    –a—b-c—d—X—|–&gt;<br>    a, b, c, d 是具体的值，代表了某个事件<br>    X 表示发生了一个错误<br>    | 是这个流已经结束了的标记<br>    ———-&gt; 是时间轴<br>比如我们要统计用户点击鼠标的次数，那么可以这样：<br>clickStream:    —c—-c–c—-c——c–&gt;<br>                vvvvv map(c becomes 1) vvvv<br>                —1—-1–1—-1——1–&gt;<br>                vvvvvvvvv scan(+) vvvvvvvvv<br>counterStream:  —1—-2–3—-4——5–&gt;<br>反应型编程就是基于这些数据流的编程。而函数式编程则相当于提供了一个工具箱，可以方便的对数据流进行合并、创建和过滤等操作。</p>\n<h2 id=\"swift-函数式编程\"><a href=\"#swift-函数式编程\" class=\"headerlink\" title=\"swift 函数式编程\"></a>swift 函数式编程</h2><p>Swift 是苹果公司在 2014 年推出的编程语言，用于编写 iOS 和 OS X 应用程序。它吸收了很多其它语言的语法特性，例如闭包、元组、泛型、结构体等等，这使得它的语法简洁而灵活。<br>Swift 本身并不是一门函数式语言，不过有一些函数式的方法和特性</p>\n<ol>\n<li>map reduce 等函数式函数</li>\n<li>函数是一等公民</li>\n<li>模式匹配<br>我们并不能因为 Swift 中的一些函数式特性就把它归为函数式语言，但是我们可以利用这些特性进行函数式 Style 的编程。</li>\n</ol>\n<h1 id=\"RxSwift-响应式编程\"><a href=\"#RxSwift-响应式编程\" class=\"headerlink\" title=\"RxSwift 响应式编程\"></a>RxSwift 响应式编程</h1><p><a href=\"https://github.com/ReactiveX/RxSwift/tree/master/Rx.playground\" target=\"_blank\" rel=\"noopener\">Rx.playground</a></p>\n<h2 id=\"Observable观察者模式\"><a href=\"#Observable观察者模式\" class=\"headerlink\" title=\"Observable观察者模式\"></a>Observable观察者模式</h2><p>Rx 的基础：<code>Observable</code> ， <code>Observable&lt;Element&gt;</code> 是观察者模式中可观察的对象，相当于一个事件序列 (GeneratorType)。<br>支持订阅的事件序列，在下文简称为<code>订阅源</code>或<code>可观察者</code>。<br>订阅源的事件队列中包括三种事件类型：</p>\n<ol>\n<li><code>.Next(value)</code>: 表示新的事件数据。</li>\n<li><code>.Completed</code>: 表示事件序列的完结。</li>\n<li><code>.Error</code>: 同样表示完结，但是代表异常导致的完结。</li>\n</ol>\n<h3 id=\"新建订阅源几种快捷方法\"><a href=\"#新建订阅源几种快捷方法\" class=\"headerlink\" title=\"新建订阅源几种快捷方法\"></a>新建订阅源几种快捷方法</h3><ol>\n<li><code>empty</code>是一个空的序列，它只发送 <code>.Completed</code> 消息。<figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br><span class=\"line\">example(<span class=\"string\">\"empty\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> emptySequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = empty()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = emptySequence.subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">                                                <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- empty example ---</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></li>\n<li><code>never</code> 是没有任何元素、也不会发送任何事件的空序列。<figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">- returns: An observable sequence whose observers will never get called.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">never</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br></pre></td></tr></table></figure></li>\n<li><code>just</code> 是只包含一个元素的序列，它会先发送 <code>.Next(value)</code> ，然后发送 <code>.Completed</code><figure class=\"highlight swift\"><figcaption><span>Observable+Creation.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">Returns an observable sequence that contains a single element.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">just</span><span class=\"params\">(<span class=\"number\">_</span> element: E)</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">Just</span>(element: element)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>sequenceOf</code> 可以把一系列元素转换成订阅源<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sequenceOfElements<span class=\"comment\">/* : Observable&lt;Int&gt; */</span> = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>asObservable方法</code> 将遵守<code>ObservableType</code>协议的对象转为可观察者序列<figure class=\"highlight swift\"><figcaption><span>ObservableType.swift</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ObservableType</span> : <span class=\"title\">ObservableConvertibleType</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Default implementation of converting `ObservableType` to `Observable`.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asObservable</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sequenceFromArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asObservable()</span><br></pre></td></tr></table></figure></li>\n<li><code>failWith</code>创建一个没有元素的序列，只会发送失败 (<code>.Error</code>) 事件。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> erroredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = failWith(error)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = erroredSequence.subscribe &#123; event <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(event)&#125;</span><br><span class=\"line\">--- failWith example ---</span><br><span class=\"line\"><span class=\"type\">Error</span>(<span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Test</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Test error -1.)\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"create自定义订阅源\"><a href=\"#create自定义订阅源\" class=\"headerlink\" title=\"create自定义订阅源\"></a>create自定义订阅源</h3><p><code>create</code> 可以通过闭包创建序列，通过 <code>.on(e: Event)</code> 添加可观察者事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"create\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myJust = &#123; (singleElement: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">                observer.on(.<span class=\"type\">Next</span>(singleElement))</span><br><span class=\"line\">                observer.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = myJust(<span class=\"number\">5</span>).subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- create example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"deferred订阅源的懒加载\"><a href=\"#deferred订阅源的懒加载\" class=\"headerlink\" title=\"deferred订阅源的懒加载\"></a>deferred订阅源的懒加载</h3><p><code>deferred</code>表示当有有新增订阅者第一次订阅了该订阅源时，订阅源才会被创建，且每个订阅者订阅的对象都是内容相同而完全独立的序列。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = deferred &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> just(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// got value</span></span><br><span class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></span><br><span class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">Optional</span>(<span class=\"string\">\"Hello!\"</span>))</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"几种特殊类型的订阅源\"><a href=\"#几种特殊类型的订阅源\" class=\"headerlink\" title=\"几种特殊类型的订阅源\"></a>几种特殊类型的订阅源</h2><p><code>Subject</code> 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 <code>Observable 对象</code>，同时又可以对它的订阅者们发送事件。</p>\n<h3 id=\"PublishSubject-向所有订阅者发送事件队列\"><a href=\"#PublishSubject-向所有订阅者发送事件队列\" class=\"headerlink\" title=\"PublishSubject 向所有订阅者发送事件队列\"></a>PublishSubject 向所有订阅者发送事件队列</h3><p>当<code>PublishSubject</code>类型订阅源事件队列中<code>.on()</code>新增事件时，会触发所有订阅者，一起响应该事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"PublishSubject\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">PublishSubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于PublishSubject的几种补发式订阅源\"><a href=\"#基于PublishSubject的几种补发式订阅源\" class=\"headerlink\" title=\"基于PublishSubject的几种补发式订阅源\"></a>基于PublishSubject的几种补发式订阅源</h3><p>以下几种类型的订阅源，相较第一种仅多了补发历史事件，姑且称为<code>补发式订阅源</code>。</p>\n<h4 id=\"ReplaySubject先向最新订阅者补发所有已发生的事件\"><a href=\"#ReplaySubject先向最新订阅者补发所有已发生的事件\" class=\"headerlink\" title=\"ReplaySubject先向最新订阅者补发所有已发生的事件\"></a>ReplaySubject先向最新订阅者补发所有已发生的事件</h4><p>当<code>ReplaySubject</code>类型的订阅源，新增订阅者时，该类型的订阅源会把之前已发送过的所有事件队列重新补发给这个最新订阅者。这样就迫使订阅者会对从历史的事件队列逐一响应。<br><code>bufferSize</code> 是缓冲区的大小，决定了补发队列的最大值。如果 <code>bufferSize</code> 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"ReplaySubject\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">ReplaySubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b) <span class=\"comment\">// 补了一个 b</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"BehaviorSubject-先向最新订阅者补发最近一次历史事件\"><a href=\"#BehaviorSubject-先向最新订阅者补发最近一次历史事件\" class=\"headerlink\" title=\"BehaviorSubject 先向最新订阅者补发最近一次历史事件\"></a>BehaviorSubject 先向最新订阅者补发最近一次历史事件</h4><p><code>BehaviorSubject</code>类型的订阅源会向最新订阅者发送最近一次的历史事件队列，如果没有则发送一个默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"BehaviorSubject\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"z\"</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</span><br><span class=\"line\">    subject.on(.<span class=\"type\">Completed</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">BehaviorSubject</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h4><p><code>Variable</code> 是基于 <code>BehaviorSubject</code> 的一层封装，它的优势是：不会被显式终结。<br>即：不会收到 <code>.Completed</code> 和 <code>.Error</code> 这类的终结事件，它会主动在析构的时候发送 <code>.Complete</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"Variable\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(<span class=\"string\">\"z\"</span>)</span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: variable)</span><br><span class=\"line\">    variable.value = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    variable.value = <span class=\"string\">\"b\"</span></span><br><span class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: variable)</span><br><span class=\"line\">    variable.value = <span class=\"string\">\"c\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"type\">Variable</span> example ---</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"支持订阅的嵌套函数\"><a href=\"#支持订阅的嵌套函数\" class=\"headerlink\" title=\"支持订阅的嵌套函数\"></a>支持订阅的嵌套函数</h2><h3 id=\"map-规则-遍历映射\"><a href=\"#map-规则-遍历映射\" class=\"headerlink\" title=\"map{规则} 遍历映射\"></a>map{规则} 遍历映射</h3><p>通过闭包中定义的规则将队列中的数据映射到新的队列中，支持订阅遍历事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;U&gt;<span class=\"params\">(transform: <span class=\"params\">(T)</span></span></span> -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">U</span>[]</span><br><span class=\"line\"><span class=\"comment\">//效果</span></span><br><span class=\"line\">[ x1, x2, ... , xn].<span class=\"built_in\">map</span>(f) -&gt; [f(x1), f(x2), ... , f(xn)]</span><br></pre></td></tr></table></figure><br><code>map</code>接受一个把 <code>T</code> 类型的转换成 <code>U</code> 类型的<code>transform</code>函数，最终返回的是 <code>U 类型的集合</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"map\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originalSequence = sequenceOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    originalSequence.<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;.subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">map</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"flatMap-嵌套式遍历映射\"><a href=\"#flatMap-嵌套式遍历映射\" class=\"headerlink\" title=\"flatMap 嵌套式遍历映射\"></a>flatMap 嵌套式遍历映射</h3><p>嵌套式遍历描述：在遍历当前队列的过程中，每次执行闭包时都会遍历另一个嵌套队列中的所有事件。<br>可以想象嵌套for 循环来理解。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"flatMap\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceInt = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceString = sequenceOf(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"--\"</span>)</span><br><span class=\"line\">    sequenceInt.flatMap&#123; int <span class=\"keyword\">in</span> sequenceString &#125;.subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- flatMap example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(--)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"scan-initial-U-combine-U-T-gt-U-迭代映射\"><a href=\"#scan-initial-U-combine-U-T-gt-U-迭代映射\" class=\"headerlink\" title=\"scan(initial:U,combine:(U, T) -&gt; U)迭代映射\"></a>scan(initial:U,combine:(U, T) -&gt; U)迭代映射</h3><p>scan 有点像 reduce ，把<code>U</code>类型集合中的所有元素，以<code>initial</code>为初始值，按照<code>combine</code>规则，逐个迭代并返回一个U类型的对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"scan\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequenceToSum = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    sequenceToSum.scan(<span class=\"number\">0</span>) &#123; acum, elem <span class=\"keyword\">in</span> acum + elem &#125;</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- scan example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">15</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Filtering-支持订阅的过滤器\"><a href=\"#Filtering-支持订阅的过滤器\" class=\"headerlink\" title=\"Filtering 支持订阅的过滤器\"></a>Filtering 支持订阅的过滤器</h2><h3 id=\"filter-布尔语句-条件过滤法\"><a href=\"#filter-布尔语句-条件过滤法\" class=\"headerlink\" title=\"filter{布尔语句} 条件过滤法\"></a>filter{布尔语句} 条件过滤法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"filter\"</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">.<span class=\"built_in\">filter</span> &#123; $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">filter</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"distinctUntilChanged-去重过滤法（相邻且不重复）\"><a href=\"#distinctUntilChanged-去重过滤法（相邻且不重复）\" class=\"headerlink\" title=\"distinctUntilChanged() 去重过滤法（相邻且不重复）\"></a>distinctUntilChanged() 去重过滤法（相邻且不重复）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"distinctUntilChanged\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .distinctUntilChanged().subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- distinctUntilChanged example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"take-int-掐尖过滤法\"><a href=\"#take-int-掐尖过滤法\" class=\"headerlink\" title=\"take(int) 掐尖过滤法\"></a>take(int) 掐尖过滤法</h3><p><code>take</code>只获取队列中前 n 个事件，在满足数量之后会自动 <code>.Completed</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"take\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">.take(<span class=\"number\">3</span>).subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- take example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Combining-订阅源聚合器\"><a href=\"#Combining-订阅源聚合器\" class=\"headerlink\" title=\"Combining 订阅源聚合器\"></a>Combining 订阅源聚合器</h2><p>订阅源聚合器将多个可观察者（订阅源）合并成一个可观察者（聚合订阅源），这样更便于订阅者同时监听多个订阅源。</p>\n<h3 id=\"startWith-向可观察者队列中添加排头兵（新增的可观察者）\"><a href=\"#startWith-向可观察者队列中添加排头兵（新增的可观察者）\" class=\"headerlink\" title=\"startWith 向可观察者队列中添加排头兵（新增的可观察者）\"></a>startWith 向可观察者队列中添加排头兵（新增的可观察者）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).startWith(<span class=\"number\">3</span>).subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">--- startWith example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"combineLatest-合并聚合订阅源最后一次事件数据，生成一个聚合事件\"><a href=\"#combineLatest-合并聚合订阅源最后一次事件数据，生成一个聚合事件\" class=\"headerlink\" title=\"combineLatest 合并聚合订阅源最后一次事件数据，生成一个聚合事件\"></a>combineLatest 合并聚合订阅源最后一次事件数据，生成一个聚合事件</h3><p>便于订阅者监听聚合订阅源中每个订阅源的最后一次事件数据<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"combineLatest 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    combineLatest(intOb1, intOb2) &#123;<span class=\"string\">\"\\($0) \\($1)\"</span>&#125;.subscribe &#123;  <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- combineLatest <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"zip-intOb1-intOb2-拉链式合并\"><a href=\"#zip-intOb1-intOb2-拉链式合并\" class=\"headerlink\" title=\"zip(intOb1, intOb2) 拉链式合并\"></a>zip(intOb1, intOb2) 拉链式合并</h3><p>仅在凑齐聚合源中所有订阅源的事件时，才会聚合一次，触发订阅者的响应。可以将多达8个订阅源<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"zip 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"built_in\">zip</span>(intOb1, intOb2) &#123; <span class=\"string\">\"\\($0) \\($1)\"</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</span><br><span class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"C\"</span>))</span><br><span class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- <span class=\"built_in\">zip</span> <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"merge-按可观察者的新的事件次序合并队列\"><a href=\"#merge-按可观察者的新的事件次序合并队列\" class=\"headerlink\" title=\"merge() 按可观察者的新的事件次序合并队列\"></a>merge() 按可观察者的新的事件次序合并队列</h3><p>订阅者会按次序来响应聚合订阅源的每一件事件<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"merge 1\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    sequenceOf(subject1, subject2).merge().subscribeNext &#123; int <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(int)&#125;</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- merge <span class=\"number\">1</span> example ---</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"switchLatest订阅源切换器：用于嵌套式订阅源\"><a href=\"#switchLatest订阅源切换器：用于嵌套式订阅源\" class=\"headerlink\" title=\"switchLatest订阅源切换器：用于嵌套式订阅源\"></a>switchLatest订阅源切换器：用于嵌套式订阅源</h3><p>通过切换（var3.value）嵌套的订阅源，来切换订阅者当前监听的订阅源，以响应当前订阅源中的可观察者的事件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"switchLatest\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">Variable</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">Variable</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">Variable</span>(var1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> d = var3.switchLatest().subscribe&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    var1.value = <span class=\"number\">1</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">2</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">3</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">4</span></span><br><span class=\"line\">    var3.value = var2</span><br><span class=\"line\">    var2.value = <span class=\"number\">201</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">5</span></span><br><span class=\"line\">    var3.value = var1</span><br><span class=\"line\">    var2.value = <span class=\"number\">202</span></span><br><span class=\"line\">    var1.value = <span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- switchLatest example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h2><ol>\n<li>订阅器：<code>subscribe</code> 用来订阅可观察者的事件队列（即订阅源），并指定响应的相关操作</li>\n<li>Next订阅器：<code>subscribeNext</code> 只订阅 <code>.Next</code> 事件</li>\n<li>Completed订阅器：<code>subscribeCompleted</code> 只订阅<code>.Completed</code> 完成事件</li>\n<li>Error订阅器：<code>subscribeError</code> 订阅 <code>.Error</code> 失败事件</li>\n<li>订阅器观察者：<code>doOn</code> 在订阅器执行之前，获得执行代码的机会。可对比理解：<code>swift中的属性观察者</code></li>\n</ol>\n<h2 id=\"控制take掐尖过滤器\"><a href=\"#控制take掐尖过滤器\" class=\"headerlink\" title=\"控制take掐尖过滤器\"></a>控制take掐尖过滤器</h2><p>过滤器通过指定的事件和状态语句来判断是否停止take</p>\n<h3 id=\"takeUntil-得到指定事件之后触发-Completed-事件\"><a href=\"#takeUntil-得到指定事件之后触发-Completed-事件\" class=\"headerlink\" title=\"takeUntil 得到指定事件之后触发 .Completed 事件\"></a>takeUntil 得到指定事件之后触发 .Completed 事件</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"takeUntil\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originalSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whenThisSendsNextWorldStops = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    originalSequence.takeUntil(whenThisSendsNextWorldStops)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    whenThisSendsNextWorldStops.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- takeUntil example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"takeWhile-判断语句\"><a href=\"#takeWhile-判断语句\" class=\"headerlink\" title=\"takeWhile 判断语句\"></a>takeWhile 判断语句</h3><p>takeWhile 则是可以通过状态语句判断是否继续 take 。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">\"takeWhile\"</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">    sequence.takeWhile &#123; int <span class=\"keyword\">in</span> int &lt; <span class=\"number\">2</span> &#125;.subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--- takeWhile example ---</span><br><span class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"开源库","path":"api/categories/开源库.json"},{"name":"RxSwift","path":"api/categories/RxSwift.json"}],"tags":[{"name":"语法","path":"api/tags/语法.json"},{"name":"工具","path":"api/tags/工具.json"},{"name":"SDK","path":"api/tags/SDK.json"}]}