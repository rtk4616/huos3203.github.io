{"name":"配置","postlist":[{"title":"CFBundleDisplayName更改APP启动图标的名称","slug":"iOS/更改设备屏幕上显示的应用程序图标下方的名称","date":"2017-02-24T14:23:59.000Z","updated":"2017-05-26T18:13:13.000Z","comments":true,"path":"api/articles/iOS/更改设备屏幕上显示的应用程序图标下方的名称.json","excerpt":null,"keywords":null,"cover":"http://p27uwfdhv.bkt.clouddn.com/static/images/qa1823_ExpandAppInProjectNavigator.png?imageMogr2/2/w/800","content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>修改APP启动图标上的名称，需配置<code>Info.plist</code>文件，增加<code>CFBundleDisplayName</code>属性键值对。<br>进入到如下界面：<br><!--长宽设置百分比大小无效果--><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/qa1823_ExpandAppInProjectNavigator.png?imageMogr2/2/w/800\"></p>\n<p>在<code>Info.plist</code>文件属性列表中搜索”Bundle display name”，如果存在就修改为新APP名称。<br>如果不存在，在任何一个属性条目下，点击”+”按钮，弹出的下拉列表中选择”Bundle display name”，再双击”Bundle display name”属性值列，输入新APP名称。<br><!--长宽设置百分比大小无效果--><br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/qa1823_WatchKitAppInfoPane.png?imageMogr2/2/w/800\"></p>\n<h2 id=\"agvtool自动增加版本号命令行工具\"><a href=\"#agvtool自动增加版本号命令行工具\" class=\"headerlink\" title=\"agvtool自动增加版本号命令行工具\"></a>agvtool自动增加版本号命令行工具</h2><p>版本号和编译号分别是代表了正式发布版本和内部版本， agvtool 是一个自动增加版本号的命令行工具。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/QA1827_AppStoreBuildNumber.png?imageMogr2/2/w/800\"><br>注意：版本号是给用户看的，用于标明当前的发行版本，并且被存储在 App 的 Info.plist 文件的 CFBundleShortVersionString (Bundle versions string, short) 中。编译号是内部使用的，用于标明未发行或者已内部发行的应用程序，并且它被存储在 Info.plist 文件的 CFBundleVersion (Bundle version) 中。</p>\n<p>注意：如果应用程序包含了多个目标（target）， agvtool 工具将会把所有目标都设置为同一个版本号和编译号。</p>\n<h3 id=\"设置-Current-Project-Version-为选定的值\"><a href=\"#设置-Current-Project-Version-为选定的值\" class=\"headerlink\" title=\"设置 Current Project Version 为选定的值\"></a>设置 Current Project Version 为选定的值</h3><p>Xcode 工程文件 project.pbxproj 包含了 CURRENT_PROJECT_VERSION (Current Project Version) 编译设定，这个编译设定指定了当前工程的版本。<br>agvtool 会搜索此编译选项。如果这个值存在就运行，否则不运行，这个值用来更新编译号。</p>\n<h3 id=\"设置-Versioning-System-为-Apple-Generic\"><a href=\"#设置-Versioning-System-为-Apple-Generic\" class=\"headerlink\" title=\"设置 Versioning System 为 Apple Generic\"></a>设置 Versioning System 为 Apple Generic</h3><p>默认情况下苹果不使用任何版本系统，设置为 Apple Generic 确保 Xcode 包含全部的 agvtool 生成的版本信息。</p>\n<img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/QA1827_Versioning.png?imageMogr2/2/w/800\">\n<p>注意： Current Project Version 的值必须是整数或者浮点数，新工程最好设置为1。</p>\n<h3 id=\"设置版本和编译号\"><a href=\"#设置版本和编译号\" class=\"headerlink\" title=\"设置版本和编译号\"></a>设置版本和编译号</h3><p>agvtool 从 Info.plist 文件搜索版本和编译号。如果存在就更新，不存在就不执行。<br>确保 CFBundleVersion (Bundle version) 和 CFBundleShortVersionString (Bundle versions string, short) 存在。<br><img src=\"http://p27uwfdhv.bkt.clouddn.com/static/images/QA1827_InfoPaneInXcode.png?imageMogr2/2/w/800\"></p>\n<h3 id=\"版本号命令\"><a href=\"#版本号命令\" class=\"headerlink\" title=\"版本号命令\"></a>版本号命令</h3><p>退出 Xcode，在终端下进入到包含 .xcodeproj 工程文件的目录， .xcodeproj 文件包含了 project.pbxproj 文件。</p>\n<ol>\n<li><p>查看版本号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agvtool what-marketing-version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新版本号</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agvtool new-marketing-version &lt;指定的版本号&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译号命令\"><a href=\"#编译号命令\" class=\"headerlink\" title=\"编译号命令\"></a>编译号命令</h3><ol>\n<li><p>将编译号设置为指定版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agvtool new-version -all &lt;指定的版本号&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新编译号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agvtool next-version -all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前编译号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agvtool what-version</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"配置","path":"api/categories/配置.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"经历","path":"api/tags/经历.json"},{"name":"配置","path":"api/tags/配置.json"}]},{"title":"在OC和swift中区分多个targets","slug":"iOS/在OC和swift中区分多个targets","date":"2017-01-11T13:49:33.000Z","updated":"2017-08-17T14:54:01.000Z","comments":true,"path":"api/articles/iOS/在OC和swift中区分多个targets.json","excerpt":null,"keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"build-setting预编译位置\"><a href=\"#build-setting预编译位置\" class=\"headerlink\" title=\"build setting预编译位置\"></a>build setting预编译位置</h2><ol>\n<li>Preprocessor Macros</li>\n<li>Other Swift Flags</li>\n</ol>\n<p>为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。</p>\n<h3 id=\"Objective-C项目中Preprocessor-Macros\"><a href=\"#Objective-C项目中Preprocessor-Macros\" class=\"headerlink\" title=\"Objective-C项目中Preprocessor Macros\"></a>Objective-C项目中Preprocessor Macros</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>添加位置：选择项目中对应的target名-&gt;在<code>Build Settings</code>下<code>Apple LLVM 7.0 - Preprocessing</code>-&gt;<code>Preprocessor Macros</code>。<br>添加变量：在Rebug和Release区域添加一个变量<code>DEVELOPMENT</code><br>    对应target1: 设<code>DEVELOPMENT=1</code>表示开发版<br>    对应target2: 设<code>DEVELOPMENT=0</code>表示生产版</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>根据已配置的宏DEV_VERSION，我们可以在代码中利用它动态地编译项目。下面是一个简单的例子：<br>Objective-C中使用<code>＃if</code>检查<code>DEVELOPMENT</code>的环境，并相应的设置URLs/ API密钥。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#if DEVELOPMENT</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://dev.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"DI2023409jf90ew\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\">     <span class=\"meta\">#define SERVER_URL @<span class=\"meta-string\">\"http://prod.server.com/api/\"</span></span></span><br><span class=\"line\">     <span class=\"meta\">#define API_TOKEN @<span class=\"meta-string\">\"71a629j0f090232\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Swift中Other-Swift-Flags\"><a href=\"#Swift中Other-Swift-Flags\" class=\"headerlink\" title=\"Swift中Other Swift Flags\"></a>Swift中Other Swift Flags</h3><p>对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。</p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><hr>\n<p>选中开发target，添加一个标识表示开发版本<br>选中<code>target</code> -&gt; <code>Build Setting</code>-&gt;<code>Swift Compiler - Custom Flags</code>-&gt;将值设为<code>-DDEVELOPMENT</code>表示这个target作为开发版本。</p>\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><hr>\n<p>Swift中你仍然可以使用<code>#if</code>判定build的参数动态编译。然而，除了使用<code>#define</code>定义基本常量，在swift中我们也可以用<code>let</code>定义一个全局常量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">if</span> <span class=\"type\">DEVELOPMENT</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://dev.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"DI2023409jf90ew\"</span></span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SERVER_URL</span> = <span class=\"string\">\"http://prod.server.com/api/\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">API_TOKEN</span> = <span class=\"string\">\"71a629j0f090232\"</span></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cocoachina.com/ios/20160331/15832.html\" target=\"_blank\" rel=\"noopener\">参照</a></p>\n","raw":null,"categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"配置","path":"api/categories/配置.json"}],"tags":[{"name":"targets","path":"api/tags/targets.json"}]}]}