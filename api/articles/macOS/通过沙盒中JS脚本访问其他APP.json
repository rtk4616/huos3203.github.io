{"title":"通过沙盒中JS脚本访问其他APP","slug":"macOS/通过沙盒中JS脚本访问其他APP","date":"2017-02-14T18:25:29.000Z","updated":"2017-02-16T13:43:01.000Z","comments":true,"path":"api/articles/macOS/通过沙盒中JS脚本访问其他APP.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><p>如何使用脚本字典里的命令和对象来与其他的应用进行通讯?<br>这个教程将向您展示现在使用 <code>AppleScript</code> 来控制别的应用的最佳方式。我也会告诉您一些小技巧以帮助您和您的用户用最小的努力就架设起 <code>AppleScript</code>。</p>\n<h2 id=\"在自己的APP中编写\"><a href=\"#在自己的APP中编写\" class=\"headerlink\" title=\"在自己的APP中编写\"></a>在自己的APP中编写</h2><h3 id=\"编写AppleScript代码\"><a href=\"#编写AppleScript代码\" class=\"headerlink\" title=\"编写AppleScript代码\"></a>编写AppleScript代码</h3><p><a href=\"https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptlangguide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1\" target=\"_blank\" rel=\"noopener\">AppleScript 脚本指南</a><br>与其他应用进行通讯的脚本一般来说都很短，也容易理解。<code>AppleScript</code> 可以被想做一种传送的机制，而不是一种处理环境。<br>典型脚本:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on chockify(inputString)</span><br><span class=\"line\">    set resultString to <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        repeat <span class=\"keyword\">with</span> inputStringCharacter <span class=\"keyword\">in</span> inputString</span><br><span class=\"line\">            set asciiValue to (ASCII number inputStringCharacter)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asciiValue &gt; <span class=\"number\">96</span> and asciiValue &lt; <span class=\"number\">123</span>) then</span><br><span class=\"line\">                set resultString to resultString &amp; (ASCII character (asciiValue - <span class=\"number\">32</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((asciiValue &gt; <span class=\"number\">64</span> and asciiValue &lt; <span class=\"number\">91</span>) or (asciiValue = <span class=\"number\">32</span>)) then</span><br><span class=\"line\">                    set resultString to resultString &amp; inputStringCharacter</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (asciiValue &gt; <span class=\"number\">47</span> and asciiValue &lt; <span class=\"number\">58</span>) then</span><br><span class=\"line\">                        set numberStrings to &#123;<span class=\"string\">\"ZERO\"</span>, <span class=\"string\">\"ONE\"</span>, <span class=\"string\">\"TWO\"</span>, <span class=\"string\">\"THREE\"</span>, <span class=\"string\">\"FOR\"</span>, <span class=\"string\">\"FIVE\"</span>, <span class=\"string\">\"SIX\"</span>, <span class=\"string\">\"SEVEN\"</span>, <span class=\"string\">\"EIGHT\"</span>, <span class=\"string\">\"NINE\"</span>&#125;</span><br><span class=\"line\">                        set itemIndex to asciiValue - <span class=\"number\">47</span></span><br><span class=\"line\">                        set numberString to item itemIndex <span class=\"keyword\">of</span> numberStrings</span><br><span class=\"line\">                        set resultString to resultString &amp; numberString &amp; <span class=\"string\">\" \"</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (asciiValue = <span class=\"number\">33</span>) then</span><br><span class=\"line\">                            set resultString to resultString &amp; <span class=\"string\">\" DUH\"</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (asciiValue = <span class=\"number\">63</span>) then</span><br><span class=\"line\">                                set resultString to resultString &amp; <span class=\"string\">\" IF YOU KNOW WHAT I MEAN\"</span></span><br><span class=\"line\">                            end <span class=\"keyword\">if</span></span><br><span class=\"line\">                        end <span class=\"keyword\">if</span></span><br><span class=\"line\">                    end <span class=\"keyword\">if</span></span><br><span class=\"line\">                end <span class=\"keyword\">if</span></span><br><span class=\"line\">            end <span class=\"keyword\">if</span></span><br><span class=\"line\">        end repeat</span><br><span class=\"line\">        resultString</span><br><span class=\"line\">end chockify</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建事件描述符-event-descriptor\"><a href=\"#创建事件描述符-event-descriptor\" class=\"headerlink\" title=\"创建事件描述符 (event descriptor)\"></a>创建事件描述符 (event descriptor)</h3><ol>\n<li>导入Carbon.h<br>它有关于所有的 AppleEvent 的定义。<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Carbon/Carbon.h&gt;</span> // for AppleScript definitions</span></span><br></pre></td></tr></table></figure></li>\n<li>OC中创建<code>chockify</code>事件描述符<br>这是可以在你的脚本和应用之间互相传递的一个数据块。可以把它理解成一个封装好的会去执行某个事件的目标，一个将被调用的函数，以及这个函数的参数。使用一个 <code>NSString</code> 作为参数，创建<code>chockify</code>事件描述符：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSAppleEventDescriptor</span> *)chockifyEventDescriptorWithString:(<span class=\"built_in\">NSString</span> *)inputString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// parameter</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *parameter = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithString:inputString];</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *parameters = [<span class=\"built_in\">NSAppleEventDescriptor</span> listDescriptor];</span><br><span class=\"line\">    [parameters insertDescriptor:parameter atIndex:<span class=\"number\">1</span>]; <span class=\"comment\">// you have to love a language with indices that start at 1 instead of 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// target</span></span><br><span class=\"line\">    ProcessSerialNumber psn = &#123;<span class=\"number\">0</span>, kCurrentProcess&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *target = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithDescriptorType:typeProcessSerialNumber bytes:&amp;psn length:<span class=\"keyword\">sizeof</span>(ProcessSerialNumber)];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// function</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *function = [<span class=\"built_in\">NSAppleEventDescriptor</span> descriptorWithString:<span class=\"string\">@\"chockify\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// event</span></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"built_in\">NSAppleEventDescriptor</span> appleEventWithEventClass:kASAppleScriptSuite eventID:kASSubroutineEvent targetDescriptor:target returnID:kAutoGenerateReturnID transactionID:kAnyTransactionID];</span><br><span class=\"line\">    [event setParamDescriptor:function forKeyword:keyASSubroutineName];</span><br><span class=\"line\">    [event setParamDescriptor:parameters forKeyword:keyDirectObject];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"OC中加载-AppleScript\"><a href=\"#OC中加载-AppleScript\" class=\"headerlink\" title=\"OC中加载 AppleScript\"></a>OC中加载 AppleScript</h3><p>通过应用包(Application bundle)的一个 <code>URL</code> 可以创建 <code>NSAppleScript</code>的实例。而反过来，脚本也要和上面创建的 <code>chockify 事件描述符</code>一起使用。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *URL = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"Automation\"</span> withExtension:<span class=\"string\">@\"scpt\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (URL) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleScript</span> *appleScript = [[<span class=\"built_in\">NSAppleScript</span> alloc] initWithContentsOfURL:URL error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> chockifyEventDescriptorWithString:[<span class=\"keyword\">self</span>.chockifyInputTextField stringValue]];</span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor = [appleScript executeAppleEvent:event error:&amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! resultEventDescriptor) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript run error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *string = [<span class=\"keyword\">self</span> stringForResultEventDescriptor:resultEventDescriptor];</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> updateChockifyTextFieldWithString:string];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果一切正常的话，你会得到另一个事件描述符。如果出错了，你会得到一个包含了描述错误信息的字典。虽说这个模式和很多其他 <code>Foundation 类</code>很相似，但是返回的错误并不是一个 <code>NSError</code> 的实例。</p>\n<h3 id=\"调用事件描述符\"><a href=\"#调用事件描述符\" class=\"headerlink\" title=\"调用事件描述符\"></a>调用事件描述符</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)stringForResultEventDescriptor:(<span class=\"built_in\">NSAppleEventDescriptor</span> *)resultEventDescriptor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultEventDescriptor)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([resultEventDescriptor descriptorType] != kAENullEvent)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([resultEventDescriptor descriptorType] == kTXNUnicodeTextData) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result = [resultEventDescriptor stringValue];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InputString 输入可以被正确整形输出，并且你现在也看到想在你的应用里运行 AppleScripts 的方法</p>\n<h2 id=\"调用沙盒中脚本代码与访问其他应用\"><a href=\"#调用沙盒中脚本代码与访问其他应用\" class=\"headerlink\" title=\"调用沙盒中脚本代码与访问其他应用\"></a>调用沙盒中脚本代码与访问其他应用</h2><h3 id=\"了解APP沙盒限制\"><a href=\"#了解APP沙盒限制\" class=\"headerlink\" title=\"了解APP沙盒限制\"></a>了解APP沙盒限制</h3><p>如果一段脚本可以轻易地拿到浏览器当前页面上的内容，甚至是在任意标签和窗口运行<code>JavaScript</code>。想象一下如果这些页面里有你的银行账号，或者包含你的信用卡信息什么的。</p>\n<p>对于沙盒应用，Apple 所提倡的是通过用户的需要来驱动安全策略。这意味着是否运行你的脚本完全取决于用户。这些脚本可能是来自互联网，也可能是你应用的一部分。一旦得到了权限，脚本就可以以一种受限的方式与系统其他部分进行交互了。<code>NSUserScriptTask</code>使这一切变得可能。<br>由此：Apple 引入了一个新的抽象类 <code>NSUserScriptTask</code>,有三个具体的子类实现:</p>\n<ol>\n<li><code>NSUserUnixTask</code>: 执行 Unix shell 命令</li>\n<li><code>NSUserAutomatorTask</code>: Automator 工作流</li>\n<li><code>NSUserAppleScriptTask</code>:执行<code>AppleScript脚本</code>,脚本是异步执行的,所以脚本不能对用户界面做更新操作。</li>\n</ol>\n<h3 id=\"开始安装运行脚本\"><a href=\"#开始安装运行脚本\" class=\"headerlink\" title=\"开始安装运行脚本\"></a>开始安装运行脚本</h3><p>怎么向用户请求运行脚本的许可，让你的应用与用户的其他应用更好地工作在一起？<br>两种策略:</p>\n<ol>\n<li>帮助用户来存放运行脚本的位置</li>\n<li>获取行脚本目录可读写</li>\n</ol>\n<h4 id=\"帮用户存放运行脚本的位置\"><a href=\"#帮用户存放运行脚本的位置\" class=\"headerlink\" title=\"帮用户存放运行脚本的位置\"></a>帮用户存放运行脚本的位置</h4><p>只能把把这些脚本放到用户的脚本文件夹(<code>User &gt; Library &gt; Application Scripts/bundle identifier/</code>)中，以只读的方式来运行你的脚本。<br>脚本想要进入这个特定的文件夹的唯一方式就是用用户把它们复制到那里。再者<code>Library 文件夹</code>在 OS X 里默认还是隐藏的。这样对用户都很不友好。<br>让代码来帮助用户打开这个隐藏文件夹：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\">[[<span class=\"built_in\">NSWorkspace</span> sharedWorkspace] openURL:directoryURL];</span><br></pre></td></tr></table></figure><br>通过你的应用的某个控件打开这个文件夹，然后进行编辑。这对于用户自己写的脚本来说是个很好的解决方案。</p>\n<h4 id=\"设置运行脚本目录的读写权限\"><a href=\"#设置运行脚本目录的读写权限\" class=\"headerlink\" title=\"设置运行脚本目录的读写权限\"></a>设置运行脚本目录的读写权限</h4><ol>\n<li>在 Xcode 里，你需要更新 <code>Capabilities</code>，让其包括 <code>User Selected File to Read/Write</code>。在 <code>App Sandbox &gt; File Access</code>里找到相关选项。</li>\n<li>用户的意愿是关键，因为你需要获取权限以将脚本添加到文件夹：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\"><span class=\"built_in\">NSOpenPanel</span> *openPanel = [<span class=\"built_in\">NSOpenPanel</span> openPanel];</span><br><span class=\"line\">[openPanel setDirectoryURL:directoryURL];</span><br><span class=\"line\">[openPanel setCanChooseDirectories:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">[openPanel setCanChooseFiles:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">[openPanel setPrompt:<span class=\"string\">@\"Select Script Folder\"</span>];</span><br><span class=\"line\">[openPanel setMessage:<span class=\"string\">@\"Please select the User &gt; Library &gt; Application Scripts &gt; com.iconfactory.Scriptinator folder\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[openPanel beginWithCompletionHandler:^(<span class=\"built_in\">NSInteger</span> result) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result == <span class=\"built_in\">NSFileHandlingPanelOKButton</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *selectedURL = [openPanel URL];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([selectedURL isEqual:directoryURL])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *destinationURL = [selectedURL URLByAppendingPathComponent:<span class=\"string\">@\"Automation.scpt\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSFileManager</span> *fileManager = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *sourceURL = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"Automation\"</span> withExtension:<span class=\"string\">@\"scpt\"</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\">        <span class=\"built_in\">BOOL</span> success = [fileManager copyItemAtURL:sourceURL toURL:destinationURL error:&amp;error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSAlert</span> *alert = [<span class=\"built_in\">NSAlert</span> alertWithMessageText:<span class=\"string\">@\"Script Installed\"</span> defaultButton:<span class=\"string\">@\"OK\"</span> alternateButton:<span class=\"literal\">nil</span> otherButton:<span class=\"literal\">nil</span> informativeTextWithFormat:<span class=\"string\">@\"The Automation script was installed succcessfully.\"</span>];</span><br><span class=\"line\">            [alert runModal];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ([error code] == <span class=\"built_in\">NSFileWriteFileExistsError</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// this is where you could update the script, by removing the old one and copying in a new one</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// the item couldn't be copied, try again</span></span><br><span class=\"line\">                [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(installAutomationScript:) withObject:<span class=\"keyword\">self</span> afterDelay:<span class=\"number\">0.0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// try again because the user changed the folder path</span></span><br><span class=\"line\">        [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(installAutomationScript:) withObject:<span class=\"keyword\">self</span> afterDelay:<span class=\"number\">0.0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n这么一来，应用包中的 <code>Automation.scpt</code> 文件现在暴露在常规的文件系统中了。</li>\n</ol>\n<h3 id=\"执行脚本任务\"><a href=\"#执行脚本任务\" class=\"headerlink\" title=\"执行脚本任务\"></a>执行脚本任务</h3><p>使用 <code>NSUserAppleScriptTask</code> 来替代 <code>NSAppleScript</code>，来运行上面创建的<code>事件描述符</code>。<br>你大概会经常用到这些脚本任务。文档警告说对于给定的类的某个实例， <code>NSUserAppleScriptTask</code> 不应该被执行多次。所以写一个<code>工厂函数</code>来在需要的时候创建任务：<br><figure class=\"highlight objc\"><figcaption><span>工厂函数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUserAppleScriptTask</span> *)automationScriptTask</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUserAppleScriptTask</span> *result = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSError</span> *error;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *directoryURL = [[<span class=\"built_in\">NSFileManager</span> defaultManager] URLForDirectory:<span class=\"built_in\">NSApplicationScriptsDirectory</span> inDomain:<span class=\"built_in\">NSUserDomainMask</span> appropriateForURL:<span class=\"literal\">nil</span> create:<span class=\"literal\">YES</span> error:&amp;error];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directoryURL) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *scriptURL = [directoryURL URLByAppendingPathComponent:<span class=\"string\">@\"Automation.scpt\"</span>];</span><br><span class=\"line\">        result = [[<span class=\"built_in\">NSUserAppleScriptTask</span> alloc] initWithURL:scriptURL error:&amp;error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! result) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s no AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> if you're not running in a sandbox, the directory URL will always be nil</span></span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s no Application Scripts folder error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果你正在写一个同时适用于沙盒和非沙盒的 Mac 应用的话，在获取 <code>directoryURL</code> 时你需要特别小心。<code>NSApplicationScriptsDirectory</code>只在沙盒中有效。</p>\n</blockquote>\n<p>在创建脚本任务后，你需要使用 <code>AppleEvent</code> 并提供一个结束处理来执行它：<br><figure class=\"highlight objc\"><figcaption><span>AppleEvent</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSUserAppleScriptTask</span> *automationScriptTask = [<span class=\"keyword\">self</span> automationScriptTask];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (automationScriptTask) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> safariURLEventDescriptor];</span><br><span class=\"line\">    [automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! resultEventDescriptor) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSURL</span> *URL = [<span class=\"keyword\">self</span> URLForResultEventDescriptor:resultEventDescriptor];</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> The completion handler for the script is not run on the main thread. Before you update any UI, you'll need to get</span></span><br><span class=\"line\">            <span class=\"comment\">// on that thread by using libdispatch or performing a selector.</span></span><br><span class=\"line\">            [<span class=\"keyword\">self</span> performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(updateURLTextFieldWithURL:) withObject:URL waitUntilDone:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>对于用户写的脚本，用户可能期望你的应用只是简单地’运行’脚本 (而不去调用事件描述符中指定的函数)。在这种情况下，你可以为 <code>event</code> 传递一个 <code>nil</code>，脚本就会像用户在 <code>Finder</code> 中双击那样的行为进行执行。<br><code>NSUserAppleScriptTask</code>脚本是异步执行的，所以你的用户界面并不会被一个 (比较长) 的脚本锁住，在结束后会执行回调处理。</p>\n<h2 id=\"同步操作\"><a href=\"#同步操作\" class=\"headerlink\" title=\"同步操作\"></a>同步操作</h2><p><code>NSAppleScript</code> 和 <code>NSUserAppleScriptTask</code> 有一个微妙的区别：新的机制是异步执行的。对于大部分情况，使用一个结束回调来处理会是一个好得多的方式，因为这样就不会因为执行脚本而阻碍你的应用。<br>然而有时候如果你想带有依赖地来执行任务的时候，事情就变得有些取巧了。比方说一个任务需要在另一个任务开始之前必须完成。这种情况下你就会想念 <code>NSAppleScript</code> 的同步特性了。<br>要获得传统方式的行为，一种简单的方法是使用一个<code>信号量(semaphore)</code> 来确保同时只有一个任务运行、在你的类或者应用的初始化方法中，使用 <code>libdispatch</code> 创建一个信号量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.appleScriptTaskSemaphore = dispatch_semaphore_create(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure><br>接下来在初始化脚本任务之前，简单地等待信号量。当任务完成时，标记相同的这个信号量：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// wait for any previous tasks to complete before starting a new one — remember that you're blocking the main thread here!</span></span><br><span class=\"line\">dispatch_semaphore_wait(<span class=\"keyword\">self</span>.appleScriptTaskSemaphore, DISPATCH_TIME_FOREVER);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run the script task</span></span><br><span class=\"line\"><span class=\"built_in\">NSAppleEventDescriptor</span> *event = [<span class=\"keyword\">self</span> openNetworkPreferencesEventDescriptor];</span><br><span class=\"line\">[automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class=\"built_in\">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! resultEventDescriptor)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s AppleScript task error = %@\"</span>, __PRETTY_FUNCTION__, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(showNetworkAlert) withObject:<span class=\"literal\">nil</span> waitUntilDone:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// the task has completed, so let any pending tasks proceed</span></span><br><span class=\"line\">    dispatch_semaphore_signal(<span class=\"keyword\">self</span>.appleScriptTaskSemaphore);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure><br>再强调一下，除非确实有所需要，否则最好别这么做。</p>\n","categories":[{"name":"macOS","path":"api/categories/macOS.json"},{"name":"JS","path":"api/categories/JS.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"},{"name":"AppleScript","path":"api/tags/AppleScript.json"},{"name":"脚本","path":"api/tags/脚本.json"},{"name":"沙盒","path":"api/tags/沙盒.json"}]}