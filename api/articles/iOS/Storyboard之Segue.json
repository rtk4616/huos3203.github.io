{"title":"Storyboard之Segue","slug":"iOS/Storyboard之Segue","date":"2014-07-22T10:59:49.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/iOS/Storyboard之Segue.json","excerpt":"Segue原理:在iOS开发中，segue用来实现storyboard中源视图控制器和目标视图控制器连接，当segue被触发时，系统将完成下列操作：实例化目标视图控制器实例化一个新segue对象，该对象持有所有的信息调用源视图控制器的prepareForSegue:sender:方法，调用segue的 perform 方法将目标控制器带到屏幕上。<br>这个动作行为依赖segue的类型如modal,push,custom,modal segue告诉源视图控制器present目标视图控制器。在源视图控制器的prepareForSegue:sender:的方法中，执行对目标视图控制器所有必要的属性配置，包括委托设置（如目标视图控制器有协议）。<br>","covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><script src=\"/assets/js/APlayer.min.js\"> </script><h5 id=\"Segue原理\"><a href=\"#Segue原理\" class=\"headerlink\" title=\"Segue原理:\"></a>Segue原理:</h5><p>在iOS开发中，segue用来实现storyboard中源视图控制器和目标视图控制器连接，当segue被触发时，系统将完成下列操作：</p>\n<ol>\n<li>实例化目标视图控制器</li>\n<li>实例化一个新segue对象，该对象持有所有的信息</li>\n<li>调用源视图控制器的prepareForSegue:sender:方法，</li>\n<li>调用segue的 perform 方法将目标控制器带到屏幕上。<br>这个动作行为依赖segue的类型如modal,push,custom,modal segue告诉源视图控制器present目标视图控制器。</li>\n</ol>\n<p>在源视图控制器的prepareForSegue:sender:的方法中，执行对目标视图控制器所有必要的属性配置，包括委托设置（如目标视图控制器有协议）。<br><a id=\"more\"></a><br>在apple的文档库中第二个示例应用开发文档中，介绍了这样一个segue的使用例子。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>) prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"keyword\">id</span>)sender  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([[segue identifier] isEqualToString:<span class=\"string\">@\"ShowSightingsDetails\"</span>])  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//当用户选择表视图中的一行时，触发**segue**事件，传输数据到目标视图控制器，使目标控制器上能显示`sighting`</span></span><br><span class=\"line\">        DetailViewController *detailViewController = [segue destinationViewController];  </span><br><span class=\"line\">        detailViewController.sighting = [<span class=\"keyword\">self</span>.dataController objectInListAtIndex:[<span class=\"keyword\">self</span>.tableView indexPathForSelectedRow].row];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([[segue identifier] isEqualToString:<span class=\"string\">@\"ShowAddSightingView\"</span>])  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        AddSightingViewController *addSightingViewController = [[[segue destinationViewController] viewControllers] objectAtIndex:<span class=\"number\">0</span>];  </span><br><span class=\"line\">        addSightingViewController.delegate = <span class=\"keyword\">self</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>在<code>storyboard</code>中，这个实现方法代码是用来处理从主视图控制器到两个不同的目标视图控制器的<strong>segue</strong>。这两个<strong>segue</strong>通过它们的<code>identifier</code>属性进行判断，具体解释如下：  </p>\n<ul>\n<li><p><code>identifier</code>为”<strong>ShowSightingsDetails</strong>“时，目标视图控制器是一个展示明细信息的视图控制器,使用的<strong>segue</strong>类型为<code>push</code>。这种通常用于<strong>navigator</strong>视图控制器中。  </p>\n</li>\n<li><p>在<code>identifier</code>为”<strong>ShowAddSightingView</strong>“时，目标视图控制器管理的是一个新加的<strong>sighting</strong>信息视图，我们称之为<strong>add</strong>视图控制器。它是不需要从主视图控制器（源）传什么数据过来的。但是，主视图控制器需要获取在add视图控制器（目标）上输入的数据。  </p>\n<ul>\n<li><ul>\n<li>实现方式是采用<code>delegate</code>，将主视图控制器设置为add视图控制器(目标)的委托。在add目标视图控制器上执行它的委托中方法，该方法需要先在主视图控制器的实现代码中实现，方法包括如何读取add视图控制器的数据，并dismiss掉add视图控制器。  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>在add视图控制器上，有两个按钮，用于执行<strong>cancel</strong>和<strong>done</strong>操作。这两个按钮操作的方法在主视图控制器中实现。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)addSightingViewControllerDidCancel:(AddSightingViewController *)controller  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">NULL</span>];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)addSightingViewControllerDidFinish:(AddSightingViewController *)controller name:(<span class=\"built_in\">NSString</span> *)name location:(<span class=\"built_in\">NSString</span> *)location &#123;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> ([name length] || [location length]) &#123;  </span><br><span class=\"line\">\t[<span class=\"keyword\">self</span>.dataController addBirdSightingWithName:name location:location];  </span><br><span class=\"line\">\t[[<span class=\"keyword\">self</span> tableView] reloadData];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">\t[<span class=\"keyword\">self</span> dismissModalViewControllerAnimated:<span class=\"literal\">YES</span>];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>在add视图控制器实现代码中，调用它的委托中这两个方法。  </p>\n<h5 id=\"segue三种类型-modal-segue、push-segue、custom-segue\"><a href=\"#segue三种类型-modal-segue、push-segue、custom-segue\" class=\"headerlink\" title=\"segue三种类型:modal segue、push segue、custom segue\"></a>segue三种类型:modal segue、push segue、custom segue</h5><ul>\n<li><h6 id=\"modal-segue\"><a href=\"#modal-segue\" class=\"headerlink\" title=\"modal segue\"></a>modal segue</h6>是一个视图控制器（源）为了完成一个任务而模态地（<strong>modally</strong>）呈现另一个视图控制器（目标）。这个目标视图控制器不是导航视图控制器(<strong>navigation view controller</strong>)的栈中的一部分。<br>在任务完成后，使用<code>delegate</code>将呈现的视图控制器（目标）释放掉，应用界面切换到原来的视图控制器（源）上。  </li>\n</ul>\n<p>这个过程的实现代码可以看成是<code>present</code>和<code>dismiss</code>两个操作。  </p>\n<ul>\n<li><h6 id=\"push-segue\"><a href=\"#push-segue\" class=\"headerlink\" title=\"push segue\"></a>push segue</h6>是将另一个视图控制器压入到导航控制器的栈中。它通常和导航视图控制器(<strong>navigation view controller</strong>)一起使用。<br>新压入的视图控制器会有一个回退按钮，可以退回来上一层。</li>\n</ul>\n<p>这个过程的实现代码可以看成是<code>push</code>和<code>pop</code>两个操作。</p>\n","categories":[{"name":"xcode","path":"api/categories/xcode.json"},{"name":"SB","path":"api/categories/SB.json"}],"tags":[{"name":"转场","path":"api/tags/转场.json"},{"name":"Storyboard","path":"api/tags/Storyboard.json"}]}