{"title":"iOS Document Interaction 编程指南","slug":"iOS/iOSDocumentInteraction编程指南","date":"2014-07-01T23:12:01.000Z","updated":"2018-03-28T07:42:14.000Z","comments":true,"path":"api/articles/iOS/iOSDocumentInteraction编程指南.json","excerpt":"关于 Document Interaction  iOS支持在你的app中通过调用其他app来预览和显示文档。iOS还支持文件关联，允许其他app调用你的app打开文件。这些技术包括了UIKit中提供的UIDocumentInteractionController类，以及Quick Look框架。######预览文档和呈现选项菜单<br>如果app需要打开自身并不支持的文件时，就需要使用UIDocumentInteractionController。一个document interaction controller通过Quick Look框架判断文档是否能被另一个app打开和预览。也就是说，app可以通过documentinteraction controller提供一些支持打开该文件方式的菜单。具体实现需要以下步骤：需要通过其他APP打开的文件，来实例化UIDocumentInteractionController实例对象。  在自己的APP UI中提供一个代表这种文件的图像标（一般显示文件名或者图标）。用户交互，如触摸这个控件，则调用documentinteractioncontroller对象。  三种交互界面:1. 预览文件的内容。2. 一个包含预览和打开操作的菜单。可以通过实现某些委托方法，向菜单中加入其他操作，比如复制、打印。3. 一个菜单，仅包含“以其它方式打开”操作。同时，documentinteractioncontroller内置了一些手势，必要时可以直接实现它们。  ######使用documentinteractioncontroller的场景:与文件交互的app都可以使用。需要从网络下载文件的APP:<br>例如，email程序需要打开和预览邮件附件。不下载文件的APP:<br>例如，APP需要支持文件共享（参考“File-Sharing Support” in iOS Technology Overview), 即可以对同步到app Documents/Shared目录下的文件使用documentinteractioncontroller。","covers":null,"content":"<link rel=\"stylesheet\" href=\"/owl.css\"><link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"关于-Document-Interaction\"><a href=\"#关于-Document-Interaction\" class=\"headerlink\" title=\"关于 Document Interaction\"></a>关于 Document Interaction</h4><p>  iOS支持在你的app中通过调用其他app来预览和显示文档。iOS还支持文件关联，允许其他app调用你的app打开文件。这些技术包括了UIKit中提供的<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/Reference/Reference.html\" target=\"_blank\" rel=\"noopener\">UIDocumentInteractionController</a>类，以及<a href=\"https://developer.apple.com/library/ios/documentation/QuickLook/Reference/QuickLookFrameworkReference_iPhoneOS/_index.html\" target=\"_blank\" rel=\"noopener\">Quick Look</a>框架。</p>\n<ul>\n<li>######预览文档和呈现选项菜单<br>如果app需要打开自身并不支持的文件时，就需要使用<strong>UIDocumentInteractionController</strong>。一个<strong>document interaction controller</strong>通过<strong>Quick Look框架</strong>判断文档是否能被另一个app打开和预览。也就是说，app可以通过<strong>documentinteraction controller</strong>提供一些支持打开该文件方式的菜单。</li>\n</ul>\n<p>具体实现需要以下步骤：</p>\n<ul>\n<li><ul>\n<li>需要通过其他APP打开的文件，来实例化<code>UIDocumentInteractionController</code>实例对象。  </li>\n</ul>\n</li>\n<li><ul>\n<li>在自己的APP UI中提供一个代表这种文件的图像标（一般显示文件名或者图标）。</li>\n</ul>\n</li>\n<li><ul>\n<li>用户交互，如触摸这个控件，则调用<code>documentinteractioncontroller</code>对象。  </li>\n</ul>\n</li>\n</ul>\n<p>三种交互界面:</p>\n<pre><code>1. 预览文件的内容。\n2. 一个包含预览和打开操作的菜单。可以通过实现某些委托方法，向菜单中加入其他操作，比如复制、打印。\n3. 一个菜单，仅包含“以其它方式打开”操作。\n</code></pre><p>同时，<code>documentinteractioncontroller</code>内置了一些手势，必要时可以直接实现它们。  </p>\n<ul>\n<li><p>######使用<code>documentinteractioncontroller</code>的场景:<strong>与文件交互的app都可以使用。</strong></p>\n</li>\n<li><ul>\n<li>需要从网络下载文件的APP:<br>例如，email程序需要打开和预览邮件附件。</li>\n</ul>\n</li>\n<li><ul>\n<li>不下载文件的APP:<br>例如，APP需要支持文件共享（参考“File-Sharing Support” in <a href=\"https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007898\" target=\"_blank\" rel=\"noopener\">iOS Technology Overview</a>), 即可以对同步到app Documents/Shared目录下的文件使用<code>documentinteractioncontroller</code>。<a id=\"more\"></a>\n<h4 id=\"创建Document-Interaction-Controller\"><a href=\"#创建Document-Interaction-Controller\" class=\"headerlink\" title=\"创建Document Interaction Controller\"></a>创建Document Interaction Controller</h4>创建时，通过需要其他APP打开的文件，来实例化<code>UIDocumentInteractionController</code>实例对象，并设置它的<code>delegate</code>属性。<br><code>delegate</code>对象负责告诉<strong>document  interaction controller</strong>呈现视图时需要的信息，以及当视图显示和用户交互时要执行的动作。<br>如以下代码所示。注意方法的调用者必须返回对象。<figure class=\"highlight objc\"><figcaption><span>实例化document interaction controller</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">UIDocumentInteractionController</span> *) setupControllerWithURL: (<span class=\"built_in\">NSURL</span>) fileURL</span><br><span class=\"line\">    \t\t\t\t\t\t\t\t\t\t\t usingDelegate: (<span class=\"keyword\">id</span> &lt;<span class=\"built_in\">UIDocumentInteractionControllerDelegate</span>&gt;) interactionDelegate </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t   <span class=\"built_in\">UIDocumentInteractionController</span> *interactionController =</span><br><span class=\"line\">\t       \t\t\t\t\t\t\t\t\t[<span class=\"built_in\">UIDocumentInteractionController</span> interactionControllerWithURL: fileURL];</span><br><span class=\"line\">\t   interactionController.delegate = interactionDelegate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> interactionController;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>实例创建后，可以通过它的属性来读取与之关联的文件信息，包括文件名、类型和URL。该实例中还有一个<code>icons</code>属性，其中包含了多个 <code>UIImage</code> 对象,可以用于表示该文档的多个大小的图标。这些信息可用于UI。</p>\n<p>如果用其他APP打开该文件，可以利用该实例的 <code>annotation</code> 属性，该属性包含了其他APP所需的附加信息。当然信息的格式必须能够被该APP识别。<br>例如:当程序想与套件中的其他程序进行交互时，就可以使用<code>annotation</code> 属性。当被调用应用程序打开一个文件时，<code>option</code> 字典中会包含 <code>annotation</code> 的值，可以使用<font color=\"red\" size=\"1\">UIApplicationLaunchOptionsAnnotationKey</font> 作为键在<code>option</code>字典中检索它。</p>\n<h4 id=\"呈现-Document-Interaction-Controller\"><a href=\"#呈现-Document-Interaction-Controller\" class=\"headerlink\" title=\"呈现 Document Interaction Controller\"></a>呈现 Document Interaction Controller</h4><p>用户可以通过 <code>Document interaction controller</code>实例，来预览该文件，或者通过弹出菜单让用户选择相应的动作。  </p>\n<ul>\n<li><p>模式化显示文件预览窗口，调用如下方法:</p>\n<figure class=\"highlight objc\"><figcaption><span>模式化预览窗口调用的方法 Declared In UIDocumentInteractionController.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Displays a full-screen preview of the target document.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)presentPreviewAnimated:(<span class=\"built_in\">BOOL</span>)animated;</span><br></pre></td></tr></table></figure>\n<p>预览窗口是以模式视图显示的，同时必须实现以下协议方法:</p>\n<figure class=\"highlight objc\"><figcaption><span>Declared In UIDocumentInteractionController.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Called when a document interaction controller needs the starting point for animating the display of a document preview.</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIViewController</span> *) documentInteractionControllerViewControllerForPreview: (<span class=\"built_in\">UIDocumentInteractionController</span> *) controller</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注:该方法最终需要返回一个<strong><code>VC</code></strong>，来作为预览窗口的父窗口。假如没有实现该方法，或者在该方法中返回 nil，或者返回的<strong><code>VC</code></strong>无法呈现模式窗口，则该预览窗口不会显示。<br>最终会被<strong><code>documentinteractioncontroller</code></strong>会自动解散它呈现出来的窗口。或调用系统提供销毁模态视图的方法，手动销毁如下：</p>\n<figure class=\"highlight objc\"><figcaption><span>Declared In UIDocumentInteractionController.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Dismisses the currently active menu.</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dismissMenuAnimated:(<span class=\"built_in\">BOOL</span>)animated  </span><br><span class=\"line\"><span class=\"comment\">//Dismisses the currently active document preview.</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dismissPreviewAnimated:(<span class=\"built_in\">BOOL</span>)animated</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>通过弹出菜单提示用户选择相应动作，调用如下方法:</p>\n<figure class=\"highlight objc\"><figcaption><span>弹出\"通过其他方式打开\"菜单 Declared In UIDocumentInteractionController.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Displays an options menu and anchors it to the specified location in the view.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)presentOptionsMenuFromRect:(<span class=\"built_in\">CGRect</span>)rect inView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated</span><br><span class=\"line\"><span class=\"comment\">//Displays an options menu and anchors it to the specified bar button item.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)presentOptionsMenuFromBarButtonItem:(<span class=\"built_in\">UIBarButtonItem</span> *)item animated:(<span class=\"built_in\">BOOL</span>)animated</span><br></pre></td></tr></table></figure></li>\n<li>提示用户用其他程序打开该文件，调用如下方法:<figure class=\"highlight objc\"><figcaption><span>提示用户用其他程序打开 Declared In UIDocumentInteractionController.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Displays a menu for opening the document and anchors that menu to the specified view.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)presentOpenInMenuFromRect:(<span class=\"built_in\">CGRect</span>)rect inView:(<span class=\"built_in\">UIView</span> *)view animated:(<span class=\"built_in\">BOOL</span>)animated</span><br><span class=\"line\"><span class=\"comment\">//Displays a menu for opening the document and anchors that menu to the specified bar button item.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)presentOpenInMenuFromBarButtonItem:(<span class=\"built_in\">UIBarButtonItem</span> *)item animated:(<span class=\"built_in\">BOOL</span>)animated</span><br></pre></td></tr></table></figure>\n以上几种方法都会显示一个视图或一个预览窗口或是弹出菜单。任何一个方法的调用，都要检查返回值。返回值为 <code>NO</code>，表示这个视图没有任何内容，将不能显示。<br>例如，<strong><code>presentOpenInMenuFromRect:inView:animated:</code></strong>方法返回<code>NO</code>,表明已安装的程序中没有任何程序能够打开该文档。</li>\n</ul>\n<h4 id=\"注册应用程序支持的文档类型\"><a href=\"#注册应用程序支持的文档类型\" class=\"headerlink\" title=\"注册应用程序支持的文档类型\"></a>注册应用程序支持的文档类型</h4><p>如果你的程序可以打开某种特定的文件类型，则可以通过<strong>Info.plist</strong>文件注册程序所能打开的文档类型。当其他程序向系统询问哪些程序可以识别该类型的文件时，你的程序就会被列到选项菜单中，供用户选择。  </p>\n<ul>\n<li>有如下概念:  </li>\n<li><ul>\n<li>需要在程序的<strong><code>Info.plist</code></strong>文件中添加新字段<strong><code>CFBundleDocumentTypes</code></strong> 键 (查看 “<a href=\"https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249\" target=\"_blank\" rel=\"noopener\">CoreFoundation Keys</a>”) 。系统会将该键中包含的内容进行登记，这样其他程序就可以通过<strong><code>document interaction controller</code></strong>访问到这些信息。</li>\n</ul>\n</li>\n<li><ul>\n<li><strong><code>CFBundleDocumentTypes</code></strong> 键是一个<code>dictionary</code>数组，一个<code>dictionary</code>表示了一个指定的文档类型。一个文档类型通常与某种文件类型是一一对应的。但是，如果你的程序对多个文件类型采用同样的处理方式，你也可以把这些类型都分成一个组，统一视作一个文档类型。<br>例如，你的程序中使用到的本地文档类型，有一个是旧格式的，还有一个新格式（似乎是影射微软<strong>office</strong>文档），这样就可以将二者分成一组，都放到同一个文档类型下。这样，旧格式和新格式的文件都将显示为同一个文档类型，并以同样的方式打开。  </li>\n</ul>\n</li>\n</ul>\n<p><strong><code>CFBundleDocumentTypes</code></strong> 数组中的每个<code>dictionary</code>包含以下键：<br><figure class=\"highlight objc\"><figcaption><span>字典键名称</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CFBundleTypeName</span> \t\t\t<span class=\"comment\">//指定文档类型名称。</span></span><br><span class=\"line\"><span class=\"built_in\">CFBundleTypeIconFiles</span>    <span class=\"comment\">//是一个数组，包含多个图片文件名，用于作为该文档的图标。</span></span><br><span class=\"line\">LSItemContentTypes \t\t<span class=\"comment\">//是一个数组，包含多个 UTI 类型的字符串。UTI 类型是本文档类型（组）所包含的文件类型。</span></span><br><span class=\"line\">LSHandlerRank \t\t\t\t<span class=\"comment\">//表示应用程序是“拥有”还是仅仅是“打开”这种类型而已。</span></span><br></pre></td></tr></table></figure><br>在应用程序的角度而言，一个文档类型其实就是一种文件类型（或者多个文件类型），该程序将一个文档类型的文件都视作同样的东西对待。例如，一个图片处理程序可能将各种图片文件都看成不同的文档类型，这样便于根据每个类型进行相应的优化。但是，对于字处理程序来说，它并不关心真正的图形格式，它把所有的图片格式都作为一个文档类型对待。</p>\n<ul>\n<li><strong><code>CFBundleDocumentTypes</code></strong>字典数组示例:<figure class=\"highlight html\"><figcaption><span>自定义文件格式的文档类型</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleTypeName<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>My File Format<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>CFBundleTypeIconFiles<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>MySmallIcon.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>MyLargeIcon.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>LSItemContentTypes<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>com.example.myformat<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>LSHandlerRank<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Owner<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"打开支持的文件类型\"><a href=\"#打开支持的文件类型\" class=\"headerlink\" title=\"打开支持的文件类型\"></a>打开支持的文件类型</h4><p>系统可能会请求某个程序打开某种文件，并呈现给用户。这种情况通常发生在某个应用程序调用 <strong><code>document interaction controller</code></strong> 去处理某个文件的时候。<br>这时应用程序可以通过委托方法:<br><figure class=\"highlight objc\"><figcaption><span>获得文件的信息 Declared In UIApplication.h</span><a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:didFinishLaunchingWithOptions:\" target=\"_blank\" rel=\"noopener\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Tells the delegate that the launch process is almost done and the app is almost ready to run.</span></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<font size=\"1\">注:如果你的程序要处理某些自定义的文件类型，就必须实现这个委托方法（而不是<strong><code>applicationDidFinishLaunching:</code></strong>方法) 并用这个方法启动应用程序</font>  \n\n</blockquote>\n<p>该方法的<strong><code>option</code></strong>包含了要打开的文件的相关信息，可以通过以下键名一一解析：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIApplicationLaunchOptionsURLKey</span> \t\t\t\t\t <span class=\"comment\">//该文件的NSURL</span></span><br><span class=\"line\"><span class=\"built_in\">UIApplicationLaunchOptionsSourceApplicationKey</span> \t<span class=\"comment\">//发送请求的应用程序的Bundle ID</span></span><br><span class=\"line\"><span class=\"built_in\">UIApplicationLaunchOptionsSourceApplicationKey</span>\t\t<span class=\"comment\">//源程序向目标程序传递的与该文件相关的属性列表对象</span></span><br></pre></td></tr></table></figure><br>如果 <strong><code>UIApplicationLaunchOptionsURLKey</code></strong> 键存在，你的程序应当立即用该<strong><code>URL</code></strong>打开该文件并将内容呈现给用户。其他键可用于收集与打开的文件相关的参数和信息。</p>\n<h4 id=\"使用-Quick-Look-框架\"><a href=\"#使用-Quick-Look-框架\" class=\"headerlink\" title=\"使用 Quick Look 框架\"></a>使用 Quick Look 框架</h4><p><strong><code>Quick Look</code></strong>框架提供了增强的预览功能，可以选择呈现预览窗口时的动画风格，并可以像预览单个文件一样预览多个文件。<br>该框架主要提供了 <strong><code>QLPreviewController</code></strong> 类。该类依赖于委托对象响应预览动作，以及一个用于提供预览文件的数据源，内置了所支持的文件类型的 <strong>AirPrint</strong> 打印。  </p>\n<ul>\n<li><h6 id=\"Quick-Look-Previews-中的预览及打印\"><a href=\"#Quick-Look-Previews-中的预览及打印\" class=\"headerlink\" title=\"Quick Look Previews 中的预览及打印\"></a>Quick Look Previews 中的预览及打印</h6>从 iOS 4.2 开始，<strong><code>QLPreviewController</code></strong> 提供了包含了一个 <code>action</code> 按钮（即打印按钮）的预览视图。对于 <strong><code>QLPreviewController</code></strong> 能预览的文件，不用编写任何打印代码，只需点击<code>action</code>按钮就能直接打印该文档。  </li>\n</ul>\n<p>通过以下方式显示<strong><code>QLPreviewController</code></strong>:</p>\n<ul>\n<li><ul>\n<li>通过导航控制器，将预览窗口以“<strong><code>push</code> 方式</strong>”显示。</li>\n</ul>\n</li>\n<li><ul>\n<li>通过 <strong>UIViewController</strong> 的 <strong><code>presentModalViewController:animated:</code></strong>方法，将预览窗口以模态窗口的方式全屏显示。</li>\n</ul>\n</li>\n<li><ul>\n<li>显示一个<strong><code>document interaction controller</code></strong>(如 “预览及打开文件” 中所述），再在选项菜单中选择“<strong><code>Quick Look</code></strong>”即可。  </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<font size=\"1\">预览窗口中会包括一个标题，显示文件 URL 的最后一段路径。如果要重载标题，可以定制<strong><code>PreviewItem</code></strong> 类，并实现<strong><code>QLPreviewItem</code></strong> 协议中的 <strong>previewItemTitle</strong>方法。</font>\n\n</blockquote>\n<ul>\n<li><h6 id=\"QLPreviewController能够预览下列文件：\"><a href=\"#QLPreviewController能够预览下列文件：\" class=\"headerlink\" title=\"QLPreviewController能够预览下列文件：\"></a><strong><code>QLPreviewController</code></strong>能够预览下列文件：</h6></li>\n<li><ul>\n<li>iWork 文档</li>\n</ul>\n</li>\n<li><ul>\n<li>Microsoft Office 文档(Office ‘97 以后版本)</li>\n</ul>\n</li>\n<li><ul>\n<li>Rich Text Format (RTF) 文档</li>\n</ul>\n</li>\n<li><ul>\n<li>PDF 文档</li>\n</ul>\n</li>\n<li><ul>\n<li>图片</li>\n</ul>\n</li>\n<li><ul>\n<li>文本文件，其 uniform type identifier (UTI)  在 public.text 文件中定义 (查看UniformType Identifiers 参考)</li>\n</ul>\n</li>\n<li><ul>\n<li>Comma-separated value (csv) 文件  </li>\n</ul>\n</li>\n</ul>\n<p>使用<strong><code>QLPreviewController</code></strong>，必须指定数据源对象（即实现 <strong><code>QLPreviewControllerDataSource</code></strong> 协议，请查看<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Reference/QLPreviewControllerDataSource_Protocol/Reference/Reference.html#//apple_ref/doc/uid/TP40009665\" target=\"_blank\" rel=\"noopener\">QLPreviewControllerDataSource</a>协议参考）。数据源为 <strong><code>QLPreviewController</code></strong>提供预览对象（<strong><code>preivew item</code></strong>），及指明它们的数量以便在一个预览导航列表中包含它们。在这个列表中包含多个对象，在模态预览窗口（全屏显示）显示了导航箭头，以便用户在多个预览对象间切换。对于用导航控制器“push方式”显示的<strong><code>QLPreviewController</code></strong>，你可以在导航条上提供按钮以便在预览对象列表见切换。</p>\n","categories":[{"name":"iOS","path":"api/categories/iOS.json"},{"name":"API","path":"api/categories/API.json"}],"tags":[{"name":"指南","path":"api/tags/指南.json"}]}